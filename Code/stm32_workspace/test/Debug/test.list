
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000058  08006c60  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006c60  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea7f  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9c  00000000  00000000  0002eb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00030aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00031600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002290a  00000000  00000000  000320a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f58a  00000000  00000000  000549b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfff7  00000000  00000000  00063f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133f33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e9c  00000000  00000000  00133f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000058 	.word	0x20000058
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006650 	.word	0x08006650

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	08006650 	.word	0x08006650

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_UART_TxCpltCallback>:
uint8_t image[IMAGE_SIZE] = {0};
bool is_dma_usart_finish = 1;
bool toggle_dummy = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a06      	ldr	r2, [pc, #24]	; (800052c <HAL_UART_TxCpltCallback+0x24>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d102      	bne.n	800051e <HAL_UART_TxCpltCallback+0x16>
	{
		is_dma_usart_finish = 1;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_UART_TxCpltCallback+0x28>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
	}
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000178 	.word	0x20000178
 8000530:	20000000 	.word	0x20000000

08000534 <OV5640_WriteReg>:

int32_t OV5640_WriteReg(uint16_t device_address, uint16_t reg, uint8_t *data, uint16_t length)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af04      	add	r7, sp, #16
 800053a:	60ba      	str	r2, [r7, #8]
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	81fb      	strh	r3, [r7, #14]
 8000542:	460b      	mov	r3, r1
 8000544:	81bb      	strh	r3, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(&hi2c2, device_address, reg, 2, data, length, 1000) == HAL_OK)
 800054a:	89ba      	ldrh	r2, [r7, #12]
 800054c:	89f9      	ldrh	r1, [r7, #14]
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	9302      	str	r3, [sp, #8]
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2302      	movs	r3, #2
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <OV5640_WriteReg+0x48>)
 8000560:	f003 fb86 	bl	8003c70 <HAL_I2C_Mem_Write>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <OV5640_WriteReg+0x3a>
	{
		return OV5640_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e001      	b.n	8000572 <OV5640_WriteReg+0x3e>
	}
	return OV5640_ERROR;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000124 	.word	0x20000124

08000580 <OV5640_ReadReg>:
int32_t OV5640_ReadReg(uint16_t device_address, uint16_t reg, uint8_t *data, uint16_t length)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af04      	add	r7, sp, #16
 8000586:	60ba      	str	r2, [r7, #8]
 8000588:	461a      	mov	r2, r3
 800058a:	4603      	mov	r3, r0
 800058c:	81fb      	strh	r3, [r7, #14]
 800058e:	460b      	mov	r3, r1
 8000590:	81bb      	strh	r3, [r7, #12]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Read(&hi2c2, device_address+1, reg, 2, data, length, 1000) == HAL_OK)
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	3301      	adds	r3, #1
 800059a:	b299      	uxth	r1, r3
 800059c:	89ba      	ldrh	r2, [r7, #12]
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <OV5640_ReadReg+0x4c>)
 80005b0:	f003 fc58 	bl	8003e64 <HAL_I2C_Mem_Read>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <OV5640_ReadReg+0x3e>
	{
		return OV5640_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e001      	b.n	80005c2 <OV5640_ReadReg+0x42>
	}
	return OV5640_ERROR;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000124 	.word	0x20000124

080005d0 <OV5640_Powerup>:
void OV5640_Powerup()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2102      	movs	r1, #2
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <OV5640_Powerup+0x34>)
 80005da:	f003 f9eb 	bl	80039b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2104      	movs	r1, #4
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <OV5640_Powerup+0x34>)
 80005e4:	f003 f9e6 	bl	80039b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f002 fa9d 	bl	8002b28 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2104      	movs	r1, #4
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <OV5640_Powerup+0x34>)
 80005f4:	f003 f9de 	bl	80039b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fc:	f002 fa94 	bl	8002b28 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020800 	.word	0x40020800

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f002 fa19 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f89b 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f9cb 	bl	80009b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 f993 	bl	8000944 <MX_DMA_Init>
  MX_I2C2_Init();
 800061e:	f000 f939 	bl	8000894 <MX_I2C2_Init>
  MX_DCMI_Init();
 8000622:	f000 f901 	bl	8000828 <MX_DCMI_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f963 	bl	80008f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cam_i2c.Address = 0x78;
 800062a:	4b3e      	ldr	r3, [pc, #248]	; (8000724 <main+0x11c>)
 800062c:	2278      	movs	r2, #120	; 0x78
 800062e:	811a      	strh	r2, [r3, #8]
  cam_i2c.WriteReg = OV5640_WriteReg;
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <main+0x11c>)
 8000632:	4a3d      	ldr	r2, [pc, #244]	; (8000728 <main+0x120>)
 8000634:	60da      	str	r2, [r3, #12]
  cam_i2c.ReadReg = OV5640_ReadReg;
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <main+0x11c>)
 8000638:	4a3c      	ldr	r2, [pc, #240]	; (800072c <main+0x124>)
 800063a:	611a      	str	r2, [r3, #16]
  OV5640_RegisterBusIO(&p_cam, &cam_i2c);
 800063c:	4939      	ldr	r1, [pc, #228]	; (8000724 <main+0x11c>)
 800063e:	483c      	ldr	r0, [pc, #240]	; (8000730 <main+0x128>)
 8000640:	f000 fa3e 	bl	8000ac0 <OV5640_RegisterBusIO>

  int32_t status = OV5640_ERROR;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	61fb      	str	r3, [r7, #28]
  uint32_t resolution;
  uint8_t RGBGain[6];
  memset(RGBGain, 0, sizeof(RGBGain));
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2206      	movs	r2, #6
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fff4 	bl	8006640 <memset>

  OV5640_Powerup();
 8000658:	f7ff ffba 	bl	80005d0 <OV5640_Powerup>
  status = OV5640_CAMERA_Driver.Init(&p_cam, OV5640_R160x120, OV5640_RGB565);
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <main+0x12c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	4832      	ldr	r0, [pc, #200]	; (8000730 <main+0x128>)
 8000666:	4798      	blx	r3
 8000668:	61f8      	str	r0, [r7, #28]
  // verify with resolution ()
  status = OV5640_CAMERA_Driver.GetResolution(&p_cam, &resolution);
 800066a:	4b32      	ldr	r3, [pc, #200]	; (8000734 <main+0x12c>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	f107 0218 	add.w	r2, r7, #24
 8000672:	4611      	mov	r1, r2
 8000674:	482e      	ldr	r0, [pc, #184]	; (8000730 <main+0x128>)
 8000676:	4798      	blx	r3
 8000678:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetColorEffect(&p_cam, OV5640_COLOR_EFFECT_NONE);
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <main+0x12c>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	2100      	movs	r1, #0
 8000680:	482b      	ldr	r0, [pc, #172]	; (8000730 <main+0x128>)
 8000682:	4798      	blx	r3
 8000684:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetBrightness(&p_cam, 2);
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0x12c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	2102      	movs	r1, #2
 800068c:	4828      	ldr	r0, [pc, #160]	; (8000730 <main+0x128>)
 800068e:	4798      	blx	r3
 8000690:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetSaturation(&p_cam, 0);
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <main+0x12c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	2100      	movs	r1, #0
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <main+0x128>)
 800069a:	4798      	blx	r3
 800069c:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetContrast(&p_cam, 0);
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x12c>)
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	2100      	movs	r1, #0
 80006a4:	4822      	ldr	r0, [pc, #136]	; (8000730 <main+0x128>)
 80006a6:	4798      	blx	r3
 80006a8:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetHueDegree(&p_cam, 0);
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <main+0x12c>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	2100      	movs	r1, #0
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <main+0x128>)
 80006b2:	4798      	blx	r3
 80006b4:	61f8      	str	r0, [r7, #28]
  status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_MANUAL_DEFAULT);
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <main+0x12c>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	2110      	movs	r1, #16
 80006bc:	481c      	ldr	r0, [pc, #112]	; (8000730 <main+0x128>)
 80006be:	4798      	blx	r3
 80006c0:	61f8      	str	r0, [r7, #28]
//  status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_AUTO);
  HAL_Delay(500);
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f002 fa2f 	bl	8002b28 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t dummy[] = {1,2,3,4,5,6,7,8,9};
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <main+0x130>)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d0:	c303      	stmia	r3!, {r0, r1}
 80006d2:	701a      	strb	r2, [r3, #0]
	  uint8_t dummy2[] = {'a','b','c'};
 80006d4:	4a19      	ldr	r2, [pc, #100]	; (800073c <main+0x134>)
 80006d6:	463b      	mov	r3, r7
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	4611      	mov	r1, r2
 80006dc:	8019      	strh	r1, [r3, #0]
 80006de:	3302      	adds	r3, #2
 80006e0:	0c12      	lsrs	r2, r2, #16
 80006e2:	701a      	strb	r2, [r3, #0]


	  if (is_dma_usart_finish)
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <main+0x138>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0ee      	beq.n	80006ca <main+0xc2>
	  {
		  if (toggle_dummy)
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <main+0x13c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d009      	beq.n	8000708 <main+0x100>
		  {
			  HAL_UART_Transmit_DMA(&huart2, dummy, sizeof(dummy));
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2209      	movs	r2, #9
 80006f8:	4619      	mov	r1, r3
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <main+0x140>)
 80006fc:	f004 ff6a 	bl	80055d4 <HAL_UART_Transmit_DMA>
			  toggle_dummy = 0;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <main+0x13c>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e008      	b.n	800071a <main+0x112>
		  }
		  else
		  {
			  HAL_UART_Transmit_DMA(&huart2, dummy2, sizeof(dummy2));
 8000708:	463b      	mov	r3, r7
 800070a:	2203      	movs	r2, #3
 800070c:	4619      	mov	r1, r3
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <main+0x140>)
 8000710:	f004 ff60 	bl	80055d4 <HAL_UART_Transmit_DMA>
			  toggle_dummy = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <main+0x13c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
		  }
		  is_dma_usart_finish = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <main+0x138>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
  {
 8000720:	e7d3      	b.n	80006ca <main+0xc2>
 8000722:	bf00      	nop
 8000724:	20000244 	.word	0x20000244
 8000728:	08000535 	.word	0x08000535
 800072c:	08000581 	.word	0x08000581
 8000730:	2000021c 	.word	0x2000021c
 8000734:	20000004 	.word	0x20000004
 8000738:	08006668 	.word	0x08006668
 800073c:	08006674 	.word	0x08006674
 8000740:	20000000 	.word	0x20000000
 8000744:	2000025c 	.word	0x2000025c
 8000748:	20000178 	.word	0x20000178

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	; 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f005 ff70 	bl	8006640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a29      	ldr	r2, [pc, #164]	; (8000820 <SystemClock_Config+0xd4>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <SystemClock_Config+0xd4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <SystemClock_Config+0xd8>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemClock_Config+0xd8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c0:	2310      	movs	r3, #16
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fc0e 	bl	8004ffc <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f965 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f8ae 	bl	8004968 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000812:	f000 f94f 	bl	8000ab4 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_DCMI_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_DCMI_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_DCMI_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_DCMI_Init+0x64>)
 800083a:	2220      	movs	r2, #32
 800083c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_DCMI_Init+0x64>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_DCMI_Init+0x64>)
 8000846:	2240      	movs	r2, #64	; 0x40
 8000848:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_DCMI_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_DCMI_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_DCMI_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_DCMI_Init+0x64>)
 800085e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DCMI_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_DCMI_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_DCMI_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_DCMI_Init+0x64>)
 8000878:	f002 fa8c 	bl	8002d94 <HAL_DCMI_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 8000882:	f000 f917 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000074 	.word	0x20000074
 8000890:	50050000 	.word	0x50050000

08000894 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C2_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C2_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C2_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008d2:	f003 f889 	bl	80039e8 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f8ea 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000124 	.word	0x20000124
 80008e8:	40005800 	.word	0x40005800
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f004 fe06 	bl	8005538 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8bf 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000178 	.word	0x20000178
 8000940:	40004400 	.word	0x40004400

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_DMA_Init+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <MX_DMA_Init+0x68>)
 8000954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_DMA_Init+0x68>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_DMA_Init+0x68>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <MX_DMA_Init+0x68>)
 8000970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_DMA_Init+0x68>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2011      	movs	r0, #17
 8000988:	f002 f9cd 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800098c:	2011      	movs	r0, #17
 800098e:	f002 f9e6 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2039      	movs	r0, #57	; 0x39
 8000998:	f002 f9c5 	bl	8002d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800099c:	2039      	movs	r0, #57	; 0x39
 800099e:	f002 f9de 	bl	8002d5e <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAMERA_PWDN_Pin|CAMERA_RST_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2106      	movs	r1, #6
 8000a3a:	481c      	ldr	r0, [pc, #112]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a3c:	f002 ffba 	bl	80039b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2120      	movs	r1, #32
 8000a44:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a46:	f002 ffb5 	bl	80039b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a62:	f002 fe13 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_PWDN_Pin CAMERA_RST_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin|CAMERA_RST_Pin;
 8000a66:	2306      	movs	r3, #6
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a7e:	f002 fe05 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a82:	2320      	movs	r3, #32
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a9a:	f002 fdf7 	bl	800368c <HAL_GPIO_Init>

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e030      	b.n	8000b3a <OV5640_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	891a      	ldrh	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <OV5640_RegisterBusIO+0x84>)
 8000b0c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <OV5640_RegisterBusIO+0x88>)
 8000b12:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	621a      	str	r2, [r3, #32]

	pObj->IsInitialized = 0U;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <OV5640_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4798      	blx	r3
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	e002      	b.n	8000b3a <OV5640_RegisterBusIO+0x7a>
    }
    else
    {
      ret = OV5640_ERROR;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	080024bb 	.word	0x080024bb
 8000b48:	080024ed 	.word	0x080024ed

08000b4c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d165      	bne.n	8000c32 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d80e      	bhi.n	8000b8a <OV5640_Init+0x3e>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00f      	beq.n	8000b92 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d00c      	beq.n	8000b92 <OV5640_Init+0x46>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d009      	beq.n	8000b92 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d006      	beq.n	8000b92 <OV5640_Init+0x46>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d003      	beq.n	8000b92 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	e04f      	b.n	8000c32 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	e01f      	b.n	8000bd8 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d018      	beq.n	8000bd2 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <OV5640_Init+0xf0>)
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f103 0018 	add.w	r0, r3, #24
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <OV5640_Init+0xf0>)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000bbc:	f107 0217 	add.w	r2, r7, #23
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f001 fcc3 	bl	800254c <ov5640_write_reg>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2bfd      	cmp	r3, #253	; 0xfd
 8000bdc:	d9dc      	bls.n	8000b98 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d126      	bne.n	8000c32 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f000 f9e0 	bl	8000fac <OV5640_SetResolution>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	e01b      	b.n	8000c32 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f000 f833 	bl	8000c68 <OV5640_SetPixelFormat>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	e010      	b.n	8000c32 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8000c10:	2300      	movs	r3, #0
 8000c12:	2201      	movs	r2, #1
 8000c14:	2101      	movs	r1, #1
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 fb64 	bl	80012e4 <OV5640_SetPolarities>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	e003      	b.n	8000c32 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8000c32:	69bb      	ldr	r3, [r7, #24]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	080066c0 	.word	0x080066c0

08000c40 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d103      	bne.n	8000c5a <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00f      	beq.n	8000c9c <OV5640_SetPixelFormat+0x34>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d00c      	beq.n	8000c9c <OV5640_SetPixelFormat+0x34>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d009      	beq.n	8000c9c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d006      	beq.n	8000c9c <OV5640_SetPixelFormat+0x34>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d003      	beq.n	8000c9c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e16a      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	f200 80c3 	bhi.w	8000e2c <OV5640_SetPixelFormat+0x1c4>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <OV5640_SetPixelFormat+0x44>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000d25 	.word	0x08000d25
 8000cb0:	08000ccd 	.word	0x08000ccd
 8000cb4:	08000e2d 	.word	0x08000e2d
 8000cb8:	08000e2d 	.word	0x08000e2d
 8000cbc:	08000e2d 	.word	0x08000e2d
 8000cc0:	08000e2d 	.word	0x08000e2d
 8000cc4:	08000d7d 	.word	0x08000d7d
 8000cc8:	08000dd5 	.word	0x08000dd5
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e024      	b.n	8000d1c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d01d      	beq.n	8000d16 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8000cda:	4aa8      	ldr	r2, [pc, #672]	; (8000f7c <OV5640_SetPixelFormat+0x314>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	885b      	ldrh	r3, [r3, #2]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0018 	add.w	r0, r3, #24
 8000cee:	4aa3      	ldr	r2, [pc, #652]	; (8000f7c <OV5640_SetPixelFormat+0x314>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000cf6:	f107 020f 	add.w	r2, r7, #15
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f001 fc26 	bl	800254c <ov5640_write_reg>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e003      	b.n	8000d16 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f001 fbc5 	bl	80024a0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d9d7      	bls.n	8000cd2 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8000d22:	e0af      	b.n	8000e84 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e024      	b.n	8000d74 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d01d      	beq.n	8000d6e <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8000d32:	4a93      	ldr	r2, [pc, #588]	; (8000f80 <OV5640_SetPixelFormat+0x318>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	885b      	ldrh	r3, [r3, #2]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f103 0018 	add.w	r0, r3, #24
 8000d46:	4a8e      	ldr	r2, [pc, #568]	; (8000f80 <OV5640_SetPixelFormat+0x318>)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000d4e:	f107 020f 	add.w	r2, r7, #15
 8000d52:	2301      	movs	r3, #1
 8000d54:	f001 fbfa 	bl	800254c <ov5640_write_reg>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e003      	b.n	8000d6e <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000d66:	2101      	movs	r1, #1
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f001 fb99 	bl	80024a0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	3301      	adds	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d9d7      	bls.n	8000d2a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8000d7a:	e083      	b.n	8000e84 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e024      	b.n	8000dcc <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d01d      	beq.n	8000dc6 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8000d8a:	4a7e      	ldr	r2, [pc, #504]	; (8000f84 <OV5640_SetPixelFormat+0x31c>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f103 0018 	add.w	r0, r3, #24
 8000d9e:	4a79      	ldr	r2, [pc, #484]	; (8000f84 <OV5640_SetPixelFormat+0x31c>)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000da6:	f107 020f 	add.w	r2, r7, #15
 8000daa:	2301      	movs	r3, #1
 8000dac:	f001 fbce 	bl	800254c <ov5640_write_reg>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e003      	b.n	8000dc6 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f001 fb6d 	bl	80024a0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d9d7      	bls.n	8000d82 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8000dd2:	e057      	b.n	8000e84 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	e024      	b.n	8000e24 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d01d      	beq.n	8000e1e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8000de2:	4a69      	ldr	r2, [pc, #420]	; (8000f88 <OV5640_SetPixelFormat+0x320>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	885b      	ldrh	r3, [r3, #2]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f103 0018 	add.w	r0, r3, #24
 8000df6:	4a64      	ldr	r2, [pc, #400]	; (8000f88 <OV5640_SetPixelFormat+0x320>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000dfe:	f107 020f 	add.w	r2, r7, #15
 8000e02:	2301      	movs	r3, #1
 8000e04:	f001 fba2 	bl	800254c <ov5640_write_reg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e003      	b.n	8000e1e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000e16:	2101      	movs	r1, #1
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f001 fb41 	bl	80024a0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3301      	adds	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d9d7      	bls.n	8000dda <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8000e2a:	e02b      	b.n	8000e84 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e024      	b.n	8000e7c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d01d      	beq.n	8000e76 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <OV5640_SetPixelFormat+0x324>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	885b      	ldrh	r3, [r3, #2]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f103 0018 	add.w	r0, r3, #24
 8000e4e:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <OV5640_SetPixelFormat+0x324>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000e56:	f107 020f 	add.w	r2, r7, #15
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f001 fb76 	bl	800254c <ov5640_write_reg>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e003      	b.n	8000e76 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f001 fb15 	bl	80024a0 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d9d7      	bls.n	8000e32 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8000e82:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d173      	bne.n	8000f72 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f103 0018 	add.w	r0, r3, #24
 8000e90:	f107 020f 	add.w	r2, r7, #15
 8000e94:	2301      	movs	r3, #1
 8000e96:	f643 0121 	movw	r1, #14369	; 0x3821
 8000e9a:	f001 fb40 	bl	800251e <ov5640_read_reg>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e062      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f103 0018 	add.w	r0, r3, #24
 8000ebc:	f107 020f 	add.w	r2, r7, #15
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f643 0121 	movw	r1, #14369	; 0x3821
 8000ec6:	f001 fb41 	bl	800254c <ov5640_write_reg>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e04c      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f103 0018 	add.w	r0, r3, #24
 8000ede:	f107 020f 	add.w	r2, r7, #15
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f243 0102 	movw	r1, #12290	; 0x3002
 8000ee8:	f001 fb19 	bl	800251e <ov5640_read_reg>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e03b      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f023 031c 	bic.w	r3, r3, #28
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f103 0018 	add.w	r0, r3, #24
 8000f0a:	f107 020f 	add.w	r2, r7, #15
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f243 0102 	movw	r1, #12290	; 0x3002
 8000f14:	f001 fb1a 	bl	800254c <ov5640_write_reg>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e025      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f103 0018 	add.w	r0, r3, #24
 8000f2c:	f107 020f 	add.w	r2, r7, #15
 8000f30:	2301      	movs	r3, #1
 8000f32:	f243 0106 	movw	r1, #12294	; 0x3006
 8000f36:	f001 faf2 	bl	800251e <ov5640_read_reg>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e014      	b.n	8000f72 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f103 0018 	add.w	r0, r3, #24
 8000f58:	f107 020f 	add.w	r2, r7, #15
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f243 0106 	movw	r1, #12294	; 0x3006
 8000f62:	f001 faf3 	bl	800254c <ov5640_write_reg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8000f72:	697b      	ldr	r3, [r7, #20]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	08006ab8 	.word	0x08006ab8
 8000f80:	08006ac0 	.word	0x08006ac0
 8000f84:	08006ac8 	.word	0x08006ac8
 8000f88:	08006ad0 	.word	0x08006ad0
 8000f8c:	08006ad8 	.word	0x08006ad8

08000f90 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d903      	bls.n	8000fc8 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e0d8      	b.n	800117a <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	f200 80d1 	bhi.w	8001172 <OV5640_SetResolution+0x1c6>
 8000fd0:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <OV5640_SetResolution+0x2c>)
 8000fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd6:	bf00      	nop
 8000fd8:	08000fed 	.word	0x08000fed
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	08001089 	.word	0x08001089
 8000fe4:	080010d7 	.word	0x080010d7
 8000fe8:	08001125 	.word	0x08001125
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e01f      	b.n	8001032 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d018      	beq.n	800102c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8000ffa:	4a62      	ldr	r2, [pc, #392]	; (8001184 <OV5640_SetResolution+0x1d8>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	885b      	ldrh	r3, [r3, #2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f103 0018 	add.w	r0, r3, #24
 800100e:	4a5d      	ldr	r2, [pc, #372]	; (8001184 <OV5640_SetResolution+0x1d8>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001016:	f107 020f 	add.w	r2, r7, #15
 800101a:	2301      	movs	r3, #1
 800101c:	f001 fa96 	bl	800254c <ov5640_write_reg>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d9dc      	bls.n	8000ff2 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001038:	e09f      	b.n	800117a <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e01f      	b.n	8001080 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001046:	d018      	beq.n	800107a <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001048:	4a4f      	ldr	r2, [pc, #316]	; (8001188 <OV5640_SetResolution+0x1dc>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	885b      	ldrh	r3, [r3, #2]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f103 0018 	add.w	r0, r3, #24
 800105c:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <OV5640_SetResolution+0x1dc>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	2301      	movs	r3, #1
 800106a:	f001 fa6f 	bl	800254c <ov5640_write_reg>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3301      	adds	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d9dc      	bls.n	8001040 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001086:	e078      	b.n	800117a <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e01f      	b.n	80010ce <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d018      	beq.n	80010c8 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001096:	4a3d      	ldr	r2, [pc, #244]	; (800118c <OV5640_SetResolution+0x1e0>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	885b      	ldrh	r3, [r3, #2]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f103 0018 	add.w	r0, r3, #24
 80010aa:	4a38      	ldr	r2, [pc, #224]	; (800118c <OV5640_SetResolution+0x1e0>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010b2:	f107 020f 	add.w	r2, r7, #15
 80010b6:	2301      	movs	r3, #1
 80010b8:	f001 fa48 	bl	800254c <ov5640_write_reg>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d9dc      	bls.n	800108e <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80010d4:	e051      	b.n	800117a <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e01f      	b.n	800111c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e2:	d018      	beq.n	8001116 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <OV5640_SetResolution+0x1e4>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	885b      	ldrh	r3, [r3, #2]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0018 	add.w	r0, r3, #24
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <OV5640_SetResolution+0x1e4>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001100:	f107 020f 	add.w	r2, r7, #15
 8001104:	2301      	movs	r3, #1
 8001106:	f001 fa21 	bl	800254c <ov5640_write_reg>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d9dc      	bls.n	80010dc <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001122:	e02a      	b.n	800117a <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	e01f      	b.n	800116a <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d018      	beq.n	8001164 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <OV5640_SetResolution+0x1e8>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	885b      	ldrh	r3, [r3, #2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f103 0018 	add.w	r0, r3, #24
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <OV5640_SetResolution+0x1e8>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800114e:	f107 020f 	add.w	r2, r7, #15
 8001152:	2301      	movs	r3, #1
 8001154:	f001 f9fa 	bl	800254c <ov5640_write_reg>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d9dc      	bls.n	800112a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001170:	e003      	b.n	800117a <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	617b      	str	r3, [r7, #20]
        break;
 8001178:	bf00      	nop
    }
  }

  return ret;
 800117a:	697b      	ldr	r3, [r7, #20]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08006ae0 	.word	0x08006ae0
 8001188:	08006af0 	.word	0x08006af0
 800118c:	08006b00 	.word	0x08006b00
 8001190:	08006b10 	.word	0x08006b10
 8001194:	08006b20 	.word	0x08006b20

08001198 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f103 0018 	add.w	r0, r3, #24
 80011a8:	f107 020f 	add.w	r2, r7, #15
 80011ac:	2301      	movs	r3, #1
 80011ae:	f643 0108 	movw	r1, #14344	; 0x3808
 80011b2:	f001 f9b4 	bl	800251e <ov5640_read_reg>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e08a      	b.n	80012da <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 0018 	add.w	r0, r3, #24
 80011d2:	f107 020f 	add.w	r2, r7, #15
 80011d6:	2301      	movs	r3, #1
 80011d8:	f643 0109 	movw	r1, #14345	; 0x3809
 80011dc:	f001 f99f 	bl	800251e <ov5640_read_reg>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e075      	b.n	80012da <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 0018 	add.w	r0, r3, #24
 80011fe:	f107 020f 	add.w	r2, r7, #15
 8001202:	2301      	movs	r3, #1
 8001204:	f643 010a 	movw	r1, #14346	; 0x380a
 8001208:	f001 f989 	bl	800251e <ov5640_read_reg>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e05f      	b.n	80012da <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	b29b      	uxth	r3, r3
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f103 0018 	add.w	r0, r3, #24
 8001228:	f107 020f 	add.w	r2, r7, #15
 800122c:	2301      	movs	r3, #1
 800122e:	f643 010b 	movw	r1, #14347	; 0x380b
 8001232:	f001 f974 	bl	800251e <ov5640_read_reg>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e04a      	b.n	80012da <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	b29a      	uxth	r2, r3
 8001248:	8a3b      	ldrh	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001254:	d109      	bne.n	800126a <OV5640_GetResolution+0xd2>
 8001256:	8a3b      	ldrh	r3, [r7, #16]
 8001258:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800125c:	d105      	bne.n	800126a <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e037      	b.n	80012da <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001270:	d109      	bne.n	8001286 <OV5640_GetResolution+0xee>
 8001272:	8a3b      	ldrh	r3, [r7, #16]
 8001274:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001278:	d105      	bne.n	8001286 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2203      	movs	r2, #3
 800127e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e029      	b.n	80012da <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001286:	8a7b      	ldrh	r3, [r7, #18]
 8001288:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800128c:	d109      	bne.n	80012a2 <OV5640_GetResolution+0x10a>
 800128e:	8a3b      	ldrh	r3, [r7, #16]
 8001290:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001294:	d105      	bne.n	80012a2 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e01b      	b.n	80012da <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 80012a2:	8a7b      	ldrh	r3, [r7, #18]
 80012a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012a8:	d108      	bne.n	80012bc <OV5640_GetResolution+0x124>
 80012aa:	8a3b      	ldrh	r3, [r7, #16]
 80012ac:	2bf0      	cmp	r3, #240	; 0xf0
 80012ae:	d105      	bne.n	80012bc <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e00e      	b.n	80012da <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80012bc:	8a7b      	ldrh	r3, [r7, #18]
 80012be:	2ba0      	cmp	r3, #160	; 0xa0
 80012c0:	d108      	bne.n	80012d4 <OV5640_GetResolution+0x13c>
 80012c2:	8a3b      	ldrh	r3, [r7, #16]
 80012c4:	2b78      	cmp	r3, #120	; 0x78
 80012c6:	d105      	bne.n	80012d4 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e002      	b.n	80012da <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80012da:	697b      	ldr	r3, [r7, #20]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d011      	beq.n	8001320 <OV5640_SetPolarities+0x3c>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <OV5640_SetPolarities+0x24>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10b      	bne.n	8001320 <OV5640_SetPolarities+0x3c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <OV5640_SetPolarities+0x3c>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d006      	beq.n	8001328 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e01e      	b.n	8001366 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	015b      	lsls	r3, r3, #5
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b2da      	uxtb	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0018 	add.w	r0, r3, #24
 800134c:	f107 0213 	add.w	r2, r7, #19
 8001350:	2301      	movs	r3, #1
 8001352:	f244 7140 	movw	r1, #18240	; 0x4740
 8001356:	f001 f8f9 	bl	800254c <ov5640_write_reg>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001366:	697b      	ldr	r3, [r7, #20]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f103 0018 	add.w	r0, r3, #24
 800138a:	f107 020b 	add.w	r2, r7, #11
 800138e:	2301      	movs	r3, #1
 8001390:	f243 0108 	movw	r1, #12296	; 0x3008
 8001394:	f001 f8da 	bl	800254c <ov5640_write_reg>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e032      	b.n	800140c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 80013a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f001 f878 	bl	80024a0 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f103 0018 	add.w	r0, r3, #24
 80013b6:	f107 020b 	add.w	r2, r7, #11
 80013ba:	2301      	movs	r3, #1
 80013bc:	f243 010a 	movw	r1, #12298	; 0x300a
 80013c0:	f001 f8ad 	bl	800251e <ov5640_read_reg>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e01c      	b.n	800140c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	021a      	lsls	r2, r3, #8
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f103 0018 	add.w	r0, r3, #24
 80013e0:	f107 020b 	add.w	r2, r7, #11
 80013e4:	2301      	movs	r3, #1
 80013e6:	f243 010b 	movw	r1, #12299	; 0x300b
 80013ea:	f001 f898 	bl	800251e <ov5640_read_reg>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e007      	b.n	800140c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	7afa      	ldrb	r2, [r7, #11]
 8001402:	431a      	orrs	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800140c:	68fb      	ldr	r3, [r7, #12]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e01f      	b.n	800146e <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x06},
    {OV5640_AWB_B_GAIN_LSB, 0x93},
  };

  tmp = 0x00;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f103 0018 	add.w	r0, r3, #24
 8001490:	f107 020f 	add.w	r2, r7, #15
 8001494:	2301      	movs	r3, #1
 8001496:	f243 4106 	movw	r1, #13318	; 0x3406
 800149a:	f001 f857 	bl	800254c <ov5640_write_reg>
 800149e:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 80014a6:	2346      	movs	r3, #70	; 0x46
 80014a8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0018 	add.w	r0, r3, #24
 80014b0:	f107 020f 	add.w	r2, r7, #15
 80014b4:	2301      	movs	r3, #1
 80014b6:	f245 1190 	movw	r1, #20880	; 0x5190
 80014ba:	f001 f847 	bl	800254c <ov5640_write_reg>
 80014be:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10c      	bne.n	80014e0 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f103 0018 	add.w	r0, r3, #24
 80014d0:	f107 020f 	add.w	r2, r7, #15
 80014d4:	2301      	movs	r3, #1
 80014d6:	f245 1191 	movw	r1, #20881	; 0x5191
 80014da:	f001 f837 	bl	800254c <ov5640_write_reg>
 80014de:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80014e6:	2304      	movs	r3, #4
 80014e8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0018 	add.w	r0, r3, #24
 80014f0:	f107 020f 	add.w	r2, r7, #15
 80014f4:	2301      	movs	r3, #1
 80014f6:	f245 1192 	movw	r1, #20882	; 0x5192
 80014fa:	f001 f827 	bl	800254c <ov5640_write_reg>
 80014fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 8112 	bne.w	800172c <OV5640_SetLightMode+0x2b0>
  {
    switch (LightMode)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	2b0f      	cmp	r3, #15
 800150e:	f200 80e6 	bhi.w	80016de <OV5640_SetLightMode+0x262>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <OV5640_SetLightMode+0x9c>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001559 	.word	0x08001559
 800151c:	080015a7 	.word	0x080015a7
 8001520:	080016df 	.word	0x080016df
 8001524:	08001643 	.word	0x08001643
 8001528:	080016df 	.word	0x080016df
 800152c:	080016df 	.word	0x080016df
 8001530:	080016df 	.word	0x080016df
 8001534:	080015f5 	.word	0x080015f5
 8001538:	080016df 	.word	0x080016df
 800153c:	080016df 	.word	0x080016df
 8001540:	080016df 	.word	0x080016df
 8001544:	080016df 	.word	0x080016df
 8001548:	080016df 	.word	0x080016df
 800154c:	080016df 	.word	0x080016df
 8001550:	080016df 	.word	0x080016df
 8001554:	08001691 	.word	0x08001691
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e01f      	b.n	800159e <OV5640_SetLightMode+0x122>
        {
          if (ret != OV5640_ERROR)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d018      	beq.n	8001598 <OV5640_SetLightMode+0x11c>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001566:	4a74      	ldr	r2, [pc, #464]	; (8001738 <OV5640_SetLightMode+0x2bc>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	885b      	ldrh	r3, [r3, #2]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f103 0018 	add.w	r0, r3, #24
 800157a:	4a6f      	ldr	r2, [pc, #444]	; (8001738 <OV5640_SetLightMode+0x2bc>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001582:	f107 020f 	add.w	r2, r7, #15
 8001586:	2301      	movs	r3, #1
 8001588:	f000 ffe0 	bl	800254c <ov5640_write_reg>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <OV5640_SetLightMode+0x11c>
            {
              ret = OV5640_ERROR;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3301      	adds	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d9dc      	bls.n	800155e <OV5640_SetLightMode+0xe2>
            }
          }
        }
        break;
 80015a4:	e0c3      	b.n	800172e <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e01f      	b.n	80015ec <OV5640_SetLightMode+0x170>
        {
          if (ret != OV5640_ERROR)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b2:	d018      	beq.n	80015e6 <OV5640_SetLightMode+0x16a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80015b4:	4a61      	ldr	r2, [pc, #388]	; (800173c <OV5640_SetLightMode+0x2c0>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	885b      	ldrh	r3, [r3, #2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f103 0018 	add.w	r0, r3, #24
 80015c8:	4a5c      	ldr	r2, [pc, #368]	; (800173c <OV5640_SetLightMode+0x2c0>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80015d0:	f107 020f 	add.w	r2, r7, #15
 80015d4:	2301      	movs	r3, #1
 80015d6:	f000 ffb9 	bl	800254c <ov5640_write_reg>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <OV5640_SetLightMode+0x16a>
            {
              ret = OV5640_ERROR;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	3301      	adds	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d9dc      	bls.n	80015ac <OV5640_SetLightMode+0x130>
            }
          }
        }
        break;
 80015f2:	e09c      	b.n	800172e <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	e01f      	b.n	800163a <OV5640_SetLightMode+0x1be>
        {
          if (ret != OV5640_ERROR)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d018      	beq.n	8001634 <OV5640_SetLightMode+0x1b8>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001602:	4a4f      	ldr	r2, [pc, #316]	; (8001740 <OV5640_SetLightMode+0x2c4>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	885b      	ldrh	r3, [r3, #2]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f103 0018 	add.w	r0, r3, #24
 8001616:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <OV5640_SetLightMode+0x2c4>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800161e:	f107 020f 	add.w	r2, r7, #15
 8001622:	2301      	movs	r3, #1
 8001624:	f000 ff92 	bl	800254c <ov5640_write_reg>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <OV5640_SetLightMode+0x1b8>
            {
              ret = OV5640_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3301      	adds	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d9dc      	bls.n	80015fa <OV5640_SetLightMode+0x17e>
            }
          }
        }
        break;
 8001640:	e075      	b.n	800172e <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	e01f      	b.n	8001688 <OV5640_SetLightMode+0x20c>
        {
          if (ret != OV5640_ERROR)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164e:	d018      	beq.n	8001682 <OV5640_SetLightMode+0x206>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001650:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <OV5640_SetLightMode+0x2c8>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	885b      	ldrh	r3, [r3, #2]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0018 	add.w	r0, r3, #24
 8001664:	4a37      	ldr	r2, [pc, #220]	; (8001744 <OV5640_SetLightMode+0x2c8>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800166c:	f107 020f 	add.w	r2, r7, #15
 8001670:	2301      	movs	r3, #1
 8001672:	f000 ff6b 	bl	800254c <ov5640_write_reg>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <OV5640_SetLightMode+0x206>
            {
              ret = OV5640_ERROR;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b06      	cmp	r3, #6
 800168c:	d9dc      	bls.n	8001648 <OV5640_SetLightMode+0x1cc>
            }
          }
        }
        break;
 800168e:	e04e      	b.n	800172e <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_MANUAL_DEFAULT:
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	e01f      	b.n	80016d6 <OV5640_SetLightMode+0x25a>
        {
          if (ret != OV5640_ERROR)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d018      	beq.n	80016d0 <OV5640_SetLightMode+0x254>
          {
            tmp = (uint8_t)OV5640_LightModeManualDefault[index][1];
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <OV5640_SetLightMode+0x2cc>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	885b      	ldrh	r3, [r3, #2]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeManualDefault[index][0], &tmp, 1) != OV5640_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f103 0018 	add.w	r0, r3, #24
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <OV5640_SetLightMode+0x2cc>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016ba:	f107 020f 	add.w	r2, r7, #15
 80016be:	2301      	movs	r3, #1
 80016c0:	f000 ff44 	bl	800254c <ov5640_write_reg>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <OV5640_SetLightMode+0x254>
            {
              ret = OV5640_ERROR;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3301      	adds	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d9dc      	bls.n	8001696 <OV5640_SetLightMode+0x21a>
            }
          }
        }
        break;
 80016dc:	e027      	b.n	800172e <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	e01f      	b.n	8001724 <OV5640_SetLightMode+0x2a8>
        {
          if (ret != OV5640_ERROR)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	d018      	beq.n	800171e <OV5640_SetLightMode+0x2a2>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <OV5640_SetLightMode+0x2d0>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	885b      	ldrh	r3, [r3, #2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f103 0018 	add.w	r0, r3, #24
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <OV5640_SetLightMode+0x2d0>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001708:	f107 020f 	add.w	r2, r7, #15
 800170c:	2301      	movs	r3, #1
 800170e:	f000 ff1d 	bl	800254c <ov5640_write_reg>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <OV5640_SetLightMode+0x2a2>
            {
              ret = OV5640_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3301      	adds	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d9dc      	bls.n	80016e4 <OV5640_SetLightMode+0x268>
            }
          }
        }
        break;
 800172a:	e000      	b.n	800172e <OV5640_SetLightMode+0x2b2>
    }
  }
 800172c:	bf00      	nop
  return ret;
 800172e:	697b      	ldr	r3, [r7, #20]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	08006b30 	.word	0x08006b30
 800173c:	08006b4c 	.word	0x08006b4c
 8001740:	08006b68 	.word	0x08006b68
 8001744:	08006b84 	.word	0x08006b84
 8001748:	08006ba0 	.word	0x08006ba0
 800174c:	08006bbc 	.word	0x08006bbc

08001750 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	2b1f      	cmp	r3, #31
 8001760:	f200 81c0 	bhi.w	8001ae4 <OV5640_SetColorEffect+0x394>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <OV5640_SetColorEffect+0x1c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	080017ed 	.word	0x080017ed
 8001770:	08001877 	.word	0x08001877
 8001774:	08001ae5 	.word	0x08001ae5
 8001778:	08001901 	.word	0x08001901
 800177c:	08001ae5 	.word	0x08001ae5
 8001780:	08001ae5 	.word	0x08001ae5
 8001784:	08001ae5 	.word	0x08001ae5
 8001788:	0800198b 	.word	0x0800198b
 800178c:	08001ae5 	.word	0x08001ae5
 8001790:	08001ae5 	.word	0x08001ae5
 8001794:	08001ae5 	.word	0x08001ae5
 8001798:	08001ae5 	.word	0x08001ae5
 800179c:	08001ae5 	.word	0x08001ae5
 80017a0:	08001ae5 	.word	0x08001ae5
 80017a4:	08001ae5 	.word	0x08001ae5
 80017a8:	08001a15 	.word	0x08001a15
 80017ac:	08001ae5 	.word	0x08001ae5
 80017b0:	08001ae5 	.word	0x08001ae5
 80017b4:	08001ae5 	.word	0x08001ae5
 80017b8:	08001ae5 	.word	0x08001ae5
 80017bc:	08001ae5 	.word	0x08001ae5
 80017c0:	08001ae5 	.word	0x08001ae5
 80017c4:	08001ae5 	.word	0x08001ae5
 80017c8:	08001ae5 	.word	0x08001ae5
 80017cc:	08001ae5 	.word	0x08001ae5
 80017d0:	08001ae5 	.word	0x08001ae5
 80017d4:	08001ae5 	.word	0x08001ae5
 80017d8:	08001ae5 	.word	0x08001ae5
 80017dc:	08001ae5 	.word	0x08001ae5
 80017e0:	08001ae5 	.word	0x08001ae5
 80017e4:	08001ae5 	.word	0x08001ae5
 80017e8:	08001a9d 	.word	0x08001a9d
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80017ec:	23ff      	movs	r3, #255	; 0xff
 80017ee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0018 	add.w	r0, r3, #24
 80017f6:	f107 020b 	add.w	r2, r7, #11
 80017fa:	2301      	movs	r3, #1
 80017fc:	f245 0101 	movw	r1, #20481	; 0x5001
 8001800:	f000 fea4 	bl	800254c <ov5640_write_reg>
 8001804:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10c      	bne.n	8001826 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 800180c:	2318      	movs	r3, #24
 800180e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0018 	add.w	r0, r3, #24
 8001816:	f107 020b 	add.w	r2, r7, #11
 800181a:	2301      	movs	r3, #1
 800181c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001820:	f000 fe94 	bl	800254c <ov5640_write_reg>
 8001824:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10c      	bne.n	8001846 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 800182c:	23a0      	movs	r3, #160	; 0xa0
 800182e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f103 0018 	add.w	r0, r3, #24
 8001836:	f107 020b 	add.w	r2, r7, #11
 800183a:	2301      	movs	r3, #1
 800183c:	f245 5183 	movw	r1, #21891	; 0x5583
 8001840:	f000 fe84 	bl	800254c <ov5640_write_reg>
 8001844:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 0018 	add.w	r0, r3, #24
 8001856:	f107 020b 	add.w	r2, r7, #11
 800185a:	2301      	movs	r3, #1
 800185c:	f245 5184 	movw	r1, #21892	; 0x5584
 8001860:	f000 fe74 	bl	800254c <ov5640_write_reg>
 8001864:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 815f 	beq.w	8001b2c <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001874:	e15a      	b.n	8001b2c <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001876:	23ff      	movs	r3, #255	; 0xff
 8001878:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f103 0018 	add.w	r0, r3, #24
 8001880:	f107 020b 	add.w	r2, r7, #11
 8001884:	2301      	movs	r3, #1
 8001886:	f245 0101 	movw	r1, #20481	; 0x5001
 800188a:	f000 fe5f 	bl	800254c <ov5640_write_reg>
 800188e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001896:	2318      	movs	r3, #24
 8001898:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f103 0018 	add.w	r0, r3, #24
 80018a0:	f107 020b 	add.w	r2, r7, #11
 80018a4:	2301      	movs	r3, #1
 80018a6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80018aa:	f000 fe4f 	bl	800254c <ov5640_write_reg>
 80018ae:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 0018 	add.w	r0, r3, #24
 80018c0:	f107 020b 	add.w	r2, r7, #11
 80018c4:	2301      	movs	r3, #1
 80018c6:	f245 5183 	movw	r1, #21891	; 0x5583
 80018ca:	f000 fe3f 	bl	800254c <ov5640_write_reg>
 80018ce:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80018d6:	23c0      	movs	r3, #192	; 0xc0
 80018d8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f103 0018 	add.w	r0, r3, #24
 80018e0:	f107 020b 	add.w	r2, r7, #11
 80018e4:	2301      	movs	r3, #1
 80018e6:	f245 5184 	movw	r1, #21892	; 0x5584
 80018ea:	f000 fe2f 	bl	800254c <ov5640_write_reg>
 80018ee:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 811c 	beq.w	8001b30 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80018fe:	e117      	b.n	8001b30 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f103 0018 	add.w	r0, r3, #24
 800190a:	f107 020b 	add.w	r2, r7, #11
 800190e:	2301      	movs	r3, #1
 8001910:	f245 0101 	movw	r1, #20481	; 0x5001
 8001914:	f000 fe1a 	bl	800254c <ov5640_write_reg>
 8001918:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10c      	bne.n	800193a <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001920:	2318      	movs	r3, #24
 8001922:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f103 0018 	add.w	r0, r3, #24
 800192a:	f107 020b 	add.w	r2, r7, #11
 800192e:	2301      	movs	r3, #1
 8001930:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001934:	f000 fe0a 	bl	800254c <ov5640_write_reg>
 8001938:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10c      	bne.n	800195a <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 0018 	add.w	r0, r3, #24
 800194a:	f107 020b 	add.w	r2, r7, #11
 800194e:	2301      	movs	r3, #1
 8001950:	f245 5183 	movw	r1, #21891	; 0x5583
 8001954:	f000 fdfa 	bl	800254c <ov5640_write_reg>
 8001958:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10c      	bne.n	800197a <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f103 0018 	add.w	r0, r3, #24
 800196a:	f107 020b 	add.w	r2, r7, #11
 800196e:	2301      	movs	r3, #1
 8001970:	f245 5184 	movw	r1, #21892	; 0x5584
 8001974:	f000 fdea 	bl	800254c <ov5640_write_reg>
 8001978:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80d9 	beq.w	8001b34 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001988:	e0d4      	b.n	8001b34 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800198a:	23ff      	movs	r3, #255	; 0xff
 800198c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f103 0018 	add.w	r0, r3, #24
 8001994:	f107 020b 	add.w	r2, r7, #11
 8001998:	2301      	movs	r3, #1
 800199a:	f245 0101 	movw	r1, #20481	; 0x5001
 800199e:	f000 fdd5 	bl	800254c <ov5640_write_reg>
 80019a2:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80019aa:	2318      	movs	r3, #24
 80019ac:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f103 0018 	add.w	r0, r3, #24
 80019b4:	f107 020b 	add.w	r2, r7, #11
 80019b8:	2301      	movs	r3, #1
 80019ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80019be:	f000 fdc5 	bl	800254c <ov5640_write_reg>
 80019c2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 0018 	add.w	r0, r3, #24
 80019d4:	f107 020b 	add.w	r2, r7, #11
 80019d8:	2301      	movs	r3, #1
 80019da:	f245 5183 	movw	r1, #21891	; 0x5583
 80019de:	f000 fdb5 	bl	800254c <ov5640_write_reg>
 80019e2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 0018 	add.w	r0, r3, #24
 80019f4:	f107 020b 	add.w	r2, r7, #11
 80019f8:	2301      	movs	r3, #1
 80019fa:	f245 5184 	movw	r1, #21892	; 0x5584
 80019fe:	f000 fda5 	bl	800254c <ov5640_write_reg>
 8001a02:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8096 	beq.w	8001b38 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001a12:	e091      	b.n	8001b38 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8001a14:	23ff      	movs	r3, #255	; 0xff
 8001a16:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f103 0018 	add.w	r0, r3, #24
 8001a1e:	f107 020b 	add.w	r2, r7, #11
 8001a22:	2301      	movs	r3, #1
 8001a24:	f245 0101 	movw	r1, #20481	; 0x5001
 8001a28:	f000 fd90 	bl	800254c <ov5640_write_reg>
 8001a2c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8001a34:	2318      	movs	r3, #24
 8001a36:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f103 0018 	add.w	r0, r3, #24
 8001a3e:	f107 020b 	add.w	r2, r7, #11
 8001a42:	2301      	movs	r3, #1
 8001a44:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001a48:	f000 fd80 	bl	800254c <ov5640_write_reg>
 8001a4c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10c      	bne.n	8001a6e <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8001a54:	2340      	movs	r3, #64	; 0x40
 8001a56:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f103 0018 	add.w	r0, r3, #24
 8001a5e:	f107 020b 	add.w	r2, r7, #11
 8001a62:	2301      	movs	r3, #1
 8001a64:	f245 5183 	movw	r1, #21891	; 0x5583
 8001a68:	f000 fd70 	bl	800254c <ov5640_write_reg>
 8001a6c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8001a74:	23a0      	movs	r3, #160	; 0xa0
 8001a76:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f103 0018 	add.w	r0, r3, #24
 8001a7e:	f107 020b 	add.w	r2, r7, #11
 8001a82:	2301      	movs	r3, #1
 8001a84:	f245 5184 	movw	r1, #21892	; 0x5584
 8001a88:	f000 fd60 	bl	800254c <ov5640_write_reg>
 8001a8c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d053      	beq.n	8001b3c <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001a9a:	e04f      	b.n	8001b3c <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8001a9c:	23ff      	movs	r3, #255	; 0xff
 8001a9e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0018 	add.w	r0, r3, #24
 8001aa6:	f107 020b 	add.w	r2, r7, #11
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f245 0101 	movw	r1, #20481	; 0x5001
 8001ab0:	f000 fd4c 	bl	800254c <ov5640_write_reg>
 8001ab4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10c      	bne.n	8001ad6 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8001abc:	2340      	movs	r3, #64	; 0x40
 8001abe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 0018 	add.w	r0, r3, #24
 8001ac6:	f107 020b 	add.w	r2, r7, #11
 8001aca:	2301      	movs	r3, #1
 8001acc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001ad0:	f000 fd3c 	bl	800254c <ov5640_write_reg>
 8001ad4:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d031      	beq.n	8001b40 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001ae2:	e02d      	b.n	8001b40 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8001ae4:	237f      	movs	r3, #127	; 0x7f
 8001ae6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0018 	add.w	r0, r3, #24
 8001aee:	f107 020b 	add.w	r2, r7, #11
 8001af2:	2301      	movs	r3, #1
 8001af4:	f245 0101 	movw	r1, #20481	; 0x5001
 8001af8:	f000 fd28 	bl	800254c <ov5640_write_reg>
 8001afc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8001b04:	2300      	movs	r3, #0
 8001b06:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f103 0018 	add.w	r0, r3, #24
 8001b0e:	f107 020b 	add.w	r2, r7, #11
 8001b12:	2301      	movs	r3, #1
 8001b14:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001b18:	f000 fd18 	bl	800254c <ov5640_write_reg>
 8001b1c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00f      	beq.n	8001b44 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	60fb      	str	r3, [r7, #12]
      }

      break;
 8001b2a:	e00b      	b.n	8001b44 <OV5640_SetColorEffect+0x3f4>
      break;
 8001b2c:	bf00      	nop
 8001b2e:	e00a      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b30:	bf00      	nop
 8001b32:	e008      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b34:	bf00      	nop
 8001b36:	e006      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b38:	bf00      	nop
 8001b3a:	e004      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b3c:	bf00      	nop
 8001b3e:	e002      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <OV5640_SetColorEffect+0x3f6>
      break;
 8001b44:	bf00      	nop
  }

  return ret;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <OV5640_SetBrightness+0xdc>)
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b62:	c303      	stmia	r3!, {r0, r1}
 8001b64:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001b66:	23ff      	movs	r3, #255	; 0xff
 8001b68:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0018 	add.w	r0, r3, #24
 8001b70:	f107 020f 	add.w	r2, r7, #15
 8001b74:	2301      	movs	r3, #1
 8001b76:	f245 0101 	movw	r1, #20481	; 0x5001
 8001b7a:	f000 fce7 	bl	800254c <ov5640_write_reg>
 8001b7e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d111      	bne.n	8001baa <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b92:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f103 0018 	add.w	r0, r3, #24
 8001b9a:	f107 020f 	add.w	r2, r7, #15
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f245 5187 	movw	r1, #21895	; 0x5587
 8001ba4:	f000 fcd2 	bl	800254c <ov5640_write_reg>
 8001ba8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10c      	bne.n	8001bca <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f103 0018 	add.w	r0, r3, #24
 8001bba:	f107 020f 	add.w	r2, r7, #15
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001bc4:	f000 fcc2 	bl	800254c <ov5640_write_reg>
 8001bc8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d127      	bne.n	8001c20 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da12      	bge.n	8001bfc <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f103 0018 	add.w	r0, r3, #24
 8001be0:	f107 020f 	add.w	r2, r7, #15
 8001be4:	2301      	movs	r3, #1
 8001be6:	f245 5188 	movw	r1, #21896	; 0x5588
 8001bea:	f000 fcaf 	bl	800254c <ov5640_write_reg>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e011      	b.n	8001c20 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f103 0018 	add.w	r0, r3, #24
 8001c06:	f107 020f 	add.w	r2, r7, #15
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f245 5188 	movw	r1, #21896	; 0x5588
 8001c10:	f000 fc9c 	bl	800254c <ov5640_write_reg>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8001c20:	69fb      	ldr	r3, [r7, #28]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08006678 	.word	0x08006678

08001c30 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8001c3a:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <OV5640_SetSaturation+0xcc>)
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c42:	c303      	stmia	r3!, {r0, r1}
 8001c44:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001c46:	23ff      	movs	r3, #255	; 0xff
 8001c48:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f103 0018 	add.w	r0, r3, #24
 8001c50:	f107 020f 	add.w	r2, r7, #15
 8001c54:	2301      	movs	r3, #1
 8001c56:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c5a:	f000 fc77 	bl	800254c <ov5640_write_reg>
 8001c5e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d111      	bne.n	8001c8a <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	3320      	adds	r3, #32
 8001c6c:	443b      	add	r3, r7
 8001c6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001c72:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f103 0018 	add.w	r0, r3, #24
 8001c7a:	f107 020f 	add.w	r2, r7, #15
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f245 5183 	movw	r1, #21891	; 0x5583
 8001c84:	f000 fc62 	bl	800254c <ov5640_write_reg>
 8001c88:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f103 0018 	add.w	r0, r3, #24
 8001c96:	f107 020f 	add.w	r2, r7, #15
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f245 5184 	movw	r1, #21892	; 0x5584
 8001ca0:	f000 fc54 	bl	800254c <ov5640_write_reg>
 8001ca4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8001cac:	2302      	movs	r3, #2
 8001cae:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 0018 	add.w	r0, r3, #24
 8001cb6:	f107 020f 	add.w	r2, r7, #15
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001cc0:	f000 fc44 	bl	800254c <ov5640_write_reg>
 8001cc4:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10c      	bne.n	8001ce6 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8001ccc:	2341      	movs	r3, #65	; 0x41
 8001cce:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f103 0018 	add.w	r0, r3, #24
 8001cd6:	f107 020f 	add.w	r2, r7, #15
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f245 5188 	movw	r1, #21896	; 0x5588
 8001ce0:	f000 fc34 	bl	800254c <ov5640_write_reg>
 8001ce4:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	08006684 	.word	0x08006684

08001d00 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8001d0a:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <OV5640_SetContrast+0xcc>)
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d12:	c303      	stmia	r3!, {r0, r1}
 8001d14:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001d16:	23ff      	movs	r3, #255	; 0xff
 8001d18:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f103 0018 	add.w	r0, r3, #24
 8001d20:	f107 020f 	add.w	r2, r7, #15
 8001d24:	2301      	movs	r3, #1
 8001d26:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d2a:	f000 fc0f 	bl	800254c <ov5640_write_reg>
 8001d2e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8001d36:	2304      	movs	r3, #4
 8001d38:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f103 0018 	add.w	r0, r3, #24
 8001d40:	f107 020f 	add.w	r2, r7, #15
 8001d44:	2301      	movs	r3, #1
 8001d46:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001d4a:	f000 fbff 	bl	800254c <ov5640_write_reg>
 8001d4e:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d111      	bne.n	8001d7a <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	3320      	adds	r3, #32
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d62:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f103 0018 	add.w	r0, r3, #24
 8001d6a:	f107 020f 	add.w	r2, r7, #15
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f245 5186 	movw	r1, #21894	; 0x5586
 8001d74:	f000 fbea 	bl	800254c <ov5640_write_reg>
 8001d78:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0018 	add.w	r0, r3, #24
 8001d86:	f107 020f 	add.w	r2, r7, #15
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f245 5185 	movw	r1, #21893	; 0x5585
 8001d90:	f000 fbdc 	bl	800254c <ov5640_write_reg>
 8001d94:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8001d9c:	2341      	movs	r3, #65	; 0x41
 8001d9e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f103 0018 	add.w	r0, r3, #24
 8001da6:	f107 020f 	add.w	r2, r7, #15
 8001daa:	2301      	movs	r3, #1
 8001dac:	f245 5188 	movw	r1, #21896	; 0x5588
 8001db0:	f000 fbcc 	bl	800254c <ov5640_write_reg>
 8001db4:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	08006690 	.word	0x08006690

08001dd0 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8001dda:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <OV5640_SetHueDegree+0xfc>)
 8001ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <OV5640_SetHueDegree+0x100>)
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8001df2:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <OV5640_SetHueDegree+0x104>)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8001dfe:	23ff      	movs	r3, #255	; 0xff
 8001e00:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f103 0018 	add.w	r0, r3, #24
 8001e08:	f107 020f 	add.w	r2, r7, #15
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e12:	f000 fb9b 	bl	800254c <ov5640_write_reg>
 8001e16:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8001e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f103 0018 	add.w	r0, r3, #24
 8001e28:	f107 020f 	add.w	r2, r7, #15
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001e32:	f000 fb8b 	bl	800254c <ov5640_write_reg>
 8001e36:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d111      	bne.n	8001e62 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3306      	adds	r3, #6
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	443b      	add	r3, r7
 8001e46:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e4a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f103 0018 	add.w	r0, r3, #24
 8001e52:	f107 020f 	add.w	r2, r7, #15
 8001e56:	2301      	movs	r3, #1
 8001e58:	f245 5181 	movw	r1, #21889	; 0x5581
 8001e5c:	f000 fb76 	bl	800254c <ov5640_write_reg>
 8001e60:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	3306      	adds	r3, #6
 8001e6c:	3338      	adds	r3, #56	; 0x38
 8001e6e:	443b      	add	r3, r7
 8001e70:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e74:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 0018 	add.w	r0, r3, #24
 8001e7c:	f107 020f 	add.w	r2, r7, #15
 8001e80:	2301      	movs	r3, #1
 8001e82:	f245 5182 	movw	r1, #21890	; 0x5582
 8001e86:	f000 fb61 	bl	800254c <ov5640_write_reg>
 8001e8a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d111      	bne.n	8001eb6 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3306      	adds	r3, #6
 8001e96:	3338      	adds	r3, #56	; 0x38
 8001e98:	443b      	add	r3, r7
 8001e9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e9e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f103 0018 	add.w	r0, r3, #24
 8001ea6:	f107 020f 	add.w	r2, r7, #15
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f245 5188 	movw	r1, #21896	; 0x5588
 8001eb0:	f000 fb4c 	bl	800254c <ov5640_write_reg>
 8001eb4:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8001eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8001ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800669c 	.word	0x0800669c
 8001ed0:	080066a8 	.word	0x080066a8
 8001ed4:	080066b4 	.word	0x080066b4

08001ed8 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0018 	add.w	r0, r3, #24
 8001eec:	f107 020b 	add.w	r2, r7, #11
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f643 0120 	movw	r1, #14368	; 0x3820
 8001ef6:	f000 fb12 	bl	800251e <ov5640_read_reg>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e0cb      	b.n	80020a0 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	f023 0306 	bic.w	r3, r3, #6
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 0018 	add.w	r0, r3, #24
 8001f18:	f107 020a 	add.w	r2, r7, #10
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001f22:	f000 fafc 	bl	800251e <ov5640_read_reg>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e0b5      	b.n	80020a0 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8001f38:	7abb      	ldrb	r3, [r7, #10]
 8001f3a:	f023 0306 	bic.w	r3, r3, #6
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d056      	beq.n	8001ff6 <OV5640_MirrorFlipConfig+0x11e>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d87f      	bhi.n	800204e <OV5640_MirrorFlipConfig+0x176>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d029      	beq.n	8001fa8 <OV5640_MirrorFlipConfig+0xd0>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d179      	bne.n	800204e <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f103 0018 	add.w	r0, r3, #24
 8001f60:	f107 020b 	add.w	r2, r7, #11
 8001f64:	2301      	movs	r3, #1
 8001f66:	f643 0120 	movw	r1, #14368	; 0x3820
 8001f6a:	f000 faef 	bl	800254c <ov5640_write_reg>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8001f7a:	e08a      	b.n	8002092 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	f043 0306 	orr.w	r3, r3, #6
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0018 	add.w	r0, r3, #24
 8001f8c:	f107 020a 	add.w	r2, r7, #10
 8001f90:	2301      	movs	r3, #1
 8001f92:	f643 0121 	movw	r1, #14369	; 0x3821
 8001f96:	f000 fad9 	bl	800254c <ov5640_write_reg>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d078      	beq.n	8002092 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	60fb      	str	r3, [r7, #12]
          break;
 8001fa6:	e074      	b.n	8002092 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f043 0306 	orr.w	r3, r3, #6
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f103 0018 	add.w	r0, r3, #24
 8001fb8:	f107 020b 	add.w	r2, r7, #11
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f643 0120 	movw	r1, #14368	; 0x3820
 8001fc2:	f000 fac3 	bl	800254c <ov5640_write_reg>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8001fd2:	e060      	b.n	8002096 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0018 	add.w	r0, r3, #24
 8001fda:	f107 020a 	add.w	r2, r7, #10
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f643 0121 	movw	r1, #14369	; 0x3821
 8001fe4:	f000 fab2 	bl	800254c <ov5640_write_reg>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d053      	beq.n	8002096 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	60fb      	str	r3, [r7, #12]
          break;
 8001ff4:	e04f      	b.n	8002096 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	f043 0306 	orr.w	r3, r3, #6
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0018 	add.w	r0, r3, #24
 8002006:	f107 020b 	add.w	r2, r7, #11
 800200a:	2301      	movs	r3, #1
 800200c:	f643 0120 	movw	r1, #14368	; 0x3820
 8002010:	f000 fa9c 	bl	800254c <ov5640_write_reg>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002020:	e03b      	b.n	800209a <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002022:	7abb      	ldrb	r3, [r7, #10]
 8002024:	f043 0306 	orr.w	r3, r3, #6
 8002028:	b2db      	uxtb	r3, r3
 800202a:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f103 0018 	add.w	r0, r3, #24
 8002032:	f107 020a 	add.w	r2, r7, #10
 8002036:	2301      	movs	r3, #1
 8002038:	f643 0121 	movw	r1, #14369	; 0x3821
 800203c:	f000 fa86 	bl	800254c <ov5640_write_reg>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d029      	beq.n	800209a <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	60fb      	str	r3, [r7, #12]
          break;
 800204c:	e025      	b.n	800209a <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0018 	add.w	r0, r3, #24
 8002054:	f107 020b 	add.w	r2, r7, #11
 8002058:	2301      	movs	r3, #1
 800205a:	f643 0120 	movw	r1, #14368	; 0x3820
 800205e:	f000 fa75 	bl	800254c <ov5640_write_reg>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800206e:	e016      	b.n	800209e <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0018 	add.w	r0, r3, #24
 8002076:	f107 020a 	add.w	r2, r7, #10
 800207a:	2301      	movs	r3, #1
 800207c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002080:	f000 fa64 	bl	800254c <ov5640_write_reg>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	60fb      	str	r3, [r7, #12]
          break;
 8002090:	e005      	b.n	800209e <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002092:	bf00      	nop
 8002094:	e004      	b.n	80020a0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002096:	bf00      	nop
 8002098:	e002      	b.n	80020a0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800209e:	bf00      	nop
      }
    }
  }

  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff f86a 	bl	8001198 <OV5640_GetResolution>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e04e      	b.n	8002170 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b44      	cmp	r3, #68	; 0x44
 80020da:	d112      	bne.n	8002102 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 80020dc:	2310      	movs	r3, #16
 80020de:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0018 	add.w	r0, r3, #24
 80020e6:	f107 020b 	add.w	r2, r7, #11
 80020ea:	2301      	movs	r3, #1
 80020ec:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80020f0:	f000 fa2c 	bl	800254c <ov5640_write_reg>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03a      	beq.n	8002170 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e036      	b.n	8002170 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d802      	bhi.n	800210e <OV5640_ZoomConfig+0x64>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 800210c:	e00a      	b.n	8002124 <OV5640_ZoomConfig+0x7a>
      switch (res)
 800210e:	2b03      	cmp	r3, #3
 8002110:	d004      	beq.n	800211c <OV5640_ZoomConfig+0x72>
          break;
 8002112:	e007      	b.n	8002124 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	613b      	str	r3, [r7, #16]
          break;
 800211a:	e003      	b.n	8002124 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	613b      	str	r3, [r7, #16]
          break;
 8002122:	bf00      	nop
      }

      tmp = 0x00;
 8002124:	2300      	movs	r3, #0
 8002126:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 0018 	add.w	r0, r3, #24
 800212e:	f107 020b 	add.w	r2, r7, #11
 8002132:	2301      	movs	r3, #1
 8002134:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002138:	f000 fa08 	bl	800254c <ov5640_write_reg>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e012      	b.n	8002170 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0018 	add.w	r0, r3, #24
 8002156:	f107 020b 	add.w	r2, r7, #11
 800215a:	2301      	movs	r3, #1
 800215c:	f245 6101 	movw	r1, #22017	; 0x5601
 8002160:	f000 f9f4 	bl	800254c <ov5640_write_reg>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	f040 80ce 	bne.w	800232c <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0018 	add.w	r0, r3, #24
 8002196:	f107 020b 	add.w	r2, r7, #11
 800219a:	2301      	movs	r3, #1
 800219c:	f243 0138 	movw	r1, #12344	; 0x3038
 80021a0:	f000 f9d4 	bl	800254c <ov5640_write_reg>
 80021a4:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0018 	add.w	r0, r3, #24
 80021b2:	f107 020b 	add.w	r2, r7, #11
 80021b6:	2301      	movs	r3, #1
 80021b8:	f243 0139 	movw	r1, #12345	; 0x3039
 80021bc:	f000 f9c6 	bl	800254c <ov5640_write_reg>
 80021c0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80021c8:	237c      	movs	r3, #124	; 0x7c
 80021ca:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0018 	add.w	r0, r3, #24
 80021d2:	f107 020b 	add.w	r2, r7, #11
 80021d6:	2301      	movs	r3, #1
 80021d8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80021dc:	f000 f9b6 	bl	800254c <ov5640_write_reg>
 80021e0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10c      	bne.n	8002202 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 80021e8:	2301      	movs	r3, #1
 80021ea:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0018 	add.w	r0, r3, #24
 80021f2:	f107 020b 	add.w	r2, r7, #11
 80021f6:	2301      	movs	r3, #1
 80021f8:	f643 2108 	movw	r1, #14856	; 0x3a08
 80021fc:	f000 f9a6 	bl	800254c <ov5640_write_reg>
 8002200:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10c      	bne.n	8002222 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002208:	2327      	movs	r3, #39	; 0x27
 800220a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 0018 	add.w	r0, r3, #24
 8002212:	f107 020b 	add.w	r2, r7, #11
 8002216:	2301      	movs	r3, #1
 8002218:	f643 2109 	movw	r1, #14857	; 0x3a09
 800221c:	f000 f996 	bl	800254c <ov5640_write_reg>
 8002220:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10c      	bne.n	8002242 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0018 	add.w	r0, r3, #24
 8002232:	f107 020b 	add.w	r2, r7, #11
 8002236:	2301      	movs	r3, #1
 8002238:	f643 210a 	movw	r1, #14858	; 0x3a0a
 800223c:	f000 f986 	bl	800254c <ov5640_write_reg>
 8002240:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002248:	23f6      	movs	r3, #246	; 0xf6
 800224a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0018 	add.w	r0, r3, #24
 8002252:	f107 020b 	add.w	r2, r7, #11
 8002256:	2301      	movs	r3, #1
 8002258:	f643 210b 	movw	r1, #14859	; 0x3a0b
 800225c:	f000 f976 	bl	800254c <ov5640_write_reg>
 8002260:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002268:	2304      	movs	r3, #4
 800226a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 0018 	add.w	r0, r3, #24
 8002272:	f107 020b 	add.w	r2, r7, #11
 8002276:	2301      	movs	r3, #1
 8002278:	f643 210d 	movw	r1, #14861	; 0x3a0d
 800227c:	f000 f966 	bl	800254c <ov5640_write_reg>
 8002280:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0018 	add.w	r0, r3, #24
 800228e:	f107 020b 	add.w	r2, r7, #11
 8002292:	2301      	movs	r3, #1
 8002294:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002298:	f000 f958 	bl	800254c <ov5640_write_reg>
 800229c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10c      	bne.n	80022be <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 80022a4:	230b      	movs	r3, #11
 80022a6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0018 	add.w	r0, r3, #24
 80022ae:	f107 020b 	add.w	r2, r7, #11
 80022b2:	2301      	movs	r3, #1
 80022b4:	f643 2102 	movw	r1, #14850	; 0x3a02
 80022b8:	f000 f948 	bl	800254c <ov5640_write_reg>
 80022bc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80022c4:	2388      	movs	r3, #136	; 0x88
 80022c6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0018 	add.w	r0, r3, #24
 80022ce:	f107 020b 	add.w	r2, r7, #11
 80022d2:	2301      	movs	r3, #1
 80022d4:	f643 2103 	movw	r1, #14851	; 0x3a03
 80022d8:	f000 f938 	bl	800254c <ov5640_write_reg>
 80022dc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10c      	bne.n	80022fe <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80022e4:	230b      	movs	r3, #11
 80022e6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0018 	add.w	r0, r3, #24
 80022ee:	f107 020b 	add.w	r2, r7, #11
 80022f2:	2301      	movs	r3, #1
 80022f4:	f643 2114 	movw	r1, #14868	; 0x3a14
 80022f8:	f000 f928 	bl	800254c <ov5640_write_reg>
 80022fc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10c      	bne.n	800231e <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002304:	2388      	movs	r3, #136	; 0x88
 8002306:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f103 0018 	add.w	r0, r3, #24
 800230e:	f107 020b 	add.w	r2, r7, #11
 8002312:	2301      	movs	r3, #1
 8002314:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002318:	f000 f918 	bl	800254c <ov5640_write_reg>
 800231c:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02b      	beq.n	800237c <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e027      	b.n	800237c <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f103 0018 	add.w	r0, r3, #24
 8002332:	f107 020b 	add.w	r2, r7, #11
 8002336:	2301      	movs	r3, #1
 8002338:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800233c:	f000 f8ef 	bl	800251e <ov5640_read_reg>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e016      	b.n	800237c <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	b2db      	uxtb	r3, r3
 800235a:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 0018 	add.w	r0, r3, #24
 8002362:	f107 020b 	add.w	r2, r7, #11
 8002366:	2301      	movs	r3, #1
 8002368:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800236c:	f000 f8ee 	bl	800254c <ov5640_write_reg>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <OV5640_GetAWBRGBGain>:
  
  return ret;
}

int32_t OV5640_GetAWBRGBGain(OV5640_Object_t *pObj, uint8_t *RGBGain)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0018 	add.w	r0, r3, #24
 8002396:	f107 020b 	add.w	r2, r7, #11
 800239a:	2301      	movs	r3, #1
 800239c:	f245 119f 	movw	r1, #20895	; 0x519f
 80023a0:	f000 f8bd 	bl	800251e <ov5640_read_reg>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <OV5640_GetAWBRGBGain+0x2e>
    {
		ret = OV5640_ERROR;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	60fb      	str	r3, [r7, #12]
		return ret;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	e071      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
    }
	*RGBGain = tmp;
 80023b4:	7afa      	ldrb	r2, [r7, #11]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_LOW, &tmp, 1) != OV5640_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f103 0018 	add.w	r0, r3, #24
 80023c0:	f107 020b 	add.w	r2, r7, #11
 80023c4:	2301      	movs	r3, #1
 80023c6:	f245 11a0 	movw	r1, #20896	; 0x51a0
 80023ca:	f000 f8a8 	bl	800251e <ov5640_read_reg>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <OV5640_GetAWBRGBGain+0x58>
	{
		ret = OV5640_ERROR;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	60fb      	str	r3, [r7, #12]
		return ret;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	e05c      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+1) = tmp;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	7afa      	ldrb	r2, [r7, #11]
 80023e4:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0018 	add.w	r0, r3, #24
 80023ec:	f107 020b 	add.w	r2, r7, #11
 80023f0:	2301      	movs	r3, #1
 80023f2:	f245 11a1 	movw	r1, #20897	; 0x51a1
 80023f6:	f000 f892 	bl	800251e <ov5640_read_reg>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d004      	beq.n	800240a <OV5640_GetAWBRGBGain+0x84>
    {
		ret = OV5640_ERROR;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	60fb      	str	r3, [r7, #12]
		return ret;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	e046      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+2) = tmp;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3302      	adds	r3, #2
 800240e:	7afa      	ldrb	r2, [r7, #11]
 8002410:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_LOW, &tmp, 1) != OV5640_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0018 	add.w	r0, r3, #24
 8002418:	f107 020b 	add.w	r2, r7, #11
 800241c:	2301      	movs	r3, #1
 800241e:	f245 11a2 	movw	r1, #20898	; 0x51a2
 8002422:	f000 f87c 	bl	800251e <ov5640_read_reg>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <OV5640_GetAWBRGBGain+0xb0>
	{
		ret = OV5640_ERROR;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	60fb      	str	r3, [r7, #12]
		return ret;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	e030      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+3) = tmp;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	3303      	adds	r3, #3
 800243a:	7afa      	ldrb	r2, [r7, #11]
 800243c:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f103 0018 	add.w	r0, r3, #24
 8002444:	f107 020b 	add.w	r2, r7, #11
 8002448:	2301      	movs	r3, #1
 800244a:	f245 11a3 	movw	r1, #20899	; 0x51a3
 800244e:	f000 f866 	bl	800251e <ov5640_read_reg>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <OV5640_GetAWBRGBGain+0xdc>
    {
		ret = OV5640_ERROR;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	60fb      	str	r3, [r7, #12]
		return ret;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e01a      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+4) = tmp;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3304      	adds	r3, #4
 8002466:	7afa      	ldrb	r2, [r7, #11]
 8002468:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_LOW, &tmp, 1) != OV5640_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 0018 	add.w	r0, r3, #24
 8002470:	f107 020b 	add.w	r2, r7, #11
 8002474:	2301      	movs	r3, #1
 8002476:	f245 11a4 	movw	r1, #20900	; 0x51a4
 800247a:	f000 f850 	bl	800251e <ov5640_read_reg>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <OV5640_GetAWBRGBGain+0x108>
	{
		ret = OV5640_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	60fb      	str	r3, [r7, #12]
		return ret;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	e004      	b.n	8002498 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+5) = tmp;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3305      	adds	r3, #5
 8002492:	7afa      	ldrb	r2, [r7, #11]
 8002494:	701a      	strb	r2, [r3, #0]
	return OV5640_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
//  uint32_t tickstart;
//  tickstart = pObj->IO.GetTick();
//  while ((pObj->IO.GetTick() - tickstart) < Delay)
//  {
//  }
	HAL_Delay(Delay);
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f000 fb3c 	bl	8002b28 <HAL_Delay>
	return OV5640_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	461a      	mov	r2, r3
 80024c6:	460b      	mov	r3, r1
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	4613      	mov	r3, r2
 80024cc:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	691c      	ldr	r4, [r3, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	8918      	ldrh	r0, [r3, #8]
 80024da:	893b      	ldrh	r3, [r7, #8]
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	47a0      	blx	r4
 80024e2:	4603      	mov	r3, r0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}

080024ec <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	68dc      	ldr	r4, [r3, #12]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	8918      	ldrh	r0, [r3, #8]
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	47a0      	blx	r4
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd90      	pop	{r4, r7, pc}

0800251e <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800251e:	b590      	push	{r4, r7, lr}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	461a      	mov	r2, r3
 800252a:	460b      	mov	r3, r1
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	4613      	mov	r3, r2
 8002530:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685c      	ldr	r4, [r3, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6898      	ldr	r0, [r3, #8]
 800253a:	893b      	ldrh	r3, [r7, #8]
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	47a0      	blx	r4
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	817b      	strh	r3, [r7, #10]
 800255c:	4613      	mov	r3, r2
 800255e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6898      	ldr	r0, [r3, #8]
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	47a0      	blx	r4
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}
	...

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_MspInit+0x4c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <HAL_MspInit+0x4c>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025ba:	2007      	movs	r0, #7
 80025bc:	f000 fba8 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a56      	ldr	r2, [pc, #344]	; (8002744 <HAL_DCMI_MspInit+0x178>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f040 80a5 	bne.w	800273a <HAL_DCMI_MspInit+0x16e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	4a53      	ldr	r2, [pc, #332]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6353      	str	r3, [r2, #52]	; 0x34
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	4a4c      	ldr	r2, [pc, #304]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6313      	str	r3, [r2, #48]	; 0x30
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4a45      	ldr	r2, [pc, #276]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6313      	str	r3, [r2, #48]	; 0x30
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a3e      	ldr	r2, [pc, #248]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <HAL_DCMI_MspInit+0x17c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002660:	2350      	movs	r3, #80	; 0x50
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002670:	230d      	movs	r3, #13
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4834      	ldr	r0, [pc, #208]	; (800274c <HAL_DCMI_MspInit+0x180>)
 800267c:	f001 f806 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002680:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8002684:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002692:	230d      	movs	r3, #13
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4619      	mov	r1, r3
 800269c:	482c      	ldr	r0, [pc, #176]	; (8002750 <HAL_DCMI_MspInit+0x184>)
 800269e:	f000 fff5 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026b4:	230d      	movs	r3, #13
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4825      	ldr	r0, [pc, #148]	; (8002754 <HAL_DCMI_MspInit+0x188>)
 80026c0:	f000 ffe4 	bl	800368c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026c6:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_DCMI_MspInit+0x190>)
 80026c8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ec:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 80026f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002704:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002708:	2204      	movs	r2, #4
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 800270e:	2203      	movs	r2, #3
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002714:	2200      	movs	r2, #0
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002720:	f000 fbb2 	bl	8002e88 <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_DCMI_MspInit+0x162>
    {
      Error_Handler();
 800272a:	f7fe f9c3 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002732:	649a      	str	r2, [r3, #72]	; 0x48
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_DCMI_MspInit+0x18c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	50050000 	.word	0x50050000
 8002748:	40023800 	.word	0x40023800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020800 	.word	0x40020800
 8002754:	40020400 	.word	0x40020400
 8002758:	200000c4 	.word	0x200000c4
 800275c:	40026428 	.word	0x40026428

08002760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <HAL_I2C_MspInit+0xc4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d14b      	bne.n	800281a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b25      	ldr	r3, [pc, #148]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c0:	2312      	movs	r3, #18
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027cc:	2304      	movs	r3, #4
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	4815      	ldr	r0, [pc, #84]	; (800282c <HAL_I2C_MspInit+0xcc>)
 80027d8:	f000 ff58 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027ee:	2304      	movs	r3, #4
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_I2C_MspInit+0xd0>)
 80027fa:	f000 ff47 	bl	800368c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 8002808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_I2C_MspInit+0xc8>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40005800 	.word	0x40005800
 8002828:	40023800 	.word	0x40023800
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a35      	ldr	r2, [pc, #212]	; (8002928 <HAL_UART_MspInit+0xf4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d163      	bne.n	800291e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_UART_MspInit+0xf8>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a2c      	ldr	r2, [pc, #176]	; (800292c <HAL_UART_MspInit+0xf8>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_UART_MspInit+0xf8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800288e:	230c      	movs	r3, #12
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289e:	2307      	movs	r3, #7
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4821      	ldr	r0, [pc, #132]	; (8002930 <HAL_UART_MspInit+0xfc>)
 80028aa:	f000 feef 	bl	800368c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_UART_MspInit+0x104>)
 80028b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028f2:	4810      	ldr	r0, [pc, #64]	; (8002934 <HAL_UART_MspInit+0x100>)
 80028f4:	f000 fac8 	bl	8002e88 <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028fe:	f7fe f8d9 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_UART_MspInit+0x100>)
 8002906:	635a      	str	r2, [r3, #52]	; 0x34
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <HAL_UART_MspInit+0x100>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2026      	movs	r0, #38	; 0x26
 8002914:	f000 fa07 	bl	8002d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002918:	2026      	movs	r0, #38	; 0x26
 800291a:	f000 fa20 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	; 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40004400 	.word	0x40004400
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	200001bc 	.word	0x200001bc
 8002938:	400260a0 	.word	0x400260a0

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <NMI_Handler+0x4>

08002942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler+0x4>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <MemManage_Handler+0x4>

0800294e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <UsageFault_Handler+0x4>

0800295a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002988:	f000 f8ae 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Stream6_IRQHandler+0x10>)
 8002996:	f000 fc0f 	bl	80031b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200001bc 	.word	0x200001bc

080029a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <USART2_IRQHandler+0x10>)
 80029aa:	f002 fe91 	bl	80056d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000178 	.word	0x20000178

080029b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA2_Stream1_IRQHandler+0x10>)
 80029be:	f000 fbfb 	bl	80031b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200000c4 	.word	0x200000c4

080029cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f6:	490e      	ldr	r1, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f8:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029fc:	e002      	b.n	8002a04 <LoopCopyDataInit>

080029fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a02:	3304      	adds	r3, #4

08002a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a08:	d3f9      	bcc.n	80029fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a0c:	4c0b      	ldr	r4, [pc, #44]	; (8002a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a10:	e001      	b.n	8002a16 <LoopFillZerobss>

08002a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a14:	3204      	adds	r2, #4

08002a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a18:	d3fb      	bcc.n	8002a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a1a:	f7ff ffd7 	bl	80029cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1e:	f003 fdeb 	bl	80065f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a22:	f7fd fdf1 	bl	8000608 <main>
  bx  lr    
 8002a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a30:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002a34:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 8002a38:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002a3c:	20000264 	.word	0x20000264

08002a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a40:	e7fe      	b.n	8002a40 <ADC_IRQHandler>
	...

08002a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_Init+0x40>)
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_Init+0x40>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_Init+0x40>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 f94f 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f808 	bl	8002a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a78:	f7ff fd80 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x54>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x58>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f967 	bl	8002d7a <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f000 f92f 	bl	8002d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_InitTick+0x5c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000004c 	.word	0x2000004c
 8002ae0:	20000054 	.word	0x20000054
 8002ae4:	20000050 	.word	0x20000050

08002ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x20>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x24>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_IncTick+0x24>)
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000054 	.word	0x20000054
 8002b0c:	20000260 	.word	0x20000260

08002b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_GetTick+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000260 	.word	0x20000260

08002b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b30:	f7ff ffee 	bl	8002b10 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d005      	beq.n	8002b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_Delay+0x44>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b4e:	bf00      	nop
 8002b50:	f7ff ffde 	bl	8002b10 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d8f7      	bhi.n	8002b50 <HAL_Delay+0x28>
  {
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000054 	.word	0x20000054

08002b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	f003 0307 	and.w	r3, r3, #7
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	db0b      	blt.n	8002bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	4907      	ldr	r1, [pc, #28]	; (8002c0c <__NVIC_EnableIRQ+0x38>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000e100 	.word	0xe000e100

08002c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db0a      	blt.n	8002c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	490c      	ldr	r1, [pc, #48]	; (8002c5c <__NVIC_SetPriority+0x4c>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c38:	e00a      	b.n	8002c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <__NVIC_SetPriority+0x50>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3b04      	subs	r3, #4
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	761a      	strb	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f1c3 0307 	rsb	r3, r3, #7
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf28      	it	cs
 8002c82:	2304      	movcs	r3, #4
 8002c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d902      	bls.n	8002c94 <NVIC_EncodePriority+0x30>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3b03      	subs	r3, #3
 8002c92:	e000      	b.n	8002c96 <NVIC_EncodePriority+0x32>
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	4313      	orrs	r3, r2
         );
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cdc:	d301      	bcc.n	8002ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <SysTick_Config+0x40>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cea:	210f      	movs	r1, #15
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f7ff ff8e 	bl	8002c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <SysTick_Config+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SysTick_Config+0x40>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff29 	bl	8002b70 <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff ff3e 	bl	8002bb8 <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff8e 	bl	8002c64 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5d 	bl	8002c10 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff31 	bl	8002bd4 <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffa2 	bl	8002ccc <SysTick_Config>
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e069      	b.n	8002e7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fc06 	bl	80025cc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fc03 	bl	80025cc <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_DCMI_Init+0xf0>)
 8002dda:	400b      	ands	r3, r1
 8002ddc:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002df2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002dfe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002e0a:	431a      	orrs	r2, r3
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                                     | hdcmi->Init.ByteSelectMode |\
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     | hdcmi->Init.ByteSelectMode |\
 8002e16:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8002e22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d112      	bne.n	8002e5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7f1b      	ldrb	r3, [r3, #28]
 8002e38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f5b      	ldrb	r3, [r3, #29]
 8002e3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002e40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7f9b      	ldrb	r3, [r3, #30]
 8002e46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002e48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7fdb      	ldrb	r3, [r3, #31]
 8002e50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002e56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002e58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 021e 	orr.w	r2, r2, #30
 8002e68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	ffe0f007 	.word	0xffe0f007

08002e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff fe3c 	bl	8002b10 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e099      	b.n	8002fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec4:	e00f      	b.n	8002ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec6:	f7ff fe23 	bl	8002b10 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b05      	cmp	r3, #5
 8002ed2:	d908      	bls.n	8002ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e078      	b.n	8002fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e8      	bne.n	8002ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_DMA_Init+0x158>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0307 	bic.w	r3, r3, #7
 8002f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d117      	bne.n	8002faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb01 	bl	8003594 <DMA_CheckFifoParam>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e016      	b.n	8002fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fab8 	bl	8003528 <DMA_CalcBaseAndBitshift>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	223f      	movs	r2, #63	; 0x3f
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	f010803f 	.word	0xf010803f

08002fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_DMA_Start_IT+0x26>
 8003006:	2302      	movs	r3, #2
 8003008:	e040      	b.n	800308c <HAL_DMA_Start_IT+0xa8>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d12f      	bne.n	800307e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fa4a 	bl	80034cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	223f      	movs	r2, #63	; 0x3f
 800303e:	409a      	lsls	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0216 	orr.w	r2, r2, #22
 8003052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e005      	b.n	800308a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a2:	f7ff fd35 	bl	8002b10 <HAL_GetTick>
 80030a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d008      	beq.n	80030c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e052      	b.n	800316c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0216 	bic.w	r2, r2, #22
 80030d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_DMA_Abort+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0208 	bic.w	r2, r2, #8
 8003104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	e013      	b.n	8003140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003118:	f7ff fcfa 	bl	8002b10 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b05      	cmp	r3, #5
 8003124:	d90c      	bls.n	8003140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2203      	movs	r2, #3
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e015      	b.n	800316c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e4      	bne.n	8003118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	223f      	movs	r2, #63	; 0x3f
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00c      	b.n	80031ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2205      	movs	r2, #5
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <HAL_DMA_IRQHandler+0x248>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a8e      	ldr	r2, [pc, #568]	; (8003404 <HAL_DMA_IRQHandler+0x24c>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	2208      	movs	r2, #8
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0204 	bic.w	r2, r2, #4
 800320a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2208      	movs	r2, #8
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2201      	movs	r2, #1
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2204      	movs	r2, #4
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2204      	movs	r2, #4
 800327e:	409a      	lsls	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2210      	movs	r2, #16
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d043      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03c      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2210      	movs	r2, #16
 80032b4:	409a      	lsls	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d024      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
 80032e6:	e01f      	b.n	8003328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e016      	b.n	8003328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0208 	bic.w	r2, r2, #8
 8003316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	2220      	movs	r2, #32
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 808f 	beq.w	8003458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8087 	beq.w	8003458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	2220      	movs	r2, #32
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b05      	cmp	r3, #5
 8003360:	d136      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0216 	bic.w	r2, r2, #22
 8003370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_DMA_IRQHandler+0x1da>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0208 	bic.w	r2, r2, #8
 80033a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	223f      	movs	r2, #63	; 0x3f
 80033a8:	409a      	lsls	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07e      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
        }
        return;
 80033ce:	e079      	b.n	80034c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01d      	beq.n	800341a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d031      	beq.n	8003458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
 80033fc:	e02c      	b.n	8003458 <HAL_DMA_IRQHandler+0x2a0>
 80033fe:	bf00      	nop
 8003400:	2000004c 	.word	0x2000004c
 8003404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d023      	beq.n	8003458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e01e      	b.n	8003458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10f      	bne.n	8003448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0210 	bic.w	r2, r2, #16
 8003436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	2b00      	cmp	r3, #0
 800345e:	d032      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2205      	movs	r2, #5
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3301      	adds	r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	429a      	cmp	r2, r3
 800348e:	d307      	bcc.n	80034a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f2      	bne.n	8003484 <HAL_DMA_IRQHandler+0x2cc>
 800349e:	e000      	b.n	80034a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
 80034c2:	e000      	b.n	80034c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034c4:	bf00      	nop
    }
  }
}
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d108      	bne.n	800350c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800350a:	e007      	b.n	800351c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3b10      	subs	r3, #16
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <DMA_CalcBaseAndBitshift+0x64>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <DMA_CalcBaseAndBitshift+0x68>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d909      	bls.n	800356a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	1d1a      	adds	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58
 8003568:	e007      	b.n	800357a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	aaaaaaab 	.word	0xaaaaaaab
 8003590:	08006bf0 	.word	0x08006bf0

08003594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11f      	bne.n	80035ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d856      	bhi.n	8003662 <DMA_CheckFifoParam+0xce>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <DMA_CheckFifoParam+0x28>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035df 	.word	0x080035df
 80035c4:	080035cd 	.word	0x080035cd
 80035c8:	08003663 	.word	0x08003663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d046      	beq.n	8003666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e043      	b.n	8003666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e6:	d140      	bne.n	800366a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ec:	e03d      	b.n	800366a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d121      	bne.n	800363c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d837      	bhi.n	800366e <DMA_CheckFifoParam+0xda>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <DMA_CheckFifoParam+0x70>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	0800361b 	.word	0x0800361b
 800360c:	08003615 	.word	0x08003615
 8003610:	0800362d 	.word	0x0800362d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e030      	b.n	800367c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d025      	beq.n	8003672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362a:	e022      	b.n	8003672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003634:	d11f      	bne.n	8003676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800363a:	e01c      	b.n	8003676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d903      	bls.n	800364a <DMA_CheckFifoParam+0xb6>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d003      	beq.n	8003650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003648:	e018      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      break;
 800364e:	e015      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e00b      	b.n	800367a <DMA_CheckFifoParam+0xe6>
      break;
 8003662:	bf00      	nop
 8003664:	e00a      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;
 8003666:	bf00      	nop
 8003668:	e008      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e006      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e004      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
 8003674:	e002      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;   
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <DMA_CheckFifoParam+0xe8>
      break;
 800367a:	bf00      	nop
    }
  } 
  
  return status; 
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e165      	b.n	8003974 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	f040 8154 	bne.w	800396e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d005      	beq.n	80036de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d130      	bne.n	8003740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	2203      	movs	r2, #3
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 0201 	and.w	r2, r3, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b03      	cmp	r3, #3
 800374a:	d017      	beq.n	800377c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d123      	bne.n	80037d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	08da      	lsrs	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3208      	adds	r2, #8
 8003790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	220f      	movs	r2, #15
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	08da      	lsrs	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3208      	adds	r2, #8
 80037ca:	69b9      	ldr	r1, [r7, #24]
 80037cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0203 	and.w	r2, r3, #3
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80ae 	beq.w	800396e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_GPIO_Init+0x300>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a5c      	ldr	r2, [pc, #368]	; (800398c <HAL_GPIO_Init+0x300>)
 800381c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_GPIO_Init+0x300>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382e:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_GPIO_Init+0x304>)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	3302      	adds	r3, #2
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	220f      	movs	r2, #15
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_GPIO_Init+0x308>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x21a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_GPIO_Init+0x30c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x216>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_GPIO_Init+0x310>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x212>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_GPIO_Init+0x314>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x20e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <HAL_GPIO_Init+0x318>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x20a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <HAL_GPIO_Init+0x31c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x206>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a49      	ldr	r2, [pc, #292]	; (80039ac <HAL_GPIO_Init+0x320>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x202>
 800388a:	2306      	movs	r3, #6
 800388c:	e00c      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 800388e:	2307      	movs	r3, #7
 8003890:	e00a      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 8003892:	2305      	movs	r3, #5
 8003894:	e008      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 8003896:	2304      	movs	r3, #4
 8003898:	e006      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 800389a:	2303      	movs	r3, #3
 800389c:	e004      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 800389e:	2302      	movs	r3, #2
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_GPIO_Init+0x21c>
 80038a6:	2300      	movs	r3, #0
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f002 0203 	and.w	r2, r2, #3
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	4093      	lsls	r3, r2
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038b8:	4935      	ldr	r1, [pc, #212]	; (8003990 <HAL_GPIO_Init+0x304>)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c6:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <HAL_GPIO_Init+0x324>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ea:	4a31      	ldr	r2, [pc, #196]	; (80039b0 <HAL_GPIO_Init+0x324>)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f0:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <HAL_GPIO_Init+0x324>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <HAL_GPIO_Init+0x324>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391a:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_GPIO_Init+0x324>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_GPIO_Init+0x324>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_GPIO_Init+0x324>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003968:	4a11      	ldr	r2, [pc, #68]	; (80039b0 <HAL_GPIO_Init+0x324>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	f67f ae96 	bls.w	80036a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40013800 	.word	0x40013800
 8003994:	40020000 	.word	0x40020000
 8003998:	40020400 	.word	0x40020400
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020c00 	.word	0x40020c00
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40021400 	.word	0x40021400
 80039ac:	40021800 	.word	0x40021800
 80039b0:	40013c00 	.word	0x40013c00

080039b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
 80039c0:	4613      	mov	r3, r2
 80039c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d0:	e003      	b.n	80039da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	041a      	lsls	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e12b      	b.n	8003c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fea6 	bl	8002760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f001 f87e 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 8003a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a81      	ldr	r2, [pc, #516]	; (8003c5c <HAL_I2C_Init+0x274>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d807      	bhi.n	8003a6c <HAL_I2C_Init+0x84>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a80      	ldr	r2, [pc, #512]	; (8003c60 <HAL_I2C_Init+0x278>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e006      	b.n	8003a7a <HAL_I2C_Init+0x92>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a7d      	ldr	r2, [pc, #500]	; (8003c64 <HAL_I2C_Init+0x27c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	bf94      	ite	ls
 8003a74:	2301      	movls	r3, #1
 8003a76:	2300      	movhi	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0e7      	b.n	8003c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a78      	ldr	r2, [pc, #480]	; (8003c68 <HAL_I2C_Init+0x280>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0c9b      	lsrs	r3, r3, #18
 8003a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a6a      	ldr	r2, [pc, #424]	; (8003c5c <HAL_I2C_Init+0x274>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d802      	bhi.n	8003abc <HAL_I2C_Init+0xd4>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	e009      	b.n	8003ad0 <HAL_I2C_Init+0xe8>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <HAL_I2C_Init+0x284>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	3301      	adds	r3, #1
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	495c      	ldr	r1, [pc, #368]	; (8003c5c <HAL_I2C_Init+0x274>)
 8003aec:	428b      	cmp	r3, r1
 8003aee:	d819      	bhi.n	8003b24 <HAL_I2C_Init+0x13c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e59      	subs	r1, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b04:	400b      	ands	r3, r1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_I2C_Init+0x138>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e59      	subs	r1, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1e:	e051      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b20:	2304      	movs	r3, #4
 8003b22:	e04f      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <HAL_I2C_Init+0x168>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e58      	subs	r0, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e012      	b.n	8003b76 <HAL_I2C_Init+0x18e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1e58      	subs	r0, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	0099      	lsls	r1, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Init+0x196>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e022      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10e      	bne.n	8003ba4 <HAL_I2C_Init+0x1bc>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1e58      	subs	r0, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	440b      	add	r3, r1
 8003b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba2:	e00f      	b.n	8003bc4 <HAL_I2C_Init+0x1dc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	6809      	ldr	r1, [r1, #0]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6911      	ldr	r1, [r2, #16]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	000186a0 	.word	0x000186a0
 8003c60:	001e847f 	.word	0x001e847f
 8003c64:	003d08ff 	.word	0x003d08ff
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7fe ff41 	bl	8002b10 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	f040 80d9 	bne.w	8003e50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	2319      	movs	r3, #25
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	496d      	ldr	r1, [pc, #436]	; (8003e5c <HAL_I2C_Mem_Write+0x1ec>)
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fc7f 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0cc      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x56>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0c5      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d007      	beq.n	8003cec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	; 0x21
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2240      	movs	r2, #64	; 0x40
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_I2C_Mem_Write+0x1f0>)
 8003d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2e:	88f8      	ldrh	r0, [r7, #6]
 8003d30:	893a      	ldrh	r2, [r7, #8]
 8003d32:	8979      	ldrh	r1, [r7, #10]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fab6 	bl	80042b0 <I2C_RequestMemoryWrite>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d052      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e081      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fd00 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06b      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_I2C_Mem_Write+0x180>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1aa      	bne.n	8003d4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fcec 	bl	80047da <I2C_WaitOnBTFFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d107      	bne.n	8003e20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e016      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	00100002 	.word	0x00100002
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	817b      	strh	r3, [r7, #10]
 8003e76:	460b      	mov	r3, r1
 8003e78:	813b      	strh	r3, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e7e:	f7fe fe47 	bl	8002b10 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 8208 	bne.w	80042a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2319      	movs	r3, #25
 8003e98:	2201      	movs	r2, #1
 8003e9a:	497b      	ldr	r1, [pc, #492]	; (8004088 <HAL_I2C_Mem_Read+0x224>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fb85 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e1fb      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Mem_Read+0x56>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e1f4      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d007      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2222      	movs	r2, #34	; 0x22
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_I2C_Mem_Read+0x228>)
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f22:	88f8      	ldrh	r0, [r7, #6]
 8003f24:	893a      	ldrh	r2, [r7, #8]
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fa52 	bl	80043dc <I2C_RequestMemoryRead>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e1b0      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e184      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d11b      	bne.n	8003fb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e164      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	e144      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004008:	e138      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	2b03      	cmp	r3, #3
 8004010:	f200 80f1 	bhi.w	80041f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b01      	cmp	r3, #1
 800401a:	d123      	bne.n	8004064 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fc1b 	bl	800485c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e139      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004062:	e10b      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b02      	cmp	r3, #2
 800406a:	d14e      	bne.n	800410a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2200      	movs	r2, #0
 8004074:	4906      	ldr	r1, [pc, #24]	; (8004090 <HAL_I2C_Mem_Read+0x22c>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fa98 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e10e      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
 8004086:	bf00      	nop
 8004088:	00100002 	.word	0x00100002
 800408c:	ffff0000 	.word	0xffff0000
 8004090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004108:	e0b8      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2200      	movs	r2, #0
 8004112:	4966      	ldr	r1, [pc, #408]	; (80042ac <HAL_I2C_Mem_Read+0x448>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa49 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0bf      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2200      	movs	r2, #0
 800416e:	494f      	ldr	r1, [pc, #316]	; (80042ac <HAL_I2C_Mem_Read+0x448>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fa1b 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e091      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f4:	e042      	b.n	800427c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fb2e 	bl	800485c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e04c      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d118      	bne.n	800427c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	f47f aec2 	bne.w	800400a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	00010004 	.word	0x00010004

080042b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f960 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d103      	bne.n	800430a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e05f      	b.n	80043ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800431c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	492d      	ldr	r1, [pc, #180]	; (80043d8 <I2C_RequestMemoryWrite+0x128>)
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f998 	bl	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e04c      	b.n	80043ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fa02 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02b      	b.n	80043ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	611a      	str	r2, [r3, #16]
 8004386:	e021      	b.n	80043cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004388:	893b      	ldrh	r3, [r7, #8]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	b29b      	uxth	r3, r3
 800438e:	b2da      	uxtb	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	6a39      	ldr	r1, [r7, #32]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f9dc 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d107      	bne.n	80043be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e005      	b.n	80043ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c2:	893b      	ldrh	r3, [r7, #8]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	00010002 	.word	0x00010002

080043dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	817b      	strh	r3, [r7, #10]
 80043ee:	460b      	mov	r3, r1
 80043f0:	813b      	strh	r3, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	2200      	movs	r2, #0
 800441e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f8c2 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443c:	d103      	bne.n	8004446 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0aa      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	4952      	ldr	r1, [pc, #328]	; (80045a8 <I2C_RequestMemoryRead+0x1cc>)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f8fa 	bl	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e097      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	6a39      	ldr	r1, [r7, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f964 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b04      	cmp	r3, #4
 800449c:	d107      	bne.n	80044ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e076      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	e021      	b.n	8004508 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	6a39      	ldr	r1, [r7, #32]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f93e 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e050      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fe:	893b      	ldrh	r3, [r7, #8]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	6a39      	ldr	r1, [r7, #32]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f923 	bl	8004758 <I2C_WaitOnTXEFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2b04      	cmp	r3, #4
 800451e:	d107      	bne.n	8004530 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e035      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004542:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	2200      	movs	r2, #0
 800454c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f82b 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d103      	bne.n	8004574 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e013      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004578:	897b      	ldrh	r3, [r7, #10]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	4906      	ldr	r1, [pc, #24]	; (80045a8 <I2C_RequestMemoryRead+0x1cc>)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f863 	bl	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	00010002 	.word	0x00010002

080045ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045bc:	e025      	b.n	800460a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d021      	beq.n	800460a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fe faa3 	bl	8002b10 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e023      	b.n	8004652 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10d      	bne.n	8004630 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	43da      	mvns	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	e00c      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0b6      	beq.n	80045be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004668:	e051      	b.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004678:	d123      	bne.n	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004688:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004692:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e046      	b.n	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d021      	beq.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fe fa21 	bl	8002b10 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e020      	b.n	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e00b      	b.n	800474a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	43da      	mvns	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d18d      	bne.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004764:	e02d      	b.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8ce 	bl	8004908 <I2C_IsAcknowledgeFailed>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e02d      	b.n	80047d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d021      	beq.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe f9c7 	bl	8002b10 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e007      	b.n	80047d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d1ca      	bne.n	8004766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e6:	e02d      	b.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f88d 	bl	8004908 <I2C_IsAcknowledgeFailed>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e02d      	b.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d021      	beq.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe f986 	bl	8002b10 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e007      	b.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d1ca      	bne.n	80047e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004868:	e042      	b.n	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d119      	bne.n	80048ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e029      	b.n	8004900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe f930 	bl	8002b10 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	d1b5      	bne.n	800486a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	d11b      	bne.n	8004958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0cc      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b68      	ldr	r3, [pc, #416]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d90c      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b65      	ldr	r3, [pc, #404]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b63      	ldr	r3, [pc, #396]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0b8      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049bc:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a58      	ldr	r2, [pc, #352]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d4:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a52      	ldr	r2, [pc, #328]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e0:	4b50      	ldr	r3, [pc, #320]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	494d      	ldr	r1, [pc, #308]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d044      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d107      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	4b47      	ldr	r3, [pc, #284]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d119      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e07f      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a26:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e06f      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	4b3b      	ldr	r3, [pc, #236]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e067      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a46:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4934      	ldr	r1, [pc, #208]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a58:	f7fe f85a 	bl	8002b10 <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a60:	f7fe f856 	bl	8002b10 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e04f      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 020c 	and.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d1eb      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a88:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d20c      	bcs.n	8004ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e032      	b.n	8004b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004abc:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4916      	ldr	r1, [pc, #88]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	490e      	ldr	r1, [pc, #56]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aee:	f000 f855 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004af2:	4602      	mov	r2, r0
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	490a      	ldr	r1, [pc, #40]	; (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	5ccb      	ldrb	r3, [r1, r3]
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd ffba 	bl	8002a88 <HAL_InitTick>

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023c00 	.word	0x40023c00
 8004b24:	40023800 	.word	0x40023800
 8004b28:	08006bd8 	.word	0x08006bd8
 8004b2c:	2000004c 	.word	0x2000004c
 8004b30:	20000050 	.word	0x20000050

08004b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000004c 	.word	0x2000004c

08004b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b50:	f7ff fff0 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0a9b      	lsrs	r3, r3, #10
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	08006be8 	.word	0x08006be8

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b78:	f7ff ffdc 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0b5b      	lsrs	r3, r3, #13
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4903      	ldr	r1, [pc, #12]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	08006be8 	.word	0x08006be8

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b0ae      	sub	sp, #184	; 0xb8
 8004ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bc2:	4bcb      	ldr	r3, [pc, #812]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	f200 8206 	bhi.w	8004fdc <HAL_RCC_GetSysClockFreq+0x440>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004fdd 	.word	0x08004fdd
 8004be0:	08004fdd 	.word	0x08004fdd
 8004be4:	08004fdd 	.word	0x08004fdd
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004fdd 	.word	0x08004fdd
 8004bf0:	08004fdd 	.word	0x08004fdd
 8004bf4:	08004fdd 	.word	0x08004fdd
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004fdd 	.word	0x08004fdd
 8004c00:	08004fdd 	.word	0x08004fdd
 8004c04:	08004fdd 	.word	0x08004fdd
 8004c08:	08004e0d 	.word	0x08004e0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4bb9      	ldr	r3, [pc, #740]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004c12:	e1e7      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c14:	4bb8      	ldr	r3, [pc, #736]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c1a:	e1e3      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c1c:	4bb4      	ldr	r3, [pc, #720]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c28:	4bb1      	ldr	r3, [pc, #708]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d071      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c34:	4bae      	ldr	r3, [pc, #696]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f04f 0000 	mov.w	r0, #0
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6c:	0150      	lsls	r0, r2, #5
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4621      	mov	r1, r4
 8004c74:	1a51      	subs	r1, r2, r1
 8004c76:	6439      	str	r1, [r7, #64]	; 0x40
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	018b      	lsls	r3, r1, #6
 8004c90:	4641      	mov	r1, r8
 8004c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c96:	4641      	mov	r1, r8
 8004c98:	018a      	lsls	r2, r1, #6
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1a51      	subs	r1, r2, r1
 8004c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4641      	mov	r1, r8
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4622      	mov	r2, r4
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8004cce:	462b      	mov	r3, r5
 8004cd0:	460a      	mov	r2, r1
 8004cd2:	eb42 0303 	adc.w	r3, r2, r3
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	024b      	lsls	r3, r1, #9
 8004ce8:	4621      	mov	r1, r4
 8004cea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cee:	4621      	mov	r1, r4
 8004cf0:	024a      	lsls	r2, r1, #9
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d08:	f7fb fa7c 	bl	8000204 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d16:	e067      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d18:	4b75      	ldr	r3, [pc, #468]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d32:	2300      	movs	r3, #0
 8004d34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4c:	0150      	lsls	r0, r2, #5
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4621      	mov	r1, r4
 8004d54:	1a51      	subs	r1, r2, r1
 8004d56:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d58:	4629      	mov	r1, r5
 8004d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	4641      	mov	r1, r8
 8004d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d76:	4641      	mov	r1, r8
 8004d78:	018a      	lsls	r2, r1, #6
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d80:	4649      	mov	r1, r9
 8004d82:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9a:	4692      	mov	sl, r2
 8004d9c:	469b      	mov	fp, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	eb1a 0303 	adds.w	r3, sl, r3
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	462b      	mov	r3, r5
 8004da8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	028b      	lsls	r3, r1, #10
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	028a      	lsls	r2, r1, #10
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8004dd4:	677a      	str	r2, [r7, #116]	; 0x74
 8004dd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dda:	f7fb fa13 	bl	8000204 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4613      	mov	r3, r2
 8004de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de8:	4b41      	ldr	r3, [pc, #260]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	3301      	adds	r3, #1
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e0a:	e0eb      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e0c:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e18:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d06b      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e24:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	663b      	str	r3, [r7, #96]	; 0x60
 8004e38:	2300      	movs	r3, #0
 8004e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0159      	lsls	r1, r3, #5
 8004e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e52:	0150      	lsls	r0, r2, #5
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4621      	mov	r1, r4
 8004e5a:	1a51      	subs	r1, r2, r1
 8004e5c:	61b9      	str	r1, [r7, #24]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	eb63 0301 	sbc.w	r3, r3, r1
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e72:	4659      	mov	r1, fp
 8004e74:	018b      	lsls	r3, r1, #6
 8004e76:	4651      	mov	r1, sl
 8004e78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	018a      	lsls	r2, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ebb2 0801 	subs.w	r8, r2, r1
 8004e86:	4659      	mov	r1, fp
 8004e88:	eb63 0901 	sbc.w	r9, r3, r1
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea0:	4690      	mov	r8, r2
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	eb18 0303 	adds.w	r3, r8, r3
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	462b      	mov	r3, r5
 8004eae:	eb49 0303 	adc.w	r3, r9, r3
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	024b      	lsls	r3, r1, #9
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eca:	4621      	mov	r1, r4
 8004ecc:	024a      	lsls	r2, r1, #9
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004edc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ee0:	f7fb f990 	bl	8000204 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eee:	e065      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x420>
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efc:	4b3d      	ldr	r3, [pc, #244]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	2200      	movs	r2, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	4611      	mov	r1, r2
 8004f08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f0e:	2300      	movs	r3, #0
 8004f10:	657b      	str	r3, [r7, #84]	; 0x54
 8004f12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004f16:	4642      	mov	r2, r8
 8004f18:	464b      	mov	r3, r9
 8004f1a:	f04f 0000 	mov.w	r0, #0
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	0159      	lsls	r1, r3, #5
 8004f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f28:	0150      	lsls	r0, r2, #5
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4641      	mov	r1, r8
 8004f30:	1a51      	subs	r1, r2, r1
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	4649      	mov	r1, r9
 8004f36:	eb63 0301 	sbc.w	r3, r3, r1
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f48:	4659      	mov	r1, fp
 8004f4a:	018b      	lsls	r3, r1, #6
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f52:	4651      	mov	r1, sl
 8004f54:	018a      	lsls	r2, r1, #6
 8004f56:	4651      	mov	r1, sl
 8004f58:	1a54      	subs	r4, r2, r1
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	eb63 0501 	sbc.w	r5, r3, r1
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	00eb      	lsls	r3, r5, #3
 8004f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6e:	00e2      	lsls	r2, r4, #3
 8004f70:	4614      	mov	r4, r2
 8004f72:	461d      	mov	r5, r3
 8004f74:	4643      	mov	r3, r8
 8004f76:	18e3      	adds	r3, r4, r3
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb45 0303 	adc.w	r3, r5, r3
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8e:	4629      	mov	r1, r5
 8004f90:	028b      	lsls	r3, r1, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f98:	4621      	mov	r1, r4
 8004f9a:	028a      	lsls	r2, r1, #10
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004faa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fae:	f7fb f929 	bl	8000204 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	0f1b      	lsrs	r3, r3, #28
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fda:	e003      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fe2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	37b8      	adds	r7, #184	; 0xb8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	00f42400 	.word	0x00f42400

08004ffc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e28d      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8083 	beq.w	8005122 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800501c:	4b94      	ldr	r3, [pc, #592]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b04      	cmp	r3, #4
 8005026:	d019      	beq.n	800505c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005028:	4b91      	ldr	r3, [pc, #580]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005030:	2b08      	cmp	r3, #8
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005034:	4b8e      	ldr	r3, [pc, #568]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005040:	d00c      	beq.n	800505c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b8b      	ldr	r3, [pc, #556]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d112      	bne.n	8005074 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b88      	ldr	r3, [pc, #544]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b84      	ldr	r3, [pc, #528]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <HAL_RCC_OscConfig+0x124>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e25a      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x90>
 800507e:	4b7c      	ldr	r3, [pc, #496]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a7b      	ldr	r2, [pc, #492]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e01d      	b.n	80050c8 <HAL_RCC_OscConfig+0xcc>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0xb4>
 8005096:	4b76      	ldr	r3, [pc, #472]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a75      	ldr	r2, [pc, #468]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b73      	ldr	r3, [pc, #460]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a72      	ldr	r2, [pc, #456]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0xcc>
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a6e      	ldr	r2, [pc, #440]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6b      	ldr	r2, [pc, #428]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d013      	beq.n	80050f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fd fd1e 	bl	8002b10 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fd fd1a 	bl	8002b10 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e21f      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b61      	ldr	r3, [pc, #388]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0xdc>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd fd0a 	bl	8002b10 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005100:	f7fd fd06 	bl	8002b10 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e20b      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	4b57      	ldr	r3, [pc, #348]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x104>
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d06f      	beq.n	800520e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800512e:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800513a:	4b4d      	ldr	r3, [pc, #308]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005142:	2b08      	cmp	r3, #8
 8005144:	d105      	bne.n	8005152 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005146:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d11c      	bne.n	8005198 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b44      	ldr	r3, [pc, #272]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d116      	bne.n	8005198 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_RCC_OscConfig+0x186>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e1d3      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4937      	ldr	r1, [pc, #220]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	e03a      	b.n	800520e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d020      	beq.n	80051e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a0:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_RCC_OscConfig+0x278>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fd fcb3 	bl	8002b10 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fd fcaf 	bl	8002b10 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e1b4      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4925      	ldr	r1, [pc, #148]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]
 80051e0:	e015      	b.n	800520e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e2:	4b24      	ldr	r3, [pc, #144]	; (8005274 <HAL_RCC_OscConfig+0x278>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd fc92 	bl	8002b10 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f0:	f7fd fc8e 	bl	8002b10 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e193      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d036      	beq.n	8005288 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <HAL_RCC_OscConfig+0x27c>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fd fc72 	bl	8002b10 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005230:	f7fd fc6e 	bl	8002b10 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e173      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_OscConfig+0x274>)
 8005244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x234>
 800524e:	e01b      	b.n	8005288 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_RCC_OscConfig+0x27c>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fd fc5b 	bl	8002b10 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	e00e      	b.n	800527c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525e:	f7fd fc57 	bl	8002b10 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d907      	bls.n	800527c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e15c      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
 8005270:	40023800 	.word	0x40023800
 8005274:	42470000 	.word	0x42470000
 8005278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	4b8a      	ldr	r3, [pc, #552]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ea      	bne.n	800525e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8097 	beq.w	80053c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529a:	4b83      	ldr	r3, [pc, #524]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	4b7f      	ldr	r3, [pc, #508]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4a7e      	ldr	r2, [pc, #504]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6413      	str	r3, [r2, #64]	; 0x40
 80052b6:	4b7c      	ldr	r3, [pc, #496]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c6:	4b79      	ldr	r3, [pc, #484]	; (80054ac <HAL_RCC_OscConfig+0x4b0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d118      	bne.n	8005304 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d2:	4b76      	ldr	r3, [pc, #472]	; (80054ac <HAL_RCC_OscConfig+0x4b0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a75      	ldr	r2, [pc, #468]	; (80054ac <HAL_RCC_OscConfig+0x4b0>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052de:	f7fd fc17 	bl	8002b10 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e6:	f7fd fc13 	bl	8002b10 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e118      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x4b0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <HAL_RCC_OscConfig+0x31e>
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	4a65      	ldr	r2, [pc, #404]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6713      	str	r3, [r2, #112]	; 0x70
 8005318:	e01c      	b.n	8005354 <HAL_RCC_OscConfig+0x358>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b05      	cmp	r3, #5
 8005320:	d10c      	bne.n	800533c <HAL_RCC_OscConfig+0x340>
 8005322:	4b61      	ldr	r3, [pc, #388]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	4a60      	ldr	r2, [pc, #384]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6713      	str	r3, [r2, #112]	; 0x70
 800532e:	4b5e      	ldr	r3, [pc, #376]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a5d      	ldr	r2, [pc, #372]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
 800533a:	e00b      	b.n	8005354 <HAL_RCC_OscConfig+0x358>
 800533c:	4b5a      	ldr	r3, [pc, #360]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	6713      	str	r3, [r2, #112]	; 0x70
 8005348:	4b57      	ldr	r3, [pc, #348]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a56      	ldr	r2, [pc, #344]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800534e:	f023 0304 	bic.w	r3, r3, #4
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fd fbd8 	bl	8002b10 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fd fbd4 	bl	8002b10 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0d7      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537a:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ee      	beq.n	8005364 <HAL_RCC_OscConfig+0x368>
 8005386:	e014      	b.n	80053b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fd fbc2 	bl	8002b10 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	e00a      	b.n	80053a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fd fbbe 	bl	8002b10 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e0c1      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a6:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ee      	bne.n	8005390 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80053be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80ad 	beq.w	8005528 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d060      	beq.n	800549c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d145      	bne.n	800546e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <HAL_RCC_OscConfig+0x4b4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fd fb92 	bl	8002b10 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fd fb8e 	bl	8002b10 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e093      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	019b      	lsls	r3, r3, #6
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	3b01      	subs	r3, #1
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	061b      	lsls	r3, r3, #24
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	071b      	lsls	r3, r3, #28
 800543a:	491b      	ldr	r1, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x4b4>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fd fb63 	bl	8002b10 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544e:	f7fd fb5f 	bl	8002b10 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e064      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x452>
 800546c:	e05c      	b.n	8005528 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_RCC_OscConfig+0x4b4>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fd fb4c 	bl	8002b10 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fb48 	bl	8002b10 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04d      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x4ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x480>
 800549a:	e045      	b.n	8005528 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e040      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40007000 	.word	0x40007000
 80054b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b4:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <HAL_RCC_OscConfig+0x538>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d030      	beq.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d129      	bne.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d122      	bne.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d119      	bne.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	3b01      	subs	r3, #1
 80054fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d10f      	bne.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d107      	bne.n	8005524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800

08005538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e03f      	b.n	80055ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd f968 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fdc7 	bl	8006110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d165      	bne.n	80056ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Transmit_DMA+0x26>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e05e      	b.n	80056bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_UART_Transmit_DMA+0x38>
 8005608:	2302      	movs	r3, #2
 800560a:	e057      	b.n	80056bc <HAL_UART_Transmit_DMA+0xe8>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2221      	movs	r2, #33	; 0x21
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	4a22      	ldr	r2, [pc, #136]	; (80056c4 <HAL_UART_Transmit_DMA+0xf0>)
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <HAL_UART_Transmit_DMA+0xf4>)
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	4a20      	ldr	r2, [pc, #128]	; (80056cc <HAL_UART_Transmit_DMA+0xf8>)
 800564a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	2200      	movs	r2, #0
 8005652:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005654:	f107 0308 	add.w	r3, r7, #8
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3304      	adds	r3, #4
 8005668:	461a      	mov	r2, r3
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	f7fd fcba 	bl	8002fe4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005678:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a2:	627a      	str	r2, [r7, #36]	; 0x24
 80056a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6a39      	ldr	r1, [r7, #32]
 80056a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	08005c41 	.word	0x08005c41
 80056c8:	08005cdb 	.word	0x08005cdb
 80056cc:	08005cf7 	.word	0x08005cf7

080056d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b0ba      	sub	sp, #232	; 0xe8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800570e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_UART_IRQHandler+0x66>
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fc32 	bl	8005f98 <UART_Receive_IT>
      return;
 8005734:	e256      	b.n	8005be4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80de 	beq.w	80058fc <HAL_UART_IRQHandler+0x22c>
 8005740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800574c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005750:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80d1 	beq.w	80058fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <HAL_UART_IRQHandler+0xae>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <HAL_UART_IRQHandler+0xd2>
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0202 	orr.w	r2, r3, #2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_UART_IRQHandler+0xf6>
 80057ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0204 	orr.w	r2, r3, #4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d011      	beq.n	80057f6 <HAL_UART_IRQHandler+0x126>
 80057d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0208 	orr.w	r2, r3, #8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 81ed 	beq.w	8005bda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_UART_IRQHandler+0x14e>
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fbbd 	bl	8005f98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <HAL_UART_IRQHandler+0x17a>
 8005842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04f      	beq.n	80058ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fac5 	bl	8005dda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d141      	bne.n	80058e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800588a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800588e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1d9      	bne.n	800585e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d013      	beq.n	80058da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	4a7d      	ldr	r2, [pc, #500]	; (8005aac <HAL_UART_IRQHandler+0x3dc>)
 80058b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fd fc58 	bl	8003174 <HAL_DMA_Abort_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	e00e      	b.n	80058f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f99a 	bl	8005c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e00a      	b.n	80058f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f996 	bl	8005c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e006      	b.n	80058f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f992 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058f6:	e170      	b.n	8005bda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	bf00      	nop
    return;
 80058fa:	e16e      	b.n	8005bda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	f040 814a 	bne.w	8005b9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8143 	beq.w	8005b9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 813c 	beq.w	8005b9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	f040 80b4 	bne.w	8005ab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8140 	beq.w	8005bde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005966:	429a      	cmp	r2, r3
 8005968:	f080 8139 	bcs.w	8005bde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005972:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597e:	f000 8088 	beq.w	8005a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800599c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1d9      	bne.n	8005982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e1      	bne.n	80059ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e3      	bne.n	8005a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a74:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e3      	bne.n	8005a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd fb01 	bl	8003094 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8c0 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa8:	e099      	b.n	8005bde <HAL_UART_IRQHandler+0x50e>
 8005aaa:	bf00      	nop
 8005aac:	08005ea1 	.word	0x08005ea1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 808b 	beq.w	8005be2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8086 	beq.w	8005be2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005afa:	647a      	str	r2, [r7, #68]	; 0x44
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b32:	633a      	str	r2, [r7, #48]	; 0x30
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e3      	bne.n	8005b0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b78:	61fa      	str	r2, [r7, #28]
 8005b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	69b9      	ldr	r1, [r7, #24]
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	617b      	str	r3, [r7, #20]
   return(result);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e3      	bne.n	8005b54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f848 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b98:	e023      	b.n	8005be2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_UART_IRQHandler+0x4ea>
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f988 	bl	8005ec8 <UART_Transmit_IT>
    return;
 8005bb8:	e014      	b.n	8005be4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00e      	beq.n	8005be4 <HAL_UART_IRQHandler+0x514>
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9c8 	bl	8005f68 <UART_EndTransmit_IT>
    return;
 8005bd8:	e004      	b.n	8005be4 <HAL_UART_IRQHandler+0x514>
    return;
 8005bda:	bf00      	nop
 8005bdc:	e002      	b.n	8005be4 <HAL_UART_IRQHandler+0x514>
      return;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_UART_IRQHandler+0x514>
      return;
 8005be2:	bf00      	nop
  }
}
 8005be4:	37e8      	adds	r7, #232	; 0xe8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop

08005bec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b090      	sub	sp, #64	; 0x40
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d137      	bne.n	8005ccc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	2200      	movs	r2, #0
 8005c60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	623b      	str	r3, [r7, #32]
   return(result);
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c82:	633a      	str	r2, [r7, #48]	; 0x30
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb6:	61fa      	str	r2, [r7, #28]
 8005cb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cca:	e002      	b.n	8005cd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cce:	f7fa fc1b 	bl	8000508 <HAL_UART_TxCpltCallback>
}
 8005cd2:	bf00      	nop
 8005cd4:	3740      	adds	r7, #64	; 0x40
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff ff7f 	bl	8005bec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b80      	cmp	r3, #128	; 0x80
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b21      	cmp	r3, #33	; 0x21
 8005d28:	d108      	bne.n	8005d3c <UART_DMAError+0x46>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d36:	68b8      	ldr	r0, [r7, #8]
 8005d38:	f000 f827 	bl	8005d8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b22      	cmp	r3, #34	; 0x22
 8005d5c:	d108      	bne.n	8005d70 <UART_DMAError+0x7a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d6a:	68b8      	ldr	r0, [r7, #8]
 8005d6c:	f000 f835 	bl	8005dda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7c:	68b8      	ldr	r0, [r7, #8]
 8005d7e:	f7ff ff49 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b089      	sub	sp, #36	; 0x24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	61ba      	str	r2, [r7, #24]
 8005db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005dce:	bf00      	nop
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b095      	sub	sp, #84	; 0x54
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e02:	643a      	str	r2, [r7, #64]	; 0x40
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d119      	bne.n	8005e86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f023 0310 	bic.w	r3, r3, #16
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e72:	61ba      	str	r2, [r7, #24]
 8005e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6979      	ldr	r1, [r7, #20]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e94:	bf00      	nop
 8005e96:	3754      	adds	r7, #84	; 0x54
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff feaa 	bl	8005c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b21      	cmp	r3, #33	; 0x21
 8005eda:	d13e      	bne.n	8005f5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d114      	bne.n	8005f10 <UART_Transmit_IT+0x48>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d110      	bne.n	8005f10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]
 8005f0e:	e008      	b.n	8005f22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6211      	str	r1, [r2, #32]
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e000      	b.n	8005f5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fa fabd 	bl	8000508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08c      	sub	sp, #48	; 0x30
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b22      	cmp	r3, #34	; 0x22
 8005faa:	f040 80ab 	bne.w	8006104 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d117      	bne.n	8005fe8 <UART_Receive_IT+0x50>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe6:	e026      	b.n	8006036 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	d007      	beq.n	800600c <UART_Receive_IT+0x74>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <UART_Receive_IT+0x82>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e008      	b.n	800602c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4619      	mov	r1, r3
 8006044:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006046:	2b00      	cmp	r3, #0
 8006048:	d15a      	bne.n	8006100 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0220 	bic.w	r2, r2, #32
 8006058:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	2b01      	cmp	r3, #1
 8006088:	d135      	bne.n	80060f6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 0310 	bic.w	r3, r3, #16
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	623a      	str	r2, [r7, #32]
 80060b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	6a3a      	ldr	r2, [r7, #32]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d10a      	bne.n	80060e8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fd9a 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
 80060f4:	e002      	b.n	80060fc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fd82 	bl	8005c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e002      	b.n	8006106 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	e000      	b.n	8006106 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b0c0      	sub	sp, #256	; 0x100
 8006116:	af00      	add	r7, sp, #0
 8006118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	68d9      	ldr	r1, [r3, #12]
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	ea40 0301 	orr.w	r3, r0, r1
 8006138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	431a      	orrs	r2, r3
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	431a      	orrs	r2, r3
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006168:	f021 010c 	bic.w	r1, r1, #12
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006176:	430b      	orrs	r3, r1
 8006178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	6999      	ldr	r1, [r3, #24]
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	ea40 0301 	orr.w	r3, r0, r1
 8006196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b8f      	ldr	r3, [pc, #572]	; (80063dc <UART_SetConfig+0x2cc>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d005      	beq.n	80061b0 <UART_SetConfig+0xa0>
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b8d      	ldr	r3, [pc, #564]	; (80063e0 <UART_SetConfig+0x2d0>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d104      	bne.n	80061ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fe fce0 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 80061b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061b8:	e003      	b.n	80061c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ba:	f7fe fcc7 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 80061be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061cc:	f040 810c 	bne.w	80063e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061e2:	4622      	mov	r2, r4
 80061e4:	462b      	mov	r3, r5
 80061e6:	1891      	adds	r1, r2, r2
 80061e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ea:	415b      	adcs	r3, r3
 80061ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061f2:	4621      	mov	r1, r4
 80061f4:	eb12 0801 	adds.w	r8, r2, r1
 80061f8:	4629      	mov	r1, r5
 80061fa:	eb43 0901 	adc.w	r9, r3, r1
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800620e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006212:	4690      	mov	r8, r2
 8006214:	4699      	mov	r9, r3
 8006216:	4623      	mov	r3, r4
 8006218:	eb18 0303 	adds.w	r3, r8, r3
 800621c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006220:	462b      	mov	r3, r5
 8006222:	eb49 0303 	adc.w	r3, r9, r3
 8006226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800623a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800623e:	460b      	mov	r3, r1
 8006240:	18db      	adds	r3, r3, r3
 8006242:	653b      	str	r3, [r7, #80]	; 0x50
 8006244:	4613      	mov	r3, r2
 8006246:	eb42 0303 	adc.w	r3, r2, r3
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
 800624c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006254:	f7f9 ffd6 	bl	8000204 <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4b61      	ldr	r3, [pc, #388]	; (80063e4 <UART_SetConfig+0x2d4>)
 800625e:	fba3 2302 	umull	r2, r3, r3, r2
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	011c      	lsls	r4, r3, #4
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626a:	2200      	movs	r2, #0
 800626c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006280:	415b      	adcs	r3, r3
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006288:	4641      	mov	r1, r8
 800628a:	eb12 0a01 	adds.w	sl, r2, r1
 800628e:	4649      	mov	r1, r9
 8006290:	eb43 0b01 	adc.w	fp, r3, r1
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a8:	4692      	mov	sl, r2
 80062aa:	469b      	mov	fp, r3
 80062ac:	4643      	mov	r3, r8
 80062ae:	eb1a 0303 	adds.w	r3, sl, r3
 80062b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062b6:	464b      	mov	r3, r9
 80062b8:	eb4b 0303 	adc.w	r3, fp, r3
 80062bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062d4:	460b      	mov	r3, r1
 80062d6:	18db      	adds	r3, r3, r3
 80062d8:	643b      	str	r3, [r7, #64]	; 0x40
 80062da:	4613      	mov	r3, r2
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	647b      	str	r3, [r7, #68]	; 0x44
 80062e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ea:	f7f9 ff8b 	bl	8000204 <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <UART_SetConfig+0x2d4>)
 80062f6:	fba3 2301 	umull	r2, r3, r3, r1
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2264      	movs	r2, #100	; 0x64
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	1acb      	subs	r3, r1, r3
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800630a:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <UART_SetConfig+0x2d4>)
 800630c:	fba3 2302 	umull	r2, r3, r3, r2
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006318:	441c      	add	r4, r3
 800631a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	1891      	adds	r1, r2, r2
 8006332:	63b9      	str	r1, [r7, #56]	; 0x38
 8006334:	415b      	adcs	r3, r3
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800633c:	4641      	mov	r1, r8
 800633e:	1851      	adds	r1, r2, r1
 8006340:	6339      	str	r1, [r7, #48]	; 0x30
 8006342:	4649      	mov	r1, r9
 8006344:	414b      	adcs	r3, r1
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006354:	4659      	mov	r1, fp
 8006356:	00cb      	lsls	r3, r1, #3
 8006358:	4651      	mov	r1, sl
 800635a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800635e:	4651      	mov	r1, sl
 8006360:	00ca      	lsls	r2, r1, #3
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	4603      	mov	r3, r0
 8006368:	4642      	mov	r2, r8
 800636a:	189b      	adds	r3, r3, r2
 800636c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006370:	464b      	mov	r3, r9
 8006372:	460a      	mov	r2, r1
 8006374:	eb42 0303 	adc.w	r3, r2, r3
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800638c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006390:	460b      	mov	r3, r1
 8006392:	18db      	adds	r3, r3, r3
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
 8006396:	4613      	mov	r3, r2
 8006398:	eb42 0303 	adc.w	r3, r2, r3
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063a6:	f7f9 ff2d 	bl	8000204 <__aeabi_uldivmod>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <UART_SetConfig+0x2d4>)
 80063b0:	fba3 1302 	umull	r1, r3, r3, r2
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	2164      	movs	r1, #100	; 0x64
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	3332      	adds	r3, #50	; 0x32
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <UART_SetConfig+0x2d4>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	f003 0207 	and.w	r2, r3, #7
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4422      	add	r2, r4
 80063d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063d8:	e105      	b.n	80065e6 <UART_SetConfig+0x4d6>
 80063da:	bf00      	nop
 80063dc:	40011000 	.word	0x40011000
 80063e0:	40011400 	.word	0x40011400
 80063e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	1891      	adds	r1, r2, r2
 8006400:	6239      	str	r1, [r7, #32]
 8006402:	415b      	adcs	r3, r3
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
 8006406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800640a:	4641      	mov	r1, r8
 800640c:	1854      	adds	r4, r2, r1
 800640e:	4649      	mov	r1, r9
 8006410:	eb43 0501 	adc.w	r5, r3, r1
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	00eb      	lsls	r3, r5, #3
 800641e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006422:	00e2      	lsls	r2, r4, #3
 8006424:	4614      	mov	r4, r2
 8006426:	461d      	mov	r5, r3
 8006428:	4643      	mov	r3, r8
 800642a:	18e3      	adds	r3, r4, r3
 800642c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006430:	464b      	mov	r3, r9
 8006432:	eb45 0303 	adc.w	r3, r5, r3
 8006436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006456:	4629      	mov	r1, r5
 8006458:	008b      	lsls	r3, r1, #2
 800645a:	4621      	mov	r1, r4
 800645c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006460:	4621      	mov	r1, r4
 8006462:	008a      	lsls	r2, r1, #2
 8006464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006468:	f7f9 fecc 	bl	8000204 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4b60      	ldr	r3, [pc, #384]	; (80065f4 <UART_SetConfig+0x4e4>)
 8006472:	fba3 2302 	umull	r2, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	011c      	lsls	r4, r3, #4
 800647a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	1891      	adds	r1, r2, r2
 8006492:	61b9      	str	r1, [r7, #24]
 8006494:	415b      	adcs	r3, r3
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800649c:	4641      	mov	r1, r8
 800649e:	1851      	adds	r1, r2, r1
 80064a0:	6139      	str	r1, [r7, #16]
 80064a2:	4649      	mov	r1, r9
 80064a4:	414b      	adcs	r3, r1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b4:	4659      	mov	r1, fp
 80064b6:	00cb      	lsls	r3, r1, #3
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064be:	4651      	mov	r1, sl
 80064c0:	00ca      	lsls	r2, r1, #3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	4603      	mov	r3, r0
 80064c8:	4642      	mov	r2, r8
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d0:	464b      	mov	r3, r9
 80064d2:	460a      	mov	r2, r1
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80064e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064f4:	4649      	mov	r1, r9
 80064f6:	008b      	lsls	r3, r1, #2
 80064f8:	4641      	mov	r1, r8
 80064fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064fe:	4641      	mov	r1, r8
 8006500:	008a      	lsls	r2, r1, #2
 8006502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006506:	f7f9 fe7d 	bl	8000204 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4b39      	ldr	r3, [pc, #228]	; (80065f4 <UART_SetConfig+0x4e4>)
 8006510:	fba3 1302 	umull	r1, r3, r3, r2
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	2164      	movs	r1, #100	; 0x64
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	3332      	adds	r3, #50	; 0x32
 8006522:	4a34      	ldr	r2, [pc, #208]	; (80065f4 <UART_SetConfig+0x4e4>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652e:	441c      	add	r4, r3
 8006530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006534:	2200      	movs	r2, #0
 8006536:	673b      	str	r3, [r7, #112]	; 0x70
 8006538:	677a      	str	r2, [r7, #116]	; 0x74
 800653a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800653e:	4642      	mov	r2, r8
 8006540:	464b      	mov	r3, r9
 8006542:	1891      	adds	r1, r2, r2
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	415b      	adcs	r3, r3
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800654e:	4641      	mov	r1, r8
 8006550:	1851      	adds	r1, r2, r1
 8006552:	6039      	str	r1, [r7, #0]
 8006554:	4649      	mov	r1, r9
 8006556:	414b      	adcs	r3, r1
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006566:	4659      	mov	r1, fp
 8006568:	00cb      	lsls	r3, r1, #3
 800656a:	4651      	mov	r1, sl
 800656c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006570:	4651      	mov	r1, sl
 8006572:	00ca      	lsls	r2, r1, #3
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	4603      	mov	r3, r0
 800657a:	4642      	mov	r2, r8
 800657c:	189b      	adds	r3, r3, r2
 800657e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006580:	464b      	mov	r3, r9
 8006582:	460a      	mov	r2, r1
 8006584:	eb42 0303 	adc.w	r3, r2, r3
 8006588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	663b      	str	r3, [r7, #96]	; 0x60
 8006594:	667a      	str	r2, [r7, #100]	; 0x64
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065a2:	4649      	mov	r1, r9
 80065a4:	008b      	lsls	r3, r1, #2
 80065a6:	4641      	mov	r1, r8
 80065a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ac:	4641      	mov	r1, r8
 80065ae:	008a      	lsls	r2, r1, #2
 80065b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065b4:	f7f9 fe26 	bl	8000204 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <UART_SetConfig+0x4e4>)
 80065be:	fba3 1302 	umull	r1, r3, r3, r2
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	2164      	movs	r1, #100	; 0x64
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	3332      	adds	r3, #50	; 0x32
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <UART_SetConfig+0x4e4>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4422      	add	r2, r4
 80065e4:	609a      	str	r2, [r3, #8]
}
 80065e6:	bf00      	nop
 80065e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065ec:	46bd      	mov	sp, r7
 80065ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f2:	bf00      	nop
 80065f4:	51eb851f 	.word	0x51eb851f

080065f8 <__libc_init_array>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4d0d      	ldr	r5, [pc, #52]	; (8006630 <__libc_init_array+0x38>)
 80065fc:	4c0d      	ldr	r4, [pc, #52]	; (8006634 <__libc_init_array+0x3c>)
 80065fe:	1b64      	subs	r4, r4, r5
 8006600:	10a4      	asrs	r4, r4, #2
 8006602:	2600      	movs	r6, #0
 8006604:	42a6      	cmp	r6, r4
 8006606:	d109      	bne.n	800661c <__libc_init_array+0x24>
 8006608:	4d0b      	ldr	r5, [pc, #44]	; (8006638 <__libc_init_array+0x40>)
 800660a:	4c0c      	ldr	r4, [pc, #48]	; (800663c <__libc_init_array+0x44>)
 800660c:	f000 f820 	bl	8006650 <_init>
 8006610:	1b64      	subs	r4, r4, r5
 8006612:	10a4      	asrs	r4, r4, #2
 8006614:	2600      	movs	r6, #0
 8006616:	42a6      	cmp	r6, r4
 8006618:	d105      	bne.n	8006626 <__libc_init_array+0x2e>
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006620:	4798      	blx	r3
 8006622:	3601      	adds	r6, #1
 8006624:	e7ee      	b.n	8006604 <__libc_init_array+0xc>
 8006626:	f855 3b04 	ldr.w	r3, [r5], #4
 800662a:	4798      	blx	r3
 800662c:	3601      	adds	r6, #1
 800662e:	e7f2      	b.n	8006616 <__libc_init_array+0x1e>
 8006630:	08006c00 	.word	0x08006c00
 8006634:	08006c00 	.word	0x08006c00
 8006638:	08006c00 	.word	0x08006c00
 800663c:	08006c04 	.word	0x08006c04

08006640 <memset>:
 8006640:	4402      	add	r2, r0
 8006642:	4603      	mov	r3, r0
 8006644:	4293      	cmp	r3, r2
 8006646:	d100      	bne.n	800664a <memset+0xa>
 8006648:	4770      	bx	lr
 800664a:	f803 1b01 	strb.w	r1, [r3], #1
 800664e:	e7f9      	b.n	8006644 <memset+0x4>

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
