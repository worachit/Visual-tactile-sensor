
test_ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c14  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  08010e14  08010e14  00020e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a54  08013a54  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08013a54  08013a54  00023a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a5c  08013a5c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a5c  08013a5c  00023a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a60  08013a60  00023a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08013a64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ddc  20000078  08013adc  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e54  08013adc  00035e54  2**0
                  ALLOC
 11 .lwip_sec     0001cc48  20006458  20006458  00036458  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220cc  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005921  00000000  00000000  00052172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  00057a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00059198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034295  00000000  00000000  0005a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b8d  00000000  00000000  0008ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d945  00000000  00000000  000b75ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c4f2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000676c  00000000  00000000  001c4f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08010dfc 	.word	0x08010dfc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08010dfc 	.word	0x08010dfc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006bc:	f000 f988 	bl	80009d0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff90 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb4 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fc50 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f80e 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f8dc 	bl	800088c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006d4:	f000 f87c 	bl	80007d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d8:	f000 f8aa 	bl	8000830 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80006dc:	f004 fb8a 	bl	8004df4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80006e0:	f000 fbb8 	bl	8000e54 <udpServer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80006e4:	f004 fcb8 	bl	8005058 <MX_LWIP_Process>
 80006e8:	e7fc      	b.n	80006e4 <main+0x2c>
	...

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00f f972 	bl	800f9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000710:	f002 fac4 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <SystemClock_Config+0xdc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a2b      	ldr	r2, [pc, #172]	; (80007c8 <SystemClock_Config+0xdc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <SystemClock_Config+0xdc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xe0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	4a25      	ldr	r2, [pc, #148]	; (80007cc <SystemClock_Config+0xe0>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800074c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000760:	2360      	movs	r3, #96	; 0x60
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4618      	mov	r0, r3
 8000776:	f002 faf1 	bl	8002d5c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000780:	f000 f954 	bl	8000a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000784:	f002 fa9a 	bl	8002cbc <HAL_PWREx_EnableOverDrive>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800078e:	f000 f94d 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2103      	movs	r1, #3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fd82 	bl	80032b8 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007ba:	f000 f937 	bl	8000a2c <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART3_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x58>)
 8000814:	f003 fb9e 	bl	8003f54 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f905 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000094 	.word	0x20000094
 800082c:	40004800 	.word	0x40004800

08000830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	2206      	movs	r2, #6
 8000840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2201      	movs	r2, #1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	f002 f8c9 	bl	8002a0a <HAL_PCD_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8d5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000118 	.word	0x20000118

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a46      	ldr	r2, [pc, #280]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a40      	ldr	r2, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000938:	4822      	ldr	r0, [pc, #136]	; (80009c4 <MX_GPIO_Init+0x138>)
 800093a:	f002 f84d 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2140      	movs	r1, #64	; 0x40
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <MX_GPIO_Init+0x13c>)
 8000944:	f002 f848 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_GPIO_Init+0x140>)
 8000960:	f001 fe8e 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000964:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_GPIO_Init+0x138>)
 800097e:	f001 fe7f 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x13c>)
 800099a:	f001 fe71 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_GPIO_Init+0x13c>)
 80009b2:	f001 fe65 	bl	8002680 <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40020800 	.word	0x40020800

080009d0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009e2:	f000 fc5f 	bl	80012a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009e6:	2301      	movs	r3, #1
 80009e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MPU_Config+0x58>)
 80009f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80009f2:	230d      	movs	r3, #13
 80009f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009fe:	2303      	movs	r3, #3
 8000a00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a12:	463b      	mov	r3, r7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fc7d 	bl	8001314 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f000 fc5a 	bl	80012d4 <HAL_MPU_Enable>

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20020000 	.word	0x20020000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ae      	sub	sp, #184	; 0xb8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2290      	movs	r2, #144	; 0x90
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00e ff9f 	bl	800f9e4 <memset>
  if(huart->Instance==USART3)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <HAL_UART_MspInit+0xb4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13c      	bne.n	8000b2a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fe20 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aca:	f7ff ffaf 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000b26:	f001 fdab 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	37b8      	adds	r7, #184	; 0xb8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ae      	sub	sp, #184	; 0xb8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2290      	movs	r2, #144	; 0x90
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00e ff3f 	bl	800f9e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b6e:	d159      	bne.n	8000c24 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fdbf 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000b8c:	f7ff ff4e 	bl	8000a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ba8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc2:	230a      	movs	r3, #10
 8000bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <HAL_PCD_MspInit+0xf0>)
 8000bd0:	f001 fd56 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_PCD_MspInit+0xf0>)
 8000bf0:	f001 fd46 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfe:	6353      	str	r3, [r2, #52]	; 0x34
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6453      	str	r3, [r2, #68]	; 0x44
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_PCD_MspInit+0xec>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	37b8      	adds	r7, #184	; 0xb8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f9ba 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <ETH_IRQHandler+0x10>)
 8000c8e:	f000 ff5f 	bl	8001b50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000570 	.word	0x20000570

08000c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_kill>:

int _kill(int pid, int sig)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <_kill+0x20>)
 8000cb8:	2216      	movs	r2, #22
 8000cba:	601a      	str	r2, [r3, #0]
	return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20005e44 	.word	0x20005e44

08000cd0 <_exit>:

void _exit (int status)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ffe5 	bl	8000cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ce2:	e7fe      	b.n	8000ce2 <_exit+0x12>

08000ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
	}

return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
	}
	return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d205      	bcs.n	8000dfc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <_sbrk+0x6c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	20080000 	.word	0x20080000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	2000051c 	.word	0x2000051c
 8000e28:	20005e58 	.word	0x20005e58
 8000e2c:	20005e44 	.word	0x20005e44

08000e30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000e5a:	f00c fa59 	bl	800d310 <udp_new>
 8000e5e:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 169, 254, 224, 111);
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <udpServer_init+0x44>)
 8000e62:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2207      	movs	r2, #7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f00c f8d0 	bl	800d010 <udp_bind>
 8000e70:	4603      	mov	r3, r0
 8000e72:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000e74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4907      	ldr	r1, [pc, #28]	; (8000e9c <udpServer_init+0x48>)
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f00c f9e3 	bl	800d24c <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000e86:	e002      	b.n	8000e8e <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f00c f9ff 	bl	800d28c <udp_remove>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	6fe0fea9 	.word	0x6fe0fea9
 8000e9c:	08000ea1 	.word	0x08000ea1

08000ea0 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0a0      	sub	sp, #128	; 0x80
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
//	char *remoteIP = ipaddr_ntoa(addr);

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4917      	ldr	r1, [pc, #92]	; (8000f14 <udp_receive_callback+0x74>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00e fdf1 	bl	800faa0 <siprintf>
 8000ebe:	67f8      	str	r0, [r7, #124]	; 0x7c

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2036      	movs	r0, #54	; 0x36
 8000ecc:	f005 fc3a 	bl	8006744 <pbuf_alloc>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8000ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000ede:	f006 f981 	bl	80071e4 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000ee2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	68b8      	ldr	r0, [r7, #8]
 8000eec:	f00c f918 	bl	800d120 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000ef0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000ef2:	68b8      	ldr	r0, [r7, #8]
 8000ef4:	f00b fea2 	bl	800cc3c <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	f00c f97f 	bl	800d1fc <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000efe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f00:	f005 ff04 	bl	8006d0c <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f005 ff01 	bl	8006d0c <pbuf_free>
}
 8000f0a:	bf00      	nop
 8000f0c:	3780      	adds	r7, #128	; 0x80
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08010e14 	.word	0x08010e14

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff ff75 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f00e fcf1 	bl	800f92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fbb5 	bl	80006b8 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f5c:	08013a64 	.word	0x08013a64
  ldr r2, =_sbss
 8000f60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f64:	20005e54 	.word	0x20005e54

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x28>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x28>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94f 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fd56 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f967 	bl	800128a <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f92f 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000520 	.word	0x20000520

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000520 	.word	0x20000520

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	05fa0000 	.word	0x05fa0000

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012a8:	f3bf 8f5f 	dmb	sy
}
 80012ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_MPU_Disable+0x28>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_MPU_Disable+0x28>)
 80012b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_MPU_Disable+0x2c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	e000ed90 	.word	0xe000ed90

080012d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012dc:	4a0b      	ldr	r2, [pc, #44]	; (800130c <HAL_MPU_Enable+0x38>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MPU_Enable+0x3c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_MPU_Enable+0x3c>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012f2:	f3bf 8f4f 	dsb	sy
}
 80012f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f8:	f3bf 8f6f 	isb	sy
}
 80012fc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed90 	.word	0xe000ed90
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	785a      	ldrb	r2, [r3, #1]
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_MPU_ConfigRegion+0x84>)
 8001322:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d029      	beq.n	8001380 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800132c:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <HAL_MPU_ConfigRegion+0x84>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7b1b      	ldrb	r3, [r3, #12]
 8001338:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7adb      	ldrb	r3, [r3, #11]
 800133e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001340:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7a9b      	ldrb	r3, [r3, #10]
 8001346:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001348:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7b5b      	ldrb	r3, [r3, #13]
 800134e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001350:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7b9b      	ldrb	r3, [r3, #14]
 8001356:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001358:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7bdb      	ldrb	r3, [r3, #15]
 800135e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001360:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001368:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7a1b      	ldrb	r3, [r3, #8]
 800136e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001370:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800137a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800137c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800137e:	e005      	b.n	800138c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_MPU_ConfigRegion+0x84>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_MPU_ConfigRegion+0x84>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed90 	.word	0xe000ed90

0800139c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013ac:	4ba0      	ldr	r3, [pc, #640]	; (8001630 <HAL_ETH_Init+0x294>)
 80013ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e180      	b.n	80016c4 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f003 fe4a 	bl	8005070 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b95      	ldr	r3, [pc, #596]	; (8001634 <HAL_ETH_Init+0x298>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_ETH_Init+0x298>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_ETH_Init+0x298>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f4:	4b90      	ldr	r3, [pc, #576]	; (8001638 <HAL_ETH_Init+0x29c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a8f      	ldr	r2, [pc, #572]	; (8001638 <HAL_ETH_Init+0x29c>)
 80013fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001400:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <HAL_ETH_Init+0x29c>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	498b      	ldr	r1, [pc, #556]	; (8001638 <HAL_ETH_Init+0x29c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001424:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001426:	f7ff fdfb 	bl	8001020 <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800142c:	e011      	b.n	8001452 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800142e:	f7ff fdf7 	bl	8001020 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143c:	d909      	bls.n	8001452 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e138      	b.n	80016c4 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e4      	bne.n	800142e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f023 031c 	bic.w	r3, r3, #28
 8001472:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001474:	f002 f912 	bl	800369c <HAL_RCC_GetHCLKFreq>
 8001478:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a6f      	ldr	r2, [pc, #444]	; (800163c <HAL_ETH_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <HAL_ETH_Init+0xf8>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <HAL_ETH_Init+0x2a4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d804      	bhi.n	8001494 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e027      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <HAL_ETH_Init+0x2a4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d908      	bls.n	80014ae <HAL_ETH_Init+0x112>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4a64      	ldr	r2, [pc, #400]	; (8001630 <HAL_ETH_Init+0x294>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d204      	bcs.n	80014ae <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e01a      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <HAL_ETH_Init+0x294>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d303      	bcc.n	80014be <HAL_ETH_Init+0x122>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a62      	ldr	r2, [pc, #392]	; (8001644 <HAL_ETH_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d911      	bls.n	80014e2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a60      	ldr	r2, [pc, #384]	; (8001644 <HAL_ETH_Init+0x2a8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0x13c>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a5f      	ldr	r2, [pc, #380]	; (8001648 <HAL_ETH_Init+0x2ac>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e005      	b.n	80014e4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e000      	b.n	80014e4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fc16 	bl	8001d24 <HAL_ETH_WritePHYRegister>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fdcb 	bl	80020a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d6      	b.n	80016c4 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001516:	20ff      	movs	r0, #255	; 0xff
 8001518:	f7ff fd8e 	bl	8001038 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a4 	beq.w	800166e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001526:	f7ff fd7b 	bl	8001020 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fb8d 	bl	8001c54 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800153a:	f7ff fd71 	bl	8001020 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d90f      	bls.n	800156c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fda4 	bl	80020a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ab      	b.n	80016c4 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0da      	beq.n	800152c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fbd1 	bl	8001d24 <HAL_ETH_WritePHYRegister>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fd86 	bl	80020a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800159c:	2301      	movs	r3, #1
 800159e:	e091      	b.n	80016c4 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fd3e 	bl	8001020 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	461a      	mov	r2, r3
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fb50 	bl	8001c54 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015b4:	f7ff fd34 	bl	8001020 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d90f      	bls.n	80015e6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fd67 	bl	80020a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e06e      	b.n	80016c4 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0da      	beq.n	80015a6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	461a      	mov	r2, r3
 80015f6:	2110      	movs	r1, #16
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fb2b 	bl	8001c54 <HAL_ETH_ReadPHYRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fd48 	bl	80020a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001618:	2301      	movs	r3, #1
 800161a:	e053      	b.n	80016c4 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e010      	b.n	8001652 <HAL_ETH_Init+0x2b6>
 8001630:	03938700 	.word	0x03938700
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800
 800163c:	01312cff 	.word	0x01312cff
 8001640:	02160ebf 	.word	0x02160ebf
 8001644:	05f5e0ff 	.word	0x05f5e0ff
 8001648:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	e026      	b.n	80016b2 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	e021      	b.n	80016b2 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	08db      	lsrs	r3, r3, #3
 8001674:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800167e:	4313      	orrs	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fb4c 	bl	8001d24 <HAL_ETH_WritePHYRegister>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fd01 	bl	80020a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00c      	b.n	80016c4 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016aa:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016ae:	f7ff fcc3 	bl	8001038 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b2:	6939      	ldr	r1, [r7, #16]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fcf3 	bl	80020a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ETH_DMATxDescListInit+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e051      	b.n	8001790 <HAL_ETH_DMATxDescListInit+0xc4>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e030      	b.n	800176a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3b01      	subs	r3, #1
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	d208      	bcs.n	800175e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	015b      	lsls	r3, r3, #5
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e002      	b.n	8001764 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3ca      	bcc.n	8001708 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ETH_DMARxDescListInit+0x20>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e055      	b.n	8001868 <HAL_ETH_DMARxDescListInit+0xcc>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	e034      	b.n	8001842 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017e8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017f0:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	d208      	bcs.n	8001836 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4413      	add	r3, r2
 800182e:	461a      	mov	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	e002      	b.n	800183c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3c6      	bcc.n	80017d8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001854:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_ETH_TransmitFrame+0x24>
 8001894:	2302      	movs	r3, #2
 8001896:	e0cc      	b.n	8001a32 <HAL_ETH_TransmitFrame+0x1be>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018be:	2301      	movs	r3, #1
 80018c0:	e0b7      	b.n	8001a32 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da09      	bge.n	80018e0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2212      	movs	r2, #18
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0a8      	b.n	8001a32 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d915      	bls.n	8001916 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <HAL_ETH_TransmitFrame+0x1cc>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a9b      	lsrs	r3, r3, #10
 80018f4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4b51      	ldr	r3, [pc, #324]	; (8001a40 <HAL_ETH_TransmitFrame+0x1cc>)
 80018fa:	fba3 1302 	umull	r1, r3, r3, r2
 80018fe:	0a9b      	lsrs	r3, r3, #10
 8001900:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e001      	b.n	800191a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001916:	2301      	movs	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d11c      	bne.n	800195a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800192e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800193a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800194a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
 8001958:	e04b      	b.n	80019f2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e044      	b.n	80019ea <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800196e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001984:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800198e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3b01      	subs	r3, #1
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	d116      	bne.n	80019c8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019a8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_ETH_TransmitFrame+0x1d0>)
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019ba:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019c6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	3301      	adds	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3b6      	bcc.n	8001960 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00d      	beq.n	8001a20 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2304      	movs	r3, #4
 8001a10:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	ac02b00b 	.word	0xac02b00b
 8001a44:	fffffa0c 	.word	0xfffffa0c

08001a48 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ETH_GetReceivedFrame+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e070      	b.n	8001b44 <HAL_ETH_GetReceivedFrame+0xfc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db5a      	blt.n	8001b32 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d030      	beq.n	8001aec <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d103      	bne.n	8001aa4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ab8:	3b04      	subs	r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e02b      	b.n	8001b44 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
 8001b1a:	e00a      	b.n	8001b32 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	2b40      	cmp	r3, #64	; 0x40
 8001b68:	d112      	bne.n	8001b90 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f85e 	bl	8001c2c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2340      	movs	r3, #64	; 0x40
 8001b7c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b8e:	e01a      	b.n	8001bc6 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d111      	bne.n	8001bc6 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f838 	bl	8001c18 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd4:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be8:	d112      	bne.n	8001c10 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f828 	bl	8001c40 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfe:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b82      	cmp	r3, #130	; 0x82
 8001c74:	d101      	bne.n	8001c7a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
 8001c78:	e050      	b.n	8001d1c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2282      	movs	r2, #130	; 0x82
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 031c 	and.w	r3, r3, #28
 8001c90:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8a1b      	ldrh	r3, [r3, #16]
 8001c96:	02db      	lsls	r3, r3, #11
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f023 0302 	bic.w	r3, r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc6:	f7ff f9ab 	bl	8001020 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ccc:	e015      	b.n	8001cfa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cce:	f7ff f9a7 	bl	8001020 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d309      	bcc.n	8001cf2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e014      	b.n	8001d1c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e4      	bne.n	8001cce <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b42      	cmp	r3, #66	; 0x42
 8001d44:	d101      	bne.n	8001d4a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	e04e      	b.n	8001de8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2242      	movs	r2, #66	; 0x42
 8001d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 031c 	and.w	r3, r3, #28
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8a1b      	ldrh	r3, [r3, #16]
 8001d66:	02db      	lsls	r3, r3, #11
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	019b      	lsls	r3, r3, #6
 8001d74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff f93e 	bl	8001020 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da6:	e015      	b.n	8001dd4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001da8:	f7ff f93a 	bl	8001020 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d309      	bcc.n	8001dcc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e00d      	b.n	8001de8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e4      	bne.n	8001da8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ETH_Start+0x16>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e01f      	b.n	8001e46 <HAL_ETH_Start+0x56>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fb40 	bl	800249c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb77 	bl	8002510 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fc06 	bl	8002634 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fbab 	bl	8002584 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fbd4 	bl	80025dc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ETH_Stop+0x16>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e01f      	b.n	8001ea4 <HAL_ETH_Stop+0x56>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fb9b 	bl	80025b0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fbc4 	bl	8002608 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb62 	bl	800254a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fbd4 	bl	8002634 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb22 	bl	80024d6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ETH_ConfigMAC+0x1c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0e4      	b.n	8002092 <HAL_ETH_ConfigMAC+0x1e6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b1 	beq.w	8002042 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <HAL_ETH_ConfigMAC+0x1f0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ef8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001efe:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f04:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f0a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f10:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f16:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f1c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f22:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f28:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f2e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f34:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f3a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff f870 	bl	8001038 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f68:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f6e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f74:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f7a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f80:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f86:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f92:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f94:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f84a 	bl	8001038 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fb4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fbe:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fdc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fe2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fe8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001fee:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ff4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff f813 	bl	8001038 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff f800 	bl	8001038 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	61da      	str	r2, [r3, #28]
 8002040:	e01e      	b.n	8002080 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002050:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002072:	2001      	movs	r0, #1
 8002074:	f7fe ffe0 	bl	8001038 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	ff20810f 	.word	0xff20810f

080020a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0b0      	sub	sp, #192	; 0xc0
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	663b      	str	r3, [r7, #96]	; 0x60
 80020ec:	e001      	b.n	80020f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020fc:	2300      	movs	r3, #0
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800210c:	2340      	movs	r3, #64	; 0x40
 800210e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002178:	4ba9      	ldr	r3, [pc, #676]	; (8002420 <ETH_MACDMAConfig+0x380>)
 800217a:	4013      	ands	r3, r2
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002180:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002184:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002188:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800218a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800218c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002192:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002196:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800219a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021a0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021a4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021a8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021ac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021b0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe ff2f 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021e8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021ec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021f2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021f8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021fe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002204:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002208:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002210:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002212:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe ff0a 	bl	8001038 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002236:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002240:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800224c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002250:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002254:	4013      	ands	r3, r2
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800225a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800225e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002264:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800226a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800226c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002270:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002276:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800227c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800227e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002290:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800229c:	2001      	movs	r0, #1
 800229e:	f7fe fecb 	bl	8001038 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022aa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7fe feb6 	bl	8001038 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022de:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022e8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022fa:	2304      	movs	r3, #4
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800230a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002314:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800231a:	2300      	movs	r3, #0
 800231c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800231e:	2300      	movs	r3, #0
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002330:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <ETH_MACDMAConfig+0x384>)
 8002336:	4013      	ands	r3, r2
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800233c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800233e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002340:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002342:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002344:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002346:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002348:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800234a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800234c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800234e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002350:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002352:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002354:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002358:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800235c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800235e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	461a      	mov	r2, r3
 8002372:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002376:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe fe56 	bl	8001038 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	461a      	mov	r2, r3
 8002396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800239a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023a0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023a4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023ac:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023b2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023b6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7fe fe2f 	bl	8001038 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e2:	461a      	mov	r2, r3
 80023e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023e8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10b      	bne.n	800240a <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fa:	69d9      	ldr	r1, [r3, #28]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <ETH_MACDMAConfig+0x388>)
 8002402:	430b      	orrs	r3, r1
 8002404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002408:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	461a      	mov	r2, r3
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f80a 	bl	800242c <ETH_MACAddressConfig>
}
 8002418:	bf00      	nop
 800241a:	37c0      	adds	r7, #192	; 0xc0
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	ff20810f 	.word	0xff20810f
 8002424:	f8de3f23 	.word	0xf8de3f23
 8002428:	00010040 	.word	0x00010040

0800242c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3305      	adds	r3, #5
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3204      	adds	r2, #4
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <ETH_MACAddressConfig+0x68>)
 800244e:	4413      	add	r3, r2
 8002450:	461a      	mov	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3303      	adds	r3, #3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	061a      	lsls	r2, r3, #24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	4313      	orrs	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <ETH_MACAddressConfig+0x6c>)
 800247e:	4413      	add	r3, r2
 8002480:	461a      	mov	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40028040 	.word	0x40028040
 8002498:	40028044 	.word	0x40028044

0800249c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe fdb9 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe fd9c 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0204 	orr.w	r2, r2, #4
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002534:	2001      	movs	r0, #1
 8002536:	f7fe fd7f 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0204 	bic.w	r2, r2, #4
 8002564:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe fd62 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025a2:	6193      	str	r3, [r2, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ce:	6193      	str	r3, [r2, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025fa:	6193      	str	r3, [r2, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f023 0302 	bic.w	r3, r3, #2
 8002622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002626:	6193      	str	r3, [r2, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002656:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002664:	2001      	movs	r0, #1
 8002666:	f7fe fce7 	bl	8001038 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002674:	6193      	str	r3, [r2, #24]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e175      	b.n	800298c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8164 	bne.w	8002986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x56>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80be 	beq.w	8002986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_GPIO_Init+0x324>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_GPIO_Init+0x324>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002822:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_GPIO_Init+0x328>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_GPIO_Init+0x334>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <HAL_GPIO_Init+0x338>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a54      	ldr	r2, [pc, #336]	; (80029bc <HAL_GPIO_Init+0x33c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <HAL_GPIO_Init+0x340>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x22a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_GPIO_Init+0x344>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a51      	ldr	r2, [pc, #324]	; (80029c8 <HAL_GPIO_Init+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a50      	ldr	r2, [pc, #320]	; (80029cc <HAL_GPIO_Init+0x34c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4f      	ldr	r2, [pc, #316]	; (80029d0 <HAL_GPIO_Init+0x350>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x21a>
 8002896:	2309      	movs	r3, #9
 8002898:	e012      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289a:	230a      	movs	r3, #10
 800289c:	e010      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00e      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	; (80029a8 <HAL_GPIO_Init+0x328>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_GPIO_Init+0x354>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <HAL_GPIO_Init+0x354>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_GPIO_Init+0x354>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1f      	ldr	r2, [pc, #124]	; (80029d4 <HAL_GPIO_Init+0x354>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_GPIO_Init+0x354>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_GPIO_Init+0x354>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae86 	bls.w	80026a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40022400 	.word	0x40022400
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029f4:	e003      	b.n	80029fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	041a      	lsls	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	619a      	str	r2, [r3, #24]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0c:	b08f      	sub	sp, #60	; 0x3c
 8002a0e:	af0a      	add	r7, sp, #40	; 0x28
 8002a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e116      	b.n	8002c4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f882 	bl	8000b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 ff34 	bl	80048c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	687e      	ldr	r6, [r7, #4]
 8002a68:	466d      	mov	r5, sp
 8002a6a:	f106 0410 	add.w	r4, r6, #16
 8002a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a7e:	1d33      	adds	r3, r6, #4
 8002a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a82:	6838      	ldr	r0, [r7, #0]
 8002a84:	f001 fec8 	bl	8004818 <USB_CoreInit>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0d7      	b.n	8002c4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 ff22 	bl	80048ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e04a      	b.n	8002b42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	333d      	adds	r3, #61	; 0x3d
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	333c      	adds	r3, #60	; 0x3c
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	b298      	uxth	r0, r3
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3342      	adds	r3, #66	; 0x42
 8002ae8:	4602      	mov	r2, r0
 8002aea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	333f      	adds	r3, #63	; 0x3f
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3344      	adds	r3, #68	; 0x44
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3348      	adds	r3, #72	; 0x48
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3350      	adds	r3, #80	; 0x50
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3af      	bcc.n	8002aac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e044      	b.n	8002bdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3b5      	bcc.n	8002b52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	687e      	ldr	r6, [r7, #4]
 8002bee:	466d      	mov	r5, sp
 8002bf0:	f106 0410 	add.w	r4, r6, #16
 8002bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c04:	1d33      	adds	r3, r6, #4
 8002c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c08:	6838      	ldr	r0, [r7, #0]
 8002c0a:	f001 febb 	bl	8004984 <USB_DevInit>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e014      	b.n	8002c4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f80b 	bl	8002c54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 f875 	bl	8004d32 <USB_DevDisconnect>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	10000003 	.word	0x10000003

08002c9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cea:	f7fe f999 	bl	8001020 <HAL_GetTick>
 8002cee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cf0:	e009      	b.n	8002d06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf2:	f7fe f995 	bl	8001020 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d00:	d901      	bls.n	8002d06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e022      	b.n	8002d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d20:	f7fe f97e 	bl	8001020 <HAL_GetTick>
 8002d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d26:	e009      	b.n	8002d3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d28:	f7fe f97a 	bl	8001020 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d36:	d901      	bls.n	8002d3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e007      	b.n	8002d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d48:	d1ee      	bne.n	8002d28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e29b      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8c:	4b93      	ldr	r3, [pc, #588]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d112      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62>
 8002d98:	4b90      	ldr	r3, [pc, #576]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x130>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d168      	bne.n	8002e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e275      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x7a>
 8002dc8:	4b84      	ldr	r3, [pc, #528]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a83      	ldr	r2, [pc, #524]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x9c>
 8002dde:	4b7f      	ldr	r3, [pc, #508]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7e      	ldr	r2, [pc, #504]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b7c      	ldr	r3, [pc, #496]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7b      	ldr	r2, [pc, #492]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e02:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a75      	ldr	r2, [pc, #468]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b73      	ldr	r3, [pc, #460]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a72      	ldr	r2, [pc, #456]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b6c      	ldr	r3, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f8f0 	bl	8001020 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe f8ec 	bl	8001020 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e229      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe f8dc 	bl	8001020 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe f8d8 	bl	8001020 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e215      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x110>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d069      	beq.n	8002f6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9a:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x190>
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1e9      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	493d      	ldr	r1, [pc, #244]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e040      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d023      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe f88e 	bl	8001020 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe f88a 	bl	8001020 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1c7      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4929      	ldr	r1, [pc, #164]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f86a 	bl	8001020 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe f866 	bl	8001020 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1a3      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d038      	beq.n	8002fec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d019      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f847 	bl	8001020 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe f843 	bl	8001020 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e180      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x23a>
 8002fb4:	e01a      	b.n	8002fec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f82d 	bl	8001020 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe f829 	bl	8001020 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d903      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e166      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
 8002fdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b92      	ldr	r3, [pc, #584]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a4 	beq.w	8003142 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b8c      	ldr	r3, [pc, #560]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a88      	ldr	r2, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b86      	ldr	r3, [pc, #536]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b83      	ldr	r3, [pc, #524]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800302e:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7f      	ldr	r2, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fd fff1 	bl	8001020 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fd ffed 	bl	8001020 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	; 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e12a      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	4b76      	ldr	r3, [pc, #472]	; (8003230 <HAL_RCC_OscConfig+0x4d4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x31a>
 8003068:	4b70      	ldr	r3, [pc, #448]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a6f      	ldr	r2, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	e02d      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x33c>
 800307e:	4b6b      	ldr	r3, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a67      	ldr	r2, [pc, #412]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	e01c      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0x35e>
 80030a0:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a61      	ldr	r2, [pc, #388]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a5e      	ldr	r2, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a5b      	ldr	r2, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fd ffa1 	bl	8001020 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fd ff9d 	bl	8001020 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0d8      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ee      	beq.n	80030e2 <HAL_RCC_OscConfig+0x386>
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd ff8b 	bl	8001020 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fd ff87 	bl	8001020 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0c2      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a3c      	ldr	r2, [pc, #240]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80ae 	beq.w	80032a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d06d      	beq.n	8003234 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d14b      	bne.n	80031f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd ff58 	bl	8001020 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fd ff54 	bl	8001020 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e091      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	491b      	ldr	r1, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd ff26 	bl	8001020 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fd ff22 	bl	8001020 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e05f      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x47c>
 80031f6:	e057      	b.n	80032a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fd ff0c 	bl	8001020 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fd ff08 	bl	8001020 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e045      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x4b0>
 800322a:	e03d      	b.n	80032a8 <HAL_RCC_OscConfig+0x54c>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <HAL_RCC_OscConfig+0x558>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d030      	beq.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d129      	bne.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d122      	bne.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800326c:	4293      	cmp	r3, r2
 800326e:	d119      	bne.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d10f      	bne.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0d0      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d910      	bls.n	8003300 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 020f 	bic.w	r2, r3, #15
 80032e6:	4965      	ldr	r1, [pc, #404]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0b8      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a58      	ldr	r2, [pc, #352]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800333a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	494d      	ldr	r1, [pc, #308]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d040      	beq.n	80033dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d115      	bne.n	800339a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e07f      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e073      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06b      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 0203 	bic.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4936      	ldr	r1, [pc, #216]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ac:	f7fd fe38 	bl	8001020 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b4:	f7fd fe34 	bl	8001020 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e053      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 020c 	and.w	r2, r3, #12
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	429a      	cmp	r2, r3
 80033da:	d1eb      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d210      	bcs.n	800340c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	4922      	ldr	r1, [pc, #136]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e032      	b.n	8003472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344a:	f000 f821 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800344e:	4602      	mov	r2, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	490a      	ldr	r1, [pc, #40]	; (8003484 <HAL_RCC_ClockConfig+0x1cc>)
 800345c:	5ccb      	ldrb	r3, [r1, r3]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1d0>)
 8003464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1d4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fd94 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00
 8003480:	40023800 	.word	0x40023800
 8003484:	08013810 	.word	0x08013810
 8003488:	20000000 	.word	0x20000000
 800348c:	20000004 	.word	0x20000004

08003490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b094      	sub	sp, #80	; 0x50
 8003496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
 800349c:	2300      	movs	r3, #0
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a0:	2300      	movs	r3, #0
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x40>
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	f200 80e1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x34>
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x3a>
 80034c2:	e0db      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c8:	e0db      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ca:	4b73      	ldr	r3, [pc, #460]	; (8003698 <HAL_RCC_GetSysClockFreq+0x208>)
 80034cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ce:	e0d8      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e6:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	2200      	movs	r2, #0
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
 80034fa:	2300      	movs	r3, #0
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003502:	4622      	mov	r2, r4
 8003504:	462b      	mov	r3, r5
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	0159      	lsls	r1, r3, #5
 8003510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003514:	0150      	lsls	r0, r2, #5
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4621      	mov	r1, r4
 800351c:	1a51      	subs	r1, r2, r1
 800351e:	6139      	str	r1, [r7, #16]
 8003520:	4629      	mov	r1, r5
 8003522:	eb63 0301 	sbc.w	r3, r3, r1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003534:	4659      	mov	r1, fp
 8003536:	018b      	lsls	r3, r1, #6
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353e:	4651      	mov	r1, sl
 8003540:	018a      	lsls	r2, r1, #6
 8003542:	4651      	mov	r1, sl
 8003544:	ebb2 0801 	subs.w	r8, r2, r1
 8003548:	4659      	mov	r1, fp
 800354a:	eb63 0901 	sbc.w	r9, r3, r1
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800355a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003562:	4690      	mov	r8, r2
 8003564:	4699      	mov	r9, r3
 8003566:	4623      	mov	r3, r4
 8003568:	eb18 0303 	adds.w	r3, r8, r3
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	462b      	mov	r3, r5
 8003570:	eb49 0303 	adc.w	r3, r9, r3
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003582:	4629      	mov	r1, r5
 8003584:	024b      	lsls	r3, r1, #9
 8003586:	4621      	mov	r1, r4
 8003588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800358c:	4621      	mov	r1, r4
 800358e:	024a      	lsls	r2, r1, #9
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	2200      	movs	r2, #0
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a0:	f7fc fe9e 	bl	80002e0 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	e058      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	4611      	mov	r1, r2
 80035ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0159      	lsls	r1, r3, #5
 80035d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035da:	0150      	lsls	r0, r2, #5
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4641      	mov	r1, r8
 80035e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003600:	ebb2 040a 	subs.w	r4, r2, sl
 8003604:	eb63 050b 	sbc.w	r5, r3, fp
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	464b      	mov	r3, r9
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	61fa      	str	r2, [r7, #28]
 8003650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003654:	f7fc fe44 	bl	80002e0 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0x200>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetSysClockFreq+0x204>)
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003684:	4618      	mov	r0, r3
 8003686:	3750      	adds	r7, #80	; 0x50
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200

0800369c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08013820 	.word	0x08013820

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	08013820 	.word	0x08013820

08003704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d012      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a68      	ldr	r2, [pc, #416]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	4964      	ldr	r1, [pc, #400]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	4959      	ldr	r1, [pc, #356]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800379a:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	494a      	ldr	r1, [pc, #296]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 808b 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	4a39      	ldr	r2, [pc, #228]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6413      	str	r3, [r2, #64]	; 0x40
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a34      	ldr	r2, [pc, #208]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd fc08 	bl	8001020 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fd fc04 	bl	8001020 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e38f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d035      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d02e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d114      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fbcc 	bl	8001020 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fd fbc8 	bl	8001020 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e351      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ba:	d111      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	4901      	ldr	r1, [pc, #4]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000
 80038dc:	0ffffcff 	.word	0x0ffffcff
 80038e0:	4bac      	ldr	r3, [pc, #688]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4aab      	ldr	r2, [pc, #684]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ea:	6093      	str	r3, [r2, #8]
 80038ec:	4ba9      	ldr	r3, [pc, #676]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	49a6      	ldr	r1, [pc, #664]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800390a:	4ba2      	ldr	r3, [pc, #648]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	4aa0      	ldr	r2, [pc, #640]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003916:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800391a:	4b9e      	ldr	r3, [pc, #632]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	499b      	ldr	r1, [pc, #620]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003938:	4b96      	ldr	r3, [pc, #600]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003946:	4993      	ldr	r1, [pc, #588]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800395a:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003968:	498a      	ldr	r1, [pc, #552]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800397c:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	4982      	ldr	r1, [pc, #520]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800399e:	4b7d      	ldr	r3, [pc, #500]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4979      	ldr	r1, [pc, #484]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c0:	4b74      	ldr	r3, [pc, #464]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4971      	ldr	r1, [pc, #452]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f023 020c 	bic.w	r2, r3, #12
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	4968      	ldr	r1, [pc, #416]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a04:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	4960      	ldr	r1, [pc, #384]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	4957      	ldr	r1, [pc, #348]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a48:	4b52      	ldr	r3, [pc, #328]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	494f      	ldr	r1, [pc, #316]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	4946      	ldr	r1, [pc, #280]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	493e      	ldr	r1, [pc, #248]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	4935      	ldr	r1, [pc, #212]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ad0:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ade:	492d      	ldr	r1, [pc, #180]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b00:	4924      	ldr	r1, [pc, #144]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	4914      	ldr	r1, [pc, #80]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b64:	490b      	ldr	r1, [pc, #44]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b88:	4902      	ldr	r1, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003baa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	4986      	ldr	r1, [pc, #536]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00b      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	497d      	ldr	r1, [pc, #500]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d006      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80d6 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bf4:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fd fa0e 	bl	8001020 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c08:	f7fd fa0a 	bl	8001020 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e195      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11d      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c3a:	4b65      	ldr	r3, [pc, #404]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4e:	0e1b      	lsrs	r3, r3, #24
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	019a      	lsls	r2, r3, #6
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	071b      	lsls	r3, r3, #28
 8003c6e:	4958      	ldr	r1, [pc, #352]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d129      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb0:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb6:	0f1b      	lsrs	r3, r3, #28
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	019a      	lsls	r2, r3, #6
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	071b      	lsls	r3, r3, #28
 8003cd6:	493e      	ldr	r1, [pc, #248]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce4:	f023 021f 	bic.w	r2, r3, #31
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	3b01      	subs	r3, #1
 8003cee:	4938      	ldr	r1, [pc, #224]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01d      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	0f1b      	lsrs	r3, r3, #28
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	019a      	lsls	r2, r3, #6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	4926      	ldr	r1, [pc, #152]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d011      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	019a      	lsls	r2, r3, #6
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	071b      	lsls	r3, r3, #28
 8003d66:	491a      	ldr	r1, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7a:	f7fd f951 	bl	8001020 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d82:	f7fd f94d 	bl	8001020 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0d8      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 80ce 	bne.w	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd f934 	bl	8001020 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dbc:	f7fd f930 	bl	8001020 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d904      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0bb      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dd4:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de0:	d0ec      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02e      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d12a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e0a:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e18:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	0f1b      	lsrs	r3, r3, #28
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	019a      	lsls	r2, r3, #6
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	4944      	ldr	r1, [pc, #272]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e46:	4b42      	ldr	r3, [pc, #264]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	493d      	ldr	r1, [pc, #244]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d022      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e74:	d11d      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	0e1b      	lsrs	r3, r3, #24
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e84:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	0f1b      	lsrs	r3, r3, #28
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	019a      	lsls	r2, r3, #6
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	071b      	lsls	r3, r3, #28
 8003eaa:	4929      	ldr	r1, [pc, #164]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	0e1b      	lsrs	r3, r3, #24
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	019a      	lsls	r2, r3, #6
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	071b      	lsls	r3, r3, #28
 8003ef2:	4917      	ldr	r1, [pc, #92]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4911      	ldr	r1, [pc, #68]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fd f880 	bl	8001020 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f24:	f7fd f87c 	bl	8001020 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e007      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f42:	d1ef      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e040      	b.n	8003fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fd82 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	; 0x24
 8003f80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f82c 	bl	8003ff0 <UART_SetConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e022      	b.n	8003fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa84 	bl	80044b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb0b 	bl	80045fc <UART_CheckIdleState>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4ba6      	ldr	r3, [pc, #664]	; (80042b4 <UART_SetConfig+0x2c4>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6979      	ldr	r1, [r7, #20]
 8004024:	430b      	orrs	r3, r1
 8004026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a94      	ldr	r2, [pc, #592]	; (80042b8 <UART_SetConfig+0x2c8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d120      	bne.n	80040ae <UART_SetConfig+0xbe>
 800406c:	4b93      	ldr	r3, [pc, #588]	; (80042bc <UART_SetConfig+0x2cc>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b03      	cmp	r3, #3
 8004078:	d816      	bhi.n	80040a8 <UART_SetConfig+0xb8>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0x90>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	0800409d 	.word	0x0800409d
 8004088:	08004097 	.word	0x08004097
 800408c:	080040a3 	.word	0x080040a3
 8004090:	2301      	movs	r3, #1
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e150      	b.n	8004338 <UART_SetConfig+0x348>
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e14d      	b.n	8004338 <UART_SetConfig+0x348>
 800409c:	2304      	movs	r3, #4
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e14a      	b.n	8004338 <UART_SetConfig+0x348>
 80040a2:	2308      	movs	r3, #8
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e147      	b.n	8004338 <UART_SetConfig+0x348>
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e144      	b.n	8004338 <UART_SetConfig+0x348>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a83      	ldr	r2, [pc, #524]	; (80042c0 <UART_SetConfig+0x2d0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d132      	bne.n	800411e <UART_SetConfig+0x12e>
 80040b8:	4b80      	ldr	r3, [pc, #512]	; (80042bc <UART_SetConfig+0x2cc>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d828      	bhi.n	8004118 <UART_SetConfig+0x128>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <UART_SetConfig+0xdc>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	08004101 	.word	0x08004101
 80040d0:	08004119 	.word	0x08004119
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004119 	.word	0x08004119
 80040dc:	0800410d 	.word	0x0800410d
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004119 	.word	0x08004119
 80040e8:	08004119 	.word	0x08004119
 80040ec:	08004107 	.word	0x08004107
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004119 	.word	0x08004119
 80040fc:	08004113 	.word	0x08004113
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e118      	b.n	8004338 <UART_SetConfig+0x348>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e115      	b.n	8004338 <UART_SetConfig+0x348>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e112      	b.n	8004338 <UART_SetConfig+0x348>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e10f      	b.n	8004338 <UART_SetConfig+0x348>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e10c      	b.n	8004338 <UART_SetConfig+0x348>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a68      	ldr	r2, [pc, #416]	; (80042c4 <UART_SetConfig+0x2d4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d120      	bne.n	800416a <UART_SetConfig+0x17a>
 8004128:	4b64      	ldr	r3, [pc, #400]	; (80042bc <UART_SetConfig+0x2cc>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d013      	beq.n	800415e <UART_SetConfig+0x16e>
 8004136:	2b30      	cmp	r3, #48	; 0x30
 8004138:	d814      	bhi.n	8004164 <UART_SetConfig+0x174>
 800413a:	2b20      	cmp	r3, #32
 800413c:	d009      	beq.n	8004152 <UART_SetConfig+0x162>
 800413e:	2b20      	cmp	r3, #32
 8004140:	d810      	bhi.n	8004164 <UART_SetConfig+0x174>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <UART_SetConfig+0x15c>
 8004146:	2b10      	cmp	r3, #16
 8004148:	d006      	beq.n	8004158 <UART_SetConfig+0x168>
 800414a:	e00b      	b.n	8004164 <UART_SetConfig+0x174>
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e0f2      	b.n	8004338 <UART_SetConfig+0x348>
 8004152:	2302      	movs	r3, #2
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e0ef      	b.n	8004338 <UART_SetConfig+0x348>
 8004158:	2304      	movs	r3, #4
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e0ec      	b.n	8004338 <UART_SetConfig+0x348>
 800415e:	2308      	movs	r3, #8
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e0e9      	b.n	8004338 <UART_SetConfig+0x348>
 8004164:	2310      	movs	r3, #16
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e0e6      	b.n	8004338 <UART_SetConfig+0x348>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a56      	ldr	r2, [pc, #344]	; (80042c8 <UART_SetConfig+0x2d8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d120      	bne.n	80041b6 <UART_SetConfig+0x1c6>
 8004174:	4b51      	ldr	r3, [pc, #324]	; (80042bc <UART_SetConfig+0x2cc>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800417e:	2bc0      	cmp	r3, #192	; 0xc0
 8004180:	d013      	beq.n	80041aa <UART_SetConfig+0x1ba>
 8004182:	2bc0      	cmp	r3, #192	; 0xc0
 8004184:	d814      	bhi.n	80041b0 <UART_SetConfig+0x1c0>
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d009      	beq.n	800419e <UART_SetConfig+0x1ae>
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d810      	bhi.n	80041b0 <UART_SetConfig+0x1c0>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <UART_SetConfig+0x1a8>
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d006      	beq.n	80041a4 <UART_SetConfig+0x1b4>
 8004196:	e00b      	b.n	80041b0 <UART_SetConfig+0x1c0>
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e0cc      	b.n	8004338 <UART_SetConfig+0x348>
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e0c9      	b.n	8004338 <UART_SetConfig+0x348>
 80041a4:	2304      	movs	r3, #4
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e0c6      	b.n	8004338 <UART_SetConfig+0x348>
 80041aa:	2308      	movs	r3, #8
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e0c3      	b.n	8004338 <UART_SetConfig+0x348>
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e0c0      	b.n	8004338 <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a44      	ldr	r2, [pc, #272]	; (80042cc <UART_SetConfig+0x2dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d125      	bne.n	800420c <UART_SetConfig+0x21c>
 80041c0:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ce:	d017      	beq.n	8004200 <UART_SetConfig+0x210>
 80041d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d4:	d817      	bhi.n	8004206 <UART_SetConfig+0x216>
 80041d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041da:	d00b      	beq.n	80041f4 <UART_SetConfig+0x204>
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e0:	d811      	bhi.n	8004206 <UART_SetConfig+0x216>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <UART_SetConfig+0x1fe>
 80041e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ea:	d006      	beq.n	80041fa <UART_SetConfig+0x20a>
 80041ec:	e00b      	b.n	8004206 <UART_SetConfig+0x216>
 80041ee:	2300      	movs	r3, #0
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e0a1      	b.n	8004338 <UART_SetConfig+0x348>
 80041f4:	2302      	movs	r3, #2
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e09e      	b.n	8004338 <UART_SetConfig+0x348>
 80041fa:	2304      	movs	r3, #4
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e09b      	b.n	8004338 <UART_SetConfig+0x348>
 8004200:	2308      	movs	r3, #8
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e098      	b.n	8004338 <UART_SetConfig+0x348>
 8004206:	2310      	movs	r3, #16
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e095      	b.n	8004338 <UART_SetConfig+0x348>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <UART_SetConfig+0x2e0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d125      	bne.n	8004262 <UART_SetConfig+0x272>
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <UART_SetConfig+0x2cc>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004224:	d017      	beq.n	8004256 <UART_SetConfig+0x266>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422a:	d817      	bhi.n	800425c <UART_SetConfig+0x26c>
 800422c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004230:	d00b      	beq.n	800424a <UART_SetConfig+0x25a>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d811      	bhi.n	800425c <UART_SetConfig+0x26c>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <UART_SetConfig+0x254>
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004240:	d006      	beq.n	8004250 <UART_SetConfig+0x260>
 8004242:	e00b      	b.n	800425c <UART_SetConfig+0x26c>
 8004244:	2301      	movs	r3, #1
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e076      	b.n	8004338 <UART_SetConfig+0x348>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e073      	b.n	8004338 <UART_SetConfig+0x348>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e070      	b.n	8004338 <UART_SetConfig+0x348>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e06d      	b.n	8004338 <UART_SetConfig+0x348>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e06a      	b.n	8004338 <UART_SetConfig+0x348>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <UART_SetConfig+0x2e4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d138      	bne.n	80042de <UART_SetConfig+0x2ee>
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <UART_SetConfig+0x2cc>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800427a:	d017      	beq.n	80042ac <UART_SetConfig+0x2bc>
 800427c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004280:	d82a      	bhi.n	80042d8 <UART_SetConfig+0x2e8>
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d00b      	beq.n	80042a0 <UART_SetConfig+0x2b0>
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d824      	bhi.n	80042d8 <UART_SetConfig+0x2e8>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <UART_SetConfig+0x2aa>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d006      	beq.n	80042a6 <UART_SetConfig+0x2b6>
 8004298:	e01e      	b.n	80042d8 <UART_SetConfig+0x2e8>
 800429a:	2300      	movs	r3, #0
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e04b      	b.n	8004338 <UART_SetConfig+0x348>
 80042a0:	2302      	movs	r3, #2
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e048      	b.n	8004338 <UART_SetConfig+0x348>
 80042a6:	2304      	movs	r3, #4
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e045      	b.n	8004338 <UART_SetConfig+0x348>
 80042ac:	2308      	movs	r3, #8
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e042      	b.n	8004338 <UART_SetConfig+0x348>
 80042b2:	bf00      	nop
 80042b4:	efff69f3 	.word	0xefff69f3
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	40005000 	.word	0x40005000
 80042d0:	40011400 	.word	0x40011400
 80042d4:	40007800 	.word	0x40007800
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e02c      	b.n	8004338 <UART_SetConfig+0x348>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <UART_SetConfig+0x4bc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d125      	bne.n	8004334 <UART_SetConfig+0x344>
 80042e8:	4b71      	ldr	r3, [pc, #452]	; (80044b0 <UART_SetConfig+0x4c0>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042f6:	d017      	beq.n	8004328 <UART_SetConfig+0x338>
 80042f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042fc:	d817      	bhi.n	800432e <UART_SetConfig+0x33e>
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	d00b      	beq.n	800431c <UART_SetConfig+0x32c>
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d811      	bhi.n	800432e <UART_SetConfig+0x33e>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <UART_SetConfig+0x326>
 800430e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004312:	d006      	beq.n	8004322 <UART_SetConfig+0x332>
 8004314:	e00b      	b.n	800432e <UART_SetConfig+0x33e>
 8004316:	2300      	movs	r3, #0
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e00d      	b.n	8004338 <UART_SetConfig+0x348>
 800431c:	2302      	movs	r3, #2
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e00a      	b.n	8004338 <UART_SetConfig+0x348>
 8004322:	2304      	movs	r3, #4
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e007      	b.n	8004338 <UART_SetConfig+0x348>
 8004328:	2308      	movs	r3, #8
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e004      	b.n	8004338 <UART_SetConfig+0x348>
 800432e:	2310      	movs	r3, #16
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e001      	b.n	8004338 <UART_SetConfig+0x348>
 8004334:	2310      	movs	r3, #16
 8004336:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d15b      	bne.n	80043fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d828      	bhi.n	800439a <UART_SetConfig+0x3aa>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x360>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437d 	.word	0x0800437d
 8004358:	08004385 	.word	0x08004385
 800435c:	0800439b 	.word	0x0800439b
 8004360:	0800438b 	.word	0x0800438b
 8004364:	0800439b 	.word	0x0800439b
 8004368:	0800439b 	.word	0x0800439b
 800436c:	0800439b 	.word	0x0800439b
 8004370:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7ff f99e 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8004378:	61b8      	str	r0, [r7, #24]
        break;
 800437a:	e013      	b.n	80043a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7ff f9ae 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004380:	61b8      	str	r0, [r7, #24]
        break;
 8004382:	e00f      	b.n	80043a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <UART_SetConfig+0x4c4>)
 8004386:	61bb      	str	r3, [r7, #24]
        break;
 8004388:	e00c      	b.n	80043a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7ff f881 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 800438e:	61b8      	str	r0, [r7, #24]
        break;
 8004390:	e008      	b.n	80043a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	61bb      	str	r3, [r7, #24]
        break;
 8004398:	e004      	b.n	80043a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	77bb      	strb	r3, [r7, #30]
        break;
 80043a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d074      	beq.n	8004494 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d916      	bls.n	80043f4 <UART_SetConfig+0x404>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d212      	bcs.n	80043f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	89fa      	ldrh	r2, [r7, #14]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e04f      	b.n	8004494 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77bb      	strb	r3, [r7, #30]
 80043f8:	e04c      	b.n	8004494 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fa:	7ffb      	ldrb	r3, [r7, #31]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d828      	bhi.n	8004452 <UART_SetConfig+0x462>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x418>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004453 	.word	0x08004453
 8004418:	08004443 	.word	0x08004443
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7ff f942 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8004430:	61b8      	str	r0, [r7, #24]
        break;
 8004432:	e013      	b.n	800445c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7ff f952 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004438:	61b8      	str	r0, [r7, #24]
        break;
 800443a:	e00f      	b.n	800445c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <UART_SetConfig+0x4c4>)
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e00c      	b.n	800445c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7ff f825 	bl	8003490 <HAL_RCC_GetSysClockFreq>
 8004446:	61b8      	str	r0, [r7, #24]
        break;
 8004448:	e008      	b.n	800445c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	61bb      	str	r3, [r7, #24]
        break;
 8004450:	e004      	b.n	800445c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	77bb      	strb	r3, [r7, #30]
        break;
 800445a:	bf00      	nop
    }

    if (pclk != 0U)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	085a      	lsrs	r2, r3, #1
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	441a      	add	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d909      	bls.n	8004490 <UART_SetConfig+0x4a0>
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004482:	d205      	bcs.n	8004490 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e001      	b.n	8004494 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40007c00 	.word	0x40007c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	00f42400 	.word	0x00f42400

080044b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01a      	beq.n	80045ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d10a      	bne.n	80045ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af02      	add	r7, sp, #8
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800460c:	f7fc fd08 	bl	8001020 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d10e      	bne.n	800463e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f82d 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e023      	b.n	8004686 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d10e      	bne.n	800466a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800464c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f817 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e00d      	b.n	8004686 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b09c      	sub	sp, #112	; 0x70
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469e:	e0a5      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	f000 80a1 	beq.w	80047ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fc fcb9 	bl	8001020 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d13e      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	663b      	str	r3, [r7, #96]	; 0x60
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004712:	64ba      	str	r2, [r7, #72]	; 0x48
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e067      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d04f      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475a:	d147      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004764:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
 8004786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b8:	623a      	str	r2, [r7, #32]
 80047ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e010      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	429a      	cmp	r2, r3
 8004808:	f43f af4a 	beq.w	80046a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3770      	adds	r7, #112	; 0x70
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004818:	b084      	sub	sp, #16
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	f107 001c 	add.w	r0, r7, #28
 8004826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b01      	cmp	r3, #1
 800482e:	d120      	bne.n	8004872 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <USB_CoreInit+0xac>)
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa92 	bl	8004d90 <USB_CoreReset>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e010      	b.n	8004894 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa86 	bl	8004d90 <USB_CoreReset>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10b      	bne.n	80048b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f043 0206 	orr.w	r2, r3, #6
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048be:	b004      	add	sp, #16
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	ffbdffbf 	.word	0xffbdffbf

080048c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 0201 	bic.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d115      	bne.n	8004938 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004918:	2001      	movs	r0, #1
 800491a:	f7fc fb8d 	bl	8001038 <HAL_Delay>
      ms++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa25 	bl	8004d74 <USB_GetMode>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d01e      	beq.n	800496e <USB_SetCurrentMode+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b31      	cmp	r3, #49	; 0x31
 8004934:	d9f0      	bls.n	8004918 <USB_SetCurrentMode+0x2e>
 8004936:	e01a      	b.n	800496e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800494a:	2001      	movs	r0, #1
 800494c:	f7fc fb74 	bl	8001038 <HAL_Delay>
      ms++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa0c 	bl	8004d74 <USB_GetMode>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <USB_SetCurrentMode+0x84>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b31      	cmp	r3, #49	; 0x31
 8004966:	d9f0      	bls.n	800494a <USB_SetCurrentMode+0x60>
 8004968:	e001      	b.n	800496e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e005      	b.n	800497a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b32      	cmp	r3, #50	; 0x32
 8004972:	d101      	bne.n	8004978 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004984:	b084      	sub	sp, #16
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e009      	b.n	80049b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3340      	adds	r3, #64	; 0x40
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0e      	cmp	r3, #14
 80049bc:	d9f2      	bls.n	80049a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11c      	bne.n	80049fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d2:	f043 0302 	orr.w	r3, r3, #2
 80049d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e005      	b.n	8004a0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2300      	movs	r3, #0
 8004a14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	461a      	mov	r2, r3
 8004a26:	680b      	ldr	r3, [r1, #0]
 8004a28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10c      	bne.n	8004a4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a36:	2100      	movs	r1, #0
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f961 	bl	8004d00 <USB_SetDevSpeed>
 8004a3e:	e008      	b.n	8004a52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a40:	2101      	movs	r1, #1
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f95c 	bl	8004d00 <USB_SetDevSpeed>
 8004a48:	e003      	b.n	8004a52 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f957 	bl	8004d00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a52:	2110      	movs	r1, #16
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f8f3 	bl	8004c40 <USB_FlushTxFifo>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f91d 	bl	8004ca4 <USB_FlushRxFifo>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	461a      	mov	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	e043      	b.n	8004b26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab4:	d118      	bne.n	8004ae8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e013      	b.n	8004afa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e008      	b.n	8004afa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	461a      	mov	r2, r3
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	3301      	adds	r3, #1
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d3b7      	bcc.n	8004a9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e043      	b.n	8004bbc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4a:	d118      	bne.n	8004b7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e013      	b.n	8004b90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	461a      	mov	r2, r3
 8004b76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e008      	b.n	8004b90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d3b7      	bcc.n	8004b34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004be4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f043 0210 	orr.w	r2, r3, #16
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699a      	ldr	r2, [r3, #24]
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <USB_DevInit+0x2b4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f043 0208 	orr.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <USB_DevInit+0x2b8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c34:	b004      	add	sp, #16
 8004c36:	4770      	bx	lr
 8004c38:	803c3800 	.word	0x803c3800
 8004c3c:	40000004 	.word	0x40000004

08004c40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <USB_FlushTxFifo+0x60>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e01a      	b.n	8004c94 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	daf3      	bge.n	8004c4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <USB_FlushTxFifo+0x60>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e006      	b.n	8004c94 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d0f1      	beq.n	8004c76 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	00030d40 	.word	0x00030d40

08004ca4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <USB_FlushRxFifo+0x58>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e017      	b.n	8004cf0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	daf3      	bge.n	8004cb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <USB_FlushRxFifo+0x58>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e006      	b.n	8004cf0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d0f1      	beq.n	8004cd2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	00030d40 	.word	0x00030d40

08004d00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0301 	and.w	r3, r3, #1
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <USB_CoreReset+0x60>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e01a      	b.n	8004de2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	daf3      	bge.n	8004d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f043 0201 	orr.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <USB_CoreReset+0x60>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d0f1      	beq.n	8004dc4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	00030d40 	.word	0x00030d40

08004df4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004dfc:	22a9      	movs	r2, #169	; 0xa9
 8004dfe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8004e00:	4b8b      	ldr	r3, [pc, #556]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e02:	22fe      	movs	r2, #254	; 0xfe
 8004e04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 224;
 8004e06:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e08:	22e0      	movs	r2, #224	; 0xe0
 8004e0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004e0c:	4b88      	ldr	r3, [pc, #544]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e0e:	226f      	movs	r2, #111	; 0x6f
 8004e10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004e12:	4b88      	ldr	r3, [pc, #544]	; (8005034 <MX_LWIP_Init+0x240>)
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004e18:	4b86      	ldr	r3, [pc, #536]	; (8005034 <MX_LWIP_Init+0x240>)
 8004e1a:	22ff      	movs	r2, #255	; 0xff
 8004e1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004e1e:	4b85      	ldr	r3, [pc, #532]	; (8005034 <MX_LWIP_Init+0x240>)
 8004e20:	22ff      	movs	r2, #255	; 0xff
 8004e22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004e24:	4b83      	ldr	r3, [pc, #524]	; (8005034 <MX_LWIP_Init+0x240>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8004e2a:	4b83      	ldr	r3, [pc, #524]	; (8005038 <MX_LWIP_Init+0x244>)
 8004e2c:	22a9      	movs	r2, #169	; 0xa9
 8004e2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8004e30:	4b81      	ldr	r3, [pc, #516]	; (8005038 <MX_LWIP_Init+0x244>)
 8004e32:	22fe      	movs	r2, #254	; 0xfe
 8004e34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 224;
 8004e36:	4b80      	ldr	r3, [pc, #512]	; (8005038 <MX_LWIP_Init+0x244>)
 8004e38:	22e0      	movs	r2, #224	; 0xe0
 8004e3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004e3c:	4b7e      	ldr	r3, [pc, #504]	; (8005038 <MX_LWIP_Init+0x244>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004e42:	f000 fcdd 	bl	8005800 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e46:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	061a      	lsls	r2, r3, #24
 8004e4c:	4b78      	ldr	r3, [pc, #480]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	431a      	orrs	r2, r3
 8004e54:	4b76      	ldr	r3, [pc, #472]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	4a74      	ldr	r2, [pc, #464]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e5e:	78d2      	ldrb	r2, [r2, #3]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	061a      	lsls	r2, r3, #24
 8004e64:	4b72      	ldr	r3, [pc, #456]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	0619      	lsls	r1, r3, #24
 8004e6a:	4b71      	ldr	r3, [pc, #452]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	4319      	orrs	r1, r3
 8004e72:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	496d      	ldr	r1, [pc, #436]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e7c:	78c9      	ldrb	r1, [r1, #3]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e86:	431a      	orrs	r2, r3
 8004e88:	4b69      	ldr	r3, [pc, #420]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	0619      	lsls	r1, r3, #24
 8004e8e:	4b68      	ldr	r3, [pc, #416]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	4319      	orrs	r1, r3
 8004e96:	4b66      	ldr	r3, [pc, #408]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	4964      	ldr	r1, [pc, #400]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004ea0:	78c9      	ldrb	r1, [r1, #3]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	4b60      	ldr	r3, [pc, #384]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	0619      	lsls	r1, r3, #24
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004ebc:	789b      	ldrb	r3, [r3, #2]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	495b      	ldr	r1, [pc, #364]	; (8005030 <MX_LWIP_Init+0x23c>)
 8004ec4:	78c9      	ldrb	r1, [r1, #3]
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	4a5b      	ldr	r2, [pc, #364]	; (800503c <MX_LWIP_Init+0x248>)
 8004ece:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ed0:	4b58      	ldr	r3, [pc, #352]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	061a      	lsls	r2, r3, #24
 8004ed6:	4b57      	ldr	r3, [pc, #348]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	431a      	orrs	r2, r3
 8004ede:	4b55      	ldr	r3, [pc, #340]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ee0:	789b      	ldrb	r3, [r3, #2]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	4a53      	ldr	r2, [pc, #332]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ee8:	78d2      	ldrb	r2, [r2, #3]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	061a      	lsls	r2, r3, #24
 8004eee:	4b51      	ldr	r3, [pc, #324]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	0619      	lsls	r1, r3, #24
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <MX_LWIP_Init+0x240>)
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	4319      	orrs	r1, r3
 8004efc:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <MX_LWIP_Init+0x240>)
 8004efe:	789b      	ldrb	r3, [r3, #2]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	430b      	orrs	r3, r1
 8004f04:	494b      	ldr	r1, [pc, #300]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f06:	78c9      	ldrb	r1, [r1, #3]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f10:	431a      	orrs	r2, r3
 8004f12:	4b48      	ldr	r3, [pc, #288]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	0619      	lsls	r1, r3, #24
 8004f18:	4b46      	ldr	r3, [pc, #280]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	4319      	orrs	r1, r3
 8004f20:	4b44      	ldr	r3, [pc, #272]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f22:	789b      	ldrb	r3, [r3, #2]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	430b      	orrs	r3, r1
 8004f28:	4942      	ldr	r1, [pc, #264]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f2a:	78c9      	ldrb	r1, [r1, #3]
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f34:	431a      	orrs	r2, r3
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	0619      	lsls	r1, r3, #24
 8004f3c:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	4319      	orrs	r1, r3
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f46:	789b      	ldrb	r3, [r3, #2]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	4939      	ldr	r1, [pc, #228]	; (8005034 <MX_LWIP_Init+0x240>)
 8004f4e:	78c9      	ldrb	r1, [r1, #3]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	0e1b      	lsrs	r3, r3, #24
 8004f54:	4313      	orrs	r3, r2
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <MX_LWIP_Init+0x24c>)
 8004f58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	061a      	lsls	r2, r3, #24
 8004f60:	4b35      	ldr	r3, [pc, #212]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	4b33      	ldr	r3, [pc, #204]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f6a:	789b      	ldrb	r3, [r3, #2]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	4a31      	ldr	r2, [pc, #196]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f72:	78d2      	ldrb	r2, [r2, #3]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	061a      	lsls	r2, r3, #24
 8004f78:	4b2f      	ldr	r3, [pc, #188]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	0619      	lsls	r1, r3, #24
 8004f7e:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	4319      	orrs	r1, r3
 8004f86:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	492a      	ldr	r1, [pc, #168]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f90:	78c9      	ldrb	r1, [r1, #3]
 8004f92:	430b      	orrs	r3, r1
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <MX_LWIP_Init+0x244>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	0619      	lsls	r1, r3, #24
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	4319      	orrs	r1, r3
 8004faa:	4b23      	ldr	r3, [pc, #140]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fac:	789b      	ldrb	r3, [r3, #2]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	4921      	ldr	r1, [pc, #132]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fb4:	78c9      	ldrb	r1, [r1, #3]
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	0a1b      	lsrs	r3, r3, #8
 8004fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	0619      	lsls	r1, r3, #24
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	4319      	orrs	r1, r3
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	4918      	ldr	r1, [pc, #96]	; (8005038 <MX_LWIP_Init+0x244>)
 8004fd8:	78c9      	ldrb	r1, [r1, #3]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	0e1b      	lsrs	r3, r3, #24
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <MX_LWIP_Init+0x250>)
 8004fe2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <MX_LWIP_Init+0x254>)
 8004fe6:	9302      	str	r3, [sp, #8]
 8004fe8:	4b18      	ldr	r3, [pc, #96]	; (800504c <MX_LWIP_Init+0x258>)
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <MX_LWIP_Init+0x250>)
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <MX_LWIP_Init+0x24c>)
 8004ff4:	4911      	ldr	r1, [pc, #68]	; (800503c <MX_LWIP_Init+0x248>)
 8004ff6:	4816      	ldr	r0, [pc, #88]	; (8005050 <MX_LWIP_Init+0x25c>)
 8004ff8:	f001 f8a8 	bl	800614c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ffc:	4814      	ldr	r0, [pc, #80]	; (8005050 <MX_LWIP_Init+0x25c>)
 8004ffe:	f001 fa57 	bl	80064b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <MX_LWIP_Init+0x25c>)
 8005004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005014:	480e      	ldr	r0, [pc, #56]	; (8005050 <MX_LWIP_Init+0x25c>)
 8005016:	f001 fa5b 	bl	80064d0 <netif_set_up>
 800501a:	e002      	b.n	8005022 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800501c:	480c      	ldr	r0, [pc, #48]	; (8005050 <MX_LWIP_Init+0x25c>)
 800501e:	f001 fac3 	bl	80065a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005022:	490c      	ldr	r1, [pc, #48]	; (8005054 <MX_LWIP_Init+0x260>)
 8005024:	480a      	ldr	r0, [pc, #40]	; (8005050 <MX_LWIP_Init+0x25c>)
 8005026:	f001 faf1 	bl	800660c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000564 	.word	0x20000564
 8005034:	20000568 	.word	0x20000568
 8005038:	2000056c 	.word	0x2000056c
 800503c:	20000558 	.word	0x20000558
 8005040:	2000055c 	.word	0x2000055c
 8005044:	20000560 	.word	0x20000560
 8005048:	0800f781 	.word	0x0800f781
 800504c:	0800562d 	.word	0x0800562d
 8005050:	20000524 	.word	0x20000524
 8005054:	08005699 	.word	0x08005699

08005058 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <MX_LWIP_Process+0x14>)
 800505e:	f000 fac5 	bl	80055ec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005062:	f007 fbe7 	bl	800c834 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000524 	.word	0x20000524

08005070 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	; 0x38
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <HAL_ETH_MspInit+0x168>)
 800508e:	4293      	cmp	r3, r2
 8005090:	f040 809e 	bne.w	80051d0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005094:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4a50      	ldr	r2, [pc, #320]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 800509a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800509e:	6313      	str	r3, [r2, #48]	; 0x30
 80050a0:	4b4e      	ldr	r3, [pc, #312]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	4b4b      	ldr	r3, [pc, #300]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	4a4a      	ldr	r2, [pc, #296]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050b6:	6313      	str	r3, [r2, #48]	; 0x30
 80050b8:	4b48      	ldr	r3, [pc, #288]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4b45      	ldr	r3, [pc, #276]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	4a44      	ldr	r2, [pc, #272]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ce:	6313      	str	r3, [r2, #48]	; 0x30
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	4a3e      	ldr	r2, [pc, #248]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6313      	str	r3, [r2, #48]	; 0x30
 80050e8:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f4:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	4a38      	ldr	r2, [pc, #224]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510c:	4b33      	ldr	r3, [pc, #204]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	4a32      	ldr	r2, [pc, #200]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 8005112:	f043 0302 	orr.w	r3, r3, #2
 8005116:	6313      	str	r3, [r2, #48]	; 0x30
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	6313      	str	r3, [r2, #48]	; 0x30
 8005130:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_ETH_MspInit+0x16c>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800513c:	2332      	movs	r3, #50	; 0x32
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005148:	2303      	movs	r3, #3
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800514c:	230b      	movs	r3, #11
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005154:	4619      	mov	r1, r3
 8005156:	4822      	ldr	r0, [pc, #136]	; (80051e0 <HAL_ETH_MspInit+0x170>)
 8005158:	f7fd fa92 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800515c:	2386      	movs	r3, #134	; 0x86
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005160:	2302      	movs	r3, #2
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005168:	2303      	movs	r3, #3
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800516c:	230b      	movs	r3, #11
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005174:	4619      	mov	r1, r3
 8005176:	481b      	ldr	r0, [pc, #108]	; (80051e4 <HAL_ETH_MspInit+0x174>)
 8005178:	f7fd fa82 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800517c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	2302      	movs	r3, #2
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518a:	2303      	movs	r3, #3
 800518c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800518e:	230b      	movs	r3, #11
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005196:	4619      	mov	r1, r3
 8005198:	4813      	ldr	r0, [pc, #76]	; (80051e8 <HAL_ETH_MspInit+0x178>)
 800519a:	f7fd fa71 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800519e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051b0:	230b      	movs	r3, #11
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80051b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b8:	4619      	mov	r1, r3
 80051ba:	480c      	ldr	r0, [pc, #48]	; (80051ec <HAL_ETH_MspInit+0x17c>)
 80051bc:	f7fd fa60 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	203d      	movs	r0, #61	; 0x3d
 80051c6:	f7fc f836 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80051ca:	203d      	movs	r0, #61	; 0x3d
 80051cc:	f7fc f84f 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80051d0:	bf00      	nop
 80051d2:	3738      	adds	r7, #56	; 0x38
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40028000 	.word	0x40028000
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40020800 	.word	0x40020800
 80051e4:	40020000 	.word	0x40020000
 80051e8:	40020400 	.word	0x40020400
 80051ec:	40021800 	.word	0x40021800

080051f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <low_level_init+0x144>)
 80051fe:	4a4e      	ldr	r2, [pc, #312]	; (8005338 <low_level_init+0x148>)
 8005200:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <low_level_init+0x144>)
 8005204:	2201      	movs	r2, #1
 8005206:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005208:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <low_level_init+0x144>)
 800520a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800520e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005210:	4b48      	ldr	r3, [pc, #288]	; (8005334 <low_level_init+0x144>)
 8005212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005216:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005218:	4b46      	ldr	r3, [pc, #280]	; (8005334 <low_level_init+0x144>)
 800521a:	2200      	movs	r2, #0
 800521c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800521e:	2300      	movs	r3, #0
 8005220:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005226:	23e1      	movs	r3, #225	; 0xe1
 8005228:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800522a:	2300      	movs	r3, #0
 800522c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800522e:	2300      	movs	r3, #0
 8005230:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005232:	2300      	movs	r3, #0
 8005234:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005236:	4a3f      	ldr	r2, [pc, #252]	; (8005334 <low_level_init+0x144>)
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800523e:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <low_level_init+0x144>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005244:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <low_level_init+0x144>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800524a:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <low_level_init+0x144>)
 800524c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005250:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005252:	4838      	ldr	r0, [pc, #224]	; (8005334 <low_level_init+0x144>)
 8005254:	f7fc f8a2 	bl	800139c <HAL_ETH_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005268:	f043 0304 	orr.w	r3, r3, #4
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005274:	2304      	movs	r3, #4
 8005276:	4a31      	ldr	r2, [pc, #196]	; (800533c <low_level_init+0x14c>)
 8005278:	4931      	ldr	r1, [pc, #196]	; (8005340 <low_level_init+0x150>)
 800527a:	482e      	ldr	r0, [pc, #184]	; (8005334 <low_level_init+0x144>)
 800527c:	f7fc fa26 	bl	80016cc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005280:	2304      	movs	r3, #4
 8005282:	4a30      	ldr	r2, [pc, #192]	; (8005344 <low_level_init+0x154>)
 8005284:	4930      	ldr	r1, [pc, #192]	; (8005348 <low_level_init+0x158>)
 8005286:	482b      	ldr	r0, [pc, #172]	; (8005334 <low_level_init+0x144>)
 8005288:	f7fc fa88 	bl	800179c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2206      	movs	r2, #6
 8005290:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <low_level_init+0x144>)
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	781a      	ldrb	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80052a0:	4b24      	ldr	r3, [pc, #144]	; (8005334 <low_level_init+0x144>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	785a      	ldrb	r2, [r3, #1]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80052ac:	4b21      	ldr	r3, [pc, #132]	; (8005334 <low_level_init+0x144>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	789a      	ldrb	r2, [r3, #2]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <low_level_init+0x144>)
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	78da      	ldrb	r2, [r3, #3]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <low_level_init+0x144>)
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	791a      	ldrb	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <low_level_init+0x144>)
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	795a      	ldrb	r2, [r3, #5]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052e2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052ea:	f043 030a 	orr.w	r3, r3, #10
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80052f6:	480f      	ldr	r0, [pc, #60]	; (8005334 <low_level_init+0x144>)
 80052f8:	f7fc fd7a 	bl	8001df0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	461a      	mov	r2, r3
 8005302:	211d      	movs	r1, #29
 8005304:	480b      	ldr	r0, [pc, #44]	; (8005334 <low_level_init+0x144>)
 8005306:	f7fc fca5 	bl	8001c54 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f043 030b 	orr.w	r3, r3, #11
 8005310:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	461a      	mov	r2, r3
 8005316:	211d      	movs	r1, #29
 8005318:	4806      	ldr	r0, [pc, #24]	; (8005334 <low_level_init+0x144>)
 800531a:	f7fc fd03 	bl	8001d24 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800531e:	f107 0310 	add.w	r3, r7, #16
 8005322:	461a      	mov	r2, r3
 8005324:	211d      	movs	r1, #29
 8005326:	4803      	ldr	r0, [pc, #12]	; (8005334 <low_level_init+0x144>)
 8005328:	f7fc fc94 	bl	8001c54 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800532c:	bf00      	nop
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000570 	.word	0x20000570
 8005338:	40028000 	.word	0x40028000
 800533c:	200218d0 	.word	0x200218d0
 8005340:	20020080 	.word	0x20020080
 8005344:	20020100 	.word	0x20020100
 8005348:	20020000 	.word	0x20020000

0800534c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005356:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <low_level_output+0x138>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800536e:	4b45      	ldr	r3, [pc, #276]	; (8005484 <low_level_output+0x138>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	e05a      	b.n	8005434 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	da03      	bge.n	800538e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005386:	23f8      	movs	r3, #248	; 0xf8
 8005388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800538c:	e05c      	b.n	8005448 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	895b      	ldrh	r3, [r3, #10]
 8005392:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005398:	e02f      	b.n	80053fa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	18d0      	adds	r0, r2, r3
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	18d1      	adds	r1, r2, r3
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	f00a faef 	bl	800f994 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da03      	bge.n	80053cc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80053c4:	23f8      	movs	r3, #248	; 0xf8
 80053c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80053ca:	e03d      	b.n	8005448 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80053dc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053e8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053f4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005404:	4293      	cmp	r3, r2
 8005406:	d8c8      	bhi.n	800539a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	18d0      	adds	r0, r2, r3
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4413      	add	r3, r2
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4619      	mov	r1, r3
 800541a:	f00a fabb 	bl	800f994 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	623b      	str	r3, [r7, #32]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1a1      	bne.n	800537e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	4811      	ldr	r0, [pc, #68]	; (8005484 <low_level_output+0x138>)
 800543e:	f7fc fa19 	bl	8001874 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <low_level_output+0x138>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <low_level_output+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	461a      	mov	r2, r3
 8005464:	2320      	movs	r3, #32
 8005466:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <low_level_output+0x138>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800547a:	4618      	mov	r0, r3
 800547c:	3728      	adds	r7, #40	; 0x28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000570 	.word	0x20000570

08005488 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08c      	sub	sp, #48	; 0x30
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80054ac:	484e      	ldr	r0, [pc, #312]	; (80055e8 <low_level_input+0x160>)
 80054ae:	f7fc facb 	bl	8001a48 <HAL_ETH_GetReceivedFrame>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <low_level_input+0x34>

    return NULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e091      	b.n	80055e0 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80054bc:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <low_level_input+0x160>)
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80054c2:	4b49      	ldr	r3, [pc, #292]	; (80055e8 <low_level_input+0x160>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80054ce:	89fb      	ldrh	r3, [r7, #14]
 80054d0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80054d4:	4619      	mov	r1, r3
 80054d6:	2000      	movs	r0, #0
 80054d8:	f001 f934 	bl	8006744 <pbuf_alloc>
 80054dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04b      	beq.n	800557c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80054e4:	4b40      	ldr	r3, [pc, #256]	; (80055e8 <low_level_input+0x160>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f2:	e040      	b.n	8005576 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	895b      	ldrh	r3, [r3, #10]
 80054f8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80054fe:	e021      	b.n	8005544 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	18d0      	adds	r0, r2, r3
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	18d1      	adds	r1, r2, r3
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	461a      	mov	r2, r3
 8005518:	f00a fa3c 	bl	800f994 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4413      	add	r3, r2
 800552e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005532:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800553e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800554e:	4293      	cmp	r3, r2
 8005550:	d8d6      	bhi.n	8005500 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	18d0      	adds	r0, r2, r3
 800555a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4619      	mov	r1, r3
 8005564:	f00a fa16 	bl	800f994 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1bb      	bne.n	80054f4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <low_level_input+0x160>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e00b      	b.n	80055a0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3301      	adds	r3, #1
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <low_level_input+0x160>)
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3ee      	bcc.n	8005588 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <low_level_input+0x160>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <low_level_input+0x160>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <low_level_input+0x160>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	461a      	mov	r2, r3
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <low_level_input+0x160>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6093      	str	r3, [r2, #8]
  }
  return p;
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000570 	.word	0x20000570

080055ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff47 	bl	8005488 <low_level_input>
 80055fa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	4798      	blx	r3
 800560c:	4603      	mov	r3, r0
 800560e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005610:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f001 fb77 	bl	8006d0c <pbuf_free>
    p = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e000      	b.n	8005626 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005624:	bf00      	nop
  }
}
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <ethernetif_init+0x1c>
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <ethernetif_init+0x48>)
 800563c:	f240 221b 	movw	r2, #539	; 0x21b
 8005640:	490d      	ldr	r1, [pc, #52]	; (8005678 <ethernetif_init+0x4c>)
 8005642:	480e      	ldr	r0, [pc, #56]	; (800567c <ethernetif_init+0x50>)
 8005644:	f00a f9d6 	bl	800f9f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2273      	movs	r2, #115	; 0x73
 800564c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2274      	movs	r2, #116	; 0x74
 8005654:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a09      	ldr	r2, [pc, #36]	; (8005680 <ethernetif_init+0x54>)
 800565c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <ethernetif_init+0x58>)
 8005662:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fdc3 	bl	80051f0 <low_level_init>

  return ERR_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	08010e30 	.word	0x08010e30
 8005678:	08010e4c 	.word	0x08010e4c
 800567c:	08010e5c 	.word	0x08010e5c
 8005680:	0800dc39 	.word	0x0800dc39
 8005684:	0800534d 	.word	0x0800534d

08005688 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800568c:	f7fb fcc8 	bl	8001020 <HAL_GetTick>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d05d      	beq.n	8005776 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80056ba:	4b34      	ldr	r3, [pc, #208]	; (800578c <ethernetif_update_config+0xf4>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03f      	beq.n	8005742 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80056c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056c6:	2100      	movs	r1, #0
 80056c8:	4830      	ldr	r0, [pc, #192]	; (800578c <ethernetif_update_config+0xf4>)
 80056ca:	f7fc fb2b 	bl	8001d24 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fb fca7 	bl	8001020 <HAL_GetTick>
 80056d2:	4603      	mov	r3, r0
 80056d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	461a      	mov	r2, r3
 80056dc:	2101      	movs	r1, #1
 80056de:	482b      	ldr	r0, [pc, #172]	; (800578c <ethernetif_update_config+0xf4>)
 80056e0:	f7fc fab8 	bl	8001c54 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80056e4:	f7fb fc9c 	bl	8001020 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f2:	d828      	bhi.n	8005746 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0eb      	beq.n	80056d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	461a      	mov	r2, r3
 8005704:	2110      	movs	r1, #16
 8005706:	4821      	ldr	r0, [pc, #132]	; (800578c <ethernetif_update_config+0xf4>)
 8005708:	f7fc faa4 	bl	8001c54 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <ethernetif_update_config+0xf4>)
 8005718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e002      	b.n	8005726 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <ethernetif_update_config+0xf4>)
 8005722:	2200      	movs	r2, #0
 8005724:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <ethernetif_update_config+0xf4>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	e016      	b.n	8005766 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <ethernetif_update_config+0xf4>)
 800573a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e011      	b.n	8005766 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <ethernetif_update_config+0xb0>
          goto error;
 8005746:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <ethernetif_update_config+0xf4>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <ethernetif_update_config+0xf4>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005758:	4313      	orrs	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	2100      	movs	r1, #0
 8005760:	480a      	ldr	r0, [pc, #40]	; (800578c <ethernetif_update_config+0xf4>)
 8005762:	f7fc fadf 	bl	8001d24 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005766:	2100      	movs	r1, #0
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <ethernetif_update_config+0xf4>)
 800576a:	f7fc fb9f 	bl	8001eac <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800576e:	4807      	ldr	r0, [pc, #28]	; (800578c <ethernetif_update_config+0xf4>)
 8005770:	f7fc fb3e 	bl	8001df0 <HAL_ETH_Start>
 8005774:	e002      	b.n	800577c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005776:	4805      	ldr	r0, [pc, #20]	; (800578c <ethernetif_update_config+0xf4>)
 8005778:	f7fc fb69 	bl	8001e4e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f807 	bl	8005790 <ethernetif_notify_conn_changed>
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000570 	.word	0x20000570

08005790 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	b21a      	sxth	r2, r3
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	b21b      	sxth	r3, r3
 80057c0:	b29b      	uxth	r3, r3
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	061a      	lsls	r2, r3, #24
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0e1b      	lsrs	r3, r3, #24
 80057f2:	4313      	orrs	r3, r2
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800580a:	f000 f8d5 	bl	80059b8 <mem_init>
  memp_init();
 800580e:	f000 fbdb 	bl	8005fc8 <memp_init>
  pbuf_init();
  netif_init();
 8005812:	f000 fc93 	bl	800613c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005816:	f007 f84f 	bl	800c8b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800581a:	f001 fda7 	bl	800736c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800581e:	f006 ffc1 	bl	800c7a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <ptr_to_mem+0x20>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	4413      	add	r3, r2
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20002de4 	.word	0x20002de4

08005850 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <mem_to_ptr+0x20>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	b29b      	uxth	r3, r3
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20002de4 	.word	0x20002de4

08005874 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <plug_holes+0x120>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d206      	bcs.n	8005894 <plug_holes+0x20>
 8005886:	4b44      	ldr	r3, [pc, #272]	; (8005998 <plug_holes+0x124>)
 8005888:	f240 12df 	movw	r2, #479	; 0x1df
 800588c:	4943      	ldr	r1, [pc, #268]	; (800599c <plug_holes+0x128>)
 800588e:	4844      	ldr	r0, [pc, #272]	; (80059a0 <plug_holes+0x12c>)
 8005890:	f00a f8b0 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005894:	4b43      	ldr	r3, [pc, #268]	; (80059a4 <plug_holes+0x130>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d306      	bcc.n	80058ac <plug_holes+0x38>
 800589e:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <plug_holes+0x124>)
 80058a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80058a4:	4940      	ldr	r1, [pc, #256]	; (80059a8 <plug_holes+0x134>)
 80058a6:	483e      	ldr	r0, [pc, #248]	; (80059a0 <plug_holes+0x12c>)
 80058a8:	f00a f8a4 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d006      	beq.n	80058c2 <plug_holes+0x4e>
 80058b4:	4b38      	ldr	r3, [pc, #224]	; (8005998 <plug_holes+0x124>)
 80058b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80058ba:	493c      	ldr	r1, [pc, #240]	; (80059ac <plug_holes+0x138>)
 80058bc:	4838      	ldr	r0, [pc, #224]	; (80059a0 <plug_holes+0x12c>)
 80058be:	f00a f899 	bl	800f9f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80058ca:	d906      	bls.n	80058da <plug_holes+0x66>
 80058cc:	4b32      	ldr	r3, [pc, #200]	; (8005998 <plug_holes+0x124>)
 80058ce:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80058d2:	4937      	ldr	r1, [pc, #220]	; (80059b0 <plug_holes+0x13c>)
 80058d4:	4832      	ldr	r0, [pc, #200]	; (80059a0 <plug_holes+0x12c>)
 80058d6:	f00a f88d 	bl	800f9f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ffa4 	bl	800582c <ptr_to_mem>
 80058e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d024      	beq.n	8005938 <plug_holes+0xc4>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	791b      	ldrb	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d120      	bne.n	8005938 <plug_holes+0xc4>
 80058f6:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <plug_holes+0x130>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d01b      	beq.n	8005938 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005900:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <plug_holes+0x140>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	429a      	cmp	r2, r3
 8005908:	d102      	bne.n	8005910 <plug_holes+0x9c>
      lfree = mem;
 800590a:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <plug_holes+0x140>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	881a      	ldrh	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005920:	d00a      	beq.n	8005938 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff80 	bl	800582c <ptr_to_mem>
 800592c:	4604      	mov	r4, r0
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff ff8e 	bl	8005850 <mem_to_ptr>
 8005934:	4603      	mov	r3, r0
 8005936:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff75 	bl	800582c <ptr_to_mem>
 8005942:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d01f      	beq.n	800598c <plug_holes+0x118>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	791b      	ldrb	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11b      	bne.n	800598c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <plug_holes+0x140>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	429a      	cmp	r2, r3
 800595c:	d102      	bne.n	8005964 <plug_holes+0xf0>
      lfree = pmem;
 800595e:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <plug_holes+0x140>)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	881a      	ldrh	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005974:	d00a      	beq.n	800598c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff ff56 	bl	800582c <ptr_to_mem>
 8005980:	4604      	mov	r4, r0
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f7ff ff64 	bl	8005850 <mem_to_ptr>
 8005988:	4603      	mov	r3, r0
 800598a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bd90      	pop	{r4, r7, pc}
 8005994:	20002de4 	.word	0x20002de4
 8005998:	08010e84 	.word	0x08010e84
 800599c:	08010eb4 	.word	0x08010eb4
 80059a0:	08010ecc 	.word	0x08010ecc
 80059a4:	20002de8 	.word	0x20002de8
 80059a8:	08010ef4 	.word	0x08010ef4
 80059ac:	08010f10 	.word	0x08010f10
 80059b0:	08010f2c 	.word	0x08010f2c
 80059b4:	20002dec 	.word	0x20002dec

080059b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <mem_init+0x68>)
 80059c0:	3303      	adds	r3, #3
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	461a      	mov	r2, r3
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <mem_init+0x6c>)
 80059ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80059cc:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <mem_init+0x6c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80059d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80059e6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80059ea:	f7ff ff1f 	bl	800582c <ptr_to_mem>
 80059ee:	4603      	mov	r3, r0
 80059f0:	4a0d      	ldr	r2, [pc, #52]	; (8005a28 <mem_init+0x70>)
 80059f2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <mem_init+0x70>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <mem_init+0x70>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <mem_init+0x70>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005a0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <mem_init+0x6c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <mem_init+0x74>)
 8005a16:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200005d0 	.word	0x200005d0
 8005a24:	20002de4 	.word	0x20002de4
 8005a28:	20002de8 	.word	0x20002de8
 8005a2c:	20002dec 	.word	0x20002dec

08005a30 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ff09 	bl	8005850 <mem_to_ptr>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fef0 	bl	800582c <ptr_to_mem>
 8005a4c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	885b      	ldrh	r3, [r3, #2]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff feea 	bl	800582c <ptr_to_mem>
 8005a58:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005a62:	d818      	bhi.n	8005a96 <mem_link_valid+0x66>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005a6c:	d813      	bhi.n	8005a96 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a72:	8afa      	ldrh	r2, [r7, #22]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d004      	beq.n	8005a82 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	8afa      	ldrh	r2, [r7, #22]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d109      	bne.n	8005a96 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <mem_link_valid+0x74>)
 8005a84:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d006      	beq.n	8005a9a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	8afa      	ldrh	r2, [r7, #22]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <mem_link_valid+0x6a>
    return 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <mem_link_valid+0x6c>
  }
  return 1;
 8005a9a:	2301      	movs	r3, #1
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20002de8 	.word	0x20002de8

08005aa8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d04c      	beq.n	8005b50 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <mem_free+0xb0>)
 8005ac2:	f240 2273 	movw	r2, #627	; 0x273
 8005ac6:	4925      	ldr	r1, [pc, #148]	; (8005b5c <mem_free+0xb4>)
 8005ac8:	4825      	ldr	r0, [pc, #148]	; (8005b60 <mem_free+0xb8>)
 8005aca:	f009 ff93 	bl	800f9f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ace:	e040      	b.n	8005b52 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3b08      	subs	r3, #8
 8005ad4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005ad6:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <mem_free+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d306      	bcc.n	8005aee <mem_free+0x46>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f103 020c 	add.w	r2, r3, #12
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <mem_free+0xc0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d907      	bls.n	8005afe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <mem_free+0xb0>)
 8005af0:	f240 227f 	movw	r2, #639	; 0x27f
 8005af4:	491d      	ldr	r1, [pc, #116]	; (8005b6c <mem_free+0xc4>)
 8005af6:	481a      	ldr	r0, [pc, #104]	; (8005b60 <mem_free+0xb8>)
 8005af8:	f009 ff7c 	bl	800f9f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005afc:	e029      	b.n	8005b52 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	791b      	ldrb	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d107      	bne.n	8005b16 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <mem_free+0xb0>)
 8005b08:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005b0c:	4918      	ldr	r1, [pc, #96]	; (8005b70 <mem_free+0xc8>)
 8005b0e:	4814      	ldr	r0, [pc, #80]	; (8005b60 <mem_free+0xb8>)
 8005b10:	f009 ff70 	bl	800f9f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b14:	e01d      	b.n	8005b52 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff ff8a 	bl	8005a30 <mem_link_valid>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005b22:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <mem_free+0xb0>)
 8005b24:	f240 2295 	movw	r2, #661	; 0x295
 8005b28:	4912      	ldr	r1, [pc, #72]	; (8005b74 <mem_free+0xcc>)
 8005b2a:	480d      	ldr	r0, [pc, #52]	; (8005b60 <mem_free+0xb8>)
 8005b2c:	f009 ff62 	bl	800f9f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005b30:	e00f      	b.n	8005b52 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <mem_free+0xd0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d202      	bcs.n	8005b48 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005b42:	4a0d      	ldr	r2, [pc, #52]	; (8005b78 <mem_free+0xd0>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff fe93 	bl	8005874 <plug_holes>
 8005b4e:	e000      	b.n	8005b52 <mem_free+0xaa>
    return;
 8005b50:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08010e84 	.word	0x08010e84
 8005b5c:	08010f58 	.word	0x08010f58
 8005b60:	08010ecc 	.word	0x08010ecc
 8005b64:	20002de4 	.word	0x20002de4
 8005b68:	20002de8 	.word	0x20002de8
 8005b6c:	08010f7c 	.word	0x08010f7c
 8005b70:	08010f98 	.word	0x08010f98
 8005b74:	08010fc0 	.word	0x08010fc0
 8005b78:	20002dec 	.word	0x20002dec

08005b7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005b94:	8bfb      	ldrh	r3, [r7, #30]
 8005b96:	2b0b      	cmp	r3, #11
 8005b98:	d801      	bhi.n	8005b9e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005b9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ba0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ba4:	d803      	bhi.n	8005bae <mem_trim+0x32>
 8005ba6:	8bfa      	ldrh	r2, [r7, #30]
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d201      	bcs.n	8005bb2 <mem_trim+0x36>
    return NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e0cc      	b.n	8005d4c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005bb2:	4b68      	ldr	r3, [pc, #416]	; (8005d54 <mem_trim+0x1d8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d304      	bcc.n	8005bc6 <mem_trim+0x4a>
 8005bbc:	4b66      	ldr	r3, [pc, #408]	; (8005d58 <mem_trim+0x1dc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d306      	bcc.n	8005bd4 <mem_trim+0x58>
 8005bc6:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <mem_trim+0x1e0>)
 8005bc8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005bcc:	4964      	ldr	r1, [pc, #400]	; (8005d60 <mem_trim+0x1e4>)
 8005bce:	4865      	ldr	r0, [pc, #404]	; (8005d64 <mem_trim+0x1e8>)
 8005bd0:	f009 ff10 	bl	800f9f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005bd4:	4b5f      	ldr	r3, [pc, #380]	; (8005d54 <mem_trim+0x1d8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d304      	bcc.n	8005be8 <mem_trim+0x6c>
 8005bde:	4b5e      	ldr	r3, [pc, #376]	; (8005d58 <mem_trim+0x1dc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d301      	bcc.n	8005bec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	e0af      	b.n	8005d4c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3b08      	subs	r3, #8
 8005bf0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005bf2:	69b8      	ldr	r0, [r7, #24]
 8005bf4:	f7ff fe2c 	bl	8005850 <mem_to_ptr>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	881a      	ldrh	r2, [r3, #0]
 8005c00:	8afb      	ldrh	r3, [r7, #22]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b08      	subs	r3, #8
 8005c08:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005c0a:	8bfa      	ldrh	r2, [r7, #30]
 8005c0c:	8abb      	ldrh	r3, [r7, #20]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d906      	bls.n	8005c20 <mem_trim+0xa4>
 8005c12:	4b52      	ldr	r3, [pc, #328]	; (8005d5c <mem_trim+0x1e0>)
 8005c14:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005c18:	4953      	ldr	r1, [pc, #332]	; (8005d68 <mem_trim+0x1ec>)
 8005c1a:	4852      	ldr	r0, [pc, #328]	; (8005d64 <mem_trim+0x1e8>)
 8005c1c:	f009 feea 	bl	800f9f4 <iprintf>
  if (newsize > size) {
 8005c20:	8bfa      	ldrh	r2, [r7, #30]
 8005c22:	8abb      	ldrh	r3, [r7, #20]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d901      	bls.n	8005c2c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e08f      	b.n	8005d4c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005c2c:	8bfa      	ldrh	r2, [r7, #30]
 8005c2e:	8abb      	ldrh	r3, [r7, #20]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d101      	bne.n	8005c38 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	e089      	b.n	8005d4c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fdf5 	bl	800582c <ptr_to_mem>
 8005c42:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	791b      	ldrb	r3, [r3, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d13f      	bne.n	8005ccc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c54:	d106      	bne.n	8005c64 <mem_trim+0xe8>
 8005c56:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <mem_trim+0x1e0>)
 8005c58:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005c5c:	4943      	ldr	r1, [pc, #268]	; (8005d6c <mem_trim+0x1f0>)
 8005c5e:	4841      	ldr	r0, [pc, #260]	; (8005d64 <mem_trim+0x1e8>)
 8005c60:	f009 fec8 	bl	800f9f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c6a:	8afa      	ldrh	r2, [r7, #22]
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	4413      	add	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3308      	adds	r3, #8
 8005c74:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005c76:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <mem_trim+0x1f4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d106      	bne.n	8005c8e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005c80:	89fb      	ldrh	r3, [r7, #14]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fdd2 	bl	800582c <ptr_to_mem>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <mem_trim+0x1f4>)
 8005c8c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005c8e:	89fb      	ldrh	r3, [r7, #14]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fdcb 	bl	800582c <ptr_to_mem>
 8005c96:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	89ba      	ldrh	r2, [r7, #12]
 8005ca2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	8afa      	ldrh	r2, [r7, #22]
 8005ca8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	89fa      	ldrh	r2, [r7, #14]
 8005cae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005cb8:	d047      	beq.n	8005d4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fdb4 	bl	800582c <ptr_to_mem>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	89fb      	ldrh	r3, [r7, #14]
 8005cc8:	8053      	strh	r3, [r2, #2]
 8005cca:	e03e      	b.n	8005d4a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ccc:	8bfb      	ldrh	r3, [r7, #30]
 8005cce:	f103 0214 	add.w	r2, r3, #20
 8005cd2:	8abb      	ldrh	r3, [r7, #20]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d838      	bhi.n	8005d4a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005cd8:	8afa      	ldrh	r2, [r7, #22]
 8005cda:	8bfb      	ldrh	r3, [r7, #30]
 8005cdc:	4413      	add	r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005cec:	d106      	bne.n	8005cfc <mem_trim+0x180>
 8005cee:	4b1b      	ldr	r3, [pc, #108]	; (8005d5c <mem_trim+0x1e0>)
 8005cf0:	f240 3216 	movw	r2, #790	; 0x316
 8005cf4:	491d      	ldr	r1, [pc, #116]	; (8005d6c <mem_trim+0x1f0>)
 8005cf6:	481b      	ldr	r0, [pc, #108]	; (8005d64 <mem_trim+0x1e8>)
 8005cf8:	f009 fe7c 	bl	800f9f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005cfc:	89fb      	ldrh	r3, [r7, #14]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fd94 	bl	800582c <ptr_to_mem>
 8005d04:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005d06:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <mem_trim+0x1f4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d202      	bcs.n	8005d16 <mem_trim+0x19a>
      lfree = mem2;
 8005d10:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <mem_trim+0x1f4>)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	89fa      	ldrh	r2, [r7, #14]
 8005d2e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d38:	d007      	beq.n	8005d4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd74 	bl	800582c <ptr_to_mem>
 8005d44:	4602      	mov	r2, r0
 8005d46:	89fb      	ldrh	r3, [r7, #14]
 8005d48:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005d4a:	687b      	ldr	r3, [r7, #4]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20002de4 	.word	0x20002de4
 8005d58:	20002de8 	.word	0x20002de8
 8005d5c:	08010e84 	.word	0x08010e84
 8005d60:	08010ff4 	.word	0x08010ff4
 8005d64:	08010ecc 	.word	0x08010ecc
 8005d68:	0801100c 	.word	0x0801100c
 8005d6c:	0801102c 	.word	0x0801102c
 8005d70:	20002dec 	.word	0x20002dec

08005d74 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <mem_malloc+0x14>
    return NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e0d9      	b.n	8005f3c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	3303      	adds	r3, #3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005d94:	8bbb      	ldrh	r3, [r7, #28]
 8005d96:	2b0b      	cmp	r3, #11
 8005d98:	d801      	bhi.n	8005d9e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005d9e:	8bbb      	ldrh	r3, [r7, #28]
 8005da0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005da4:	d803      	bhi.n	8005dae <mem_malloc+0x3a>
 8005da6:	8bba      	ldrh	r2, [r7, #28]
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d201      	bcs.n	8005db2 <mem_malloc+0x3e>
    return NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e0c4      	b.n	8005f3c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005db2:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <mem_malloc+0x1d0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fd4a 	bl	8005850 <mem_to_ptr>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	83fb      	strh	r3, [r7, #30]
 8005dc0:	e0b4      	b.n	8005f2c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005dc2:	8bfb      	ldrh	r3, [r7, #30]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fd31 	bl	800582c <ptr_to_mem>
 8005dca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	791b      	ldrb	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 80a4 	bne.w	8005f1e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	8bfb      	ldrh	r3, [r7, #30]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f1a3 0208 	sub.w	r2, r3, #8
 8005de4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005de6:	429a      	cmp	r2, r3
 8005de8:	f0c0 8099 	bcc.w	8005f1e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	8bfb      	ldrh	r3, [r7, #30]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f1a3 0208 	sub.w	r2, r3, #8
 8005dfa:	8bbb      	ldrh	r3, [r7, #28]
 8005dfc:	3314      	adds	r3, #20
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d333      	bcc.n	8005e6a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005e02:	8bfa      	ldrh	r2, [r7, #30]
 8005e04:	8bbb      	ldrh	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005e0e:	8a7b      	ldrh	r3, [r7, #18]
 8005e10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005e14:	d106      	bne.n	8005e24 <mem_malloc+0xb0>
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <mem_malloc+0x1d4>)
 8005e18:	f240 3287 	movw	r2, #903	; 0x387
 8005e1c:	494b      	ldr	r1, [pc, #300]	; (8005f4c <mem_malloc+0x1d8>)
 8005e1e:	484c      	ldr	r0, [pc, #304]	; (8005f50 <mem_malloc+0x1dc>)
 8005e20:	f009 fde8 	bl	800f9f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005e24:	8a7b      	ldrh	r3, [r7, #18]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd00 	bl	800582c <ptr_to_mem>
 8005e2c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8bfa      	ldrh	r2, [r7, #30]
 8005e40:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	8a7a      	ldrh	r2, [r7, #18]
 8005e46:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005e56:	d00b      	beq.n	8005e70 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fce5 	bl	800582c <ptr_to_mem>
 8005e62:	4602      	mov	r2, r0
 8005e64:	8a7b      	ldrh	r3, [r7, #18]
 8005e66:	8053      	strh	r3, [r2, #2]
 8005e68:	e002      	b.n	8005e70 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005e70:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <mem_malloc+0x1d0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d127      	bne.n	8005eca <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005e7a:	4b32      	ldr	r3, [pc, #200]	; (8005f44 <mem_malloc+0x1d0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005e80:	e005      	b.n	8005e8e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fcd0 	bl	800582c <ptr_to_mem>
 8005e8c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <mem_malloc+0x12c>
 8005e96:	4b2f      	ldr	r3, [pc, #188]	; (8005f54 <mem_malloc+0x1e0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1f0      	bne.n	8005e82 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005ea0:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <mem_malloc+0x1d0>)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005ea6:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <mem_malloc+0x1d0>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <mem_malloc+0x1e0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d00b      	beq.n	8005eca <mem_malloc+0x156>
 8005eb2:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <mem_malloc+0x1d0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	791b      	ldrb	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <mem_malloc+0x156>
 8005ebc:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <mem_malloc+0x1d4>)
 8005ebe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005ec2:	4925      	ldr	r1, [pc, #148]	; (8005f58 <mem_malloc+0x1e4>)
 8005ec4:	4822      	ldr	r0, [pc, #136]	; (8005f50 <mem_malloc+0x1dc>)
 8005ec6:	f009 fd95 	bl	800f9f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005eca:	8bba      	ldrh	r2, [r7, #28]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <mem_malloc+0x1e0>)
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d906      	bls.n	8005ee8 <mem_malloc+0x174>
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <mem_malloc+0x1d4>)
 8005edc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005ee0:	491e      	ldr	r1, [pc, #120]	; (8005f5c <mem_malloc+0x1e8>)
 8005ee2:	481b      	ldr	r0, [pc, #108]	; (8005f50 <mem_malloc+0x1dc>)
 8005ee4:	f009 fd86 	bl	800f9f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <mem_malloc+0x18c>
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <mem_malloc+0x1d4>)
 8005ef4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005ef8:	4919      	ldr	r1, [pc, #100]	; (8005f60 <mem_malloc+0x1ec>)
 8005efa:	4815      	ldr	r0, [pc, #84]	; (8005f50 <mem_malloc+0x1dc>)
 8005efc:	f009 fd7a 	bl	800f9f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d006      	beq.n	8005f18 <mem_malloc+0x1a4>
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <mem_malloc+0x1d4>)
 8005f0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005f10:	4914      	ldr	r1, [pc, #80]	; (8005f64 <mem_malloc+0x1f0>)
 8005f12:	480f      	ldr	r0, [pc, #60]	; (8005f50 <mem_malloc+0x1dc>)
 8005f14:	f009 fd6e 	bl	800f9f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	e00e      	b.n	8005f3c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005f1e:	8bfb      	ldrh	r3, [r7, #30]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fc83 	bl	800582c <ptr_to_mem>
 8005f26:	4603      	mov	r3, r0
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005f2c:	8bfa      	ldrh	r2, [r7, #30]
 8005f2e:	8bbb      	ldrh	r3, [r7, #28]
 8005f30:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005f34:	429a      	cmp	r2, r3
 8005f36:	f4ff af44 	bcc.w	8005dc2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20002dec 	.word	0x20002dec
 8005f48:	08010e84 	.word	0x08010e84
 8005f4c:	0801102c 	.word	0x0801102c
 8005f50:	08010ecc 	.word	0x08010ecc
 8005f54:	20002de8 	.word	0x20002de8
 8005f58:	08011040 	.word	0x08011040
 8005f5c:	0801105c 	.word	0x0801105c
 8005f60:	0801108c 	.word	0x0801108c
 8005f64:	080110bc 	.word	0x080110bc

08005f68 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	3303      	adds	r3, #3
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e011      	b.n	8005fae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	dbe7      	blt.n	8005f8a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005fce:	2300      	movs	r3, #0
 8005fd0:	80fb      	strh	r3, [r7, #6]
 8005fd2:	e009      	b.n	8005fe8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <memp_init+0x30>)
 8005fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff ffc3 	bl	8005f68 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	80fb      	strh	r3, [r7, #6]
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d9f2      	bls.n	8005fd4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	08013894 	.word	0x08013894

08005ffc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d012      	beq.n	8006038 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d006      	beq.n	8006034 <do_memp_malloc_pool+0x38>
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <do_memp_malloc_pool+0x48>)
 8006028:	f44f 728c 	mov.w	r2, #280	; 0x118
 800602c:	4906      	ldr	r1, [pc, #24]	; (8006048 <do_memp_malloc_pool+0x4c>)
 800602e:	4807      	ldr	r0, [pc, #28]	; (800604c <do_memp_malloc_pool+0x50>)
 8006030:	f009 fce0 	bl	800f9f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	e000      	b.n	800603a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	080110e0 	.word	0x080110e0
 8006048:	08011110 	.word	0x08011110
 800604c:	08011134 	.word	0x08011134

08006050 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b08      	cmp	r3, #8
 800605e:	d908      	bls.n	8006072 <memp_malloc+0x22>
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <memp_malloc+0x3c>)
 8006062:	f240 1257 	movw	r2, #343	; 0x157
 8006066:	490a      	ldr	r1, [pc, #40]	; (8006090 <memp_malloc+0x40>)
 8006068:	480a      	ldr	r0, [pc, #40]	; (8006094 <memp_malloc+0x44>)
 800606a:	f009 fcc3 	bl	800f9f4 <iprintf>
 800606e:	2300      	movs	r3, #0
 8006070:	e008      	b.n	8006084 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4a08      	ldr	r2, [pc, #32]	; (8006098 <memp_malloc+0x48>)
 8006076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ffbe 	bl	8005ffc <do_memp_malloc_pool>
 8006080:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006082:	68fb      	ldr	r3, [r7, #12]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	080110e0 	.word	0x080110e0
 8006090:	08011170 	.word	0x08011170
 8006094:	08011134 	.word	0x08011134
 8006098:	08013894 	.word	0x08013894

0800609c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d006      	beq.n	80060be <do_memp_free_pool+0x22>
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <do_memp_free_pool+0x40>)
 80060b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80060b6:	490a      	ldr	r1, [pc, #40]	; (80060e0 <do_memp_free_pool+0x44>)
 80060b8:	480a      	ldr	r0, [pc, #40]	; (80060e4 <do_memp_free_pool+0x48>)
 80060ba:	f009 fc9b 	bl	800f9f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	080110e0 	.word	0x080110e0
 80060e0:	08011190 	.word	0x08011190
 80060e4:	08011134 	.word	0x08011134

080060e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	6039      	str	r1, [r7, #0]
 80060f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d907      	bls.n	800610a <memp_free+0x22>
 80060fa:	4b0c      	ldr	r3, [pc, #48]	; (800612c <memp_free+0x44>)
 80060fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006100:	490b      	ldr	r1, [pc, #44]	; (8006130 <memp_free+0x48>)
 8006102:	480c      	ldr	r0, [pc, #48]	; (8006134 <memp_free+0x4c>)
 8006104:	f009 fc76 	bl	800f9f4 <iprintf>
 8006108:	e00c      	b.n	8006124 <memp_free+0x3c>

  if (mem == NULL) {
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <memp_free+0x50>)
 8006114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff ffbe 	bl	800609c <do_memp_free_pool>
 8006120:	e000      	b.n	8006124 <memp_free+0x3c>
    return;
 8006122:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	080110e0 	.word	0x080110e0
 8006130:	080111b0 	.word	0x080111b0
 8006134:	08011134 	.word	0x08011134
 8006138:	08013894 	.word	0x08013894

0800613c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006140:	bf00      	nop
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <netif_add+0x26>
 8006160:	4b57      	ldr	r3, [pc, #348]	; (80062c0 <netif_add+0x174>)
 8006162:	f240 1227 	movw	r2, #295	; 0x127
 8006166:	4957      	ldr	r1, [pc, #348]	; (80062c4 <netif_add+0x178>)
 8006168:	4857      	ldr	r0, [pc, #348]	; (80062c8 <netif_add+0x17c>)
 800616a:	f009 fc43 	bl	800f9f4 <iprintf>
 800616e:	2300      	movs	r3, #0
 8006170:	e0a2      	b.n	80062b8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d108      	bne.n	800618a <netif_add+0x3e>
 8006178:	4b51      	ldr	r3, [pc, #324]	; (80062c0 <netif_add+0x174>)
 800617a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800617e:	4953      	ldr	r1, [pc, #332]	; (80062cc <netif_add+0x180>)
 8006180:	4851      	ldr	r0, [pc, #324]	; (80062c8 <netif_add+0x17c>)
 8006182:	f009 fc37 	bl	800f9f4 <iprintf>
 8006186:	2300      	movs	r3, #0
 8006188:	e096      	b.n	80062b8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <netif_add+0x184>)
 8006192:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800619a:	4b4d      	ldr	r3, [pc, #308]	; (80062d0 <netif_add+0x184>)
 800619c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80061a4:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <netif_add+0x184>)
 80061a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a45      	ldr	r2, [pc, #276]	; (80062d4 <netif_add+0x188>)
 80061be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a3a      	ldr	r2, [r7, #32]
 80061d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80061da:	4b3f      	ldr	r3, [pc, #252]	; (80062d8 <netif_add+0x18c>)
 80061dc:	781a      	ldrb	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f913 	bl	800641c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	4798      	blx	r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <netif_add+0xba>
    return NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	e058      	b.n	80062b8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800620c:	2bff      	cmp	r3, #255	; 0xff
 800620e:	d103      	bne.n	8006218 <netif_add+0xcc>
        netif->num = 0;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800621c:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <netif_add+0x190>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e02b      	b.n	800627c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d106      	bne.n	800623a <netif_add+0xee>
 800622c:	4b24      	ldr	r3, [pc, #144]	; (80062c0 <netif_add+0x174>)
 800622e:	f240 128b 	movw	r2, #395	; 0x18b
 8006232:	492b      	ldr	r1, [pc, #172]	; (80062e0 <netif_add+0x194>)
 8006234:	4824      	ldr	r0, [pc, #144]	; (80062c8 <netif_add+0x17c>)
 8006236:	f009 fbdd 	bl	800f9f4 <iprintf>
        num_netifs++;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3301      	adds	r3, #1
 800623e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2bff      	cmp	r3, #255	; 0xff
 8006244:	dd06      	ble.n	8006254 <netif_add+0x108>
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <netif_add+0x174>)
 8006248:	f240 128d 	movw	r2, #397	; 0x18d
 800624c:	4925      	ldr	r1, [pc, #148]	; (80062e4 <netif_add+0x198>)
 800624e:	481e      	ldr	r0, [pc, #120]	; (80062c8 <netif_add+0x17c>)
 8006250:	f009 fbd0 	bl	800f9f4 <iprintf>
        if (netif2->num == netif->num) {
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006260:	429a      	cmp	r2, r3
 8006262:	d108      	bne.n	8006276 <netif_add+0x12a>
          netif->num++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800626a:	3301      	adds	r3, #1
 800626c:	b2da      	uxtb	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006274:	e005      	b.n	8006282 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1d0      	bne.n	8006224 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1be      	bne.n	8006206 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800628e:	2bfe      	cmp	r3, #254	; 0xfe
 8006290:	d103      	bne.n	800629a <netif_add+0x14e>
    netif_num = 0;
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <netif_add+0x18c>)
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e006      	b.n	80062a8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062a0:	3301      	adds	r3, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <netif_add+0x18c>)
 80062a6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <netif_add+0x190>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <netif_add+0x190>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	080111cc 	.word	0x080111cc
 80062c4:	08011260 	.word	0x08011260
 80062c8:	0801121c 	.word	0x0801121c
 80062cc:	0801127c 	.word	0x0801127c
 80062d0:	080138f8 	.word	0x080138f8
 80062d4:	0800662f 	.word	0x0800662f
 80062d8:	20005ce4 	.word	0x20005ce4
 80062dc:	20005cdc 	.word	0x20005cdc
 80062e0:	080112a0 	.word	0x080112a0
 80062e4:	080112b4 	.word	0x080112b4

080062e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f002 fb81 	bl	80089fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f007 f81f 	bl	800d340 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <netif_do_set_ipaddr+0x20>
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <netif_do_set_ipaddr+0x88>)
 8006320:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006324:	491c      	ldr	r1, [pc, #112]	; (8006398 <netif_do_set_ipaddr+0x8c>)
 8006326:	481d      	ldr	r0, [pc, #116]	; (800639c <netif_do_set_ipaddr+0x90>)
 8006328:	f009 fb64 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <netif_do_set_ipaddr+0x34>
 8006332:	4b18      	ldr	r3, [pc, #96]	; (8006394 <netif_do_set_ipaddr+0x88>)
 8006334:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006338:	4917      	ldr	r1, [pc, #92]	; (8006398 <netif_do_set_ipaddr+0x8c>)
 800633a:	4818      	ldr	r0, [pc, #96]	; (800639c <netif_do_set_ipaddr+0x90>)
 800633c:	f009 fb5a 	bl	800f9f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3304      	adds	r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d01c      	beq.n	8006388 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3304      	adds	r3, #4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800635e:	f107 0314 	add.w	r3, r7, #20
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ffbf 	bl	80062e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <netif_do_set_ipaddr+0x6a>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	e000      	b.n	8006378 <netif_do_set_ipaddr+0x6c>
 8006376:	2300      	movs	r3, #0
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800637c:	2101      	movs	r1, #1
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f8d2 	bl	8006528 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006384:	2301      	movs	r3, #1
 8006386:	e000      	b.n	800638a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	080111cc 	.word	0x080111cc
 8006398:	080112e4 	.word	0x080112e4
 800639c:	0801121c 	.word	0x0801121c

080063a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3308      	adds	r3, #8
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d00a      	beq.n	80063d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <netif_do_set_netmask+0x26>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	e000      	b.n	80063c8 <netif_do_set_netmask+0x28>
 80063c6:	2300      	movs	r3, #0
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	330c      	adds	r3, #12
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d00a      	beq.n	800640e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <netif_do_set_gw+0x26>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	e000      	b.n	8006406 <netif_do_set_gw+0x28>
 8006404:	2300      	movs	r3, #0
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <netif_set_addr+0x90>)
 800643a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006442:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <netif_set_addr+0x90>)
 8006444:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <netif_set_addr+0x90>)
 800644e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <netif_set_addr+0x42>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <netif_set_addr+0x46>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <netif_set_addr+0x48>
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800646c:	f107 0310 	add.w	r3, r7, #16
 8006470:	461a      	mov	r2, r3
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff ff49 	bl	800630c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7ff ff8e 	bl	80063a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7ff ffa8 	bl	80063de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006494:	f107 0310 	add.w	r3, r7, #16
 8006498:	461a      	mov	r2, r3
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff ff35 	bl	800630c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80064a2:	bf00      	nop
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	080138f8 	.word	0x080138f8

080064b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80064b8:	4a04      	ldr	r2, [pc, #16]	; (80064cc <netif_set_default+0x1c>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20005ce0 	.word	0x20005ce0

080064d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <netif_set_up+0x1e>
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <netif_set_up+0x4c>)
 80064e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80064e4:	490e      	ldr	r1, [pc, #56]	; (8006520 <netif_set_up+0x50>)
 80064e6:	480f      	ldr	r0, [pc, #60]	; (8006524 <netif_set_up+0x54>)
 80064e8:	f009 fa84 	bl	800f9f4 <iprintf>
 80064ec:	e013      	b.n	8006516 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10c      	bne.n	8006516 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800650e:	2103      	movs	r1, #3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f809 	bl	8006528 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	080111cc 	.word	0x080111cc
 8006520:	08011354 	.word	0x08011354
 8006524:	0801121c 	.word	0x0801121c

08006528 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <netif_issue_reports+0x20>
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <netif_issue_reports+0x74>)
 800653c:	f240 326d 	movw	r2, #877	; 0x36d
 8006540:	4917      	ldr	r1, [pc, #92]	; (80065a0 <netif_issue_reports+0x78>)
 8006542:	4818      	ldr	r0, [pc, #96]	; (80065a4 <netif_issue_reports+0x7c>)
 8006544:	f009 fa56 	bl	800f9f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01e      	beq.n	8006594 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800655c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d013      	beq.n	8006596 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f007 fe41 	bl	800e214 <etharp_request>
 8006592:	e000      	b.n	8006596 <netif_issue_reports+0x6e>
    return;
 8006594:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	080111cc 	.word	0x080111cc
 80065a0:	08011370 	.word	0x08011370
 80065a4:	0801121c 	.word	0x0801121c

080065a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <netif_set_down+0x1e>
 80065b6:	4b12      	ldr	r3, [pc, #72]	; (8006600 <netif_set_down+0x58>)
 80065b8:	f240 329b 	movw	r2, #923	; 0x39b
 80065bc:	4911      	ldr	r1, [pc, #68]	; (8006604 <netif_set_down+0x5c>)
 80065be:	4812      	ldr	r0, [pc, #72]	; (8006608 <netif_set_down+0x60>)
 80065c0:	f009 fa18 	bl	800f9f4 <iprintf>
 80065c4:	e019      	b.n	80065fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f007 f9cb 	bl	800d990 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	080111cc 	.word	0x080111cc
 8006604:	08011394 	.word	0x08011394
 8006608:	0801121c 	.word	0x0801121c

0800660c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	61da      	str	r2, [r3, #28]
  }
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800663a:	f06f 030b 	mvn.w	r3, #11
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d013      	beq.n	8006684 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <netif_get_by_index+0x48>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e00c      	b.n	800667e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800666a:	3301      	adds	r3, #1
 800666c:	b2db      	uxtb	r3, r3
 800666e:	79fa      	ldrb	r2, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d101      	bne.n	8006678 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	e006      	b.n	8006686 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ef      	bne.n	8006664 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20005cdc 	.word	0x20005cdc

08006698 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <pbuf_free_ooseq+0x38>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <pbuf_free_ooseq+0x3c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	607b      	str	r3, [r7, #4]
 80066aa:	e00a      	b.n	80066c2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 f9df 	bl	8008a78 <tcp_free_ooseq>
      return;
 80066ba:	e005      	b.n	80066c8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f1      	bne.n	80066ac <pbuf_free_ooseq+0x14>
    }
  }
}
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20005ce5 	.word	0x20005ce5
 80066d4:	20005cf4 	.word	0x20005cf4

080066d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80066dc:	4b03      	ldr	r3, [pc, #12]	; (80066ec <pbuf_pool_is_empty+0x14>)
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20005ce5 	.word	0x20005ce5

080066f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	460b      	mov	r3, r1
 8006700:	80fb      	strh	r3, [r7, #6]
 8006702:	4613      	mov	r3, r2
 8006704:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88ba      	ldrh	r2, [r7, #4]
 800671c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800671e:	8b3b      	ldrh	r3, [r7, #24]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	7f3a      	ldrb	r2, [r7, #28]
 800672a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	73da      	strb	r2, [r3, #15]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08c      	sub	sp, #48	; 0x30
 8006748:	af02      	add	r7, sp, #8
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
 800674e:	460b      	mov	r3, r1
 8006750:	80bb      	strh	r3, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800675a:	887b      	ldrh	r3, [r7, #2]
 800675c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006760:	d07f      	beq.n	8006862 <pbuf_alloc+0x11e>
 8006762:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006766:	f300 80c8 	bgt.w	80068fa <pbuf_alloc+0x1b6>
 800676a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800676e:	d010      	beq.n	8006792 <pbuf_alloc+0x4e>
 8006770:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006774:	f300 80c1 	bgt.w	80068fa <pbuf_alloc+0x1b6>
 8006778:	2b01      	cmp	r3, #1
 800677a:	d002      	beq.n	8006782 <pbuf_alloc+0x3e>
 800677c:	2b41      	cmp	r3, #65	; 0x41
 800677e:	f040 80bc 	bne.w	80068fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006782:	887a      	ldrh	r2, [r7, #2]
 8006784:	88bb      	ldrh	r3, [r7, #4]
 8006786:	4619      	mov	r1, r3
 8006788:	2000      	movs	r0, #0
 800678a:	f000 f8d1 	bl	8006930 <pbuf_alloc_reference>
 800678e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006790:	e0bd      	b.n	800690e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800679e:	2008      	movs	r0, #8
 80067a0:	f7ff fc56 	bl	8006050 <memp_malloc>
 80067a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80067ac:	f7ff ff94 	bl	80066d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80067b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b8:	f000 faa8 	bl	8006d0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	e0a7      	b.n	8006910 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80067c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067c2:	3303      	adds	r3, #3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8b7a      	ldrh	r2, [r7, #26]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	bf28      	it	cs
 80067d8:	4613      	movcs	r3, r2
 80067da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80067dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067de:	3310      	adds	r3, #16
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	3303      	adds	r3, #3
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	4618      	mov	r0, r3
 80067ec:	89f9      	ldrh	r1, [r7, #14]
 80067ee:	8b7a      	ldrh	r2, [r7, #26]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4601      	mov	r1, r0
 80067fc:	6938      	ldr	r0, [r7, #16]
 80067fe:	f7ff ff77 	bl	80066f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <pbuf_alloc+0xd8>
 800680e:	4b42      	ldr	r3, [pc, #264]	; (8006918 <pbuf_alloc+0x1d4>)
 8006810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006814:	4941      	ldr	r1, [pc, #260]	; (800691c <pbuf_alloc+0x1d8>)
 8006816:	4842      	ldr	r0, [pc, #264]	; (8006920 <pbuf_alloc+0x1dc>)
 8006818:	f009 f8ec 	bl	800f9f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800681c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800681e:	3303      	adds	r3, #3
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006828:	d106      	bne.n	8006838 <pbuf_alloc+0xf4>
 800682a:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <pbuf_alloc+0x1d4>)
 800682c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006830:	493c      	ldr	r1, [pc, #240]	; (8006924 <pbuf_alloc+0x1e0>)
 8006832:	483b      	ldr	r0, [pc, #236]	; (8006920 <pbuf_alloc+0x1dc>)
 8006834:	f009 f8de 	bl	800f9f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	e002      	b.n	800684a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800684e:	8b7a      	ldrh	r2, [r7, #26]
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800685a:	8b7b      	ldrh	r3, [r7, #26]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d19e      	bne.n	800679e <pbuf_alloc+0x5a>
      break;
 8006860:	e055      	b.n	800690e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006864:	3303      	adds	r3, #3
 8006866:	b29b      	uxth	r3, r3
 8006868:	f023 0303 	bic.w	r3, r3, #3
 800686c:	b29a      	uxth	r2, r3
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	3303      	adds	r3, #3
 8006872:	b29b      	uxth	r3, r3
 8006874:	f023 0303 	bic.w	r3, r3, #3
 8006878:	b29b      	uxth	r3, r3
 800687a:	4413      	add	r3, r2
 800687c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800687e:	8b3b      	ldrh	r3, [r7, #24]
 8006880:	3310      	adds	r3, #16
 8006882:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006884:	8b3a      	ldrh	r2, [r7, #24]
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	3303      	adds	r3, #3
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	429a      	cmp	r2, r3
 8006890:	d306      	bcc.n	80068a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006892:	8afa      	ldrh	r2, [r7, #22]
 8006894:	88bb      	ldrh	r3, [r7, #4]
 8006896:	3303      	adds	r3, #3
 8006898:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800689c:	429a      	cmp	r2, r3
 800689e:	d201      	bcs.n	80068a4 <pbuf_alloc+0x160>
        return NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e035      	b.n	8006910 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80068a4:	8afb      	ldrh	r3, [r7, #22]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fa64 	bl	8005d74 <mem_malloc>
 80068ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <pbuf_alloc+0x174>
        return NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e02b      	b.n	8006910 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80068b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ba:	3310      	adds	r3, #16
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	4413      	add	r3, r2
 80068c0:	3303      	adds	r3, #3
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	4618      	mov	r0, r3
 80068c8:	88b9      	ldrh	r1, [r7, #4]
 80068ca:	88ba      	ldrh	r2, [r7, #4]
 80068cc:	2300      	movs	r3, #0
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	887b      	ldrh	r3, [r7, #2]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	460b      	mov	r3, r1
 80068d6:	4601      	mov	r1, r0
 80068d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068da:	f7ff ff09 	bl	80066f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <pbuf_alloc+0x1c8>
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <pbuf_alloc+0x1d4>)
 80068ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 80068f0:	490d      	ldr	r1, [pc, #52]	; (8006928 <pbuf_alloc+0x1e4>)
 80068f2:	480b      	ldr	r0, [pc, #44]	; (8006920 <pbuf_alloc+0x1dc>)
 80068f4:	f009 f87e 	bl	800f9f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80068f8:	e008      	b.n	800690c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80068fa:	4b07      	ldr	r3, [pc, #28]	; (8006918 <pbuf_alloc+0x1d4>)
 80068fc:	f240 1227 	movw	r2, #295	; 0x127
 8006900:	490a      	ldr	r1, [pc, #40]	; (800692c <pbuf_alloc+0x1e8>)
 8006902:	4807      	ldr	r0, [pc, #28]	; (8006920 <pbuf_alloc+0x1dc>)
 8006904:	f009 f876 	bl	800f9f4 <iprintf>
      return NULL;
 8006908:	2300      	movs	r3, #0
 800690a:	e001      	b.n	8006910 <pbuf_alloc+0x1cc>
      break;
 800690c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	; 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	080113fc 	.word	0x080113fc
 800691c:	0801142c 	.word	0x0801142c
 8006920:	0801145c 	.word	0x0801145c
 8006924:	08011484 	.word	0x08011484
 8006928:	080114b8 	.word	0x080114b8
 800692c:	080114e4 	.word	0x080114e4

08006930 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af02      	add	r7, sp, #8
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
 800693c:	4613      	mov	r3, r2
 800693e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006940:	883b      	ldrh	r3, [r7, #0]
 8006942:	2b41      	cmp	r3, #65	; 0x41
 8006944:	d009      	beq.n	800695a <pbuf_alloc_reference+0x2a>
 8006946:	883b      	ldrh	r3, [r7, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d006      	beq.n	800695a <pbuf_alloc_reference+0x2a>
 800694c:	4b0f      	ldr	r3, [pc, #60]	; (800698c <pbuf_alloc_reference+0x5c>)
 800694e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006952:	490f      	ldr	r1, [pc, #60]	; (8006990 <pbuf_alloc_reference+0x60>)
 8006954:	480f      	ldr	r0, [pc, #60]	; (8006994 <pbuf_alloc_reference+0x64>)
 8006956:	f009 f84d 	bl	800f9f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800695a:	2007      	movs	r0, #7
 800695c:	f7ff fb78 	bl	8006050 <memp_malloc>
 8006960:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	e00b      	b.n	8006984 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800696c:	8879      	ldrh	r1, [r7, #2]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	2300      	movs	r3, #0
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	883b      	ldrh	r3, [r7, #0]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	460b      	mov	r3, r1
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff feb7 	bl	80066f0 <pbuf_init_alloced_pbuf>
  return p;
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	080113fc 	.word	0x080113fc
 8006990:	08011500 	.word	0x08011500
 8006994:	0801145c 	.word	0x0801145c

08006998 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	460b      	mov	r3, r1
 80069a6:	81bb      	strh	r3, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	3303      	adds	r3, #3
 80069b4:	f023 0203 	bic.w	r2, r3, #3
 80069b8:	89bb      	ldrh	r3, [r7, #12]
 80069ba:	441a      	add	r2, r3
 80069bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069be:	429a      	cmp	r2, r3
 80069c0:	d901      	bls.n	80069c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e018      	b.n	80069f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80069cc:	8a7b      	ldrh	r3, [r7, #18]
 80069ce:	3303      	adds	r3, #3
 80069d0:	f023 0303 	bic.w	r3, r3, #3
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	4413      	add	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e001      	b.n	80069e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	89b9      	ldrh	r1, [r7, #12]
 80069e4:	89ba      	ldrh	r2, [r7, #12]
 80069e6:	2302      	movs	r3, #2
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	897b      	ldrh	r3, [r7, #10]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	460b      	mov	r3, r1
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	f7ff fe7d 	bl	80066f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80069f6:	687b      	ldr	r3, [r7, #4]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <pbuf_realloc+0x20>
 8006a12:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <pbuf_realloc+0xfc>)
 8006a14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006a18:	4939      	ldr	r1, [pc, #228]	; (8006b00 <pbuf_realloc+0x100>)
 8006a1a:	483a      	ldr	r0, [pc, #232]	; (8006b04 <pbuf_realloc+0x104>)
 8006a1c:	f008 ffea 	bl	800f9f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	891b      	ldrh	r3, [r3, #8]
 8006a24:	887a      	ldrh	r2, [r7, #2]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d263      	bcs.n	8006af2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	891a      	ldrh	r2, [r3, #8]
 8006a2e:	887b      	ldrh	r3, [r7, #2]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	817b      	strh	r3, [r7, #10]
  q = p;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006a3c:	e018      	b.n	8006a70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	895b      	ldrh	r3, [r3, #10]
 8006a42:	897a      	ldrh	r2, [r7, #10]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	891a      	ldrh	r2, [r3, #8]
 8006a4c:	893b      	ldrh	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <pbuf_realloc+0x70>
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <pbuf_realloc+0xfc>)
 8006a64:	f240 12af 	movw	r2, #431	; 0x1af
 8006a68:	4927      	ldr	r1, [pc, #156]	; (8006b08 <pbuf_realloc+0x108>)
 8006a6a:	4826      	ldr	r0, [pc, #152]	; (8006b04 <pbuf_realloc+0x104>)
 8006a6c:	f008 ffc2 	bl	800f9f4 <iprintf>
  while (rem_len > q->len) {
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	895b      	ldrh	r3, [r3, #10]
 8006a74:	897a      	ldrh	r2, [r7, #10]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d8e1      	bhi.n	8006a3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	7b1b      	ldrb	r3, [r3, #12]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d121      	bne.n	8006aca <pbuf_realloc+0xca>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	895b      	ldrh	r3, [r3, #10]
 8006a8a:	897a      	ldrh	r2, [r7, #10]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d01c      	beq.n	8006aca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	7b5b      	ldrb	r3, [r3, #13]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d116      	bne.n	8006aca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff f864 	bl	8005b7c <mem_trim>
 8006ab4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <pbuf_realloc+0xca>
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <pbuf_realloc+0xfc>)
 8006abe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006ac2:	4912      	ldr	r1, [pc, #72]	; (8006b0c <pbuf_realloc+0x10c>)
 8006ac4:	480f      	ldr	r0, [pc, #60]	; (8006b04 <pbuf_realloc+0x104>)
 8006ac6:	f008 ff95 	bl	800f9f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	897a      	ldrh	r2, [r7, #10]
 8006ace:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	895a      	ldrh	r2, [r3, #10]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 f911 	bl	8006d0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e000      	b.n	8006af4 <pbuf_realloc+0xf4>
    return;
 8006af2:	bf00      	nop

}
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	080113fc 	.word	0x080113fc
 8006b00:	08011514 	.word	0x08011514
 8006b04:	0801145c 	.word	0x0801145c
 8006b08:	0801152c 	.word	0x0801152c
 8006b0c:	08011544 	.word	0x08011544

08006b10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <pbuf_add_header_impl+0x22>
 8006b24:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <pbuf_add_header_impl+0xc4>)
 8006b26:	f240 12df 	movw	r2, #479	; 0x1df
 8006b2a:	492b      	ldr	r1, [pc, #172]	; (8006bd8 <pbuf_add_header_impl+0xc8>)
 8006b2c:	482b      	ldr	r0, [pc, #172]	; (8006bdc <pbuf_add_header_impl+0xcc>)
 8006b2e:	f008 ff61 	bl	800f9f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <pbuf_add_header_impl+0x30>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3e:	d301      	bcc.n	8006b44 <pbuf_add_header_impl+0x34>
    return 1;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e043      	b.n	8006bcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <pbuf_add_header_impl+0x3e>
    return 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e03e      	b.n	8006bcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	891a      	ldrh	r2, [r3, #8]
 8006b56:	8a7b      	ldrh	r3, [r7, #18]
 8006b58:	4413      	add	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	8a7a      	ldrh	r2, [r7, #18]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d901      	bls.n	8006b66 <pbuf_add_header_impl+0x56>
    return 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e032      	b.n	8006bcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7b1b      	ldrb	r3, [r3, #12]
 8006b6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006b6c:	8a3b      	ldrh	r3, [r7, #16]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	425b      	negs	r3, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3310      	adds	r3, #16
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d20d      	bcs.n	8006ba8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e01d      	b.n	8006bcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d006      	beq.n	8006ba4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e001      	b.n	8006ba8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e011      	b.n	8006bcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	895a      	ldrh	r2, [r3, #10]
 8006bb2:	8a7b      	ldrh	r3, [r7, #18]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	891a      	ldrh	r2, [r3, #8]
 8006bc0:	8a7b      	ldrh	r3, [r7, #18]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	811a      	strh	r2, [r3, #8]


  return 0;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	080113fc 	.word	0x080113fc
 8006bd8:	08011560 	.word	0x08011560
 8006bdc:	0801145c 	.word	0x0801145c

08006be0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ff8e 	bl	8006b10 <pbuf_add_header_impl>
 8006bf4:	4603      	mov	r3, r0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <pbuf_remove_header+0x1e>
 8006c10:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <pbuf_remove_header+0x94>)
 8006c12:	f240 224b 	movw	r2, #587	; 0x24b
 8006c16:	4920      	ldr	r1, [pc, #128]	; (8006c98 <pbuf_remove_header+0x98>)
 8006c18:	4820      	ldr	r0, [pc, #128]	; (8006c9c <pbuf_remove_header+0x9c>)
 8006c1a:	f008 feeb 	bl	800f9f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <pbuf_remove_header+0x2c>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c2a:	d301      	bcc.n	8006c30 <pbuf_remove_header+0x30>
    return 1;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e02c      	b.n	8006c8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <pbuf_remove_header+0x3a>
    return 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e027      	b.n	8006c8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	895b      	ldrh	r3, [r3, #10]
 8006c42:	89fa      	ldrh	r2, [r7, #14]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d908      	bls.n	8006c5a <pbuf_remove_header+0x5a>
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <pbuf_remove_header+0x94>)
 8006c4a:	f240 2255 	movw	r2, #597	; 0x255
 8006c4e:	4914      	ldr	r1, [pc, #80]	; (8006ca0 <pbuf_remove_header+0xa0>)
 8006c50:	4812      	ldr	r0, [pc, #72]	; (8006c9c <pbuf_remove_header+0x9c>)
 8006c52:	f008 fecf 	bl	800f9f4 <iprintf>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e017      	b.n	8006c8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	441a      	add	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	895a      	ldrh	r2, [r3, #10]
 8006c70:	89fb      	ldrh	r3, [r7, #14]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	891a      	ldrh	r2, [r3, #8]
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	080113fc 	.word	0x080113fc
 8006c98:	08011560 	.word	0x08011560
 8006c9c:	0801145c 	.word	0x0801145c
 8006ca0:	0801156c 	.word	0x0801156c

08006ca4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	807b      	strh	r3, [r7, #2]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da08      	bge.n	8006cce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006cbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cc0:	425b      	negs	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff ff9b 	bl	8006c00 <pbuf_remove_header>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	e007      	b.n	8006cde <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cd2:	787a      	ldrb	r2, [r7, #1]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff1a 	bl	8006b10 <pbuf_add_header_impl>
 8006cdc:	4603      	mov	r3, r0
  }
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff ffd2 	bl	8006ca4 <pbuf_header_impl>
 8006d00:	4603      	mov	r3, r0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <pbuf_free+0x22>
 8006d20:	4b38      	ldr	r3, [pc, #224]	; (8006e04 <pbuf_free+0xf8>)
 8006d22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006d26:	4938      	ldr	r1, [pc, #224]	; (8006e08 <pbuf_free+0xfc>)
 8006d28:	4838      	ldr	r0, [pc, #224]	; (8006e0c <pbuf_free+0x100>)
 8006d2a:	f008 fe63 	bl	800f9f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e063      	b.n	8006dfa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006d36:	e05c      	b.n	8006df2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7b9b      	ldrb	r3, [r3, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <pbuf_free+0x42>
 8006d40:	4b30      	ldr	r3, [pc, #192]	; (8006e04 <pbuf_free+0xf8>)
 8006d42:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006d46:	4932      	ldr	r1, [pc, #200]	; (8006e10 <pbuf_free+0x104>)
 8006d48:	4830      	ldr	r0, [pc, #192]	; (8006e0c <pbuf_free+0x100>)
 8006d4a:	f008 fe53 	bl	800f9f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7b9b      	ldrb	r3, [r3, #14]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	739a      	strb	r2, [r3, #14]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7b9b      	ldrb	r3, [r3, #14]
 8006d5e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006d60:	7dbb      	ldrb	r3, [r7, #22]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d143      	bne.n	8006dee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7b1b      	ldrb	r3, [r3, #12]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7b5b      	ldrb	r3, [r3, #13]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <pbuf_free+0x90>
 8006d8e:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <pbuf_free+0xf8>)
 8006d90:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006d94:	491f      	ldr	r1, [pc, #124]	; (8006e14 <pbuf_free+0x108>)
 8006d96:	481d      	ldr	r0, [pc, #116]	; (8006e0c <pbuf_free+0x100>)
 8006d98:	f008 fe2c 	bl	800f9f4 <iprintf>
        pc->custom_free_function(p);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
 8006da4:	e01d      	b.n	8006de2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d104      	bne.n	8006db6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	2008      	movs	r0, #8
 8006db0:	f7ff f99a 	bl	80060e8 <memp_free>
 8006db4:	e015      	b.n	8006de2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d104      	bne.n	8006dc6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	2007      	movs	r0, #7
 8006dc0:	f7ff f992 	bl	80060e8 <memp_free>
 8006dc4:	e00d      	b.n	8006de2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <pbuf_free+0xc8>
          mem_free(p);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe fe6b 	bl	8005aa8 <mem_free>
 8006dd2:	e006      	b.n	8006de2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <pbuf_free+0xf8>)
 8006dd6:	f240 320f 	movw	r2, #783	; 0x30f
 8006dda:	490f      	ldr	r1, [pc, #60]	; (8006e18 <pbuf_free+0x10c>)
 8006ddc:	480b      	ldr	r0, [pc, #44]	; (8006e0c <pbuf_free+0x100>)
 8006dde:	f008 fe09 	bl	800f9f4 <iprintf>
        }
      }
      count++;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	3301      	adds	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	e001      	b.n	8006df2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d19f      	bne.n	8006d38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	080113fc 	.word	0x080113fc
 8006e08:	08011560 	.word	0x08011560
 8006e0c:	0801145c 	.word	0x0801145c
 8006e10:	0801158c 	.word	0x0801158c
 8006e14:	080115a4 	.word	0x080115a4
 8006e18:	080115c8 	.word	0x080115c8

08006e1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006e28:	e005      	b.n	8006e36 <pbuf_clen+0x1a>
    ++len;
 8006e2a:	89fb      	ldrh	r3, [r7, #14]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f6      	bne.n	8006e2a <pbuf_clen+0xe>
  }
  return len;
 8006e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d010      	beq.n	8006e7c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7b9b      	ldrb	r3, [r3, #14]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7b9b      	ldrb	r3, [r3, #14]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <pbuf_ref+0x30>
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <pbuf_ref+0x38>)
 8006e70:	f240 3242 	movw	r2, #834	; 0x342
 8006e74:	4904      	ldr	r1, [pc, #16]	; (8006e88 <pbuf_ref+0x3c>)
 8006e76:	4805      	ldr	r0, [pc, #20]	; (8006e8c <pbuf_ref+0x40>)
 8006e78:	f008 fdbc 	bl	800f9f4 <iprintf>
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	080113fc 	.word	0x080113fc
 8006e88:	080115dc 	.word	0x080115dc
 8006e8c:	0801145c 	.word	0x0801145c

08006e90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <pbuf_cat+0x16>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d107      	bne.n	8006eb6 <pbuf_cat+0x26>
 8006ea6:	4b20      	ldr	r3, [pc, #128]	; (8006f28 <pbuf_cat+0x98>)
 8006ea8:	f240 3259 	movw	r2, #857	; 0x359
 8006eac:	491f      	ldr	r1, [pc, #124]	; (8006f2c <pbuf_cat+0x9c>)
 8006eae:	4820      	ldr	r0, [pc, #128]	; (8006f30 <pbuf_cat+0xa0>)
 8006eb0:	f008 fda0 	bl	800f9f4 <iprintf>
 8006eb4:	e034      	b.n	8006f20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	e00a      	b.n	8006ed2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	891a      	ldrh	r2, [r3, #8]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	891b      	ldrh	r3, [r3, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f0      	bne.n	8006ebc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	891a      	ldrh	r2, [r3, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	895b      	ldrh	r3, [r3, #10]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d006      	beq.n	8006ef4 <pbuf_cat+0x64>
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <pbuf_cat+0x98>)
 8006ee8:	f240 3262 	movw	r2, #866	; 0x362
 8006eec:	4911      	ldr	r1, [pc, #68]	; (8006f34 <pbuf_cat+0xa4>)
 8006eee:	4810      	ldr	r0, [pc, #64]	; (8006f30 <pbuf_cat+0xa0>)
 8006ef0:	f008 fd80 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d006      	beq.n	8006f0a <pbuf_cat+0x7a>
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <pbuf_cat+0x98>)
 8006efe:	f240 3263 	movw	r2, #867	; 0x363
 8006f02:	490d      	ldr	r1, [pc, #52]	; (8006f38 <pbuf_cat+0xa8>)
 8006f04:	480a      	ldr	r0, [pc, #40]	; (8006f30 <pbuf_cat+0xa0>)
 8006f06:	f008 fd75 	bl	800f9f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	891a      	ldrh	r2, [r3, #8]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	891b      	ldrh	r3, [r3, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	080113fc 	.word	0x080113fc
 8006f2c:	080115f0 	.word	0x080115f0
 8006f30:	0801145c 	.word	0x0801145c
 8006f34:	08011628 	.word	0x08011628
 8006f38:	08011658 	.word	0x08011658

08006f3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ffa1 	bl	8006e90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f7ff ff7c 	bl	8006e4c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <pbuf_copy+0x2a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <pbuf_copy+0x2a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	891a      	ldrh	r2, [r3, #8]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	891b      	ldrh	r3, [r3, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d209      	bcs.n	8006f9a <pbuf_copy+0x3e>
 8006f86:	4b57      	ldr	r3, [pc, #348]	; (80070e4 <pbuf_copy+0x188>)
 8006f88:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006f8c:	4956      	ldr	r1, [pc, #344]	; (80070e8 <pbuf_copy+0x18c>)
 8006f8e:	4857      	ldr	r0, [pc, #348]	; (80070ec <pbuf_copy+0x190>)
 8006f90:	f008 fd30 	bl	800f9f4 <iprintf>
 8006f94:	f06f 030f 	mvn.w	r3, #15
 8006f98:	e09f      	b.n	80070da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	895b      	ldrh	r3, [r3, #10]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	895b      	ldrh	r3, [r3, #10]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1acb      	subs	r3, r1, r3
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d306      	bcc.n	8006fc0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	895b      	ldrh	r3, [r3, #10]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e005      	b.n	8006fcc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	895b      	ldrh	r3, [r3, #10]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	18d0      	adds	r0, r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	4413      	add	r3, r2
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f008 fcd8 	bl	800f994 <memcpy>
    offset_to += len;
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d906      	bls.n	800700e <pbuf_copy+0xb2>
 8007000:	4b38      	ldr	r3, [pc, #224]	; (80070e4 <pbuf_copy+0x188>)
 8007002:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007006:	493a      	ldr	r1, [pc, #232]	; (80070f0 <pbuf_copy+0x194>)
 8007008:	4838      	ldr	r0, [pc, #224]	; (80070ec <pbuf_copy+0x190>)
 800700a:	f008 fcf3 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	895b      	ldrh	r3, [r3, #10]
 8007012:	461a      	mov	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4293      	cmp	r3, r2
 8007018:	d906      	bls.n	8007028 <pbuf_copy+0xcc>
 800701a:	4b32      	ldr	r3, [pc, #200]	; (80070e4 <pbuf_copy+0x188>)
 800701c:	f240 32da 	movw	r2, #986	; 0x3da
 8007020:	4934      	ldr	r1, [pc, #208]	; (80070f4 <pbuf_copy+0x198>)
 8007022:	4832      	ldr	r0, [pc, #200]	; (80070ec <pbuf_copy+0x190>)
 8007024:	f008 fce6 	bl	800f9f4 <iprintf>
    if (offset_from >= p_from->len) {
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	895b      	ldrh	r3, [r3, #10]
 800702c:	461a      	mov	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4293      	cmp	r3, r2
 8007032:	d304      	bcc.n	800703e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	895b      	ldrh	r3, [r3, #10]
 8007042:	461a      	mov	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	4293      	cmp	r3, r2
 8007048:	d114      	bne.n	8007074 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <pbuf_copy+0x118>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <pbuf_copy+0x118>
 8007060:	4b20      	ldr	r3, [pc, #128]	; (80070e4 <pbuf_copy+0x188>)
 8007062:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007066:	4924      	ldr	r1, [pc, #144]	; (80070f8 <pbuf_copy+0x19c>)
 8007068:	4820      	ldr	r0, [pc, #128]	; (80070ec <pbuf_copy+0x190>)
 800706a:	f008 fcc3 	bl	800f9f4 <iprintf>
 800706e:	f06f 030f 	mvn.w	r3, #15
 8007072:	e032      	b.n	80070da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d013      	beq.n	80070a2 <pbuf_copy+0x146>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	895a      	ldrh	r2, [r3, #10]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	891b      	ldrh	r3, [r3, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d10d      	bne.n	80070a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <pbuf_copy+0x146>
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <pbuf_copy+0x188>)
 8007090:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007094:	4919      	ldr	r1, [pc, #100]	; (80070fc <pbuf_copy+0x1a0>)
 8007096:	4815      	ldr	r0, [pc, #84]	; (80070ec <pbuf_copy+0x190>)
 8007098:	f008 fcac 	bl	800f9f4 <iprintf>
 800709c:	f06f 0305 	mvn.w	r3, #5
 80070a0:	e01b      	b.n	80070da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d013      	beq.n	80070d0 <pbuf_copy+0x174>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	895a      	ldrh	r2, [r3, #10]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	891b      	ldrh	r3, [r3, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d10d      	bne.n	80070d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <pbuf_copy+0x174>
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <pbuf_copy+0x188>)
 80070be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80070c2:	490e      	ldr	r1, [pc, #56]	; (80070fc <pbuf_copy+0x1a0>)
 80070c4:	4809      	ldr	r0, [pc, #36]	; (80070ec <pbuf_copy+0x190>)
 80070c6:	f008 fc95 	bl	800f9f4 <iprintf>
 80070ca:	f06f 0305 	mvn.w	r3, #5
 80070ce:	e004      	b.n	80070da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f af61 	bne.w	8006f9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	080113fc 	.word	0x080113fc
 80070e8:	080116a4 	.word	0x080116a4
 80070ec:	0801145c 	.word	0x0801145c
 80070f0:	080116d4 	.word	0x080116d4
 80070f4:	080116ec 	.word	0x080116ec
 80070f8:	08011708 	.word	0x08011708
 80070fc:	08011718 	.word	0x08011718

08007100 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	460b      	mov	r3, r1
 8007110:	80fb      	strh	r3, [r7, #6]
 8007112:	4613      	mov	r3, r2
 8007114:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d108      	bne.n	8007136 <pbuf_copy_partial+0x36>
 8007124:	4b2b      	ldr	r3, [pc, #172]	; (80071d4 <pbuf_copy_partial+0xd4>)
 8007126:	f240 420a 	movw	r2, #1034	; 0x40a
 800712a:	492b      	ldr	r1, [pc, #172]	; (80071d8 <pbuf_copy_partial+0xd8>)
 800712c:	482b      	ldr	r0, [pc, #172]	; (80071dc <pbuf_copy_partial+0xdc>)
 800712e:	f008 fc61 	bl	800f9f4 <iprintf>
 8007132:	2300      	movs	r3, #0
 8007134:	e04a      	b.n	80071cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d108      	bne.n	800714e <pbuf_copy_partial+0x4e>
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <pbuf_copy_partial+0xd4>)
 800713e:	f240 420b 	movw	r2, #1035	; 0x40b
 8007142:	4927      	ldr	r1, [pc, #156]	; (80071e0 <pbuf_copy_partial+0xe0>)
 8007144:	4825      	ldr	r0, [pc, #148]	; (80071dc <pbuf_copy_partial+0xdc>)
 8007146:	f008 fc55 	bl	800f9f4 <iprintf>
 800714a:	2300      	movs	r3, #0
 800714c:	e03e      	b.n	80071cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e034      	b.n	80071be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007154:	88bb      	ldrh	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <pbuf_copy_partial+0x70>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	895b      	ldrh	r3, [r3, #10]
 800715e:	88ba      	ldrh	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d305      	bcc.n	8007170 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	88ba      	ldrh	r2, [r7, #4]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	80bb      	strh	r3, [r7, #4]
 800716e:	e023      	b.n	80071b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	895a      	ldrh	r2, [r3, #10]
 8007174:	88bb      	ldrh	r3, [r7, #4]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800717a:	8b3a      	ldrh	r2, [r7, #24]
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	429a      	cmp	r2, r3
 8007180:	d901      	bls.n	8007186 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007186:	8b7b      	ldrh	r3, [r7, #26]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	18d0      	adds	r0, r2, r3
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	88bb      	ldrh	r3, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	8b3a      	ldrh	r2, [r7, #24]
 8007196:	4619      	mov	r1, r3
 8007198:	f008 fbfc 	bl	800f994 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800719c:	8afa      	ldrh	r2, [r7, #22]
 800719e:	8b3b      	ldrh	r3, [r7, #24]
 80071a0:	4413      	add	r3, r2
 80071a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80071a4:	8b7a      	ldrh	r2, [r7, #26]
 80071a6:	8b3b      	ldrh	r3, [r7, #24]
 80071a8:	4413      	add	r3, r2
 80071aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	8b3b      	ldrh	r3, [r7, #24]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <pbuf_copy_partial+0xca>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1c4      	bne.n	8007154 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80071ca:	8afb      	ldrh	r3, [r7, #22]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	080113fc 	.word	0x080113fc
 80071d8:	08011744 	.word	0x08011744
 80071dc:	0801145c 	.word	0x0801145c
 80071e0:	08011764 	.word	0x08011764

080071e4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d109      	bne.n	8007214 <pbuf_take+0x30>
 8007200:	4b3a      	ldr	r3, [pc, #232]	; (80072ec <pbuf_take+0x108>)
 8007202:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007206:	493a      	ldr	r1, [pc, #232]	; (80072f0 <pbuf_take+0x10c>)
 8007208:	483a      	ldr	r0, [pc, #232]	; (80072f4 <pbuf_take+0x110>)
 800720a:	f008 fbf3 	bl	800f9f4 <iprintf>
 800720e:	f06f 030f 	mvn.w	r3, #15
 8007212:	e067      	b.n	80072e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <pbuf_take+0x4a>
 800721a:	4b34      	ldr	r3, [pc, #208]	; (80072ec <pbuf_take+0x108>)
 800721c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007220:	4935      	ldr	r1, [pc, #212]	; (80072f8 <pbuf_take+0x114>)
 8007222:	4834      	ldr	r0, [pc, #208]	; (80072f4 <pbuf_take+0x110>)
 8007224:	f008 fbe6 	bl	800f9f4 <iprintf>
 8007228:	f06f 030f 	mvn.w	r3, #15
 800722c:	e05a      	b.n	80072e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	891b      	ldrh	r3, [r3, #8]
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	429a      	cmp	r2, r3
 8007236:	d909      	bls.n	800724c <pbuf_take+0x68>
 8007238:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <pbuf_take+0x108>)
 800723a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800723e:	492f      	ldr	r1, [pc, #188]	; (80072fc <pbuf_take+0x118>)
 8007240:	482c      	ldr	r0, [pc, #176]	; (80072f4 <pbuf_take+0x110>)
 8007242:	f008 fbd7 	bl	800f9f4 <iprintf>
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	e04b      	b.n	80072e4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <pbuf_take+0x7e>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <pbuf_take+0x7e>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	891b      	ldrh	r3, [r3, #8]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	429a      	cmp	r2, r3
 8007260:	d902      	bls.n	8007268 <pbuf_take+0x84>
    return ERR_ARG;
 8007262:	f06f 030f 	mvn.w	r3, #15
 8007266:	e03d      	b.n	80072e4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	e028      	b.n	80072c0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <pbuf_take+0x9e>
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <pbuf_take+0x108>)
 8007276:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800727a:	4921      	ldr	r1, [pc, #132]	; (8007300 <pbuf_take+0x11c>)
 800727c:	481d      	ldr	r0, [pc, #116]	; (80072f4 <pbuf_take+0x110>)
 800727e:	f008 fbb9 	bl	800f9f4 <iprintf>
    buf_copy_len = total_copy_len;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	895b      	ldrh	r3, [r3, #10]
 800728a:	461a      	mov	r2, r3
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	4293      	cmp	r3, r2
 8007290:	d902      	bls.n	8007298 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	895b      	ldrh	r3, [r3, #10]
 8007296:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	6858      	ldr	r0, [r3, #4]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4413      	add	r3, r2
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4619      	mov	r1, r3
 80072a6:	f008 fb75 	bl	800f994 <memcpy>
    total_copy_len -= buf_copy_len;
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	4413      	add	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d3      	bne.n	800726e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <pbuf_take+0xf0>
 80072cc:	88fb      	ldrh	r3, [r7, #6]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d006      	beq.n	80072e2 <pbuf_take+0xfe>
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <pbuf_take+0x108>)
 80072d6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80072da:	490a      	ldr	r1, [pc, #40]	; (8007304 <pbuf_take+0x120>)
 80072dc:	4805      	ldr	r0, [pc, #20]	; (80072f4 <pbuf_take+0x110>)
 80072de:	f008 fb89 	bl	800f9f4 <iprintf>
  return ERR_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	080113fc 	.word	0x080113fc
 80072f0:	080117d4 	.word	0x080117d4
 80072f4:	0801145c 	.word	0x0801145c
 80072f8:	080117ec 	.word	0x080117ec
 80072fc:	08011808 	.word	0x08011808
 8007300:	08011828 	.word	0x08011828
 8007304:	08011840 	.word	0x08011840

08007308 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	603a      	str	r2, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
 8007314:	460b      	mov	r3, r1
 8007316:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	8919      	ldrh	r1, [r3, #8]
 800731c:	88ba      	ldrh	r2, [r7, #4]
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fa0f 	bl	8006744 <pbuf_alloc>
 8007326:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <pbuf_clone+0x2a>
    return NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	e011      	b.n	8007356 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fe11 	bl	8006f5c <pbuf_copy>
 800733a:	4603      	mov	r3, r0
 800733c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800733e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <pbuf_clone+0x4c>
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <pbuf_clone+0x58>)
 8007348:	f240 5224 	movw	r2, #1316	; 0x524
 800734c:	4905      	ldr	r1, [pc, #20]	; (8007364 <pbuf_clone+0x5c>)
 800734e:	4806      	ldr	r0, [pc, #24]	; (8007368 <pbuf_clone+0x60>)
 8007350:	f008 fb50 	bl	800f9f4 <iprintf>
  return q;
 8007354:	68fb      	ldr	r3, [r7, #12]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	080113fc 	.word	0x080113fc
 8007364:	08011870 	.word	0x08011870
 8007368:	0801145c 	.word	0x0801145c

0800736c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007370:	f008 fb58 	bl	800fa24 <rand>
 8007374:	4603      	mov	r3, r0
 8007376:	b29b      	uxth	r3, r3
 8007378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800737c:	b29b      	uxth	r3, r3
 800737e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007382:	b29a      	uxth	r2, r3
 8007384:	4b01      	ldr	r3, [pc, #4]	; (800738c <tcp_init+0x20>)
 8007386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007388:	bf00      	nop
 800738a:	bd80      	pop	{r7, pc}
 800738c:	2000000a 	.word	0x2000000a

08007390 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7d1b      	ldrb	r3, [r3, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d105      	bne.n	80073ac <tcp_free+0x1c>
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <tcp_free+0x2c>)
 80073a2:	22d4      	movs	r2, #212	; 0xd4
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <tcp_free+0x30>)
 80073a6:	4807      	ldr	r0, [pc, #28]	; (80073c4 <tcp_free+0x34>)
 80073a8:	f008 fb24 	bl	800f9f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	2001      	movs	r0, #1
 80073b0:	f7fe fe9a 	bl	80060e8 <memp_free>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	080118fc 	.word	0x080118fc
 80073c0:	0801192c 	.word	0x0801192c
 80073c4:	08011940 	.word	0x08011940

080073c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7d1b      	ldrb	r3, [r3, #20]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d105      	bne.n	80073e4 <tcp_free_listen+0x1c>
 80073d8:	4b06      	ldr	r3, [pc, #24]	; (80073f4 <tcp_free_listen+0x2c>)
 80073da:	22df      	movs	r2, #223	; 0xdf
 80073dc:	4906      	ldr	r1, [pc, #24]	; (80073f8 <tcp_free_listen+0x30>)
 80073de:	4807      	ldr	r0, [pc, #28]	; (80073fc <tcp_free_listen+0x34>)
 80073e0:	f008 fb08 	bl	800f9f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	2002      	movs	r0, #2
 80073e8:	f7fe fe7e 	bl	80060e8 <memp_free>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	080118fc 	.word	0x080118fc
 80073f8:	08011968 	.word	0x08011968
 80073fc:	08011940 	.word	0x08011940

08007400 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007404:	f000 fea2 	bl	800814c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <tcp_tmr+0x28>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <tcp_tmr+0x28>)
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <tcp_tmr+0x28>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007420:	f000 fb54 	bl	8007acc <tcp_slowtmr>
  }
}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20005cfd 	.word	0x20005cfd

0800742c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <tcp_remove_listener+0x1c>
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <tcp_remove_listener+0x48>)
 800743e:	22ff      	movs	r2, #255	; 0xff
 8007440:	490d      	ldr	r1, [pc, #52]	; (8007478 <tcp_remove_listener+0x4c>)
 8007442:	480e      	ldr	r0, [pc, #56]	; (800747c <tcp_remove_listener+0x50>)
 8007444:	f008 fad6 	bl	800f9f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e00a      	b.n	8007464 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d102      	bne.n	800745e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f1      	bne.n	800744e <tcp_remove_listener+0x22>
    }
  }
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	080118fc 	.word	0x080118fc
 8007478:	08011984 	.word	0x08011984
 800747c:	08011940 	.word	0x08011940

08007480 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <tcp_listen_closed+0x1c>
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <tcp_listen_closed+0x60>)
 8007490:	f240 1211 	movw	r2, #273	; 0x111
 8007494:	4913      	ldr	r1, [pc, #76]	; (80074e4 <tcp_listen_closed+0x64>)
 8007496:	4814      	ldr	r0, [pc, #80]	; (80074e8 <tcp_listen_closed+0x68>)
 8007498:	f008 faac 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7d1b      	ldrb	r3, [r3, #20]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d006      	beq.n	80074b2 <tcp_listen_closed+0x32>
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <tcp_listen_closed+0x60>)
 80074a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80074aa:	4910      	ldr	r1, [pc, #64]	; (80074ec <tcp_listen_closed+0x6c>)
 80074ac:	480e      	ldr	r0, [pc, #56]	; (80074e8 <tcp_listen_closed+0x68>)
 80074ae:	f008 faa1 	bl	800f9f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80074b2:	2301      	movs	r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e00b      	b.n	80074d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80074b8:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <tcp_listen_closed+0x70>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ffb1 	bl	800742c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d9f0      	bls.n	80074b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	080118fc 	.word	0x080118fc
 80074e4:	080119ac 	.word	0x080119ac
 80074e8:	08011940 	.word	0x08011940
 80074ec:	080119b8 	.word	0x080119b8
 80074f0:	080138d0 	.word	0x080138d0

080074f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80074f4:	b5b0      	push	{r4, r5, r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <tcp_close_shutdown+0x20>
 8007506:	4b63      	ldr	r3, [pc, #396]	; (8007694 <tcp_close_shutdown+0x1a0>)
 8007508:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800750c:	4962      	ldr	r1, [pc, #392]	; (8007698 <tcp_close_shutdown+0x1a4>)
 800750e:	4863      	ldr	r0, [pc, #396]	; (800769c <tcp_close_shutdown+0x1a8>)
 8007510:	f008 fa70 	bl	800f9f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d066      	beq.n	80075e8 <tcp_close_shutdown+0xf4>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7d1b      	ldrb	r3, [r3, #20]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d003      	beq.n	800752a <tcp_close_shutdown+0x36>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	2b07      	cmp	r3, #7
 8007528:	d15e      	bne.n	80075e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <tcp_close_shutdown+0x48>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800753a:	d055      	beq.n	80075e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8b5b      	ldrh	r3, [r3, #26]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <tcp_close_shutdown+0x62>
 8007548:	4b52      	ldr	r3, [pc, #328]	; (8007694 <tcp_close_shutdown+0x1a0>)
 800754a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800754e:	4954      	ldr	r1, [pc, #336]	; (80076a0 <tcp_close_shutdown+0x1ac>)
 8007550:	4852      	ldr	r0, [pc, #328]	; (800769c <tcp_close_shutdown+0x1a8>)
 8007552:	f008 fa4f 	bl	800f9f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800755e:	687d      	ldr	r5, [r7, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	8ad2      	ldrh	r2, [r2, #22]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	8b09      	ldrh	r1, [r1, #24]
 800756c:	9102      	str	r1, [sp, #8]
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	462b      	mov	r3, r5
 8007574:	4622      	mov	r2, r4
 8007576:	4601      	mov	r1, r0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f004 fe91 	bl	800c2a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f8c6 	bl	8008710 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007584:	4b47      	ldr	r3, [pc, #284]	; (80076a4 <tcp_close_shutdown+0x1b0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d105      	bne.n	800759a <tcp_close_shutdown+0xa6>
 800758e:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <tcp_close_shutdown+0x1b0>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	4a43      	ldr	r2, [pc, #268]	; (80076a4 <tcp_close_shutdown+0x1b0>)
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e013      	b.n	80075c2 <tcp_close_shutdown+0xce>
 800759a:	4b42      	ldr	r3, [pc, #264]	; (80076a4 <tcp_close_shutdown+0x1b0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e00c      	b.n	80075bc <tcp_close_shutdown+0xc8>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d104      	bne.n	80075b6 <tcp_close_shutdown+0xc2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	60da      	str	r2, [r3, #12]
 80075b4:	e005      	b.n	80075c2 <tcp_close_shutdown+0xce>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1ef      	bne.n	80075a2 <tcp_close_shutdown+0xae>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	60da      	str	r2, [r3, #12]
 80075c8:	4b37      	ldr	r3, [pc, #220]	; (80076a8 <tcp_close_shutdown+0x1b4>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80075ce:	4b37      	ldr	r3, [pc, #220]	; (80076ac <tcp_close_shutdown+0x1b8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d102      	bne.n	80075de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80075d8:	f003 fd5e 	bl	800b098 <tcp_trigger_input_pcb_close>
 80075dc:	e002      	b.n	80075e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fed6 	bl	8007390 <tcp_free>
      }
      return ERR_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	e050      	b.n	800768a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7d1b      	ldrb	r3, [r3, #20]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d03b      	beq.n	8007668 <tcp_close_shutdown+0x174>
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	dc44      	bgt.n	800767e <tcp_close_shutdown+0x18a>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <tcp_close_shutdown+0x10a>
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d02a      	beq.n	8007652 <tcp_close_shutdown+0x15e>
 80075fc:	e03f      	b.n	800767e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8adb      	ldrh	r3, [r3, #22]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d021      	beq.n	800764a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007606:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <tcp_close_shutdown+0x1bc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d105      	bne.n	800761c <tcp_close_shutdown+0x128>
 8007610:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <tcp_close_shutdown+0x1bc>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	4a26      	ldr	r2, [pc, #152]	; (80076b0 <tcp_close_shutdown+0x1bc>)
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e013      	b.n	8007644 <tcp_close_shutdown+0x150>
 800761c:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <tcp_close_shutdown+0x1bc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	e00c      	b.n	800763e <tcp_close_shutdown+0x14a>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d104      	bne.n	8007638 <tcp_close_shutdown+0x144>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	e005      	b.n	8007644 <tcp_close_shutdown+0x150>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ef      	bne.n	8007624 <tcp_close_shutdown+0x130>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fea0 	bl	8007390 <tcp_free>
      break;
 8007650:	e01a      	b.n	8007688 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff14 	bl	8007480 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	4816      	ldr	r0, [pc, #88]	; (80076b4 <tcp_close_shutdown+0x1c0>)
 800765c:	f001 f8a8 	bl	80087b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff feb1 	bl	80073c8 <tcp_free_listen>
      break;
 8007666:	e00f      	b.n	8007688 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	480e      	ldr	r0, [pc, #56]	; (80076a4 <tcp_close_shutdown+0x1b0>)
 800766c:	f001 f8a0 	bl	80087b0 <tcp_pcb_remove>
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <tcp_close_shutdown+0x1b4>)
 8007672:	2201      	movs	r2, #1
 8007674:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fe8a 	bl	8007390 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800767c:	e004      	b.n	8007688 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f81a 	bl	80076b8 <tcp_close_shutdown_fin>
 8007684:	4603      	mov	r3, r0
 8007686:	e000      	b.n	800768a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bdb0      	pop	{r4, r5, r7, pc}
 8007692:	bf00      	nop
 8007694:	080118fc 	.word	0x080118fc
 8007698:	080119d0 	.word	0x080119d0
 800769c:	08011940 	.word	0x08011940
 80076a0:	080119f0 	.word	0x080119f0
 80076a4:	20005cf4 	.word	0x20005cf4
 80076a8:	20005cfc 	.word	0x20005cfc
 80076ac:	20005d34 	.word	0x20005d34
 80076b0:	20005cec 	.word	0x20005cec
 80076b4:	20005cf0 	.word	0x20005cf0

080076b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <tcp_close_shutdown_fin+0x1c>
 80076c6:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <tcp_close_shutdown_fin+0xc8>)
 80076c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80076cc:	492d      	ldr	r1, [pc, #180]	; (8007784 <tcp_close_shutdown_fin+0xcc>)
 80076ce:	482e      	ldr	r0, [pc, #184]	; (8007788 <tcp_close_shutdown_fin+0xd0>)
 80076d0:	f008 f990 	bl	800f9f4 <iprintf>

  switch (pcb->state) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7d1b      	ldrb	r3, [r3, #20]
 80076d8:	2b07      	cmp	r3, #7
 80076da:	d020      	beq.n	800771e <tcp_close_shutdown_fin+0x66>
 80076dc:	2b07      	cmp	r3, #7
 80076de:	dc2b      	bgt.n	8007738 <tcp_close_shutdown_fin+0x80>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d002      	beq.n	80076ea <tcp_close_shutdown_fin+0x32>
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d00d      	beq.n	8007704 <tcp_close_shutdown_fin+0x4c>
 80076e8:	e026      	b.n	8007738 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f003 fee6 	bl	800b4bc <tcp_send_fin>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80076f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11f      	bne.n	800773c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2205      	movs	r2, #5
 8007700:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007702:	e01b      	b.n	800773c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f003 fed9 	bl	800b4bc <tcp_send_fin>
 800770a:	4603      	mov	r3, r0
 800770c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800770e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d114      	bne.n	8007740 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2205      	movs	r2, #5
 800771a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800771c:	e010      	b.n	8007740 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f003 fecc 	bl	800b4bc <tcp_send_fin>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2209      	movs	r2, #9
 8007734:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007736:	e005      	b.n	8007744 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e01c      	b.n	8007776 <tcp_close_shutdown_fin+0xbe>
      break;
 800773c:	bf00      	nop
 800773e:	e002      	b.n	8007746 <tcp_close_shutdown_fin+0x8e>
      break;
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <tcp_close_shutdown_fin+0x8e>
      break;
 8007744:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f003 fff2 	bl	800b738 <tcp_output>
 8007754:	e00d      	b.n	8007772 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d108      	bne.n	8007772 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8b5b      	ldrh	r3, [r3, #26]
 8007764:	f043 0308 	orr.w	r3, r3, #8
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e001      	b.n	8007776 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	080118fc 	.word	0x080118fc
 8007784:	080119ac 	.word	0x080119ac
 8007788:	08011940 	.word	0x08011940

0800778c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <tcp_close+0x22>
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <tcp_close+0x4c>)
 800779c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80077a0:	490e      	ldr	r1, [pc, #56]	; (80077dc <tcp_close+0x50>)
 80077a2:	480f      	ldr	r0, [pc, #60]	; (80077e0 <tcp_close+0x54>)
 80077a4:	f008 f926 	bl	800f9f4 <iprintf>
 80077a8:	f06f 030f 	mvn.w	r3, #15
 80077ac:	e00f      	b.n	80077ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7d1b      	ldrb	r3, [r3, #20]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d006      	beq.n	80077c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	8b5b      	ldrh	r3, [r3, #26]
 80077ba:	f043 0310 	orr.w	r3, r3, #16
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80077c4:	2101      	movs	r1, #1
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fe94 	bl	80074f4 <tcp_close_shutdown>
 80077cc:	4603      	mov	r3, r0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	080118fc 	.word	0x080118fc
 80077dc:	08011a0c 	.word	0x08011a0c
 80077e0:	08011940 	.word	0x08011940

080077e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	; 0x38
 80077e8:	af04      	add	r7, sp, #16
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <tcp_abandon+0x20>
 80077f4:	4b52      	ldr	r3, [pc, #328]	; (8007940 <tcp_abandon+0x15c>)
 80077f6:	f240 223d 	movw	r2, #573	; 0x23d
 80077fa:	4952      	ldr	r1, [pc, #328]	; (8007944 <tcp_abandon+0x160>)
 80077fc:	4852      	ldr	r0, [pc, #328]	; (8007948 <tcp_abandon+0x164>)
 80077fe:	f008 f8f9 	bl	800f9f4 <iprintf>
 8007802:	e099      	b.n	8007938 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7d1b      	ldrb	r3, [r3, #20]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d106      	bne.n	800781a <tcp_abandon+0x36>
 800780c:	4b4c      	ldr	r3, [pc, #304]	; (8007940 <tcp_abandon+0x15c>)
 800780e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007812:	494e      	ldr	r1, [pc, #312]	; (800794c <tcp_abandon+0x168>)
 8007814:	484c      	ldr	r0, [pc, #304]	; (8007948 <tcp_abandon+0x164>)
 8007816:	f008 f8ed 	bl	800f9f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	2b0a      	cmp	r3, #10
 8007820:	d107      	bne.n	8007832 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	484a      	ldr	r0, [pc, #296]	; (8007950 <tcp_abandon+0x16c>)
 8007826:	f000 ffc3 	bl	80087b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fdb0 	bl	8007390 <tcp_free>
 8007830:	e082      	b.n	8007938 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7d1b      	ldrb	r3, [r3, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d126      	bne.n	80078aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8adb      	ldrh	r3, [r3, #22]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02e      	beq.n	80078c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007864:	4b3b      	ldr	r3, [pc, #236]	; (8007954 <tcp_abandon+0x170>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d105      	bne.n	800787a <tcp_abandon+0x96>
 800786e:	4b39      	ldr	r3, [pc, #228]	; (8007954 <tcp_abandon+0x170>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a37      	ldr	r2, [pc, #220]	; (8007954 <tcp_abandon+0x170>)
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e013      	b.n	80078a2 <tcp_abandon+0xbe>
 800787a:	4b36      	ldr	r3, [pc, #216]	; (8007954 <tcp_abandon+0x170>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	e00c      	b.n	800789c <tcp_abandon+0xb8>
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d104      	bne.n	8007896 <tcp_abandon+0xb2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	e005      	b.n	80078a2 <tcp_abandon+0xbe>
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1ef      	bne.n	8007882 <tcp_abandon+0x9e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e00b      	b.n	80078c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8adb      	ldrh	r3, [r3, #22]
 80078b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4828      	ldr	r0, [pc, #160]	; (8007958 <tcp_abandon+0x174>)
 80078b8:	f000 ff7a 	bl	80087b0 <tcp_pcb_remove>
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <tcp_abandon+0x178>)
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d004      	beq.n	80078d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fd1c 	bl	800830c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fd13 	bl	800830c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fd0a 	bl	800830c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	8b12      	ldrh	r2, [r2, #24]
 8007908:	9202      	str	r2, [sp, #8]
 800790a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800790c:	9201      	str	r2, [sp, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	460b      	mov	r3, r1
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	69b9      	ldr	r1, [r7, #24]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f004 fcc2 	bl	800c2a0 <tcp_rst>
    }
    last_state = pcb->state;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7d1b      	ldrb	r3, [r3, #20]
 8007920:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fd34 	bl	8007390 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <tcp_abandon+0x154>
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f06f 010c 	mvn.w	r1, #12
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	4798      	blx	r3
  }
}
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	080118fc 	.word	0x080118fc
 8007944:	08011a40 	.word	0x08011a40
 8007948:	08011940 	.word	0x08011940
 800794c:	08011a5c 	.word	0x08011a5c
 8007950:	20005cf8 	.word	0x20005cf8
 8007954:	20005cec 	.word	0x20005cec
 8007958:	20005cf4 	.word	0x20005cf4
 800795c:	20005cfc 	.word	0x20005cfc

08007960 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff ff3a 	bl	80077e4 <tcp_abandon>
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <tcp_update_rcv_ann_wnd+0x1c>
 8007986:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <tcp_update_rcv_ann_wnd+0xa4>)
 8007988:	f240 32a6 	movw	r2, #934	; 0x3a6
 800798c:	4924      	ldr	r1, [pc, #144]	; (8007a20 <tcp_update_rcv_ann_wnd+0xa8>)
 800798e:	4825      	ldr	r0, [pc, #148]	; (8007a24 <tcp_update_rcv_ann_wnd+0xac>)
 8007990:	f008 f830 	bl	800f9f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800799c:	4413      	add	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80079a8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80079ac:	bf28      	it	cs
 80079ae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80079b2:	b292      	uxth	r2, r2
 80079b4:	4413      	add	r3, r2
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	db08      	blt.n	80079d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	e020      	b.n	8007a12 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd03      	ble.n	80079e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079e4:	e014      	b.n	8007a10 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f8:	d306      	bcc.n	8007a08 <tcp_update_rcv_ann_wnd+0x90>
 80079fa:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <tcp_update_rcv_ann_wnd+0xa4>)
 80079fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007a00:	4909      	ldr	r1, [pc, #36]	; (8007a28 <tcp_update_rcv_ann_wnd+0xb0>)
 8007a02:	4808      	ldr	r0, [pc, #32]	; (8007a24 <tcp_update_rcv_ann_wnd+0xac>)
 8007a04:	f007 fff6 	bl	800f9f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007a10:	2300      	movs	r3, #0
  }
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	080118fc 	.word	0x080118fc
 8007a20:	08011b58 	.word	0x08011b58
 8007a24:	08011940 	.word	0x08011940
 8007a28:	08011b7c 	.word	0x08011b7c

08007a2c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <tcp_recved+0x22>
 8007a3e:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <tcp_recved+0x90>)
 8007a40:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007a44:	491e      	ldr	r1, [pc, #120]	; (8007ac0 <tcp_recved+0x94>)
 8007a46:	481f      	ldr	r0, [pc, #124]	; (8007ac4 <tcp_recved+0x98>)
 8007a48:	f007 ffd4 	bl	800f9f4 <iprintf>
 8007a4c:	e032      	b.n	8007ab4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	7d1b      	ldrb	r3, [r3, #20]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d106      	bne.n	8007a64 <tcp_recved+0x38>
 8007a56:	4b19      	ldr	r3, [pc, #100]	; (8007abc <tcp_recved+0x90>)
 8007a58:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007a5c:	491a      	ldr	r1, [pc, #104]	; (8007ac8 <tcp_recved+0x9c>)
 8007a5e:	4819      	ldr	r0, [pc, #100]	; (8007ac4 <tcp_recved+0x98>)
 8007a60:	f007 ffc8 	bl	800f9f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a74:	d804      	bhi.n	8007a80 <tcp_recved+0x54>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	89fa      	ldrh	r2, [r7, #14]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d204      	bcs.n	8007a8a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007a86:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a88:	e002      	b.n	8007a90 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	89fa      	ldrh	r2, [r7, #14]
 8007a8e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff ff71 	bl	8007978 <tcp_update_rcv_ann_wnd>
 8007a96:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007a9e:	d309      	bcc.n	8007ab4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8b5b      	ldrh	r3, [r3, #26]
 8007aa4:	f043 0302 	orr.w	r3, r3, #2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f003 fe42 	bl	800b738 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	080118fc 	.word	0x080118fc
 8007ac0:	08011b98 	.word	0x08011b98
 8007ac4:	08011940 	.word	0x08011940
 8007ac8:	08011bb0 	.word	0x08011bb0

08007acc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007acc:	b5b0      	push	{r4, r5, r7, lr}
 8007ace:	b090      	sub	sp, #64	; 0x40
 8007ad0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007ad8:	4b94      	ldr	r3, [pc, #592]	; (8007d2c <tcp_slowtmr+0x260>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	4a93      	ldr	r2, [pc, #588]	; (8007d2c <tcp_slowtmr+0x260>)
 8007ae0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007ae2:	4b93      	ldr	r3, [pc, #588]	; (8007d30 <tcp_slowtmr+0x264>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b91      	ldr	r3, [pc, #580]	; (8007d30 <tcp_slowtmr+0x264>)
 8007aec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007af2:	4b90      	ldr	r3, [pc, #576]	; (8007d34 <tcp_slowtmr+0x268>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007af8:	e29d      	b.n	8008036 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	7d1b      	ldrb	r3, [r3, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <tcp_slowtmr+0x44>
 8007b02:	4b8d      	ldr	r3, [pc, #564]	; (8007d38 <tcp_slowtmr+0x26c>)
 8007b04:	f240 42be 	movw	r2, #1214	; 0x4be
 8007b08:	498c      	ldr	r1, [pc, #560]	; (8007d3c <tcp_slowtmr+0x270>)
 8007b0a:	488d      	ldr	r0, [pc, #564]	; (8007d40 <tcp_slowtmr+0x274>)
 8007b0c:	f007 ff72 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	7d1b      	ldrb	r3, [r3, #20]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d106      	bne.n	8007b26 <tcp_slowtmr+0x5a>
 8007b18:	4b87      	ldr	r3, [pc, #540]	; (8007d38 <tcp_slowtmr+0x26c>)
 8007b1a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007b1e:	4989      	ldr	r1, [pc, #548]	; (8007d44 <tcp_slowtmr+0x278>)
 8007b20:	4887      	ldr	r0, [pc, #540]	; (8007d40 <tcp_slowtmr+0x274>)
 8007b22:	f007 ff67 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	7d1b      	ldrb	r3, [r3, #20]
 8007b2a:	2b0a      	cmp	r3, #10
 8007b2c:	d106      	bne.n	8007b3c <tcp_slowtmr+0x70>
 8007b2e:	4b82      	ldr	r3, [pc, #520]	; (8007d38 <tcp_slowtmr+0x26c>)
 8007b30:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007b34:	4984      	ldr	r1, [pc, #528]	; (8007d48 <tcp_slowtmr+0x27c>)
 8007b36:	4882      	ldr	r0, [pc, #520]	; (8007d40 <tcp_slowtmr+0x274>)
 8007b38:	f007 ff5c 	bl	800f9f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	7f9a      	ldrb	r2, [r3, #30]
 8007b40:	4b7b      	ldr	r3, [pc, #492]	; (8007d30 <tcp_slowtmr+0x264>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d105      	bne.n	8007b54 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007b52:	e270      	b.n	8008036 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007b54:	4b76      	ldr	r3, [pc, #472]	; (8007d30 <tcp_slowtmr+0x264>)
 8007b56:	781a      	ldrb	r2, [r3, #0]
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	7d1b      	ldrb	r3, [r3, #20]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d10a      	bne.n	8007b86 <tcp_slowtmr+0xba>
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b76:	2b05      	cmp	r3, #5
 8007b78:	d905      	bls.n	8007b86 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b7e:	3301      	adds	r3, #1
 8007b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b84:	e11e      	b.n	8007dc4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	d905      	bls.n	8007b9c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	3301      	adds	r3, #1
 8007b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b9a:	e113      	b.n	8007dc4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d075      	beq.n	8007c92 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d006      	beq.n	8007bbc <tcp_slowtmr+0xf0>
 8007bae:	4b62      	ldr	r3, [pc, #392]	; (8007d38 <tcp_slowtmr+0x26c>)
 8007bb0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007bb4:	4965      	ldr	r1, [pc, #404]	; (8007d4c <tcp_slowtmr+0x280>)
 8007bb6:	4862      	ldr	r0, [pc, #392]	; (8007d40 <tcp_slowtmr+0x274>)
 8007bb8:	f007 ff1c 	bl	800f9f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <tcp_slowtmr+0x106>
 8007bc4:	4b5c      	ldr	r3, [pc, #368]	; (8007d38 <tcp_slowtmr+0x26c>)
 8007bc6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007bca:	4961      	ldr	r1, [pc, #388]	; (8007d50 <tcp_slowtmr+0x284>)
 8007bcc:	485c      	ldr	r0, [pc, #368]	; (8007d40 <tcp_slowtmr+0x274>)
 8007bce:	f007 ff11 	bl	800f9f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007bd8:	2b0b      	cmp	r3, #11
 8007bda:	d905      	bls.n	8007be8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be0:	3301      	adds	r3, #1
 8007be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007be6:	e0ed      	b.n	8007dc4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	4a58      	ldr	r2, [pc, #352]	; (8007d54 <tcp_slowtmr+0x288>)
 8007bf2:	5cd3      	ldrb	r3, [r2, r3]
 8007bf4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007bfc:	7c7a      	ldrb	r2, [r7, #17]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d907      	bls.n	8007c12 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007c18:	7c7a      	ldrb	r2, [r7, #17]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	f200 80d2 	bhi.w	8007dc4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007c20:	2301      	movs	r3, #1
 8007c22:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d108      	bne.n	8007c40 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c30:	f004 fc2a 	bl	800c488 <tcp_zero_window_probe>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	623b      	str	r3, [r7, #32]
 8007c3e:	e011      	b.n	8007c64 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c46:	4619      	mov	r1, r3
 8007c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c4a:	f003 faef 	bl	800b22c <tcp_split_unsent_seg>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d107      	bne.n	8007c64 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c56:	f003 fd6f 	bl	800b738 <tcp_output>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80ac 	beq.w	8007dc4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c7a:	2b06      	cmp	r3, #6
 8007c7c:	f200 80a2 	bhi.w	8007dc4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c86:	3301      	adds	r3, #1
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007c90:	e098      	b.n	8007dc4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db0f      	blt.n	8007cbc <tcp_slowtmr+0x1f0>
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007ca2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d008      	beq.n	8007cbc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	db7b      	blt.n	8007dc4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007ccc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cce:	f004 f825 	bl	800bd1c <tcp_rexmit_rto_prepare>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <tcp_slowtmr+0x21c>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d171      	bne.n	8007dc4 <tcp_slowtmr+0x2f8>
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d06d      	beq.n	8007dc4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	7d1b      	ldrb	r3, [r3, #20]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d03a      	beq.n	8007d66 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cf6:	2b0c      	cmp	r3, #12
 8007cf8:	bf28      	it	cs
 8007cfa:	230c      	movcs	r3, #12
 8007cfc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007d04:	10db      	asrs	r3, r3, #3
 8007d06:	b21b      	sxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007d10:	4413      	add	r3, r2
 8007d12:	7efa      	ldrb	r2, [r7, #27]
 8007d14:	4910      	ldr	r1, [pc, #64]	; (8007d58 <tcp_slowtmr+0x28c>)
 8007d16:	5c8a      	ldrb	r2, [r1, r2]
 8007d18:	4093      	lsls	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007d22:	4293      	cmp	r3, r2
 8007d24:	dc1a      	bgt.n	8007d5c <tcp_slowtmr+0x290>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	b21a      	sxth	r2, r3
 8007d2a:	e019      	b.n	8007d60 <tcp_slowtmr+0x294>
 8007d2c:	20005ce8 	.word	0x20005ce8
 8007d30:	20005cfe 	.word	0x20005cfe
 8007d34:	20005cf4 	.word	0x20005cf4
 8007d38:	080118fc 	.word	0x080118fc
 8007d3c:	08011c40 	.word	0x08011c40
 8007d40:	08011940 	.word	0x08011940
 8007d44:	08011c6c 	.word	0x08011c6c
 8007d48:	08011c98 	.word	0x08011c98
 8007d4c:	08011cc8 	.word	0x08011cc8
 8007d50:	08011cfc 	.word	0x08011cfc
 8007d54:	080138c8 	.word	0x080138c8
 8007d58:	080138b8 	.word	0x080138b8
 8007d5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	2200      	movs	r2, #0
 8007d6a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bf28      	it	cs
 8007d7c:	4613      	movcs	r3, r2
 8007d7e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007d80:	8a7b      	ldrh	r3, [r7, #18]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d206      	bcs.n	8007dac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dc0:	f004 f81c 	bl	800bdfc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	7d1b      	ldrb	r3, [r3, #20]
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d111      	bne.n	8007df0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	8b5b      	ldrh	r3, [r3, #26]
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dd8:	4b9c      	ldr	r3, [pc, #624]	; (800804c <tcp_slowtmr+0x580>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b28      	cmp	r3, #40	; 0x28
 8007de4:	d904      	bls.n	8007df0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dea:	3301      	adds	r3, #1
 8007dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	7a5b      	ldrb	r3, [r3, #9]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d04a      	beq.n	8007e92 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d003      	beq.n	8007e0c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	d142      	bne.n	8007e92 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e0c:	4b8f      	ldr	r3, [pc, #572]	; (800804c <tcp_slowtmr+0x580>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007e1c:	4b8c      	ldr	r3, [pc, #560]	; (8008050 <tcp_slowtmr+0x584>)
 8007e1e:	440b      	add	r3, r1
 8007e20:	498c      	ldr	r1, [pc, #560]	; (8008054 <tcp_slowtmr+0x588>)
 8007e22:	fba1 1303 	umull	r1, r3, r1, r3
 8007e26:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d90a      	bls.n	8007e42 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e30:	3301      	adds	r3, #1
 8007e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e40:	e027      	b.n	8007e92 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e42:	4b82      	ldr	r3, [pc, #520]	; (800804c <tcp_slowtmr+0x580>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4b7f      	ldr	r3, [pc, #508]	; (8008058 <tcp_slowtmr+0x58c>)
 8007e5c:	fb00 f303 	mul.w	r3, r0, r3
 8007e60:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007e62:	497c      	ldr	r1, [pc, #496]	; (8008054 <tcp_slowtmr+0x588>)
 8007e64:	fba1 1303 	umull	r1, r3, r1, r3
 8007e68:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d911      	bls.n	8007e92 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e70:	f004 faca 	bl	800c408 <tcp_keepalive>
 8007e74:	4603      	mov	r3, r0
 8007e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007e7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e88:	3301      	adds	r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d011      	beq.n	8007ebe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	; (800804c <tcp_slowtmr+0x580>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007eaa:	4619      	mov	r1, r3
 8007eac:	460b      	mov	r3, r1
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	440b      	add	r3, r1
 8007eb2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eba:	f000 fddd 	bl	8008a78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	7d1b      	ldrb	r3, [r3, #20]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d10b      	bne.n	8007ede <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ec6:	4b61      	ldr	r3, [pc, #388]	; (800804c <tcp_slowtmr+0x580>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b28      	cmp	r3, #40	; 0x28
 8007ed2:	d904      	bls.n	8007ede <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed8:	3301      	adds	r3, #1
 8007eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	7d1b      	ldrb	r3, [r3, #20]
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d10b      	bne.n	8007efe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ee6:	4b59      	ldr	r3, [pc, #356]	; (800804c <tcp_slowtmr+0x580>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2bf0      	cmp	r3, #240	; 0xf0
 8007ef2:	d904      	bls.n	8007efe <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d060      	beq.n	8007fc8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f10:	f000 fbfe 	bl	8008710 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d010      	beq.n	8007f3c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007f1a:	4b50      	ldr	r3, [pc, #320]	; (800805c <tcp_slowtmr+0x590>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d106      	bne.n	8007f32 <tcp_slowtmr+0x466>
 8007f24:	4b4e      	ldr	r3, [pc, #312]	; (8008060 <tcp_slowtmr+0x594>)
 8007f26:	f240 526d 	movw	r2, #1389	; 0x56d
 8007f2a:	494e      	ldr	r1, [pc, #312]	; (8008064 <tcp_slowtmr+0x598>)
 8007f2c:	484e      	ldr	r0, [pc, #312]	; (8008068 <tcp_slowtmr+0x59c>)
 8007f2e:	f007 fd61 	bl	800f9f4 <iprintf>
        prev->next = pcb->next;
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	e00f      	b.n	8007f5c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007f3c:	4b47      	ldr	r3, [pc, #284]	; (800805c <tcp_slowtmr+0x590>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d006      	beq.n	8007f54 <tcp_slowtmr+0x488>
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <tcp_slowtmr+0x594>)
 8007f48:	f240 5271 	movw	r2, #1393	; 0x571
 8007f4c:	4947      	ldr	r1, [pc, #284]	; (800806c <tcp_slowtmr+0x5a0>)
 8007f4e:	4846      	ldr	r0, [pc, #280]	; (8008068 <tcp_slowtmr+0x59c>)
 8007f50:	f007 fd50 	bl	800f9f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4a40      	ldr	r2, [pc, #256]	; (800805c <tcp_slowtmr+0x590>)
 8007f5a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d013      	beq.n	8007f8c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007f6c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	3304      	adds	r3, #4
 8007f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f74:	8ad2      	ldrh	r2, [r2, #22]
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	8b09      	ldrh	r1, [r1, #24]
 8007f7a:	9102      	str	r1, [sp, #8]
 8007f7c:	9201      	str	r2, [sp, #4]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	462b      	mov	r3, r5
 8007f82:	4622      	mov	r2, r4
 8007f84:	4601      	mov	r1, r0
 8007f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f88:	f004 f98a 	bl	800c2a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	7d1b      	ldrb	r3, [r3, #20]
 8007f96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007fa2:	6838      	ldr	r0, [r7, #0]
 8007fa4:	f7ff f9f4 	bl	8007390 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007fa8:	4b31      	ldr	r3, [pc, #196]	; (8008070 <tcp_slowtmr+0x5a4>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <tcp_slowtmr+0x4f2>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f06f 010c 	mvn.w	r1, #12
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007fbe:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <tcp_slowtmr+0x5a4>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d037      	beq.n	8008036 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007fc6:	e592      	b.n	8007aee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	7f1b      	ldrb	r3, [r3, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	7f1a      	ldrb	r2, [r3, #28]
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	7f5b      	ldrb	r3, [r3, #29]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d325      	bcc.n	8008036 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	2200      	movs	r2, #0
 8007fee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007ff0:	4b1f      	ldr	r3, [pc, #124]	; (8008070 <tcp_slowtmr+0x5a4>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <tcp_slowtmr+0x54c>
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008008:	6912      	ldr	r2, [r2, #16]
 800800a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008016:	e002      	b.n	800801e <tcp_slowtmr+0x552>
 8008018:	2300      	movs	r3, #0
 800801a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800801e:	4b14      	ldr	r3, [pc, #80]	; (8008070 <tcp_slowtmr+0x5a4>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d000      	beq.n	8008028 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008026:	e562      	b.n	8007aee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008028:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008032:	f003 fb81 	bl	800b738 <tcp_output>
  while (pcb != NULL) {
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f ad5e 	bne.w	8007afa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008042:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <tcp_slowtmr+0x5a8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008048:	e069      	b.n	800811e <tcp_slowtmr+0x652>
 800804a:	bf00      	nop
 800804c:	20005ce8 	.word	0x20005ce8
 8008050:	000a4cb8 	.word	0x000a4cb8
 8008054:	10624dd3 	.word	0x10624dd3
 8008058:	000124f8 	.word	0x000124f8
 800805c:	20005cf4 	.word	0x20005cf4
 8008060:	080118fc 	.word	0x080118fc
 8008064:	08011d34 	.word	0x08011d34
 8008068:	08011940 	.word	0x08011940
 800806c:	08011d60 	.word	0x08011d60
 8008070:	20005cfc 	.word	0x20005cfc
 8008074:	20005cf8 	.word	0x20005cf8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	7d1b      	ldrb	r3, [r3, #20]
 800807c:	2b0a      	cmp	r3, #10
 800807e:	d006      	beq.n	800808e <tcp_slowtmr+0x5c2>
 8008080:	4b2b      	ldr	r3, [pc, #172]	; (8008130 <tcp_slowtmr+0x664>)
 8008082:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008086:	492b      	ldr	r1, [pc, #172]	; (8008134 <tcp_slowtmr+0x668>)
 8008088:	482b      	ldr	r0, [pc, #172]	; (8008138 <tcp_slowtmr+0x66c>)
 800808a:	f007 fcb3 	bl	800f9f4 <iprintf>
    pcb_remove = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <tcp_slowtmr+0x670>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2bf0      	cmp	r3, #240	; 0xf0
 80080a0:	d904      	bls.n	80080ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80080a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a6:	3301      	adds	r3, #1
 80080a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80080ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d02f      	beq.n	8008114 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80080b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080b6:	f000 fb2b 	bl	8008710 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80080c0:	4b1f      	ldr	r3, [pc, #124]	; (8008140 <tcp_slowtmr+0x674>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d106      	bne.n	80080d8 <tcp_slowtmr+0x60c>
 80080ca:	4b19      	ldr	r3, [pc, #100]	; (8008130 <tcp_slowtmr+0x664>)
 80080cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80080d0:	491c      	ldr	r1, [pc, #112]	; (8008144 <tcp_slowtmr+0x678>)
 80080d2:	4819      	ldr	r0, [pc, #100]	; (8008138 <tcp_slowtmr+0x66c>)
 80080d4:	f007 fc8e 	bl	800f9f4 <iprintf>
        prev->next = pcb->next;
 80080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	60da      	str	r2, [r3, #12]
 80080e0:	e00f      	b.n	8008102 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80080e2:	4b17      	ldr	r3, [pc, #92]	; (8008140 <tcp_slowtmr+0x674>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d006      	beq.n	80080fa <tcp_slowtmr+0x62e>
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <tcp_slowtmr+0x664>)
 80080ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80080f2:	4915      	ldr	r1, [pc, #84]	; (8008148 <tcp_slowtmr+0x67c>)
 80080f4:	4810      	ldr	r0, [pc, #64]	; (8008138 <tcp_slowtmr+0x66c>)
 80080f6:	f007 fc7d 	bl	800f9f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <tcp_slowtmr+0x674>)
 8008100:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800810c:	69f8      	ldr	r0, [r7, #28]
 800810e:	f7ff f93f 	bl	8007390 <tcp_free>
 8008112:	e004      	b.n	800811e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1a9      	bne.n	8008078 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	3730      	adds	r7, #48	; 0x30
 800812a:	46bd      	mov	sp, r7
 800812c:	bdb0      	pop	{r4, r5, r7, pc}
 800812e:	bf00      	nop
 8008130:	080118fc 	.word	0x080118fc
 8008134:	08011d8c 	.word	0x08011d8c
 8008138:	08011940 	.word	0x08011940
 800813c:	20005ce8 	.word	0x20005ce8
 8008140:	20005cf8 	.word	0x20005cf8
 8008144:	08011dbc 	.word	0x08011dbc
 8008148:	08011de4 	.word	0x08011de4

0800814c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008152:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <tcp_fasttmr+0xbc>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <tcp_fasttmr+0xbc>)
 800815c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800815e:	4b2b      	ldr	r3, [pc, #172]	; (800820c <tcp_fasttmr+0xc0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008164:	e048      	b.n	80081f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7f9a      	ldrb	r2, [r3, #30]
 800816a:	4b27      	ldr	r3, [pc, #156]	; (8008208 <tcp_fasttmr+0xbc>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d03f      	beq.n	80081f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008172:	4b25      	ldr	r3, [pc, #148]	; (8008208 <tcp_fasttmr+0xbc>)
 8008174:	781a      	ldrb	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8b5b      	ldrh	r3, [r3, #26]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d010      	beq.n	80081a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8b5b      	ldrh	r3, [r3, #26]
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f003 facf 	bl	800b738 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8b5b      	ldrh	r3, [r3, #26]
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8b5b      	ldrh	r3, [r3, #26]
 80081ac:	f003 0308 	and.w	r3, r3, #8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8b5b      	ldrh	r3, [r3, #26]
 80081b8:	f023 0308 	bic.w	r3, r3, #8
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fa78 	bl	80076b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80081d6:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <tcp_fasttmr+0xc4>)
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f819 	bl	8008214 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80081e2:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <tcp_fasttmr+0xc4>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d000      	beq.n	80081ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80081ea:	e7b8      	b.n	800815e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	607b      	str	r3, [r7, #4]
 80081f0:	e002      	b.n	80081f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1b3      	bne.n	8008166 <tcp_fasttmr+0x1a>
    }
  }
}
 80081fe:	bf00      	nop
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20005cfe 	.word	0x20005cfe
 800820c:	20005cf4 	.word	0x20005cf4
 8008210:	20005cfc 	.word	0x20005cfc

08008214 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <tcp_process_refused_data+0x22>
 8008222:	4b37      	ldr	r3, [pc, #220]	; (8008300 <tcp_process_refused_data+0xec>)
 8008224:	f240 6209 	movw	r2, #1545	; 0x609
 8008228:	4936      	ldr	r1, [pc, #216]	; (8008304 <tcp_process_refused_data+0xf0>)
 800822a:	4837      	ldr	r0, [pc, #220]	; (8008308 <tcp_process_refused_data+0xf4>)
 800822c:	f007 fbe2 	bl	800f9f4 <iprintf>
 8008230:	f06f 030f 	mvn.w	r3, #15
 8008234:	e060      	b.n	80082f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800823a:	7b5b      	ldrb	r3, [r3, #13]
 800823c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008242:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <tcp_process_refused_data+0x58>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6918      	ldr	r0, [r3, #16]
 800825e:	2300      	movs	r3, #0
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	47a0      	blx	r4
 8008266:	4603      	mov	r3, r0
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	e007      	b.n	800827c <tcp_process_refused_data+0x68>
 800826c:	2300      	movs	r3, #0
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	2000      	movs	r0, #0
 8008274:	f000 f8a4 	bl	80083c0 <tcp_recv_null>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800827c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d12a      	bne.n	80082da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d033      	beq.n	80082f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008292:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008296:	d005      	beq.n	80082a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829c:	3301      	adds	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <tcp_process_refused_data+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6918      	ldr	r0, [r3, #16]
 80082b8:	2300      	movs	r3, #0
 80082ba:	2200      	movs	r2, #0
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	47a0      	blx	r4
 80082c0:	4603      	mov	r3, r0
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e001      	b.n	80082ca <tcp_process_refused_data+0xb6>
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80082ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ce:	f113 0f0d 	cmn.w	r3, #13
 80082d2:	d110      	bne.n	80082f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80082d4:	f06f 030c 	mvn.w	r3, #12
 80082d8:	e00e      	b.n	80082f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80082da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082de:	f113 0f0d 	cmn.w	r3, #13
 80082e2:	d102      	bne.n	80082ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80082e4:	f06f 030c 	mvn.w	r3, #12
 80082e8:	e006      	b.n	80082f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80082f0:	f06f 0304 	mvn.w	r3, #4
 80082f4:	e000      	b.n	80082f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd90      	pop	{r4, r7, pc}
 8008300:	080118fc 	.word	0x080118fc
 8008304:	08011e0c 	.word	0x08011e0c
 8008308:	08011940 	.word	0x08011940

0800830c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008314:	e007      	b.n	8008326 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f80a 	bl	8008336 <tcp_seg_free>
    seg = next;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f4      	bne.n	8008316 <tcp_segs_free+0xa>
  }
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00c      	beq.n	800835e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fcdb 	bl	8006d0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	2003      	movs	r0, #3
 800835a:	f7fd fec5 	bl	80060e8 <memp_free>
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <tcp_seg_copy+0x1c>
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <tcp_seg_copy+0x4c>)
 8008378:	f240 6282 	movw	r2, #1666	; 0x682
 800837c:	490e      	ldr	r1, [pc, #56]	; (80083b8 <tcp_seg_copy+0x50>)
 800837e:	480f      	ldr	r0, [pc, #60]	; (80083bc <tcp_seg_copy+0x54>)
 8008380:	f007 fb38 	bl	800f9f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008384:	2003      	movs	r0, #3
 8008386:	f7fd fe63 	bl	8006050 <memp_malloc>
 800838a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <tcp_seg_copy+0x2e>
    return NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	e00a      	b.n	80083ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008396:	2210      	movs	r2, #16
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f007 fafa 	bl	800f994 <memcpy>
  pbuf_ref(cseg->p);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fd51 	bl	8006e4c <pbuf_ref>
  return cseg;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	080118fc 	.word	0x080118fc
 80083b8:	08011e50 	.word	0x08011e50
 80083bc:	08011940 	.word	0x08011940

080083c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <tcp_recv_null+0x28>
 80083d4:	4b12      	ldr	r3, [pc, #72]	; (8008420 <tcp_recv_null+0x60>)
 80083d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80083da:	4912      	ldr	r1, [pc, #72]	; (8008424 <tcp_recv_null+0x64>)
 80083dc:	4812      	ldr	r0, [pc, #72]	; (8008428 <tcp_recv_null+0x68>)
 80083de:	f007 fb09 	bl	800f9f4 <iprintf>
 80083e2:	f06f 030f 	mvn.w	r3, #15
 80083e6:	e016      	b.n	8008416 <tcp_recv_null+0x56>

  if (p != NULL) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	891b      	ldrh	r3, [r3, #8]
 80083f2:	4619      	mov	r1, r3
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f7ff fb19 	bl	8007a2c <tcp_recved>
    pbuf_free(p);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fe fc86 	bl	8006d0c <pbuf_free>
 8008400:	e008      	b.n	8008414 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800840a:	68b8      	ldr	r0, [r7, #8]
 800840c:	f7ff f9be 	bl	800778c <tcp_close>
 8008410:	4603      	mov	r3, r0
 8008412:	e000      	b.n	8008416 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	080118fc 	.word	0x080118fc
 8008424:	08011e6c 	.word	0x08011e6c
 8008428:	08011940 	.word	0x08011940

0800842c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	db01      	blt.n	8008442 <tcp_kill_prio+0x16>
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	e000      	b.n	8008444 <tcp_kill_prio+0x18>
 8008442:	237f      	movs	r3, #127	; 0x7f
 8008444:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d034      	beq.n	80084b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3b01      	subs	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800845a:	4b19      	ldr	r3, [pc, #100]	; (80084c0 <tcp_kill_prio+0x94>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e01f      	b.n	80084a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	7d5b      	ldrb	r3, [r3, #21]
 8008466:	7afa      	ldrb	r2, [r7, #11]
 8008468:	429a      	cmp	r2, r3
 800846a:	d80c      	bhi.n	8008486 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008470:	7afa      	ldrb	r2, [r7, #11]
 8008472:	429a      	cmp	r2, r3
 8008474:	d112      	bne.n	800849c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <tcp_kill_prio+0x98>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	429a      	cmp	r2, r3
 8008484:	d80a      	bhi.n	800849c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <tcp_kill_prio+0x98>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	7d5b      	ldrb	r3, [r3, #21]
 800849a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1dc      	bne.n	8008462 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80084ae:	6938      	ldr	r0, [r7, #16]
 80084b0:	f7ff fa56 	bl	8007960 <tcp_abort>
 80084b4:	e000      	b.n	80084b8 <tcp_kill_prio+0x8c>
    return;
 80084b6:	bf00      	nop
  }
}
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20005cf4 	.word	0x20005cf4
 80084c4:	20005ce8 	.word	0x20005ce8

080084c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d009      	beq.n	80084ec <tcp_kill_state+0x24>
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b09      	cmp	r3, #9
 80084dc:	d006      	beq.n	80084ec <tcp_kill_state+0x24>
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <tcp_kill_state+0x80>)
 80084e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80084e4:	4919      	ldr	r1, [pc, #100]	; (800854c <tcp_kill_state+0x84>)
 80084e6:	481a      	ldr	r0, [pc, #104]	; (8008550 <tcp_kill_state+0x88>)
 80084e8:	f007 fa84 	bl	800f9f4 <iprintf>

  inactivity = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084f4:	4b17      	ldr	r3, [pc, #92]	; (8008554 <tcp_kill_state+0x8c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	e017      	b.n	800852c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	7d1b      	ldrb	r3, [r3, #20]
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	429a      	cmp	r2, r3
 8008504:	d10f      	bne.n	8008526 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <tcp_kill_state+0x90>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	429a      	cmp	r2, r3
 8008514:	d807      	bhi.n	8008526 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008516:	4b10      	ldr	r3, [pc, #64]	; (8008558 <tcp_kill_state+0x90>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e4      	bne.n	80084fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008538:	2100      	movs	r1, #0
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f7ff f952 	bl	80077e4 <tcp_abandon>
  }
}
 8008540:	bf00      	nop
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	080118fc 	.word	0x080118fc
 800854c:	08011e88 	.word	0x08011e88
 8008550:	08011940 	.word	0x08011940
 8008554:	20005cf4 	.word	0x20005cf4
 8008558:	20005ce8 	.word	0x20005ce8

0800855c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800856a:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <tcp_kill_timewait+0x58>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e012      	b.n	8008598 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008572:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <tcp_kill_timewait+0x5c>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d807      	bhi.n	8008592 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <tcp_kill_timewait+0x5c>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e9      	bne.n	8008572 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80085a4:	68b8      	ldr	r0, [r7, #8]
 80085a6:	f7ff f9db 	bl	8007960 <tcp_abort>
  }
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20005cf8 	.word	0x20005cf8
 80085b8:	20005ce8 	.word	0x20005ce8

080085bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <tcp_handle_closepend+0x48>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80085c8:	e014      	b.n	80085f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8b5b      	ldrh	r3, [r3, #26]
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8b5b      	ldrh	r3, [r3, #26]
 80085e0:	f023 0308 	bic.w	r3, r3, #8
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff f864 	bl	80076b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e7      	bne.n	80085ca <tcp_handle_closepend+0xe>
  }
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20005cf4 	.word	0x20005cf4

08008608 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008612:	2001      	movs	r0, #1
 8008614:	f7fd fd1c 	bl	8006050 <memp_malloc>
 8008618:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d126      	bne.n	800866e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008620:	f7ff ffcc 	bl	80085bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008624:	f7ff ff9a 	bl	800855c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008628:	2001      	movs	r0, #1
 800862a:	f7fd fd11 	bl	8006050 <memp_malloc>
 800862e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d11b      	bne.n	800866e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008636:	2009      	movs	r0, #9
 8008638:	f7ff ff46 	bl	80084c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800863c:	2001      	movs	r0, #1
 800863e:	f7fd fd07 	bl	8006050 <memp_malloc>
 8008642:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d111      	bne.n	800866e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800864a:	2008      	movs	r0, #8
 800864c:	f7ff ff3c 	bl	80084c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008650:	2001      	movs	r0, #1
 8008652:	f7fd fcfd 	bl	8006050 <memp_malloc>
 8008656:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d107      	bne.n	800866e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff fee3 	bl	800842c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008666:	2001      	movs	r0, #1
 8008668:	f7fd fcf2 	bl	8006050 <memp_malloc>
 800866c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d03f      	beq.n	80086f4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008674:	229c      	movs	r2, #156	; 0x9c
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f007 f9b3 	bl	800f9e4 <memset>
    pcb->prio = prio;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	79fa      	ldrb	r2, [r7, #7]
 8008682:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800868a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008694:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	22ff      	movs	r2, #255	; 0xff
 80086a2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80086aa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2206      	movs	r2, #6
 80086b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2206      	movs	r2, #6
 80086b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086c0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80086ca:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <tcp_alloc+0xf8>)
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <tcp_alloc+0xfc>)
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80086e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a08      	ldr	r2, [pc, #32]	; (8008708 <tcp_alloc+0x100>)
 80086e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a07      	ldr	r2, [pc, #28]	; (800870c <tcp_alloc+0x104>)
 80086f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20005ce8 	.word	0x20005ce8
 8008704:	20005cfe 	.word	0x20005cfe
 8008708:	080083c1 	.word	0x080083c1
 800870c:	006ddd00 	.word	0x006ddd00

08008710 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d107      	bne.n	800872e <tcp_pcb_purge+0x1e>
 800871e:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <tcp_pcb_purge+0x94>)
 8008720:	f640 0251 	movw	r2, #2129	; 0x851
 8008724:	4920      	ldr	r1, [pc, #128]	; (80087a8 <tcp_pcb_purge+0x98>)
 8008726:	4821      	ldr	r0, [pc, #132]	; (80087ac <tcp_pcb_purge+0x9c>)
 8008728:	f007 f964 	bl	800f9f4 <iprintf>
 800872c:	e037      	b.n	800879e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7d1b      	ldrb	r3, [r3, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d033      	beq.n	800879e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800873a:	2b0a      	cmp	r3, #10
 800873c:	d02f      	beq.n	800879e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008742:	2b01      	cmp	r3, #1
 8008744:	d02b      	beq.n	800879e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fada 	bl	8006d0c <pbuf_free>
      pcb->refused_data = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f986 	bl	8008a78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008772:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fdc7 	bl	800830c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fdc2 	bl	800830c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	66da      	str	r2, [r3, #108]	; 0x6c
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	080118fc 	.word	0x080118fc
 80087a8:	08011f48 	.word	0x08011f48
 80087ac:	08011940 	.word	0x08011940

080087b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <tcp_pcb_remove+0x1e>
 80087c0:	4b3e      	ldr	r3, [pc, #248]	; (80088bc <tcp_pcb_remove+0x10c>)
 80087c2:	f640 0283 	movw	r2, #2179	; 0x883
 80087c6:	493e      	ldr	r1, [pc, #248]	; (80088c0 <tcp_pcb_remove+0x110>)
 80087c8:	483e      	ldr	r0, [pc, #248]	; (80088c4 <tcp_pcb_remove+0x114>)
 80087ca:	f007 f913 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <tcp_pcb_remove+0x32>
 80087d4:	4b39      	ldr	r3, [pc, #228]	; (80088bc <tcp_pcb_remove+0x10c>)
 80087d6:	f640 0284 	movw	r2, #2180	; 0x884
 80087da:	493b      	ldr	r1, [pc, #236]	; (80088c8 <tcp_pcb_remove+0x118>)
 80087dc:	4839      	ldr	r0, [pc, #228]	; (80088c4 <tcp_pcb_remove+0x114>)
 80087de:	f007 f909 	bl	800f9f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d105      	bne.n	80087f8 <tcp_pcb_remove+0x48>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	e013      	b.n	8008820 <tcp_pcb_remove+0x70>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e00c      	b.n	800881a <tcp_pcb_remove+0x6a>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d104      	bne.n	8008814 <tcp_pcb_remove+0x64>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	e005      	b.n	8008820 <tcp_pcb_remove+0x70>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1ef      	bne.n	8008800 <tcp_pcb_remove+0x50>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008826:	6838      	ldr	r0, [r7, #0]
 8008828:	f7ff ff72 	bl	8008710 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	7d1b      	ldrb	r3, [r3, #20]
 8008830:	2b0a      	cmp	r3, #10
 8008832:	d013      	beq.n	800885c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008838:	2b01      	cmp	r3, #1
 800883a:	d00f      	beq.n	800885c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	8b5b      	ldrh	r3, [r3, #26]
 8008840:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	8b5b      	ldrh	r3, [r3, #26]
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	b29a      	uxth	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008856:	6838      	ldr	r0, [r7, #0]
 8008858:	f002 ff6e 	bl	800b738 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	7d1b      	ldrb	r3, [r3, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d020      	beq.n	80088a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d006      	beq.n	800887a <tcp_pcb_remove+0xca>
 800886c:	4b13      	ldr	r3, [pc, #76]	; (80088bc <tcp_pcb_remove+0x10c>)
 800886e:	f640 0293 	movw	r2, #2195	; 0x893
 8008872:	4916      	ldr	r1, [pc, #88]	; (80088cc <tcp_pcb_remove+0x11c>)
 8008874:	4813      	ldr	r0, [pc, #76]	; (80088c4 <tcp_pcb_remove+0x114>)
 8008876:	f007 f8bd 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	2b00      	cmp	r3, #0
 8008880:	d006      	beq.n	8008890 <tcp_pcb_remove+0xe0>
 8008882:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <tcp_pcb_remove+0x10c>)
 8008884:	f640 0294 	movw	r2, #2196	; 0x894
 8008888:	4911      	ldr	r1, [pc, #68]	; (80088d0 <tcp_pcb_remove+0x120>)
 800888a:	480e      	ldr	r0, [pc, #56]	; (80088c4 <tcp_pcb_remove+0x114>)
 800888c:	f007 f8b2 	bl	800f9f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <tcp_pcb_remove+0xf6>
 8008898:	4b08      	ldr	r3, [pc, #32]	; (80088bc <tcp_pcb_remove+0x10c>)
 800889a:	f640 0296 	movw	r2, #2198	; 0x896
 800889e:	490d      	ldr	r1, [pc, #52]	; (80088d4 <tcp_pcb_remove+0x124>)
 80088a0:	4808      	ldr	r0, [pc, #32]	; (80088c4 <tcp_pcb_remove+0x114>)
 80088a2:	f007 f8a7 	bl	800f9f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	080118fc 	.word	0x080118fc
 80088c0:	08011f64 	.word	0x08011f64
 80088c4:	08011940 	.word	0x08011940
 80088c8:	08011f80 	.word	0x08011f80
 80088cc:	08011fa0 	.word	0x08011fa0
 80088d0:	08011fb8 	.word	0x08011fb8
 80088d4:	08011fd4 	.word	0x08011fd4

080088d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <tcp_next_iss+0x1c>
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <tcp_next_iss+0x38>)
 80088e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80088ec:	4909      	ldr	r1, [pc, #36]	; (8008914 <tcp_next_iss+0x3c>)
 80088ee:	480a      	ldr	r0, [pc, #40]	; (8008918 <tcp_next_iss+0x40>)
 80088f0:	f007 f880 	bl	800f9f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <tcp_next_iss+0x44>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <tcp_next_iss+0x48>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4413      	add	r3, r2
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <tcp_next_iss+0x44>)
 8008900:	6013      	str	r3, [r2, #0]
  return iss;
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <tcp_next_iss+0x44>)
 8008904:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	080118fc 	.word	0x080118fc
 8008914:	08011fec 	.word	0x08011fec
 8008918:	08011940 	.word	0x08011940
 800891c:	2000000c 	.word	0x2000000c
 8008920:	20005ce8 	.word	0x20005ce8

08008924 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <tcp_eff_send_mss_netif+0x22>
 8008938:	4b14      	ldr	r3, [pc, #80]	; (800898c <tcp_eff_send_mss_netif+0x68>)
 800893a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800893e:	4914      	ldr	r1, [pc, #80]	; (8008990 <tcp_eff_send_mss_netif+0x6c>)
 8008940:	4814      	ldr	r0, [pc, #80]	; (8008994 <tcp_eff_send_mss_netif+0x70>)
 8008942:	f007 f857 	bl	800f9f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800894c:	89fb      	ldrh	r3, [r7, #14]
 800894e:	e019      	b.n	8008984 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008954:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008956:	8afb      	ldrh	r3, [r7, #22]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d012      	beq.n	8008982 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800895c:	2328      	movs	r3, #40	; 0x28
 800895e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008960:	8afa      	ldrh	r2, [r7, #22]
 8008962:	8abb      	ldrh	r3, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d904      	bls.n	8008972 <tcp_eff_send_mss_netif+0x4e>
 8008968:	8afa      	ldrh	r2, [r7, #22]
 800896a:	8abb      	ldrh	r3, [r7, #20]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	b29b      	uxth	r3, r3
 8008970:	e000      	b.n	8008974 <tcp_eff_send_mss_netif+0x50>
 8008972:	2300      	movs	r3, #0
 8008974:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008976:	8a7a      	ldrh	r2, [r7, #18]
 8008978:	89fb      	ldrh	r3, [r7, #14]
 800897a:	4293      	cmp	r3, r2
 800897c:	bf28      	it	cs
 800897e:	4613      	movcs	r3, r2
 8008980:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008982:	89fb      	ldrh	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	080118fc 	.word	0x080118fc
 8008990:	08012008 	.word	0x08012008
 8008994:	08011940 	.word	0x08011940

08008998 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d119      	bne.n	80089e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80089ac:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80089ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80089b2:	4910      	ldr	r1, [pc, #64]	; (80089f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80089b4:	4810      	ldr	r0, [pc, #64]	; (80089f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80089b6:	f007 f81d 	bl	800f9f4 <iprintf>

  while (pcb != NULL) {
 80089ba:	e011      	b.n	80089e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d108      	bne.n	80089da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7fe ffc6 	bl	8007960 <tcp_abort>
      pcb = next;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e002      	b.n	80089e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1ea      	bne.n	80089bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	080118fc 	.word	0x080118fc
 80089f4:	08012030 	.word	0x08012030
 80089f8:	08011940 	.word	0x08011940

080089fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d02a      	beq.n	8008a62 <tcp_netif_ip_addr_changed+0x66>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d026      	beq.n	8008a62 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008a14:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <tcp_netif_ip_addr_changed+0x70>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff ffbc 	bl	8008998 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008a20:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <tcp_netif_ip_addr_changed+0x74>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff ffb6 	bl	8008998 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d017      	beq.n	8008a62 <tcp_netif_ip_addr_changed+0x66>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <tcp_netif_ip_addr_changed+0x78>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e00c      	b.n	8008a5c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d103      	bne.n	8008a56 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ef      	bne.n	8008a42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20005cf4 	.word	0x20005cf4
 8008a70:	20005cec 	.word	0x20005cec
 8008a74:	20005cf0 	.word	0x20005cf0

08008a78 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fc3d 	bl	800830c <tcp_segs_free>
    pcb->ooseq = NULL;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b08d      	sub	sp, #52	; 0x34
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d105      	bne.n	8008abc <tcp_input+0x1c>
 8008ab0:	4b9b      	ldr	r3, [pc, #620]	; (8008d20 <tcp_input+0x280>)
 8008ab2:	2283      	movs	r2, #131	; 0x83
 8008ab4:	499b      	ldr	r1, [pc, #620]	; (8008d24 <tcp_input+0x284>)
 8008ab6:	489c      	ldr	r0, [pc, #624]	; (8008d28 <tcp_input+0x288>)
 8008ab8:	f006 ff9c 	bl	800f9f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4a9a      	ldr	r2, [pc, #616]	; (8008d2c <tcp_input+0x28c>)
 8008ac2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	895b      	ldrh	r3, [r3, #10]
 8008ac8:	2b13      	cmp	r3, #19
 8008aca:	f240 83d1 	bls.w	8009270 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ace:	4b98      	ldr	r3, [pc, #608]	; (8008d30 <tcp_input+0x290>)
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	4a97      	ldr	r2, [pc, #604]	; (8008d30 <tcp_input+0x290>)
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f005 ffd1 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 83c7 	bne.w	8009274 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008ae6:	4b92      	ldr	r3, [pc, #584]	; (8008d30 <tcp_input+0x290>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008aee:	2be0      	cmp	r3, #224	; 0xe0
 8008af0:	f000 83c0 	beq.w	8009274 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008af4:	4b8d      	ldr	r3, [pc, #564]	; (8008d2c <tcp_input+0x28c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	899b      	ldrh	r3, [r3, #12]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fc fe51 	bl	80057a4 <lwip_htons>
 8008b02:	4603      	mov	r3, r0
 8008b04:	0b1b      	lsrs	r3, r3, #12
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008b0e:	7cbb      	ldrb	r3, [r7, #18]
 8008b10:	2b13      	cmp	r3, #19
 8008b12:	f240 83b1 	bls.w	8009278 <tcp_input+0x7d8>
 8008b16:	7cbb      	ldrb	r3, [r7, #18]
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	891b      	ldrh	r3, [r3, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	f200 83aa 	bhi.w	8009278 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008b24:	7cbb      	ldrb	r3, [r7, #18]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b14      	subs	r3, #20
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	4b81      	ldr	r3, [pc, #516]	; (8008d34 <tcp_input+0x294>)
 8008b2e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008b30:	4b81      	ldr	r3, [pc, #516]	; (8008d38 <tcp_input+0x298>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	895a      	ldrh	r2, [r3, #10]
 8008b3a:	7cbb      	ldrb	r3, [r7, #18]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d309      	bcc.n	8008b56 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008b42:	4b7c      	ldr	r3, [pc, #496]	; (8008d34 <tcp_input+0x294>)
 8008b44:	881a      	ldrh	r2, [r3, #0]
 8008b46:	4b7d      	ldr	r3, [pc, #500]	; (8008d3c <tcp_input+0x29c>)
 8008b48:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008b4a:	7cbb      	ldrb	r3, [r7, #18]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7fe f856 	bl	8006c00 <pbuf_remove_header>
 8008b54:	e04e      	b.n	8008bf4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <tcp_input+0xca>
 8008b5e:	4b70      	ldr	r3, [pc, #448]	; (8008d20 <tcp_input+0x280>)
 8008b60:	22c2      	movs	r2, #194	; 0xc2
 8008b62:	4977      	ldr	r1, [pc, #476]	; (8008d40 <tcp_input+0x2a0>)
 8008b64:	4870      	ldr	r0, [pc, #448]	; (8008d28 <tcp_input+0x288>)
 8008b66:	f006 ff45 	bl	800f9f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008b6a:	2114      	movs	r1, #20
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fe f847 	bl	8006c00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	895a      	ldrh	r2, [r3, #10]
 8008b76:	4b71      	ldr	r3, [pc, #452]	; (8008d3c <tcp_input+0x29c>)
 8008b78:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008b7a:	4b6e      	ldr	r3, [pc, #440]	; (8008d34 <tcp_input+0x294>)
 8008b7c:	881a      	ldrh	r2, [r3, #0]
 8008b7e:	4b6f      	ldr	r3, [pc, #444]	; (8008d3c <tcp_input+0x29c>)
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008b86:	4b6d      	ldr	r3, [pc, #436]	; (8008d3c <tcp_input+0x29c>)
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7fe f837 	bl	8006c00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	895b      	ldrh	r3, [r3, #10]
 8008b98:	8a3a      	ldrh	r2, [r7, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	f200 836e 	bhi.w	800927c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4a64      	ldr	r2, [pc, #400]	; (8008d38 <tcp_input+0x298>)
 8008ba8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	8a3a      	ldrh	r2, [r7, #16]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe f824 	bl	8006c00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	891a      	ldrh	r2, [r3, #8]
 8008bbc:	8a3b      	ldrh	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	895b      	ldrh	r3, [r3, #10]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <tcp_input+0x13a>
 8008bce:	4b54      	ldr	r3, [pc, #336]	; (8008d20 <tcp_input+0x280>)
 8008bd0:	22df      	movs	r2, #223	; 0xdf
 8008bd2:	495c      	ldr	r1, [pc, #368]	; (8008d44 <tcp_input+0x2a4>)
 8008bd4:	4854      	ldr	r0, [pc, #336]	; (8008d28 <tcp_input+0x288>)
 8008bd6:	f006 ff0d 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	891a      	ldrh	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	891b      	ldrh	r3, [r3, #8]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d005      	beq.n	8008bf4 <tcp_input+0x154>
 8008be8:	4b4d      	ldr	r3, [pc, #308]	; (8008d20 <tcp_input+0x280>)
 8008bea:	22e0      	movs	r2, #224	; 0xe0
 8008bec:	4956      	ldr	r1, [pc, #344]	; (8008d48 <tcp_input+0x2a8>)
 8008bee:	484e      	ldr	r0, [pc, #312]	; (8008d28 <tcp_input+0x288>)
 8008bf0:	f006 ff00 	bl	800f9f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008bf4:	4b4d      	ldr	r3, [pc, #308]	; (8008d2c <tcp_input+0x28c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4a4b      	ldr	r2, [pc, #300]	; (8008d2c <tcp_input+0x28c>)
 8008bfe:	6814      	ldr	r4, [r2, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fc fdcf 	bl	80057a4 <lwip_htons>
 8008c06:	4603      	mov	r3, r0
 8008c08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008c0a:	4b48      	ldr	r3, [pc, #288]	; (8008d2c <tcp_input+0x28c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	885b      	ldrh	r3, [r3, #2]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	4a46      	ldr	r2, [pc, #280]	; (8008d2c <tcp_input+0x28c>)
 8008c14:	6814      	ldr	r4, [r2, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fc fdc4 	bl	80057a4 <lwip_htons>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008c20:	4b42      	ldr	r3, [pc, #264]	; (8008d2c <tcp_input+0x28c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4a41      	ldr	r2, [pc, #260]	; (8008d2c <tcp_input+0x28c>)
 8008c28:	6814      	ldr	r4, [r2, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fc fdcf 	bl	80057ce <lwip_htonl>
 8008c30:	4603      	mov	r3, r0
 8008c32:	6063      	str	r3, [r4, #4]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	4a45      	ldr	r2, [pc, #276]	; (8008d4c <tcp_input+0x2ac>)
 8008c38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008c3a:	4b3c      	ldr	r3, [pc, #240]	; (8008d2c <tcp_input+0x28c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4a3a      	ldr	r2, [pc, #232]	; (8008d2c <tcp_input+0x28c>)
 8008c42:	6814      	ldr	r4, [r2, #0]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fc fdc2 	bl	80057ce <lwip_htonl>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	60a3      	str	r3, [r4, #8]
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	4a3f      	ldr	r2, [pc, #252]	; (8008d50 <tcp_input+0x2b0>)
 8008c52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008c54:	4b35      	ldr	r3, [pc, #212]	; (8008d2c <tcp_input+0x28c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	89db      	ldrh	r3, [r3, #14]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	4a33      	ldr	r2, [pc, #204]	; (8008d2c <tcp_input+0x28c>)
 8008c5e:	6814      	ldr	r4, [r2, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fc fd9f 	bl	80057a4 <lwip_htons>
 8008c66:	4603      	mov	r3, r0
 8008c68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008c6a:	4b30      	ldr	r3, [pc, #192]	; (8008d2c <tcp_input+0x28c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	899b      	ldrh	r3, [r3, #12]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fc fd96 	bl	80057a4 <lwip_htons>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	4b34      	ldr	r3, [pc, #208]	; (8008d54 <tcp_input+0x2b4>)
 8008c84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	891a      	ldrh	r2, [r3, #8]
 8008c8a:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <tcp_input+0x2b8>)
 8008c8c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <tcp_input+0x2b4>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00c      	beq.n	8008cb4 <tcp_input+0x214>
    tcplen++;
 8008c9a:	4b2f      	ldr	r3, [pc, #188]	; (8008d58 <tcp_input+0x2b8>)
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	4b2d      	ldr	r3, [pc, #180]	; (8008d58 <tcp_input+0x2b8>)
 8008ca4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	891a      	ldrh	r2, [r3, #8]
 8008caa:	4b2b      	ldr	r3, [pc, #172]	; (8008d58 <tcp_input+0x2b8>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	f200 82e6 	bhi.w	8009280 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <tcp_input+0x2bc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	e09d      	b.n	8008dfc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <tcp_input+0x234>
 8008cc8:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <tcp_input+0x280>)
 8008cca:	22fb      	movs	r2, #251	; 0xfb
 8008ccc:	4924      	ldr	r1, [pc, #144]	; (8008d60 <tcp_input+0x2c0>)
 8008cce:	4816      	ldr	r0, [pc, #88]	; (8008d28 <tcp_input+0x288>)
 8008cd0:	f006 fe90 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	7d1b      	ldrb	r3, [r3, #20]
 8008cd8:	2b0a      	cmp	r3, #10
 8008cda:	d105      	bne.n	8008ce8 <tcp_input+0x248>
 8008cdc:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <tcp_input+0x280>)
 8008cde:	22fc      	movs	r2, #252	; 0xfc
 8008ce0:	4920      	ldr	r1, [pc, #128]	; (8008d64 <tcp_input+0x2c4>)
 8008ce2:	4811      	ldr	r0, [pc, #68]	; (8008d28 <tcp_input+0x288>)
 8008ce4:	f006 fe86 	bl	800f9f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	7d1b      	ldrb	r3, [r3, #20]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d105      	bne.n	8008cfc <tcp_input+0x25c>
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <tcp_input+0x280>)
 8008cf2:	22fd      	movs	r2, #253	; 0xfd
 8008cf4:	491c      	ldr	r1, [pc, #112]	; (8008d68 <tcp_input+0x2c8>)
 8008cf6:	480c      	ldr	r0, [pc, #48]	; (8008d28 <tcp_input+0x288>)
 8008cf8:	f006 fe7c 	bl	800f9f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	7a1b      	ldrb	r3, [r3, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d033      	beq.n	8008d6c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	7a1a      	ldrb	r2, [r3, #8]
 8008d08:	4b09      	ldr	r3, [pc, #36]	; (8008d30 <tcp_input+0x290>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d10:	3301      	adds	r3, #1
 8008d12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d029      	beq.n	8008d6c <tcp_input+0x2cc>
      prev = pcb;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	61bb      	str	r3, [r7, #24]
      continue;
 8008d1c:	e06b      	b.n	8008df6 <tcp_input+0x356>
 8008d1e:	bf00      	nop
 8008d20:	08012064 	.word	0x08012064
 8008d24:	08012098 	.word	0x08012098
 8008d28:	080120b0 	.word	0x080120b0
 8008d2c:	20005d10 	.word	0x20005d10
 8008d30:	200005b8 	.word	0x200005b8
 8008d34:	20005d14 	.word	0x20005d14
 8008d38:	20005d18 	.word	0x20005d18
 8008d3c:	20005d16 	.word	0x20005d16
 8008d40:	080120d8 	.word	0x080120d8
 8008d44:	080120e8 	.word	0x080120e8
 8008d48:	080120f4 	.word	0x080120f4
 8008d4c:	20005d20 	.word	0x20005d20
 8008d50:	20005d24 	.word	0x20005d24
 8008d54:	20005d2c 	.word	0x20005d2c
 8008d58:	20005d2a 	.word	0x20005d2a
 8008d5c:	20005cf4 	.word	0x20005cf4
 8008d60:	08012114 	.word	0x08012114
 8008d64:	0801213c 	.word	0x0801213c
 8008d68:	08012168 	.word	0x08012168
    }

    if (pcb->remote_port == tcphdr->src &&
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	8b1a      	ldrh	r2, [r3, #24]
 8008d70:	4b72      	ldr	r3, [pc, #456]	; (8008f3c <tcp_input+0x49c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d13a      	bne.n	8008df2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	8ada      	ldrh	r2, [r3, #22]
 8008d80:	4b6e      	ldr	r3, [pc, #440]	; (8008f3c <tcp_input+0x49c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d132      	bne.n	8008df2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	4b6b      	ldr	r3, [pc, #428]	; (8008f40 <tcp_input+0x4a0>)
 8008d92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d12c      	bne.n	8008df2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b68      	ldr	r3, [pc, #416]	; (8008f40 <tcp_input+0x4a0>)
 8008d9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d126      	bne.n	8008df2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d106      	bne.n	8008dbc <tcp_input+0x31c>
 8008dae:	4b65      	ldr	r3, [pc, #404]	; (8008f44 <tcp_input+0x4a4>)
 8008db0:	f240 120d 	movw	r2, #269	; 0x10d
 8008db4:	4964      	ldr	r1, [pc, #400]	; (8008f48 <tcp_input+0x4a8>)
 8008db6:	4865      	ldr	r0, [pc, #404]	; (8008f4c <tcp_input+0x4ac>)
 8008db8:	f006 fe1c 	bl	800f9f4 <iprintf>
      if (prev != NULL) {
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <tcp_input+0x338>
        prev->next = pcb->next;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008dca:	4b61      	ldr	r3, [pc, #388]	; (8008f50 <tcp_input+0x4b0>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008dd2:	4a5f      	ldr	r2, [pc, #380]	; (8008f50 <tcp_input+0x4b0>)
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d111      	bne.n	8008e06 <tcp_input+0x366>
 8008de2:	4b58      	ldr	r3, [pc, #352]	; (8008f44 <tcp_input+0x4a4>)
 8008de4:	f240 1215 	movw	r2, #277	; 0x115
 8008de8:	495a      	ldr	r1, [pc, #360]	; (8008f54 <tcp_input+0x4b4>)
 8008dea:	4858      	ldr	r0, [pc, #352]	; (8008f4c <tcp_input+0x4ac>)
 8008dec:	f006 fe02 	bl	800f9f4 <iprintf>
      break;
 8008df0:	e009      	b.n	8008e06 <tcp_input+0x366>
    }
    prev = pcb;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f47f af5e 	bne.w	8008cc0 <tcp_input+0x220>
 8008e04:	e000      	b.n	8008e08 <tcp_input+0x368>
      break;
 8008e06:	bf00      	nop
  }

  if (pcb == NULL) {
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f040 80aa 	bne.w	8008f64 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e10:	4b51      	ldr	r3, [pc, #324]	; (8008f58 <tcp_input+0x4b8>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e03f      	b.n	8008e98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	7d1b      	ldrb	r3, [r3, #20]
 8008e1c:	2b0a      	cmp	r3, #10
 8008e1e:	d006      	beq.n	8008e2e <tcp_input+0x38e>
 8008e20:	4b48      	ldr	r3, [pc, #288]	; (8008f44 <tcp_input+0x4a4>)
 8008e22:	f240 121f 	movw	r2, #287	; 0x11f
 8008e26:	494d      	ldr	r1, [pc, #308]	; (8008f5c <tcp_input+0x4bc>)
 8008e28:	4848      	ldr	r0, [pc, #288]	; (8008f4c <tcp_input+0x4ac>)
 8008e2a:	f006 fde3 	bl	800f9f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	7a1b      	ldrb	r3, [r3, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	7a1a      	ldrb	r2, [r3, #8]
 8008e3a:	4b41      	ldr	r3, [pc, #260]	; (8008f40 <tcp_input+0x4a0>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e42:	3301      	adds	r3, #1
 8008e44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d122      	bne.n	8008e90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	8b1a      	ldrh	r2, [r3, #24]
 8008e4e:	4b3b      	ldr	r3, [pc, #236]	; (8008f3c <tcp_input+0x49c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d11b      	bne.n	8008e92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	8ada      	ldrh	r2, [r3, #22]
 8008e5e:	4b37      	ldr	r3, [pc, #220]	; (8008f3c <tcp_input+0x49c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	885b      	ldrh	r3, [r3, #2]
 8008e64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d113      	bne.n	8008e92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4b34      	ldr	r3, [pc, #208]	; (8008f40 <tcp_input+0x4a0>)
 8008e70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d10d      	bne.n	8008e92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <tcp_input+0x4a0>)
 8008e7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d107      	bne.n	8008e92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008e82:	69f8      	ldr	r0, [r7, #28]
 8008e84:	f000 fb56 	bl	8009534 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fd ff3f 	bl	8006d0c <pbuf_free>
        return;
 8008e8e:	e1fd      	b.n	800928c <tcp_input+0x7ec>
        continue;
 8008e90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1bc      	bne.n	8008e18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ea2:	4b2f      	ldr	r3, [pc, #188]	; (8008f60 <tcp_input+0x4c0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e02a      	b.n	8008f00 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	7a1b      	ldrb	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00c      	beq.n	8008ecc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	7a1a      	ldrb	r2, [r3, #8]
 8008eb6:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <tcp_input+0x4a0>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d002      	beq.n	8008ecc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	61bb      	str	r3, [r7, #24]
        continue;
 8008eca:	e016      	b.n	8008efa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	8ada      	ldrh	r2, [r3, #22]
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <tcp_input+0x49c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d10c      	bne.n	8008ef6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <tcp_input+0x4a0>)
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d00f      	beq.n	8008f08 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <tcp_input+0x46a>
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1d1      	bne.n	8008eaa <tcp_input+0x40a>
 8008f06:	e000      	b.n	8008f0a <tcp_input+0x46a>
            break;
 8008f08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d029      	beq.n	8008f64 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008f1e:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <tcp_input+0x4c0>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008f26:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <tcp_input+0x4c0>)
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008f2c:	6978      	ldr	r0, [r7, #20]
 8008f2e:	f000 fa03 	bl	8009338 <tcp_listen_input>
      }
      pbuf_free(p);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fd feea 	bl	8006d0c <pbuf_free>
      return;
 8008f38:	e1a8      	b.n	800928c <tcp_input+0x7ec>
 8008f3a:	bf00      	nop
 8008f3c:	20005d10 	.word	0x20005d10
 8008f40:	200005b8 	.word	0x200005b8
 8008f44:	08012064 	.word	0x08012064
 8008f48:	08012190 	.word	0x08012190
 8008f4c:	080120b0 	.word	0x080120b0
 8008f50:	20005cf4 	.word	0x20005cf4
 8008f54:	080121bc 	.word	0x080121bc
 8008f58:	20005cf8 	.word	0x20005cf8
 8008f5c:	080121e8 	.word	0x080121e8
 8008f60:	20005cf0 	.word	0x20005cf0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8158 	beq.w	800921c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008f6c:	4b95      	ldr	r3, [pc, #596]	; (80091c4 <tcp_input+0x724>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	891a      	ldrh	r2, [r3, #8]
 8008f76:	4b93      	ldr	r3, [pc, #588]	; (80091c4 <tcp_input+0x724>)
 8008f78:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008f7a:	4a92      	ldr	r2, [pc, #584]	; (80091c4 <tcp_input+0x724>)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008f80:	4b91      	ldr	r3, [pc, #580]	; (80091c8 <tcp_input+0x728>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a8f      	ldr	r2, [pc, #572]	; (80091c4 <tcp_input+0x724>)
 8008f86:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008f88:	4b90      	ldr	r3, [pc, #576]	; (80091cc <tcp_input+0x72c>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008f8e:	4b90      	ldr	r3, [pc, #576]	; (80091d0 <tcp_input+0x730>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008f94:	4b8f      	ldr	r3, [pc, #572]	; (80091d4 <tcp_input+0x734>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008f9a:	4b8f      	ldr	r3, [pc, #572]	; (80091d8 <tcp_input+0x738>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7b5b      	ldrb	r3, [r3, #13]
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d017      	beq.n	8008fec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008fbc:	69f8      	ldr	r0, [r7, #28]
 8008fbe:	f7ff f929 	bl	8008214 <tcp_process_refused_data>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f113 0f0d 	cmn.w	r3, #13
 8008fc8:	d007      	beq.n	8008fda <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008fd2:	4b82      	ldr	r3, [pc, #520]	; (80091dc <tcp_input+0x73c>)
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f040 80e3 	bne.w	80091aa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008fe4:	69f8      	ldr	r0, [r7, #28]
 8008fe6:	f003 f9ad 	bl	800c344 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008fea:	e0de      	b.n	80091aa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008fec:	4a7c      	ldr	r2, [pc, #496]	; (80091e0 <tcp_input+0x740>)
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008ff2:	69f8      	ldr	r0, [r7, #28]
 8008ff4:	f000 fb18 	bl	8009628 <tcp_process>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008ffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009000:	f113 0f0d 	cmn.w	r3, #13
 8009004:	f000 80d3 	beq.w	80091ae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009008:	4b71      	ldr	r3, [pc, #452]	; (80091d0 <tcp_input+0x730>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d015      	beq.n	8009040 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901a:	2b00      	cmp	r3, #0
 800901c:	d008      	beq.n	8009030 <tcp_input+0x590>
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	6912      	ldr	r2, [r2, #16]
 8009028:	f06f 010d 	mvn.w	r1, #13
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	486c      	ldr	r0, [pc, #432]	; (80091e4 <tcp_input+0x744>)
 8009034:	f7ff fbbc 	bl	80087b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8009038:	69f8      	ldr	r0, [r7, #28]
 800903a:	f7fe f9a9 	bl	8007390 <tcp_free>
 800903e:	e0da      	b.n	80091f6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009044:	4b63      	ldr	r3, [pc, #396]	; (80091d4 <tcp_input+0x734>)
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01d      	beq.n	8009088 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800904c:	4b61      	ldr	r3, [pc, #388]	; (80091d4 <tcp_input+0x734>)
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <tcp_input+0x5d2>
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	6910      	ldr	r0, [r2, #16]
 8009066:	89fa      	ldrh	r2, [r7, #14]
 8009068:	69f9      	ldr	r1, [r7, #28]
 800906a:	4798      	blx	r3
 800906c:	4603      	mov	r3, r0
 800906e:	74fb      	strb	r3, [r7, #19]
 8009070:	e001      	b.n	8009076 <tcp_input+0x5d6>
 8009072:	2300      	movs	r3, #0
 8009074:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800907a:	f113 0f0d 	cmn.w	r3, #13
 800907e:	f000 8098 	beq.w	80091b2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009082:	4b54      	ldr	r3, [pc, #336]	; (80091d4 <tcp_input+0x734>)
 8009084:	2200      	movs	r2, #0
 8009086:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009088:	69f8      	ldr	r0, [r7, #28]
 800908a:	f000 f915 	bl	80092b8 <tcp_input_delayed_close>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 8090 	bne.w	80091b6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009096:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <tcp_input+0x72c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d041      	beq.n	8009122 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <tcp_input+0x614>
 80090a6:	4b50      	ldr	r3, [pc, #320]	; (80091e8 <tcp_input+0x748>)
 80090a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80090ac:	494f      	ldr	r1, [pc, #316]	; (80091ec <tcp_input+0x74c>)
 80090ae:	4850      	ldr	r0, [pc, #320]	; (80091f0 <tcp_input+0x750>)
 80090b0:	f006 fca0 	bl	800f9f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	8b5b      	ldrh	r3, [r3, #26]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80090c0:	4b42      	ldr	r3, [pc, #264]	; (80091cc <tcp_input+0x72c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd fe21 	bl	8006d0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f7fe fc48 	bl	8007960 <tcp_abort>
            goto aborted;
 80090d0:	e091      	b.n	80091f6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <tcp_input+0x656>
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	6918      	ldr	r0, [r3, #16]
 80090e6:	4b39      	ldr	r3, [pc, #228]	; (80091cc <tcp_input+0x72c>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	69f9      	ldr	r1, [r7, #28]
 80090ee:	47a0      	blx	r4
 80090f0:	4603      	mov	r3, r0
 80090f2:	74fb      	strb	r3, [r7, #19]
 80090f4:	e008      	b.n	8009108 <tcp_input+0x668>
 80090f6:	4b35      	ldr	r3, [pc, #212]	; (80091cc <tcp_input+0x72c>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	2300      	movs	r3, #0
 80090fc:	69f9      	ldr	r1, [r7, #28]
 80090fe:	2000      	movs	r0, #0
 8009100:	f7ff f95e 	bl	80083c0 <tcp_recv_null>
 8009104:	4603      	mov	r3, r0
 8009106:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009108:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800910c:	f113 0f0d 	cmn.w	r3, #13
 8009110:	d053      	beq.n	80091ba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800911a:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <tcp_input+0x72c>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009122:	4b2b      	ldr	r3, [pc, #172]	; (80091d0 <tcp_input+0x730>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d030      	beq.n	8009190 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800913a:	7b5a      	ldrb	r2, [r3, #13]
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009140:	f042 0220 	orr.w	r2, r2, #32
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	735a      	strb	r2, [r3, #13]
 8009148:	e022      	b.n	8009190 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800914e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009152:	d005      	beq.n	8009160 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009158:	3301      	adds	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00b      	beq.n	8009182 <tcp_input+0x6e2>
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	6918      	ldr	r0, [r3, #16]
 8009174:	2300      	movs	r3, #0
 8009176:	2200      	movs	r2, #0
 8009178:	69f9      	ldr	r1, [r7, #28]
 800917a:	47a0      	blx	r4
 800917c:	4603      	mov	r3, r0
 800917e:	74fb      	strb	r3, [r7, #19]
 8009180:	e001      	b.n	8009186 <tcp_input+0x6e6>
 8009182:	2300      	movs	r3, #0
 8009184:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009186:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800918a:	f113 0f0d 	cmn.w	r3, #13
 800918e:	d016      	beq.n	80091be <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009190:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <tcp_input+0x740>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009196:	69f8      	ldr	r0, [r7, #28]
 8009198:	f000 f88e 	bl	80092b8 <tcp_input_delayed_close>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d128      	bne.n	80091f4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80091a2:	69f8      	ldr	r0, [r7, #28]
 80091a4:	f002 fac8 	bl	800b738 <tcp_output>
 80091a8:	e025      	b.n	80091f6 <tcp_input+0x756>
        goto aborted;
 80091aa:	bf00      	nop
 80091ac:	e023      	b.n	80091f6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80091ae:	bf00      	nop
 80091b0:	e021      	b.n	80091f6 <tcp_input+0x756>
              goto aborted;
 80091b2:	bf00      	nop
 80091b4:	e01f      	b.n	80091f6 <tcp_input+0x756>
          goto aborted;
 80091b6:	bf00      	nop
 80091b8:	e01d      	b.n	80091f6 <tcp_input+0x756>
            goto aborted;
 80091ba:	bf00      	nop
 80091bc:	e01b      	b.n	80091f6 <tcp_input+0x756>
              goto aborted;
 80091be:	bf00      	nop
 80091c0:	e019      	b.n	80091f6 <tcp_input+0x756>
 80091c2:	bf00      	nop
 80091c4:	20005d00 	.word	0x20005d00
 80091c8:	20005d10 	.word	0x20005d10
 80091cc:	20005d30 	.word	0x20005d30
 80091d0:	20005d2d 	.word	0x20005d2d
 80091d4:	20005d28 	.word	0x20005d28
 80091d8:	20005d2c 	.word	0x20005d2c
 80091dc:	20005d2a 	.word	0x20005d2a
 80091e0:	20005d34 	.word	0x20005d34
 80091e4:	20005cf4 	.word	0x20005cf4
 80091e8:	08012064 	.word	0x08012064
 80091ec:	08012218 	.word	0x08012218
 80091f0:	080120b0 	.word	0x080120b0
          goto aborted;
 80091f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <tcp_input+0x7f4>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80091fc:	4b26      	ldr	r3, [pc, #152]	; (8009298 <tcp_input+0x7f8>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009202:	4b26      	ldr	r3, [pc, #152]	; (800929c <tcp_input+0x7fc>)
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d03f      	beq.n	800928a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800920a:	4b24      	ldr	r3, [pc, #144]	; (800929c <tcp_input+0x7fc>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	4618      	mov	r0, r3
 8009210:	f7fd fd7c 	bl	8006d0c <pbuf_free>
      inseg.p = NULL;
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <tcp_input+0x7fc>)
 8009216:	2200      	movs	r2, #0
 8009218:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800921a:	e036      	b.n	800928a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800921c:	4b20      	ldr	r3, [pc, #128]	; (80092a0 <tcp_input+0x800>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	b29b      	uxth	r3, r3
 8009224:	4618      	mov	r0, r3
 8009226:	f7fc fabd 	bl	80057a4 <lwip_htons>
 800922a:	4603      	mov	r3, r0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d118      	bne.n	8009268 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009236:	4b1b      	ldr	r3, [pc, #108]	; (80092a4 <tcp_input+0x804>)
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <tcp_input+0x808>)
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <tcp_input+0x80c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <tcp_input+0x800>)
 8009248:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800924a:	885b      	ldrh	r3, [r3, #2]
 800924c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800924e:	4a14      	ldr	r2, [pc, #80]	; (80092a0 <tcp_input+0x800>)
 8009250:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009252:	8812      	ldrh	r2, [r2, #0]
 8009254:	b292      	uxth	r2, r2
 8009256:	9202      	str	r2, [sp, #8]
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <tcp_input+0x810>)
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <tcp_input+0x814>)
 8009260:	4602      	mov	r2, r0
 8009262:	2000      	movs	r0, #0
 8009264:	f003 f81c 	bl	800c2a0 <tcp_rst>
    pbuf_free(p);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fd fd4f 	bl	8006d0c <pbuf_free>
  return;
 800926e:	e00c      	b.n	800928a <tcp_input+0x7ea>
    goto dropped;
 8009270:	bf00      	nop
 8009272:	e006      	b.n	8009282 <tcp_input+0x7e2>
    goto dropped;
 8009274:	bf00      	nop
 8009276:	e004      	b.n	8009282 <tcp_input+0x7e2>
    goto dropped;
 8009278:	bf00      	nop
 800927a:	e002      	b.n	8009282 <tcp_input+0x7e2>
      goto dropped;
 800927c:	bf00      	nop
 800927e:	e000      	b.n	8009282 <tcp_input+0x7e2>
      goto dropped;
 8009280:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fd fd42 	bl	8006d0c <pbuf_free>
 8009288:	e000      	b.n	800928c <tcp_input+0x7ec>
  return;
 800928a:	bf00      	nop
}
 800928c:	3724      	adds	r7, #36	; 0x24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}
 8009292:	bf00      	nop
 8009294:	20005d34 	.word	0x20005d34
 8009298:	20005d30 	.word	0x20005d30
 800929c:	20005d00 	.word	0x20005d00
 80092a0:	20005d10 	.word	0x20005d10
 80092a4:	20005d24 	.word	0x20005d24
 80092a8:	20005d2a 	.word	0x20005d2a
 80092ac:	20005d20 	.word	0x20005d20
 80092b0:	200005c8 	.word	0x200005c8
 80092b4:	200005cc 	.word	0x200005cc

080092b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <tcp_input_delayed_close+0x1c>
 80092c6:	4b17      	ldr	r3, [pc, #92]	; (8009324 <tcp_input_delayed_close+0x6c>)
 80092c8:	f240 225a 	movw	r2, #602	; 0x25a
 80092cc:	4916      	ldr	r1, [pc, #88]	; (8009328 <tcp_input_delayed_close+0x70>)
 80092ce:	4817      	ldr	r0, [pc, #92]	; (800932c <tcp_input_delayed_close+0x74>)
 80092d0:	f006 fb90 	bl	800f9f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80092d4:	4b16      	ldr	r3, [pc, #88]	; (8009330 <tcp_input_delayed_close+0x78>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01c      	beq.n	800931a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	8b5b      	ldrh	r3, [r3, #26]
 80092e4:	f003 0310 	and.w	r3, r3, #16
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10d      	bne.n	8009308 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d008      	beq.n	8009308 <tcp_input_delayed_close+0x50>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6912      	ldr	r2, [r2, #16]
 8009300:	f06f 010e 	mvn.w	r1, #14
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	480a      	ldr	r0, [pc, #40]	; (8009334 <tcp_input_delayed_close+0x7c>)
 800930c:	f7ff fa50 	bl	80087b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7fe f83d 	bl	8007390 <tcp_free>
    return 1;
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08012064 	.word	0x08012064
 8009328:	08012234 	.word	0x08012234
 800932c:	080120b0 	.word	0x080120b0
 8009330:	20005d2d 	.word	0x20005d2d
 8009334:	20005cf4 	.word	0x20005cf4

08009338 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b08b      	sub	sp, #44	; 0x2c
 800933c:	af04      	add	r7, sp, #16
 800933e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009340:	4b6f      	ldr	r3, [pc, #444]	; (8009500 <tcp_listen_input+0x1c8>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 80d2 	bne.w	80094f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <tcp_listen_input+0x2a>
 8009354:	4b6b      	ldr	r3, [pc, #428]	; (8009504 <tcp_listen_input+0x1cc>)
 8009356:	f240 2281 	movw	r2, #641	; 0x281
 800935a:	496b      	ldr	r1, [pc, #428]	; (8009508 <tcp_listen_input+0x1d0>)
 800935c:	486b      	ldr	r0, [pc, #428]	; (800950c <tcp_listen_input+0x1d4>)
 800935e:	f006 fb49 	bl	800f9f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009362:	4b67      	ldr	r3, [pc, #412]	; (8009500 <tcp_listen_input+0x1c8>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b00      	cmp	r3, #0
 800936c:	d019      	beq.n	80093a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800936e:	4b68      	ldr	r3, [pc, #416]	; (8009510 <tcp_listen_input+0x1d8>)
 8009370:	6819      	ldr	r1, [r3, #0]
 8009372:	4b68      	ldr	r3, [pc, #416]	; (8009514 <tcp_listen_input+0x1dc>)
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	4b67      	ldr	r3, [pc, #412]	; (8009518 <tcp_listen_input+0x1e0>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800937e:	4b67      	ldr	r3, [pc, #412]	; (800951c <tcp_listen_input+0x1e4>)
 8009380:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009386:	4a65      	ldr	r2, [pc, #404]	; (800951c <tcp_listen_input+0x1e4>)
 8009388:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800938a:	8812      	ldrh	r2, [r2, #0]
 800938c:	b292      	uxth	r2, r2
 800938e:	9202      	str	r2, [sp, #8]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	4b63      	ldr	r3, [pc, #396]	; (8009520 <tcp_listen_input+0x1e8>)
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4b63      	ldr	r3, [pc, #396]	; (8009524 <tcp_listen_input+0x1ec>)
 8009398:	4602      	mov	r2, r0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f002 ff80 	bl	800c2a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80093a0:	e0a9      	b.n	80094f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80093a2:	4b57      	ldr	r3, [pc, #348]	; (8009500 <tcp_listen_input+0x1c8>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 80a3 	beq.w	80094f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7d5b      	ldrb	r3, [r3, #21]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff f927 	bl	8008608 <tcp_alloc>
 80093ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d111      	bne.n	80093e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <tcp_listen_input+0xa8>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6910      	ldr	r0, [r2, #16]
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295
 80093d6:	2100      	movs	r1, #0
 80093d8:	4798      	blx	r3
 80093da:	4603      	mov	r3, r0
 80093dc:	73bb      	strb	r3, [r7, #14]
      return;
 80093de:	e08b      	b.n	80094f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80093e0:	23f0      	movs	r3, #240	; 0xf0
 80093e2:	73bb      	strb	r3, [r7, #14]
      return;
 80093e4:	e088      	b.n	80094f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80093e6:	4b50      	ldr	r3, [pc, #320]	; (8009528 <tcp_listen_input+0x1f0>)
 80093e8:	695a      	ldr	r2, [r3, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80093ee:	4b4e      	ldr	r3, [pc, #312]	; (8009528 <tcp_listen_input+0x1f0>)
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8ada      	ldrh	r2, [r3, #22]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80093fe:	4b47      	ldr	r3, [pc, #284]	; (800951c <tcp_listen_input+0x1e4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29a      	uxth	r2, r3
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2203      	movs	r2, #3
 800940e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009410:	4b41      	ldr	r3, [pc, #260]	; (8009518 <tcp_listen_input+0x1e0>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009422:	6978      	ldr	r0, [r7, #20]
 8009424:	f7ff fa58 	bl	80088d8 <tcp_next_iss>
 8009428:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009442:	4b35      	ldr	r3, [pc, #212]	; (8009518 <tcp_listen_input+0x1e0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	1e5a      	subs	r2, r3, #1
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7a5b      	ldrb	r3, [r3, #9]
 800945e:	f003 030c 	and.w	r3, r3, #12
 8009462:	b2da      	uxtb	r2, r3
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7a1a      	ldrb	r2, [r3, #8]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009470:	4b2e      	ldr	r3, [pc, #184]	; (800952c <tcp_listen_input+0x1f4>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	4a2c      	ldr	r2, [pc, #176]	; (800952c <tcp_listen_input+0x1f4>)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	f003 f8d1 	bl	800c624 <tcp_timer_needed>
 8009482:	4b2b      	ldr	r3, [pc, #172]	; (8009530 <tcp_listen_input+0x1f8>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009488:	6978      	ldr	r0, [r7, #20]
 800948a:	f001 fd8f 	bl	800afac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800948e:	4b23      	ldr	r3, [pc, #140]	; (800951c <tcp_listen_input+0x1e4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	89db      	ldrh	r3, [r3, #14]
 8009494:	b29a      	uxth	r2, r3
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f005 f84f 	bl	800e554 <ip4_route>
 80094b6:	4601      	mov	r1, r0
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	3304      	adds	r3, #4
 80094bc:	461a      	mov	r2, r3
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fa30 	bl	8008924 <tcp_eff_send_mss_netif>
 80094c4:	4603      	mov	r3, r0
 80094c6:	461a      	mov	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80094cc:	2112      	movs	r1, #18
 80094ce:	6978      	ldr	r0, [r7, #20]
 80094d0:	f002 f844 	bl	800b55c <tcp_enqueue_flags>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80094d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80094e0:	2100      	movs	r1, #0
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f7fe f97e 	bl	80077e4 <tcp_abandon>
      return;
 80094e8:	e006      	b.n	80094f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80094ea:	6978      	ldr	r0, [r7, #20]
 80094ec:	f002 f924 	bl	800b738 <tcp_output>
  return;
 80094f0:	e001      	b.n	80094f6 <tcp_listen_input+0x1be>
    return;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <tcp_listen_input+0x1c0>
  return;
 80094f6:	bf00      	nop
}
 80094f8:	371c      	adds	r7, #28
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd90      	pop	{r4, r7, pc}
 80094fe:	bf00      	nop
 8009500:	20005d2c 	.word	0x20005d2c
 8009504:	08012064 	.word	0x08012064
 8009508:	0801225c 	.word	0x0801225c
 800950c:	080120b0 	.word	0x080120b0
 8009510:	20005d24 	.word	0x20005d24
 8009514:	20005d2a 	.word	0x20005d2a
 8009518:	20005d20 	.word	0x20005d20
 800951c:	20005d10 	.word	0x20005d10
 8009520:	200005c8 	.word	0x200005c8
 8009524:	200005cc 	.word	0x200005cc
 8009528:	200005b8 	.word	0x200005b8
 800952c:	20005cf4 	.word	0x20005cf4
 8009530:	20005cfc 	.word	0x20005cfc

08009534 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af04      	add	r7, sp, #16
 800953a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800953c:	4b2f      	ldr	r3, [pc, #188]	; (80095fc <tcp_timewait_input+0xc8>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d153      	bne.n	80095f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <tcp_timewait_input+0x28>
 800954e:	4b2c      	ldr	r3, [pc, #176]	; (8009600 <tcp_timewait_input+0xcc>)
 8009550:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009554:	492b      	ldr	r1, [pc, #172]	; (8009604 <tcp_timewait_input+0xd0>)
 8009556:	482c      	ldr	r0, [pc, #176]	; (8009608 <tcp_timewait_input+0xd4>)
 8009558:	f006 fa4c 	bl	800f9f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800955c:	4b27      	ldr	r3, [pc, #156]	; (80095fc <tcp_timewait_input+0xc8>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 0302 	and.w	r3, r3, #2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d02a      	beq.n	80095be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009568:	4b28      	ldr	r3, [pc, #160]	; (800960c <tcp_timewait_input+0xd8>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	db2d      	blt.n	80095d2 <tcp_timewait_input+0x9e>
 8009576:	4b25      	ldr	r3, [pc, #148]	; (800960c <tcp_timewait_input+0xd8>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009582:	440b      	add	r3, r1
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	dc23      	bgt.n	80095d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800958a:	4b21      	ldr	r3, [pc, #132]	; (8009610 <tcp_timewait_input+0xdc>)
 800958c:	6819      	ldr	r1, [r3, #0]
 800958e:	4b21      	ldr	r3, [pc, #132]	; (8009614 <tcp_timewait_input+0xe0>)
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	4b1d      	ldr	r3, [pc, #116]	; (800960c <tcp_timewait_input+0xd8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800959a:	4b1f      	ldr	r3, [pc, #124]	; (8009618 <tcp_timewait_input+0xe4>)
 800959c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800959e:	885b      	ldrh	r3, [r3, #2]
 80095a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095a2:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <tcp_timewait_input+0xe4>)
 80095a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80095a6:	8812      	ldrh	r2, [r2, #0]
 80095a8:	b292      	uxth	r2, r2
 80095aa:	9202      	str	r2, [sp, #8]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	4b1b      	ldr	r3, [pc, #108]	; (800961c <tcp_timewait_input+0xe8>)
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <tcp_timewait_input+0xec>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f002 fe72 	bl	800c2a0 <tcp_rst>
      return;
 80095bc:	e01b      	b.n	80095f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <tcp_timewait_input+0xc8>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <tcp_timewait_input+0xf0>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80095d2:	4b10      	ldr	r3, [pc, #64]	; (8009614 <tcp_timewait_input+0xe0>)
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00c      	beq.n	80095f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8b5b      	ldrh	r3, [r3, #26]
 80095de:	f043 0302 	orr.w	r3, r3, #2
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f002 f8a5 	bl	800b738 <tcp_output>
  }
  return;
 80095ee:	e001      	b.n	80095f4 <tcp_timewait_input+0xc0>
    return;
 80095f0:	bf00      	nop
 80095f2:	e000      	b.n	80095f6 <tcp_timewait_input+0xc2>
  return;
 80095f4:	bf00      	nop
}
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20005d2c 	.word	0x20005d2c
 8009600:	08012064 	.word	0x08012064
 8009604:	0801227c 	.word	0x0801227c
 8009608:	080120b0 	.word	0x080120b0
 800960c:	20005d20 	.word	0x20005d20
 8009610:	20005d24 	.word	0x20005d24
 8009614:	20005d2a 	.word	0x20005d2a
 8009618:	20005d10 	.word	0x20005d10
 800961c:	200005c8 	.word	0x200005c8
 8009620:	200005cc 	.word	0x200005cc
 8009624:	20005ce8 	.word	0x20005ce8

08009628 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b08d      	sub	sp, #52	; 0x34
 800962c:	af04      	add	r7, sp, #16
 800962e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <tcp_process+0x24>
 800963e:	4b9d      	ldr	r3, [pc, #628]	; (80098b4 <tcp_process+0x28c>)
 8009640:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009644:	499c      	ldr	r1, [pc, #624]	; (80098b8 <tcp_process+0x290>)
 8009646:	489d      	ldr	r0, [pc, #628]	; (80098bc <tcp_process+0x294>)
 8009648:	f006 f9d4 	bl	800f9f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800964c:	4b9c      	ldr	r3, [pc, #624]	; (80098c0 <tcp_process+0x298>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b00      	cmp	r3, #0
 8009656:	d04e      	beq.n	80096f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7d1b      	ldrb	r3, [r3, #20]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d108      	bne.n	8009672 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009664:	4b97      	ldr	r3, [pc, #604]	; (80098c4 <tcp_process+0x29c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d123      	bne.n	80096b4 <tcp_process+0x8c>
        acceptable = 1;
 800966c:	2301      	movs	r3, #1
 800966e:	76fb      	strb	r3, [r7, #27]
 8009670:	e020      	b.n	80096b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009676:	4b94      	ldr	r3, [pc, #592]	; (80098c8 <tcp_process+0x2a0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d102      	bne.n	8009684 <tcp_process+0x5c>
        acceptable = 1;
 800967e:	2301      	movs	r3, #1
 8009680:	76fb      	strb	r3, [r7, #27]
 8009682:	e017      	b.n	80096b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009684:	4b90      	ldr	r3, [pc, #576]	; (80098c8 <tcp_process+0x2a0>)
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	db10      	blt.n	80096b4 <tcp_process+0x8c>
 8009692:	4b8d      	ldr	r3, [pc, #564]	; (80098c8 <tcp_process+0x2a0>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800969e:	440b      	add	r3, r1
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dc06      	bgt.n	80096b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	8b5b      	ldrh	r3, [r3, #26]
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80096b4:	7efb      	ldrb	r3, [r7, #27]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01b      	beq.n	80096f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7d1b      	ldrb	r3, [r3, #20]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <tcp_process+0xa8>
 80096c2:	4b7c      	ldr	r3, [pc, #496]	; (80098b4 <tcp_process+0x28c>)
 80096c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80096c8:	4980      	ldr	r1, [pc, #512]	; (80098cc <tcp_process+0x2a4>)
 80096ca:	487c      	ldr	r0, [pc, #496]	; (80098bc <tcp_process+0x294>)
 80096cc:	f006 f992 	bl	800f9f4 <iprintf>
      recv_flags |= TF_RESET;
 80096d0:	4b7f      	ldr	r3, [pc, #508]	; (80098d0 <tcp_process+0x2a8>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f043 0308 	orr.w	r3, r3, #8
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	4b7d      	ldr	r3, [pc, #500]	; (80098d0 <tcp_process+0x2a8>)
 80096dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	8b5b      	ldrh	r3, [r3, #26]
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80096ec:	f06f 030d 	mvn.w	r3, #13
 80096f0:	e37a      	b.n	8009de8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e378      	b.n	8009de8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80096f6:	4b72      	ldr	r3, [pc, #456]	; (80098c0 <tcp_process+0x298>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d010      	beq.n	8009724 <tcp_process+0xfc>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	7d1b      	ldrb	r3, [r3, #20]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d00c      	beq.n	8009724 <tcp_process+0xfc>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	2b03      	cmp	r3, #3
 8009710:	d008      	beq.n	8009724 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	8b5b      	ldrh	r3, [r3, #26]
 8009716:	f043 0302 	orr.w	r3, r3, #2
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	e361      	b.n	8009de8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8b5b      	ldrh	r3, [r3, #26]
 8009728:	f003 0310 	and.w	r3, r3, #16
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009730:	4b68      	ldr	r3, [pc, #416]	; (80098d4 <tcp_process+0x2ac>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 fc2f 	bl	800afac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7d1b      	ldrb	r3, [r3, #20]
 8009752:	3b02      	subs	r3, #2
 8009754:	2b07      	cmp	r3, #7
 8009756:	f200 8337 	bhi.w	8009dc8 <tcp_process+0x7a0>
 800975a:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <tcp_process+0x138>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009781 	.word	0x08009781
 8009764:	080099b1 	.word	0x080099b1
 8009768:	08009b29 	.word	0x08009b29
 800976c:	08009b53 	.word	0x08009b53
 8009770:	08009c77 	.word	0x08009c77
 8009774:	08009b29 	.word	0x08009b29
 8009778:	08009d03 	.word	0x08009d03
 800977c:	08009d93 	.word	0x08009d93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009780:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <tcp_process+0x298>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80e4 	beq.w	8009956 <tcp_process+0x32e>
 800978e:	4b4c      	ldr	r3, [pc, #304]	; (80098c0 <tcp_process+0x298>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 80dd 	beq.w	8009956 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	4b48      	ldr	r3, [pc, #288]	; (80098c4 <tcp_process+0x29c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	f040 80d5 	bne.w	8009956 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80097ac:	4b46      	ldr	r3, [pc, #280]	; (80098c8 <tcp_process+0x2a0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80097be:	4b41      	ldr	r3, [pc, #260]	; (80098c4 <tcp_process+0x29c>)
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80097c6:	4b44      	ldr	r3, [pc, #272]	; (80098d8 <tcp_process+0x2b0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	89db      	ldrh	r3, [r3, #14]
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80097e0:	4b39      	ldr	r3, [pc, #228]	; (80098c8 <tcp_process+0x2a0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	1e5a      	subs	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2204      	movs	r2, #4
 80097ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4618      	mov	r0, r3
 80097fa:	f004 feab 	bl	800e554 <ip4_route>
 80097fe:	4601      	mov	r1, r0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	461a      	mov	r2, r3
 8009806:	4620      	mov	r0, r4
 8009808:	f7ff f88c 	bl	8008924 <tcp_eff_send_mss_netif>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009818:	009a      	lsls	r2, r3, #2
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	f241 111c 	movw	r1, #4380	; 0x111c
 8009824:	428b      	cmp	r3, r1
 8009826:	bf38      	it	cc
 8009828:	460b      	movcc	r3, r1
 800982a:	429a      	cmp	r2, r3
 800982c:	d204      	bcs.n	8009838 <tcp_process+0x210>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	b29b      	uxth	r3, r3
 8009836:	e00d      	b.n	8009854 <tcp_process+0x22c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009842:	4293      	cmp	r3, r2
 8009844:	d904      	bls.n	8009850 <tcp_process+0x228>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	b29b      	uxth	r3, r3
 800984e:	e001      	b.n	8009854 <tcp_process+0x22c>
 8009850:	f241 131c 	movw	r3, #4380	; 0x111c
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <tcp_process+0x24a>
 8009864:	4b13      	ldr	r3, [pc, #76]	; (80098b4 <tcp_process+0x28c>)
 8009866:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800986a:	491c      	ldr	r1, [pc, #112]	; (80098dc <tcp_process+0x2b4>)
 800986c:	4813      	ldr	r0, [pc, #76]	; (80098bc <tcp_process+0x294>)
 800986e:	f006 f8c1 	bl	800f9f4 <iprintf>
        --pcb->snd_queuelen;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d12a      	bne.n	80098e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009892:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <tcp_process+0x280>
 800989a:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <tcp_process+0x28c>)
 800989c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80098a0:	490f      	ldr	r1, [pc, #60]	; (80098e0 <tcp_process+0x2b8>)
 80098a2:	4806      	ldr	r0, [pc, #24]	; (80098bc <tcp_process+0x294>)
 80098a4:	f006 f8a6 	bl	800f9f4 <iprintf>
          pcb->unsent = rseg->next;
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80098b0:	e01c      	b.n	80098ec <tcp_process+0x2c4>
 80098b2:	bf00      	nop
 80098b4:	08012064 	.word	0x08012064
 80098b8:	0801229c 	.word	0x0801229c
 80098bc:	080120b0 	.word	0x080120b0
 80098c0:	20005d2c 	.word	0x20005d2c
 80098c4:	20005d24 	.word	0x20005d24
 80098c8:	20005d20 	.word	0x20005d20
 80098cc:	080122b8 	.word	0x080122b8
 80098d0:	20005d2d 	.word	0x20005d2d
 80098d4:	20005ce8 	.word	0x20005ce8
 80098d8:	20005d10 	.word	0x20005d10
 80098dc:	080122d8 	.word	0x080122d8
 80098e0:	080122f0 	.word	0x080122f0
        } else {
          pcb->unacked = rseg->next;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80098ec:	69f8      	ldr	r0, [r7, #28]
 80098ee:	f7fe fd22 	bl	8008336 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009900:	861a      	strh	r2, [r3, #48]	; 0x30
 8009902:	e006      	b.n	8009912 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <tcp_process+0x30a>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6910      	ldr	r0, [r2, #16]
 8009926:	2200      	movs	r2, #0
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	4798      	blx	r3
 800992c:	4603      	mov	r3, r0
 800992e:	76bb      	strb	r3, [r7, #26]
 8009930:	e001      	b.n	8009936 <tcp_process+0x30e>
 8009932:	2300      	movs	r3, #0
 8009934:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009936:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800993a:	f113 0f0d 	cmn.w	r3, #13
 800993e:	d102      	bne.n	8009946 <tcp_process+0x31e>
          return ERR_ABRT;
 8009940:	f06f 030c 	mvn.w	r3, #12
 8009944:	e250      	b.n	8009de8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8b5b      	ldrh	r3, [r3, #26]
 800994a:	f043 0302 	orr.w	r3, r3, #2
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009954:	e23a      	b.n	8009dcc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009956:	4b98      	ldr	r3, [pc, #608]	; (8009bb8 <tcp_process+0x590>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 8234 	beq.w	8009dcc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009964:	4b95      	ldr	r3, [pc, #596]	; (8009bbc <tcp_process+0x594>)
 8009966:	6819      	ldr	r1, [r3, #0]
 8009968:	4b95      	ldr	r3, [pc, #596]	; (8009bc0 <tcp_process+0x598>)
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	4b95      	ldr	r3, [pc, #596]	; (8009bc4 <tcp_process+0x59c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009974:	4b94      	ldr	r3, [pc, #592]	; (8009bc8 <tcp_process+0x5a0>)
 8009976:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009978:	885b      	ldrh	r3, [r3, #2]
 800997a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800997c:	4a92      	ldr	r2, [pc, #584]	; (8009bc8 <tcp_process+0x5a0>)
 800997e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009980:	8812      	ldrh	r2, [r2, #0]
 8009982:	b292      	uxth	r2, r2
 8009984:	9202      	str	r2, [sp, #8]
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	4b90      	ldr	r3, [pc, #576]	; (8009bcc <tcp_process+0x5a4>)
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	4b90      	ldr	r3, [pc, #576]	; (8009bd0 <tcp_process+0x5a8>)
 800998e:	4602      	mov	r2, r0
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f002 fc85 	bl	800c2a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800999c:	2b05      	cmp	r3, #5
 800999e:	f200 8215 	bhi.w	8009dcc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f002 fa4f 	bl	800be4c <tcp_rexmit_rto>
      break;
 80099ae:	e20d      	b.n	8009dcc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80099b0:	4b81      	ldr	r3, [pc, #516]	; (8009bb8 <tcp_process+0x590>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a1 	beq.w	8009b00 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099be:	4b7f      	ldr	r3, [pc, #508]	; (8009bbc <tcp_process+0x594>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	db7e      	blt.n	8009acc <tcp_process+0x4a4>
 80099ce:	4b7b      	ldr	r3, [pc, #492]	; (8009bbc <tcp_process+0x594>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	dc77      	bgt.n	8009acc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2204      	movs	r2, #4
 80099e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80099ea:	23fa      	movs	r3, #250	; 0xfa
 80099ec:	76bb      	strb	r3, [r7, #26]
 80099ee:	e01d      	b.n	8009a2c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <tcp_process+0x3e0>
 80099fa:	4b76      	ldr	r3, [pc, #472]	; (8009bd4 <tcp_process+0x5ac>)
 80099fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009a00:	4975      	ldr	r1, [pc, #468]	; (8009bd8 <tcp_process+0x5b0>)
 8009a02:	4876      	ldr	r0, [pc, #472]	; (8009bdc <tcp_process+0x5b4>)
 8009a04:	f005 fff6 	bl	800f9f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <tcp_process+0x400>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6910      	ldr	r0, [r2, #16]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4798      	blx	r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	76bb      	strb	r3, [r7, #26]
 8009a26:	e001      	b.n	8009a2c <tcp_process+0x404>
 8009a28:	23f0      	movs	r3, #240	; 0xf0
 8009a2a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009a2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00a      	beq.n	8009a4a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009a34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a38:	f113 0f0d 	cmn.w	r3, #13
 8009a3c:	d002      	beq.n	8009a44 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fd ff8e 	bl	8007960 <tcp_abort>
            }
            return ERR_ABRT;
 8009a44:	f06f 030c 	mvn.w	r3, #12
 8009a48:	e1ce      	b.n	8009de8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fae0 	bl	800a010 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009a50:	4b63      	ldr	r3, [pc, #396]	; (8009be0 <tcp_process+0x5b8>)
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <tcp_process+0x43c>
            recv_acked--;
 8009a58:	4b61      	ldr	r3, [pc, #388]	; (8009be0 <tcp_process+0x5b8>)
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	4b5f      	ldr	r3, [pc, #380]	; (8009be0 <tcp_process+0x5b8>)
 8009a62:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a68:	009a      	lsls	r2, r3, #2
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	f241 111c 	movw	r1, #4380	; 0x111c
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf38      	it	cc
 8009a78:	460b      	movcc	r3, r1
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d204      	bcs.n	8009a88 <tcp_process+0x460>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	e00d      	b.n	8009aa4 <tcp_process+0x47c>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d904      	bls.n	8009aa0 <tcp_process+0x478>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	e001      	b.n	8009aa4 <tcp_process+0x47c>
 8009aa0:	f241 131c 	movw	r3, #4380	; 0x111c
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009aaa:	4b4e      	ldr	r3, [pc, #312]	; (8009be4 <tcp_process+0x5bc>)
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d037      	beq.n	8009b26 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8b5b      	ldrh	r3, [r3, #26]
 8009aba:	f043 0302 	orr.w	r3, r3, #2
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2207      	movs	r2, #7
 8009ac8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009aca:	e02c      	b.n	8009b26 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009acc:	4b3b      	ldr	r3, [pc, #236]	; (8009bbc <tcp_process+0x594>)
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	4b3b      	ldr	r3, [pc, #236]	; (8009bc0 <tcp_process+0x598>)
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4b3b      	ldr	r3, [pc, #236]	; (8009bc4 <tcp_process+0x59c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009adc:	4b3a      	ldr	r3, [pc, #232]	; (8009bc8 <tcp_process+0x5a0>)
 8009ade:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ae0:	885b      	ldrh	r3, [r3, #2]
 8009ae2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ae4:	4a38      	ldr	r2, [pc, #224]	; (8009bc8 <tcp_process+0x5a0>)
 8009ae6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ae8:	8812      	ldrh	r2, [r2, #0]
 8009aea:	b292      	uxth	r2, r2
 8009aec:	9202      	str	r2, [sp, #8]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	4b36      	ldr	r3, [pc, #216]	; (8009bcc <tcp_process+0x5a4>)
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4b36      	ldr	r3, [pc, #216]	; (8009bd0 <tcp_process+0x5a8>)
 8009af6:	4602      	mov	r2, r0
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 fbd1 	bl	800c2a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009afe:	e167      	b.n	8009dd0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009b00:	4b2d      	ldr	r3, [pc, #180]	; (8009bb8 <tcp_process+0x590>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 8161 	beq.w	8009dd0 <tcp_process+0x7a8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	1e5a      	subs	r2, r3, #1
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <tcp_process+0x59c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	f040 8159 	bne.w	8009dd0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f002 f9b6 	bl	800be90 <tcp_rexmit>
      break;
 8009b24:	e154      	b.n	8009dd0 <tcp_process+0x7a8>
 8009b26:	e153      	b.n	8009dd0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa71 	bl	800a010 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009b2e:	4b2d      	ldr	r3, [pc, #180]	; (8009be4 <tcp_process+0x5bc>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 814c 	beq.w	8009dd4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8b5b      	ldrh	r3, [r3, #26]
 8009b40:	f043 0302 	orr.w	r3, r3, #2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2207      	movs	r2, #7
 8009b4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b50:	e140      	b.n	8009dd4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa5c 	bl	800a010 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009b58:	4b22      	ldr	r3, [pc, #136]	; (8009be4 <tcp_process+0x5bc>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d071      	beq.n	8009c48 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b64:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <tcp_process+0x590>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d060      	beq.n	8009c32 <tcp_process+0x60a>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b74:	4b11      	ldr	r3, [pc, #68]	; (8009bbc <tcp_process+0x594>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d15a      	bne.n	8009c32 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d156      	bne.n	8009c32 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8b5b      	ldrh	r3, [r3, #26]
 8009b88:	f043 0302 	orr.w	r3, r3, #2
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fe fdbc 	bl	8008710 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009b98:	4b13      	ldr	r3, [pc, #76]	; (8009be8 <tcp_process+0x5c0>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d105      	bne.n	8009bae <tcp_process+0x586>
 8009ba2:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <tcp_process+0x5c0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	4a0f      	ldr	r2, [pc, #60]	; (8009be8 <tcp_process+0x5c0>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	e02e      	b.n	8009c0c <tcp_process+0x5e4>
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <tcp_process+0x5c0>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	e027      	b.n	8009c06 <tcp_process+0x5de>
 8009bb6:	bf00      	nop
 8009bb8:	20005d2c 	.word	0x20005d2c
 8009bbc:	20005d24 	.word	0x20005d24
 8009bc0:	20005d2a 	.word	0x20005d2a
 8009bc4:	20005d20 	.word	0x20005d20
 8009bc8:	20005d10 	.word	0x20005d10
 8009bcc:	200005c8 	.word	0x200005c8
 8009bd0:	200005cc 	.word	0x200005cc
 8009bd4:	08012064 	.word	0x08012064
 8009bd8:	08012304 	.word	0x08012304
 8009bdc:	080120b0 	.word	0x080120b0
 8009be0:	20005d28 	.word	0x20005d28
 8009be4:	20005d2d 	.word	0x20005d2d
 8009be8:	20005cf4 	.word	0x20005cf4
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d104      	bne.n	8009c00 <tcp_process+0x5d8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	e005      	b.n	8009c0c <tcp_process+0x5e4>
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1ef      	bne.n	8009bec <tcp_process+0x5c4>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	60da      	str	r2, [r3, #12]
 8009c12:	4b77      	ldr	r3, [pc, #476]	; (8009df0 <tcp_process+0x7c8>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009c1e:	4b75      	ldr	r3, [pc, #468]	; (8009df4 <tcp_process+0x7cc>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60da      	str	r2, [r3, #12]
 8009c26:	4a73      	ldr	r2, [pc, #460]	; (8009df4 <tcp_process+0x7cc>)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	f002 fcfa 	bl	800c624 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009c30:	e0d2      	b.n	8009dd8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	8b5b      	ldrh	r3, [r3, #26]
 8009c36:	f043 0302 	orr.w	r3, r3, #2
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2208      	movs	r2, #8
 8009c44:	751a      	strb	r2, [r3, #20]
      break;
 8009c46:	e0c7      	b.n	8009dd8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c48:	4b6b      	ldr	r3, [pc, #428]	; (8009df8 <tcp_process+0x7d0>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80c1 	beq.w	8009dd8 <tcp_process+0x7b0>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c5a:	4b68      	ldr	r3, [pc, #416]	; (8009dfc <tcp_process+0x7d4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	f040 80ba 	bne.w	8009dd8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f040 80b5 	bne.w	8009dd8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2206      	movs	r2, #6
 8009c72:	751a      	strb	r2, [r3, #20]
      break;
 8009c74:	e0b0      	b.n	8009dd8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f9ca 	bl	800a010 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c7c:	4b60      	ldr	r3, [pc, #384]	; (8009e00 <tcp_process+0x7d8>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 80a9 	beq.w	8009ddc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8b5b      	ldrh	r3, [r3, #26]
 8009c8e:	f043 0302 	orr.w	r3, r3, #2
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7fe fd39 	bl	8008710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c9e:	4b59      	ldr	r3, [pc, #356]	; (8009e04 <tcp_process+0x7dc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d105      	bne.n	8009cb4 <tcp_process+0x68c>
 8009ca8:	4b56      	ldr	r3, [pc, #344]	; (8009e04 <tcp_process+0x7dc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	4a55      	ldr	r2, [pc, #340]	; (8009e04 <tcp_process+0x7dc>)
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	e013      	b.n	8009cdc <tcp_process+0x6b4>
 8009cb4:	4b53      	ldr	r3, [pc, #332]	; (8009e04 <tcp_process+0x7dc>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	e00c      	b.n	8009cd6 <tcp_process+0x6ae>
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d104      	bne.n	8009cd0 <tcp_process+0x6a8>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	60da      	str	r2, [r3, #12]
 8009cce:	e005      	b.n	8009cdc <tcp_process+0x6b4>
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1ef      	bne.n	8009cbc <tcp_process+0x694>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	60da      	str	r2, [r3, #12]
 8009ce2:	4b43      	ldr	r3, [pc, #268]	; (8009df0 <tcp_process+0x7c8>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	220a      	movs	r2, #10
 8009cec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009cee:	4b41      	ldr	r3, [pc, #260]	; (8009df4 <tcp_process+0x7cc>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60da      	str	r2, [r3, #12]
 8009cf6:	4a3f      	ldr	r2, [pc, #252]	; (8009df4 <tcp_process+0x7cc>)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	f002 fc92 	bl	800c624 <tcp_timer_needed>
      }
      break;
 8009d00:	e06c      	b.n	8009ddc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f984 	bl	800a010 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d08:	4b3b      	ldr	r3, [pc, #236]	; (8009df8 <tcp_process+0x7d0>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d065      	beq.n	8009de0 <tcp_process+0x7b8>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d18:	4b38      	ldr	r3, [pc, #224]	; (8009dfc <tcp_process+0x7d4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d15f      	bne.n	8009de0 <tcp_process+0x7b8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d15b      	bne.n	8009de0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7fe fcf1 	bl	8008710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d2e:	4b35      	ldr	r3, [pc, #212]	; (8009e04 <tcp_process+0x7dc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d105      	bne.n	8009d44 <tcp_process+0x71c>
 8009d38:	4b32      	ldr	r3, [pc, #200]	; (8009e04 <tcp_process+0x7dc>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	4a31      	ldr	r2, [pc, #196]	; (8009e04 <tcp_process+0x7dc>)
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e013      	b.n	8009d6c <tcp_process+0x744>
 8009d44:	4b2f      	ldr	r3, [pc, #188]	; (8009e04 <tcp_process+0x7dc>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	e00c      	b.n	8009d66 <tcp_process+0x73e>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d104      	bne.n	8009d60 <tcp_process+0x738>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	60da      	str	r2, [r3, #12]
 8009d5e:	e005      	b.n	8009d6c <tcp_process+0x744>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1ef      	bne.n	8009d4c <tcp_process+0x724>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	4b1f      	ldr	r3, [pc, #124]	; (8009df0 <tcp_process+0x7c8>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	220a      	movs	r2, #10
 8009d7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	; (8009df4 <tcp_process+0x7cc>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	60da      	str	r2, [r3, #12]
 8009d86:	4a1b      	ldr	r2, [pc, #108]	; (8009df4 <tcp_process+0x7cc>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	f002 fc4a 	bl	800c624 <tcp_timer_needed>
      }
      break;
 8009d90:	e026      	b.n	8009de0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f93c 	bl	800a010 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d98:	4b17      	ldr	r3, [pc, #92]	; (8009df8 <tcp_process+0x7d0>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 0310 	and.w	r3, r3, #16
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01f      	beq.n	8009de4 <tcp_process+0x7bc>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009da8:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <tcp_process+0x7d4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d119      	bne.n	8009de4 <tcp_process+0x7bc>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d115      	bne.n	8009de4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009db8:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <tcp_process+0x7d8>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f043 0310 	orr.w	r3, r3, #16
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <tcp_process+0x7d8>)
 8009dc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009dc6:	e00d      	b.n	8009de4 <tcp_process+0x7bc>
    default:
      break;
 8009dc8:	bf00      	nop
 8009dca:	e00c      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009dcc:	bf00      	nop
 8009dce:	e00a      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009dd0:	bf00      	nop
 8009dd2:	e008      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009dd4:	bf00      	nop
 8009dd6:	e006      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009dd8:	bf00      	nop
 8009dda:	e004      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009ddc:	bf00      	nop
 8009dde:	e002      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009de0:	bf00      	nop
 8009de2:	e000      	b.n	8009de6 <tcp_process+0x7be>
      break;
 8009de4:	bf00      	nop
  }
  return ERR_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3724      	adds	r7, #36	; 0x24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd90      	pop	{r4, r7, pc}
 8009df0:	20005cfc 	.word	0x20005cfc
 8009df4:	20005cf8 	.word	0x20005cf8
 8009df8:	20005d2c 	.word	0x20005d2c
 8009dfc:	20005d24 	.word	0x20005d24
 8009e00:	20005d2d 	.word	0x20005d2d
 8009e04:	20005cf4 	.word	0x20005cf4

08009e08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009e08:	b590      	push	{r4, r7, lr}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <tcp_oos_insert_segment+0x1e>
 8009e18:	4b3b      	ldr	r3, [pc, #236]	; (8009f08 <tcp_oos_insert_segment+0x100>)
 8009e1a:	f240 421f 	movw	r2, #1055	; 0x41f
 8009e1e:	493b      	ldr	r1, [pc, #236]	; (8009f0c <tcp_oos_insert_segment+0x104>)
 8009e20:	483b      	ldr	r0, [pc, #236]	; (8009f10 <tcp_oos_insert_segment+0x108>)
 8009e22:	f005 fde7 	bl	800f9f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fb fcb8 	bl	80057a4 <lwip_htons>
 8009e34:	4603      	mov	r3, r0
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d028      	beq.n	8009e92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009e40:	6838      	ldr	r0, [r7, #0]
 8009e42:	f7fe fa63 	bl	800830c <tcp_segs_free>
    next = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	603b      	str	r3, [r7, #0]
 8009e4a:	e056      	b.n	8009efa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	899b      	ldrh	r3, [r3, #12]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fb fca5 	bl	80057a4 <lwip_htons>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	899b      	ldrh	r3, [r3, #12]
 8009e6c:	b29c      	uxth	r4, r3
 8009e6e:	2001      	movs	r0, #1
 8009e70:	f7fb fc98 	bl	80057a4 <lwip_htons>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	4322      	orrs	r2, r4
 8009e7e:	b292      	uxth	r2, r2
 8009e80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7fe fa52 	bl	8008336 <tcp_seg_free>
    while (next &&
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00e      	beq.n	8009eb6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	891b      	ldrh	r3, [r3, #8]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <tcp_oos_insert_segment+0x10c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	441a      	add	r2, r3
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	8909      	ldrh	r1, [r1, #8]
 8009eae:	440b      	add	r3, r1
 8009eb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	daca      	bge.n	8009e4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01e      	beq.n	8009efa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	891b      	ldrh	r3, [r3, #8]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <tcp_oos_insert_segment+0x10c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	441a      	add	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	dd12      	ble.n	8009efa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <tcp_oos_insert_segment+0x10c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	891b      	ldrh	r3, [r3, #8]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	f7fc fd83 	bl	8006a00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	601a      	str	r2, [r3, #0]
}
 8009f00:	bf00      	nop
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd90      	pop	{r4, r7, pc}
 8009f08:	08012064 	.word	0x08012064
 8009f0c:	08012324 	.word	0x08012324
 8009f10:	080120b0 	.word	0x080120b0
 8009f14:	20005d20 	.word	0x20005d20

08009f18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009f18:	b5b0      	push	{r4, r5, r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009f26:	e03e      	b.n	8009fa6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fc ff70 	bl	8006e1c <pbuf_clen>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f46:	8a7a      	ldrh	r2, [r7, #18]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d906      	bls.n	8009f5a <tcp_free_acked_segments+0x42>
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ff8 <tcp_free_acked_segments+0xe0>)
 8009f4e:	f240 4257 	movw	r2, #1111	; 0x457
 8009f52:	492a      	ldr	r1, [pc, #168]	; (8009ffc <tcp_free_acked_segments+0xe4>)
 8009f54:	482a      	ldr	r0, [pc, #168]	; (800a000 <tcp_free_acked_segments+0xe8>)
 8009f56:	f005 fd4d 	bl	800f9f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009f60:	8a7b      	ldrh	r3, [r7, #18]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	891a      	ldrh	r2, [r3, #8]
 8009f70:	4b24      	ldr	r3, [pc, #144]	; (800a004 <tcp_free_acked_segments+0xec>)
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	4413      	add	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	4b22      	ldr	r3, [pc, #136]	; (800a004 <tcp_free_acked_segments+0xec>)
 8009f7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	f7fe f9da 	bl	8008336 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00c      	beq.n	8009fa6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d109      	bne.n	8009fa6 <tcp_free_acked_segments+0x8e>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <tcp_free_acked_segments+0x8e>
 8009f98:	4b17      	ldr	r3, [pc, #92]	; (8009ff8 <tcp_free_acked_segments+0xe0>)
 8009f9a:	f240 4261 	movw	r2, #1121	; 0x461
 8009f9e:	491a      	ldr	r1, [pc, #104]	; (800a008 <tcp_free_acked_segments+0xf0>)
 8009fa0:	4817      	ldr	r0, [pc, #92]	; (800a000 <tcp_free_acked_segments+0xe8>)
 8009fa2:	f005 fd27 	bl	800f9f4 <iprintf>
  while (seg_list != NULL &&
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d020      	beq.n	8009fee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fb fc0b 	bl	80057ce <lwip_htonl>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	891b      	ldrh	r3, [r3, #8]
 8009fbe:	461d      	mov	r5, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	899b      	ldrh	r3, [r3, #12]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fb fbeb 	bl	80057a4 <lwip_htons>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <tcp_free_acked_segments+0xc6>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <tcp_free_acked_segments+0xc8>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	442b      	add	r3, r5
 8009fe2:	18e2      	adds	r2, r4, r3
 8009fe4:	4b09      	ldr	r3, [pc, #36]	; (800a00c <tcp_free_acked_segments+0xf4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd9c      	ble.n	8009f28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009fee:	68bb      	ldr	r3, [r7, #8]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ff8:	08012064 	.word	0x08012064
 8009ffc:	0801234c 	.word	0x0801234c
 800a000:	080120b0 	.word	0x080120b0
 800a004:	20005d28 	.word	0x20005d28
 800a008:	08012374 	.word	0x08012374
 800a00c:	20005d24 	.word	0x20005d24

0800a010 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a010:	b5b0      	push	{r4, r5, r7, lr}
 800a012:	b094      	sub	sp, #80	; 0x50
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <tcp_receive+0x20>
 800a022:	4b91      	ldr	r3, [pc, #580]	; (800a268 <tcp_receive+0x258>)
 800a024:	f240 427b 	movw	r2, #1147	; 0x47b
 800a028:	4990      	ldr	r1, [pc, #576]	; (800a26c <tcp_receive+0x25c>)
 800a02a:	4891      	ldr	r0, [pc, #580]	; (800a270 <tcp_receive+0x260>)
 800a02c:	f005 fce2 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d806      	bhi.n	800a046 <tcp_receive+0x36>
 800a038:	4b8b      	ldr	r3, [pc, #556]	; (800a268 <tcp_receive+0x258>)
 800a03a:	f240 427c 	movw	r2, #1148	; 0x47c
 800a03e:	498d      	ldr	r1, [pc, #564]	; (800a274 <tcp_receive+0x264>)
 800a040:	488b      	ldr	r0, [pc, #556]	; (800a270 <tcp_receive+0x260>)
 800a042:	f005 fcd7 	bl	800f9f4 <iprintf>

  if (flags & TCP_ACK) {
 800a046:	4b8c      	ldr	r3, [pc, #560]	; (800a278 <tcp_receive+0x268>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	f003 0310 	and.w	r3, r3, #16
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8264 	beq.w	800a51c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a060:	4413      	add	r3, r2
 800a062:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a068:	4b84      	ldr	r3, [pc, #528]	; (800a27c <tcp_receive+0x26c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	db1b      	blt.n	800a0aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a076:	4b81      	ldr	r3, [pc, #516]	; (800a27c <tcp_receive+0x26c>)
 800a078:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d106      	bne.n	800a08c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a082:	4b7f      	ldr	r3, [pc, #508]	; (800a280 <tcp_receive+0x270>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db0e      	blt.n	800a0aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a090:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <tcp_receive+0x270>)
 800a092:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a094:	429a      	cmp	r2, r3
 800a096:	d125      	bne.n	800a0e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a098:	4b7a      	ldr	r3, [pc, #488]	; (800a284 <tcp_receive+0x274>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	89db      	ldrh	r3, [r3, #14]
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d91c      	bls.n	800a0e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a0aa:	4b76      	ldr	r3, [pc, #472]	; (800a284 <tcp_receive+0x274>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	89db      	ldrh	r3, [r3, #14]
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d205      	bcs.n	800a0d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a0d4:	4b69      	ldr	r3, [pc, #420]	; (800a27c <tcp_receive+0x26c>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a0dc:	4b68      	ldr	r3, [pc, #416]	; (800a280 <tcp_receive+0x270>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a0e4:	4b66      	ldr	r3, [pc, #408]	; (800a280 <tcp_receive+0x270>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dc58      	bgt.n	800a1a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a0f2:	4b65      	ldr	r3, [pc, #404]	; (800a288 <tcp_receive+0x278>)
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d14b      	bne.n	800a192 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a104:	4413      	add	r3, r2
 800a106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a108:	429a      	cmp	r2, r3
 800a10a:	d142      	bne.n	800a192 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a112:	2b00      	cmp	r3, #0
 800a114:	db3d      	blt.n	800a192 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a11a:	4b59      	ldr	r3, [pc, #356]	; (800a280 <tcp_receive+0x270>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d137      	bne.n	800a192 <tcp_receive+0x182>
              found_dupack = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	d007      	beq.n	800a140 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a136:	3301      	adds	r3, #1
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a146:	2b03      	cmp	r3, #3
 800a148:	d91b      	bls.n	800a182 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a154:	4413      	add	r3, r2
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a15e:	429a      	cmp	r2, r3
 800a160:	d30a      	bcc.n	800a178 <tcp_receive+0x168>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a16c:	4413      	add	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a176:	e004      	b.n	800a182 <tcp_receive+0x172>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d902      	bls.n	800a192 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 feeb 	bl	800bf68 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 8161 	bne.w	800a45c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1a2:	e15b      	b.n	800a45c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a1a4:	4b36      	ldr	r3, [pc, #216]	; (800a280 <tcp_receive+0x270>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f2c0 814e 	blt.w	800a452 <tcp_receive+0x442>
 800a1b6:	4b32      	ldr	r3, [pc, #200]	; (800a280 <tcp_receive+0x270>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f300 8146 	bgt.w	800a452 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8b5b      	ldrh	r3, [r3, #26]
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d010      	beq.n	800a1f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	8b5b      	ldrh	r3, [r3, #26]
 800a1d6:	f023 0304 	bic.w	r3, r3, #4
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a202:	10db      	asrs	r3, r3, #3
 800a204:	b21b      	sxth	r3, r3
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4413      	add	r3, r2
 800a212:	b29b      	uxth	r3, r3
 800a214:	b21a      	sxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a21c:	4b18      	ldr	r3, [pc, #96]	; (800a280 <tcp_receive+0x270>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a226:	b29b      	uxth	r3, r3
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a234:	4b12      	ldr	r3, [pc, #72]	; (800a280 <tcp_receive+0x270>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	7d1b      	ldrb	r3, [r3, #20]
 800a240:	2b03      	cmp	r3, #3
 800a242:	f240 8097 	bls.w	800a374 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a252:	429a      	cmp	r2, r3
 800a254:	d245      	bcs.n	800a2e2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	8b5b      	ldrh	r3, [r3, #26]
 800a25a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d014      	beq.n	800a28c <tcp_receive+0x27c>
 800a262:	2301      	movs	r3, #1
 800a264:	e013      	b.n	800a28e <tcp_receive+0x27e>
 800a266:	bf00      	nop
 800a268:	08012064 	.word	0x08012064
 800a26c:	08012394 	.word	0x08012394
 800a270:	080120b0 	.word	0x080120b0
 800a274:	080123b0 	.word	0x080123b0
 800a278:	20005d2c 	.word	0x20005d2c
 800a27c:	20005d20 	.word	0x20005d20
 800a280:	20005d24 	.word	0x20005d24
 800a284:	20005d10 	.word	0x20005d10
 800a288:	20005d2a 	.word	0x20005d2a
 800a28c:	2302      	movs	r3, #2
 800a28e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a29c:	fb12 f303 	smulbb	r3, r2, r3
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	bf28      	it	cs
 800a2a8:	4613      	movcs	r3, r2
 800a2aa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2b4:	4413      	add	r3, r2
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d309      	bcc.n	800a2d6 <tcp_receive+0x2c6>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a2c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2ca:	4413      	add	r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2d4:	e04e      	b.n	800a374 <tcp_receive+0x364>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a2e0:	e048      	b.n	800a374 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2ea:	4413      	add	r3, r2
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d309      	bcc.n	800a30c <tcp_receive+0x2fc>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a2fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a300:	4413      	add	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a30a:	e004      	b.n	800a316 <tcp_receive+0x306>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a312:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a322:	429a      	cmp	r2, r3
 800a324:	d326      	bcc.n	800a374 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	b29a      	uxth	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a346:	4413      	add	r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a350:	429a      	cmp	r2, r3
 800a352:	d30a      	bcc.n	800a36a <tcp_receive+0x35a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a35e:	4413      	add	r3, r2
 800a360:	b29a      	uxth	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a368:	e004      	b.n	800a374 <tcp_receive+0x364>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a370:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37c:	4a98      	ldr	r2, [pc, #608]	; (800a5e0 <tcp_receive+0x5d0>)
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff fdca 	bl	8009f18 <tcp_free_acked_segments>
 800a384:	4602      	mov	r2, r0
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a392:	4a94      	ldr	r2, [pc, #592]	; (800a5e4 <tcp_receive+0x5d4>)
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff fdbf 	bl	8009f18 <tcp_free_acked_segments>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ae:	861a      	strh	r2, [r3, #48]	; 0x30
 800a3b0:	e002      	b.n	800a3b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a3d4:	4b84      	ldr	r3, [pc, #528]	; (800a5e8 <tcp_receive+0x5d8>)
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	4413      	add	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	8b5b      	ldrh	r3, [r3, #26]
 800a3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d035      	beq.n	800a45a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d118      	bne.n	800a428 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00c      	beq.n	800a418 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fb f9df 	bl	80057ce <lwip_htonl>
 800a410:	4603      	mov	r3, r0
 800a412:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc20      	bgt.n	800a45a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	8b5b      	ldrh	r3, [r3, #26]
 800a41c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a420:	b29a      	uxth	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a426:	e018      	b.n	800a45a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	f7fb f9ca 	bl	80057ce <lwip_htonl>
 800a43a:	4603      	mov	r3, r0
 800a43c:	1ae3      	subs	r3, r4, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dc0b      	bgt.n	800a45a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	8b5b      	ldrh	r3, [r3, #26]
 800a446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a450:	e003      	b.n	800a45a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 ff76 	bl	800c344 <tcp_send_empty_ack>
 800a458:	e000      	b.n	800a45c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a45a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a460:	2b00      	cmp	r3, #0
 800a462:	d05b      	beq.n	800a51c <tcp_receive+0x50c>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a468:	4b60      	ldr	r3, [pc, #384]	; (800a5ec <tcp_receive+0x5dc>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	da54      	bge.n	800a51c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a472:	4b5f      	ldr	r3, [pc, #380]	; (800a5f0 <tcp_receive+0x5e0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	b29a      	uxth	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	b29b      	uxth	r3, r3
 800a482:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a486:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a490:	10db      	asrs	r3, r3, #3
 800a492:	b21b      	sxth	r3, r3
 800a494:	b29b      	uxth	r3, r3
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	b21a      	sxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a4b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	da05      	bge.n	800a4c8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a4bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4c0:	425b      	negs	r3, r3
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a4c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a4d2:	109b      	asrs	r3, r3, #2
 800a4d4:	b21b      	sxth	r3, r3
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4ec:	4413      	add	r3, r2
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	b21a      	sxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4fc:	10db      	asrs	r3, r3, #3
 800a4fe:	b21b      	sxth	r3, r3
 800a500:	b29a      	uxth	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	b21a      	sxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a51c:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <tcp_receive+0x5e4>)
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 84e2 	beq.w	800aeea <tcp_receive+0xeda>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	7d1b      	ldrb	r3, [r3, #20]
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	f200 84dd 	bhi.w	800aeea <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a534:	4b30      	ldr	r3, [pc, #192]	; (800a5f8 <tcp_receive+0x5e8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f2c0 808f 	blt.w	800a660 <tcp_receive+0x650>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a546:	4b2b      	ldr	r3, [pc, #172]	; (800a5f4 <tcp_receive+0x5e4>)
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	4619      	mov	r1, r3
 800a54c:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <tcp_receive+0x5e8>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	440b      	add	r3, r1
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	3301      	adds	r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	f300 8082 	bgt.w	800a660 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a55c:	4b27      	ldr	r3, [pc, #156]	; (800a5fc <tcp_receive+0x5ec>)
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a566:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <tcp_receive+0x5e8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a56e:	4b23      	ldr	r3, [pc, #140]	; (800a5fc <tcp_receive+0x5ec>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <tcp_receive+0x574>
 800a576:	4b22      	ldr	r3, [pc, #136]	; (800a600 <tcp_receive+0x5f0>)
 800a578:	f240 5294 	movw	r2, #1428	; 0x594
 800a57c:	4921      	ldr	r1, [pc, #132]	; (800a604 <tcp_receive+0x5f4>)
 800a57e:	4822      	ldr	r0, [pc, #136]	; (800a608 <tcp_receive+0x5f8>)
 800a580:	f005 fa38 	bl	800f9f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d906      	bls.n	800a59c <tcp_receive+0x58c>
 800a58e:	4b1c      	ldr	r3, [pc, #112]	; (800a600 <tcp_receive+0x5f0>)
 800a590:	f240 5295 	movw	r2, #1429	; 0x595
 800a594:	491d      	ldr	r1, [pc, #116]	; (800a60c <tcp_receive+0x5fc>)
 800a596:	481c      	ldr	r0, [pc, #112]	; (800a608 <tcp_receive+0x5f8>)
 800a598:	f005 fa2c 	bl	800f9f4 <iprintf>
      off = (u16_t)off32;
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5a2:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <tcp_receive+0x5ec>)
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	891b      	ldrh	r3, [r3, #8]
 800a5a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d906      	bls.n	800a5be <tcp_receive+0x5ae>
 800a5b0:	4b13      	ldr	r3, [pc, #76]	; (800a600 <tcp_receive+0x5f0>)
 800a5b2:	f240 5297 	movw	r2, #1431	; 0x597
 800a5b6:	4916      	ldr	r1, [pc, #88]	; (800a610 <tcp_receive+0x600>)
 800a5b8:	4813      	ldr	r0, [pc, #76]	; (800a608 <tcp_receive+0x5f8>)
 800a5ba:	f005 fa1b 	bl	800f9f4 <iprintf>
      inseg.len -= off;
 800a5be:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <tcp_receive+0x5ec>)
 800a5c0:	891a      	ldrh	r2, [r3, #8]
 800a5c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <tcp_receive+0x5ec>)
 800a5cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <tcp_receive+0x5ec>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	891a      	ldrh	r2, [r3, #8]
 800a5d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a5dc:	e02a      	b.n	800a634 <tcp_receive+0x624>
 800a5de:	bf00      	nop
 800a5e0:	080123cc 	.word	0x080123cc
 800a5e4:	080123d4 	.word	0x080123d4
 800a5e8:	20005d28 	.word	0x20005d28
 800a5ec:	20005d24 	.word	0x20005d24
 800a5f0:	20005ce8 	.word	0x20005ce8
 800a5f4:	20005d2a 	.word	0x20005d2a
 800a5f8:	20005d20 	.word	0x20005d20
 800a5fc:	20005d00 	.word	0x20005d00
 800a600:	08012064 	.word	0x08012064
 800a604:	080123dc 	.word	0x080123dc
 800a608:	080120b0 	.word	0x080120b0
 800a60c:	080123ec 	.word	0x080123ec
 800a610:	080123fc 	.word	0x080123fc
        off -= p->len;
 800a614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a616:	895b      	ldrh	r3, [r3, #10]
 800a618:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a624:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a626:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a62a:	2200      	movs	r2, #0
 800a62c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a636:	895b      	ldrh	r3, [r3, #10]
 800a638:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d8e9      	bhi.n	800a614 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a640:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a644:	4619      	mov	r1, r3
 800a646:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a648:	f7fc fada 	bl	8006c00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	4a91      	ldr	r2, [pc, #580]	; (800a898 <tcp_receive+0x888>)
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	4b91      	ldr	r3, [pc, #580]	; (800a89c <tcp_receive+0x88c>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	4a8f      	ldr	r2, [pc, #572]	; (800a898 <tcp_receive+0x888>)
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a65e:	e00d      	b.n	800a67c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a660:	4b8d      	ldr	r3, [pc, #564]	; (800a898 <tcp_receive+0x888>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da06      	bge.n	800a67c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	8b5b      	ldrh	r3, [r3, #26]
 800a672:	f043 0302 	orr.w	r3, r3, #2
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a67c:	4b86      	ldr	r3, [pc, #536]	; (800a898 <tcp_receive+0x888>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	f2c0 842a 	blt.w	800aee0 <tcp_receive+0xed0>
 800a68c:	4b82      	ldr	r3, [pc, #520]	; (800a898 <tcp_receive+0x888>)
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a698:	440b      	add	r3, r1
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	3301      	adds	r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f300 841e 	bgt.w	800aee0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6a8:	4b7b      	ldr	r3, [pc, #492]	; (800a898 <tcp_receive+0x888>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	f040 829a 	bne.w	800abe6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a6b2:	4b7a      	ldr	r3, [pc, #488]	; (800a89c <tcp_receive+0x88c>)
 800a6b4:	891c      	ldrh	r4, [r3, #8]
 800a6b6:	4b79      	ldr	r3, [pc, #484]	; (800a89c <tcp_receive+0x88c>)
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	899b      	ldrh	r3, [r3, #12]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fb f870 	bl	80057a4 <lwip_htons>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <tcp_receive+0x6c4>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <tcp_receive+0x6c6>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4423      	add	r3, r4
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	4b71      	ldr	r3, [pc, #452]	; (800a8a0 <tcp_receive+0x890>)
 800a6dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6e2:	4b6f      	ldr	r3, [pc, #444]	; (800a8a0 <tcp_receive+0x890>)
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d275      	bcs.n	800a7d6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6ea:	4b6c      	ldr	r3, [pc, #432]	; (800a89c <tcp_receive+0x88c>)
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	899b      	ldrh	r3, [r3, #12]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fb f856 	bl	80057a4 <lwip_htons>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01f      	beq.n	800a744 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a704:	4b65      	ldr	r3, [pc, #404]	; (800a89c <tcp_receive+0x88c>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	899b      	ldrh	r3, [r3, #12]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	b21b      	sxth	r3, r3
 800a70e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a712:	b21c      	sxth	r4, r3
 800a714:	4b61      	ldr	r3, [pc, #388]	; (800a89c <tcp_receive+0x88c>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	899b      	ldrh	r3, [r3, #12]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fb f841 	bl	80057a4 <lwip_htons>
 800a722:	4603      	mov	r3, r0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	b29b      	uxth	r3, r3
 800a728:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb f838 	bl	80057a4 <lwip_htons>
 800a734:	4603      	mov	r3, r0
 800a736:	b21b      	sxth	r3, r3
 800a738:	4323      	orrs	r3, r4
 800a73a:	b21a      	sxth	r2, r3
 800a73c:	4b57      	ldr	r3, [pc, #348]	; (800a89c <tcp_receive+0x88c>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	b292      	uxth	r2, r2
 800a742:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a748:	4b54      	ldr	r3, [pc, #336]	; (800a89c <tcp_receive+0x88c>)
 800a74a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a74c:	4b53      	ldr	r3, [pc, #332]	; (800a89c <tcp_receive+0x88c>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	899b      	ldrh	r3, [r3, #12]
 800a752:	b29b      	uxth	r3, r3
 800a754:	4618      	mov	r0, r3
 800a756:	f7fb f825 	bl	80057a4 <lwip_htons>
 800a75a:	4603      	mov	r3, r0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <tcp_receive+0x762>
            inseg.len -= 1;
 800a766:	4b4d      	ldr	r3, [pc, #308]	; (800a89c <tcp_receive+0x88c>)
 800a768:	891b      	ldrh	r3, [r3, #8]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	4b4b      	ldr	r3, [pc, #300]	; (800a89c <tcp_receive+0x88c>)
 800a770:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a772:	4b4a      	ldr	r3, [pc, #296]	; (800a89c <tcp_receive+0x88c>)
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	4a49      	ldr	r2, [pc, #292]	; (800a89c <tcp_receive+0x88c>)
 800a778:	8912      	ldrh	r2, [r2, #8]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fc f93f 	bl	8006a00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a782:	4b46      	ldr	r3, [pc, #280]	; (800a89c <tcp_receive+0x88c>)
 800a784:	891c      	ldrh	r4, [r3, #8]
 800a786:	4b45      	ldr	r3, [pc, #276]	; (800a89c <tcp_receive+0x88c>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	899b      	ldrh	r3, [r3, #12]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fb f808 	bl	80057a4 <lwip_htons>
 800a794:	4603      	mov	r3, r0
 800a796:	b2db      	uxtb	r3, r3
 800a798:	f003 0303 	and.w	r3, r3, #3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <tcp_receive+0x794>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e000      	b.n	800a7a6 <tcp_receive+0x796>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4423      	add	r3, r4
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	4b3d      	ldr	r3, [pc, #244]	; (800a8a0 <tcp_receive+0x890>)
 800a7ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a7ae:	4b3c      	ldr	r3, [pc, #240]	; (800a8a0 <tcp_receive+0x890>)
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	4b38      	ldr	r3, [pc, #224]	; (800a898 <tcp_receive+0x888>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	441a      	add	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7c2:	440b      	add	r3, r1
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d006      	beq.n	800a7d6 <tcp_receive+0x7c6>
 800a7c8:	4b36      	ldr	r3, [pc, #216]	; (800a8a4 <tcp_receive+0x894>)
 800a7ca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a7ce:	4936      	ldr	r1, [pc, #216]	; (800a8a8 <tcp_receive+0x898>)
 800a7d0:	4836      	ldr	r0, [pc, #216]	; (800a8ac <tcp_receive+0x89c>)
 800a7d2:	f005 f90f 	bl	800f9f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 80e7 	beq.w	800a9ae <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7e0:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <tcp_receive+0x88c>)
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fa ffdb 	bl	80057a4 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d010      	beq.n	800a81c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a7fa:	e00a      	b.n	800a812 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a800:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7fd fd92 	bl	8008336 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <tcp_receive+0x7ec>
 800a81a:	e0c8      	b.n	800a9ae <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a822:	e052      	b.n	800a8ca <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	899b      	ldrh	r3, [r3, #12]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fa ffb9 	bl	80057a4 <lwip_htons>
 800a832:	4603      	mov	r3, r0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d03d      	beq.n	800a8ba <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a83e:	4b17      	ldr	r3, [pc, #92]	; (800a89c <tcp_receive+0x88c>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa ffac 	bl	80057a4 <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a854:	2b00      	cmp	r3, #0
 800a856:	d130      	bne.n	800a8ba <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a858:	4b10      	ldr	r3, [pc, #64]	; (800a89c <tcp_receive+0x88c>)
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	899b      	ldrh	r3, [r3, #12]
 800a85e:	b29c      	uxth	r4, r3
 800a860:	2001      	movs	r0, #1
 800a862:	f7fa ff9f 	bl	80057a4 <lwip_htons>
 800a866:	4603      	mov	r3, r0
 800a868:	461a      	mov	r2, r3
 800a86a:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <tcp_receive+0x88c>)
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	4322      	orrs	r2, r4
 800a870:	b292      	uxth	r2, r2
 800a872:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <tcp_receive+0x88c>)
 800a876:	891c      	ldrh	r4, [r3, #8]
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <tcp_receive+0x88c>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	899b      	ldrh	r3, [r3, #12]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4618      	mov	r0, r3
 800a882:	f7fa ff8f 	bl	80057a4 <lwip_htons>
 800a886:	4603      	mov	r3, r0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00e      	beq.n	800a8b0 <tcp_receive+0x8a0>
 800a892:	2301      	movs	r3, #1
 800a894:	e00d      	b.n	800a8b2 <tcp_receive+0x8a2>
 800a896:	bf00      	nop
 800a898:	20005d20 	.word	0x20005d20
 800a89c:	20005d00 	.word	0x20005d00
 800a8a0:	20005d2a 	.word	0x20005d2a
 800a8a4:	08012064 	.word	0x08012064
 800a8a8:	0801240c 	.word	0x0801240c
 800a8ac:	080120b0 	.word	0x080120b0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4423      	add	r3, r4
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	4b98      	ldr	r3, [pc, #608]	; (800ab18 <tcp_receive+0xb08>)
 800a8b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a8c4:	6938      	ldr	r0, [r7, #16]
 800a8c6:	f7fd fd36 	bl	8008336 <tcp_seg_free>
            while (next &&
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00e      	beq.n	800a8ee <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a8d0:	4b91      	ldr	r3, [pc, #580]	; (800ab18 <tcp_receive+0xb08>)
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4b91      	ldr	r3, [pc, #580]	; (800ab1c <tcp_receive+0xb0c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	441a      	add	r2, r3
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8e4:	8909      	ldrh	r1, [r1, #8]
 800a8e6:	440b      	add	r3, r1
 800a8e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	da9a      	bge.n	800a824 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d059      	beq.n	800a9a8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a8f4:	4b88      	ldr	r3, [pc, #544]	; (800ab18 <tcp_receive+0xb08>)
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4b88      	ldr	r3, [pc, #544]	; (800ab1c <tcp_receive+0xb0c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	441a      	add	r2, r3
 800a900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dd4d      	ble.n	800a9a8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	b29a      	uxth	r2, r3
 800a914:	4b81      	ldr	r3, [pc, #516]	; (800ab1c <tcp_receive+0xb0c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	b29b      	uxth	r3, r3
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	4b80      	ldr	r3, [pc, #512]	; (800ab20 <tcp_receive+0xb10>)
 800a920:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a922:	4b7f      	ldr	r3, [pc, #508]	; (800ab20 <tcp_receive+0xb10>)
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	899b      	ldrh	r3, [r3, #12]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fa ff3a 	bl	80057a4 <lwip_htons>
 800a930:	4603      	mov	r3, r0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <tcp_receive+0x938>
                inseg.len -= 1;
 800a93c:	4b78      	ldr	r3, [pc, #480]	; (800ab20 <tcp_receive+0xb10>)
 800a93e:	891b      	ldrh	r3, [r3, #8]
 800a940:	3b01      	subs	r3, #1
 800a942:	b29a      	uxth	r2, r3
 800a944:	4b76      	ldr	r3, [pc, #472]	; (800ab20 <tcp_receive+0xb10>)
 800a946:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a948:	4b75      	ldr	r3, [pc, #468]	; (800ab20 <tcp_receive+0xb10>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a74      	ldr	r2, [pc, #464]	; (800ab20 <tcp_receive+0xb10>)
 800a94e:	8912      	ldrh	r2, [r2, #8]
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f7fc f854 	bl	8006a00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a958:	4b71      	ldr	r3, [pc, #452]	; (800ab20 <tcp_receive+0xb10>)
 800a95a:	891c      	ldrh	r4, [r3, #8]
 800a95c:	4b70      	ldr	r3, [pc, #448]	; (800ab20 <tcp_receive+0xb10>)
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	899b      	ldrh	r3, [r3, #12]
 800a962:	b29b      	uxth	r3, r3
 800a964:	4618      	mov	r0, r3
 800a966:	f7fa ff1d 	bl	80057a4 <lwip_htons>
 800a96a:	4603      	mov	r3, r0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <tcp_receive+0x96a>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <tcp_receive+0x96c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	4423      	add	r3, r4
 800a97e:	b29a      	uxth	r2, r3
 800a980:	4b65      	ldr	r3, [pc, #404]	; (800ab18 <tcp_receive+0xb08>)
 800a982:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a984:	4b64      	ldr	r3, [pc, #400]	; (800ab18 <tcp_receive+0xb08>)
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	461a      	mov	r2, r3
 800a98a:	4b64      	ldr	r3, [pc, #400]	; (800ab1c <tcp_receive+0xb0c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	441a      	add	r2, r3
 800a990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	429a      	cmp	r2, r3
 800a998:	d006      	beq.n	800a9a8 <tcp_receive+0x998>
 800a99a:	4b62      	ldr	r3, [pc, #392]	; (800ab24 <tcp_receive+0xb14>)
 800a99c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a9a0:	4961      	ldr	r1, [pc, #388]	; (800ab28 <tcp_receive+0xb18>)
 800a9a2:	4862      	ldr	r0, [pc, #392]	; (800ab2c <tcp_receive+0xb1c>)
 800a9a4:	f005 f826 	bl	800f9f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a9ae:	4b5a      	ldr	r3, [pc, #360]	; (800ab18 <tcp_receive+0xb08>)
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <tcp_receive+0xb0c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	441a      	add	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9c2:	4b55      	ldr	r3, [pc, #340]	; (800ab18 <tcp_receive+0xb08>)
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d206      	bcs.n	800a9d8 <tcp_receive+0x9c8>
 800a9ca:	4b56      	ldr	r3, [pc, #344]	; (800ab24 <tcp_receive+0xb14>)
 800a9cc:	f240 6207 	movw	r2, #1543	; 0x607
 800a9d0:	4957      	ldr	r1, [pc, #348]	; (800ab30 <tcp_receive+0xb20>)
 800a9d2:	4856      	ldr	r0, [pc, #344]	; (800ab2c <tcp_receive+0xb1c>)
 800a9d4:	f005 f80e 	bl	800f9f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9dc:	4b4e      	ldr	r3, [pc, #312]	; (800ab18 <tcp_receive+0xb08>)
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7fc ffc5 	bl	8007978 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a9ee:	4b4c      	ldr	r3, [pc, #304]	; (800ab20 <tcp_receive+0xb10>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	891b      	ldrh	r3, [r3, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d006      	beq.n	800aa06 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a9f8:	4b49      	ldr	r3, [pc, #292]	; (800ab20 <tcp_receive+0xb10>)
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	4a4d      	ldr	r2, [pc, #308]	; (800ab34 <tcp_receive+0xb24>)
 800a9fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aa00:	4b47      	ldr	r3, [pc, #284]	; (800ab20 <tcp_receive+0xb10>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa06:	4b46      	ldr	r3, [pc, #280]	; (800ab20 <tcp_receive+0xb10>)
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	899b      	ldrh	r3, [r3, #12]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fa fec8 	bl	80057a4 <lwip_htons>
 800aa14:	4603      	mov	r3, r0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80b8 	beq.w	800ab92 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aa22:	4b45      	ldr	r3, [pc, #276]	; (800ab38 <tcp_receive+0xb28>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f043 0320 	orr.w	r3, r3, #32
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <tcp_receive+0xb28>)
 800aa2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aa30:	e0af      	b.n	800ab92 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	4a36      	ldr	r2, [pc, #216]	; (800ab1c <tcp_receive+0xb0c>)
 800aa42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	891b      	ldrh	r3, [r3, #8]
 800aa48:	461c      	mov	r4, r3
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	899b      	ldrh	r3, [r3, #12]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fa fea6 	bl	80057a4 <lwip_htons>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <tcp_receive+0xa58>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <tcp_receive+0xa5a>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	191a      	adds	r2, r3, r4
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	441a      	add	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa7a:	461c      	mov	r4, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	891b      	ldrh	r3, [r3, #8]
 800aa80:	461d      	mov	r5, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	899b      	ldrh	r3, [r3, #12]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fa fe8a 	bl	80057a4 <lwip_htons>
 800aa90:	4603      	mov	r3, r0
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 0303 	and.w	r3, r3, #3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <tcp_receive+0xa90>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e000      	b.n	800aaa2 <tcp_receive+0xa92>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	442b      	add	r3, r5
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	d206      	bcs.n	800aab6 <tcp_receive+0xaa6>
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <tcp_receive+0xb14>)
 800aaaa:	f240 622b 	movw	r2, #1579	; 0x62b
 800aaae:	4923      	ldr	r1, [pc, #140]	; (800ab3c <tcp_receive+0xb2c>)
 800aab0:	481e      	ldr	r0, [pc, #120]	; (800ab2c <tcp_receive+0xb1c>)
 800aab2:	f004 ff9f 	bl	800f9f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	891b      	ldrh	r3, [r3, #8]
 800aaba:	461c      	mov	r4, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	899b      	ldrh	r3, [r3, #12]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fa fe6d 	bl	80057a4 <lwip_htons>
 800aaca:	4603      	mov	r3, r0
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0303 	and.w	r3, r3, #3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <tcp_receive+0xaca>
 800aad6:	2301      	movs	r3, #1
 800aad8:	e000      	b.n	800aadc <tcp_receive+0xacc>
 800aada:	2300      	movs	r3, #0
 800aadc:	1919      	adds	r1, r3, r4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aae2:	b28b      	uxth	r3, r1
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7fc ff43 	bl	8007978 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	891b      	ldrh	r3, [r3, #8]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d028      	beq.n	800ab4e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <tcp_receive+0xb24>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01d      	beq.n	800ab40 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ab04:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <tcp_receive+0xb24>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7fc f9be 	bl	8006e90 <pbuf_cat>
 800ab14:	e018      	b.n	800ab48 <tcp_receive+0xb38>
 800ab16:	bf00      	nop
 800ab18:	20005d2a 	.word	0x20005d2a
 800ab1c:	20005d20 	.word	0x20005d20
 800ab20:	20005d00 	.word	0x20005d00
 800ab24:	08012064 	.word	0x08012064
 800ab28:	08012444 	.word	0x08012444
 800ab2c:	080120b0 	.word	0x080120b0
 800ab30:	08012480 	.word	0x08012480
 800ab34:	20005d30 	.word	0x20005d30
 800ab38:	20005d2d 	.word	0x20005d2d
 800ab3c:	080124a0 	.word	0x080124a0
            } else {
              recv_data = cseg->p;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	4a70      	ldr	r2, [pc, #448]	; (800ad08 <tcp_receive+0xcf8>)
 800ab46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	899b      	ldrh	r3, [r3, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fa fe24 	bl	80057a4 <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00d      	beq.n	800ab84 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ab68:	4b68      	ldr	r3, [pc, #416]	; (800ad0c <tcp_receive+0xcfc>)
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f043 0320 	orr.w	r3, r3, #32
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	4b66      	ldr	r3, [pc, #408]	; (800ad0c <tcp_receive+0xcfc>)
 800ab74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7d1b      	ldrb	r3, [r3, #20]
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d102      	bne.n	800ab84 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2207      	movs	r2, #7
 800ab82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ab8c:	68b8      	ldr	r0, [r7, #8]
 800ab8e:	f7fd fbd2 	bl	8008336 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d008      	beq.n	800abac <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aba6:	429a      	cmp	r2, r3
 800aba8:	f43f af43 	beq.w	800aa32 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8b5b      	ldrh	r3, [r3, #26]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00e      	beq.n	800abd6 <tcp_receive+0xbc6>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	8b5b      	ldrh	r3, [r3, #26]
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	835a      	strh	r2, [r3, #26]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	8b5b      	ldrh	r3, [r3, #26]
 800abca:	f043 0302 	orr.w	r3, r3, #2
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800abd4:	e188      	b.n	800aee8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	8b5b      	ldrh	r3, [r3, #26]
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	b29a      	uxth	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800abe4:	e180      	b.n	800aee8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abea:	2b00      	cmp	r3, #0
 800abec:	d106      	bne.n	800abfc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800abee:	4848      	ldr	r0, [pc, #288]	; (800ad10 <tcp_receive+0xd00>)
 800abf0:	f7fd fbba 	bl	8008368 <tcp_seg_copy>
 800abf4:	4602      	mov	r2, r0
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	675a      	str	r2, [r3, #116]	; 0x74
 800abfa:	e16d      	b.n	800aed8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac04:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac06:	e157      	b.n	800aeb8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	4b41      	ldr	r3, [pc, #260]	; (800ad14 <tcp_receive+0xd04>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d11d      	bne.n	800ac52 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ac16:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <tcp_receive+0xd00>)
 800ac18:	891a      	ldrh	r2, [r3, #8]
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	891b      	ldrh	r3, [r3, #8]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	f240 814f 	bls.w	800aec2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac24:	483a      	ldr	r0, [pc, #232]	; (800ad10 <tcp_receive+0xd00>)
 800ac26:	f7fd fb9f 	bl	8008368 <tcp_seg_copy>
 800ac2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 8149 	beq.w	800aec6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e002      	b.n	800ac48 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ac48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac4a:	6978      	ldr	r0, [r7, #20]
 800ac4c:	f7ff f8dc 	bl	8009e08 <tcp_oos_insert_segment>
                }
                break;
 800ac50:	e139      	b.n	800aec6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ac52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d117      	bne.n	800ac88 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ac58:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <tcp_receive+0xd04>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	da57      	bge.n	800ad18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ac68:	4829      	ldr	r0, [pc, #164]	; (800ad10 <tcp_receive+0xd00>)
 800ac6a:	f7fd fb7d 	bl	8008368 <tcp_seg_copy>
 800ac6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 8129 	beq.w	800aeca <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ac7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac80:	69b8      	ldr	r0, [r7, #24]
 800ac82:	f7ff f8c1 	bl	8009e08 <tcp_oos_insert_segment>
                  }
                  break;
 800ac86:	e120      	b.n	800aeca <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ac88:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <tcp_receive+0xd04>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	3b01      	subs	r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	db3e      	blt.n	800ad18 <tcp_receive+0xd08>
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <tcp_receive+0xd04>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	3301      	adds	r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dc35      	bgt.n	800ad18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800acac:	4818      	ldr	r0, [pc, #96]	; (800ad10 <tcp_receive+0xd00>)
 800acae:	f7fd fb5b 	bl	8008368 <tcp_seg_copy>
 800acb2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8109 	beq.w	800aece <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acc4:	8912      	ldrh	r2, [r2, #8]
 800acc6:	441a      	add	r2, r3
 800acc8:	4b12      	ldr	r3, [pc, #72]	; (800ad14 <tcp_receive+0xd04>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dd12      	ble.n	800acf8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800acd2:	4b10      	ldr	r3, [pc, #64]	; (800ad14 <tcp_receive+0xd04>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ace8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acee:	891b      	ldrh	r3, [r3, #8]
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7fb fe84 	bl	8006a00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800acf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800acfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad00:	69f8      	ldr	r0, [r7, #28]
 800ad02:	f7ff f881 	bl	8009e08 <tcp_oos_insert_segment>
                  }
                  break;
 800ad06:	e0e2      	b.n	800aece <tcp_receive+0xebe>
 800ad08:	20005d30 	.word	0x20005d30
 800ad0c:	20005d2d 	.word	0x20005d2d
 800ad10:	20005d00 	.word	0x20005d00
 800ad14:	20005d20 	.word	0x20005d20
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 80c6 	bne.w	800aeb2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ad26:	4b80      	ldr	r3, [pc, #512]	; (800af28 <tcp_receive+0xf18>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f340 80bd 	ble.w	800aeb2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	899b      	ldrh	r3, [r3, #12]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fa fd2f 	bl	80057a4 <lwip_htons>
 800ad46:	4603      	mov	r3, r0
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f040 80bf 	bne.w	800aed2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ad54:	4875      	ldr	r0, [pc, #468]	; (800af2c <tcp_receive+0xf1c>)
 800ad56:	f7fd fb07 	bl	8008368 <tcp_seg_copy>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80b6 	beq.w	800aed6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad72:	8912      	ldrh	r2, [r2, #8]
 800ad74:	441a      	add	r2, r3
 800ad76:	4b6c      	ldr	r3, [pc, #432]	; (800af28 <tcp_receive+0xf18>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd12      	ble.n	800ada6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ad80:	4b69      	ldr	r3, [pc, #420]	; (800af28 <tcp_receive+0xf18>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	891b      	ldrh	r3, [r3, #8]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fb fe2d 	bl	8006a00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ada6:	4b62      	ldr	r3, [pc, #392]	; (800af30 <tcp_receive+0xf20>)
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	4b5e      	ldr	r3, [pc, #376]	; (800af28 <tcp_receive+0xf18>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	441a      	add	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adba:	440b      	add	r3, r1
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f340 8089 	ble.w	800aed6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	899b      	ldrh	r3, [r3, #12]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	4618      	mov	r0, r3
 800add0:	f7fa fce8 	bl	80057a4 <lwip_htons>
 800add4:	4603      	mov	r3, r0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d022      	beq.n	800ae26 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	899b      	ldrh	r3, [r3, #12]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	b21b      	sxth	r3, r3
 800adec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800adf0:	b21c      	sxth	r4, r3
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	899b      	ldrh	r3, [r3, #12]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fa fcd1 	bl	80057a4 <lwip_htons>
 800ae02:	4603      	mov	r3, r0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fa fcc8 	bl	80057a4 <lwip_htons>
 800ae14:	4603      	mov	r3, r0
 800ae16:	b21b      	sxth	r3, r3
 800ae18:	4323      	orrs	r3, r4
 800ae1a:	b21a      	sxth	r2, r3
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	b292      	uxth	r2, r2
 800ae24:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae30:	4413      	add	r3, r2
 800ae32:	b299      	uxth	r1, r3
 800ae34:	4b3c      	ldr	r3, [pc, #240]	; (800af28 <tcp_receive+0xf18>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	1a8a      	subs	r2, r1, r2
 800ae40:	b292      	uxth	r2, r2
 800ae42:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	891b      	ldrh	r3, [r3, #8]
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f7fb fdd4 	bl	8006a00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	891c      	ldrh	r4, [r3, #8]
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	899b      	ldrh	r3, [r3, #12]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fa fc9b 	bl	80057a4 <lwip_htons>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <tcp_receive+0xe6e>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <tcp_receive+0xe70>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4423      	add	r3, r4
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	4b2a      	ldr	r3, [pc, #168]	; (800af30 <tcp_receive+0xf20>)
 800ae86:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ae88:	4b29      	ldr	r3, [pc, #164]	; (800af30 <tcp_receive+0xf20>)
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4b26      	ldr	r3, [pc, #152]	; (800af28 <tcp_receive+0xf18>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	441a      	add	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae9c:	440b      	add	r3, r1
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d019      	beq.n	800aed6 <tcp_receive+0xec6>
 800aea2:	4b24      	ldr	r3, [pc, #144]	; (800af34 <tcp_receive+0xf24>)
 800aea4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800aea8:	4923      	ldr	r1, [pc, #140]	; (800af38 <tcp_receive+0xf28>)
 800aeaa:	4824      	ldr	r0, [pc, #144]	; (800af3c <tcp_receive+0xf2c>)
 800aeac:	f004 fda2 	bl	800f9f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aeb0:	e011      	b.n	800aed6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f47f aea4 	bne.w	800ac08 <tcp_receive+0xbf8>
 800aec0:	e00a      	b.n	800aed8 <tcp_receive+0xec8>
                break;
 800aec2:	bf00      	nop
 800aec4:	e008      	b.n	800aed8 <tcp_receive+0xec8>
                break;
 800aec6:	bf00      	nop
 800aec8:	e006      	b.n	800aed8 <tcp_receive+0xec8>
                  break;
 800aeca:	bf00      	nop
 800aecc:	e004      	b.n	800aed8 <tcp_receive+0xec8>
                  break;
 800aece:	bf00      	nop
 800aed0:	e002      	b.n	800aed8 <tcp_receive+0xec8>
                  break;
 800aed2:	bf00      	nop
 800aed4:	e000      	b.n	800aed8 <tcp_receive+0xec8>
                break;
 800aed6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fa33 	bl	800c344 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800aede:	e003      	b.n	800aee8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 fa2f 	bl	800c344 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aee6:	e01a      	b.n	800af1e <tcp_receive+0xf0e>
 800aee8:	e019      	b.n	800af1e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <tcp_receive+0xf18>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	db0a      	blt.n	800af0e <tcp_receive+0xefe>
 800aef8:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <tcp_receive+0xf18>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af04:	440b      	add	r3, r1
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	3301      	adds	r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dd07      	ble.n	800af1e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8b5b      	ldrh	r3, [r3, #26]
 800af12:	f043 0302 	orr.w	r3, r3, #2
 800af16:	b29a      	uxth	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800af1c:	e7ff      	b.n	800af1e <tcp_receive+0xf0e>
 800af1e:	bf00      	nop
 800af20:	3750      	adds	r7, #80	; 0x50
 800af22:	46bd      	mov	sp, r7
 800af24:	bdb0      	pop	{r4, r5, r7, pc}
 800af26:	bf00      	nop
 800af28:	20005d20 	.word	0x20005d20
 800af2c:	20005d00 	.word	0x20005d00
 800af30:	20005d2a 	.word	0x20005d2a
 800af34:	08012064 	.word	0x08012064
 800af38:	0801240c 	.word	0x0801240c
 800af3c:	080120b0 	.word	0x080120b0

0800af40 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800af46:	4b15      	ldr	r3, [pc, #84]	; (800af9c <tcp_get_next_optbyte+0x5c>)
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	b291      	uxth	r1, r2
 800af4e:	4a13      	ldr	r2, [pc, #76]	; (800af9c <tcp_get_next_optbyte+0x5c>)
 800af50:	8011      	strh	r1, [r2, #0]
 800af52:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800af54:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <tcp_get_next_optbyte+0x60>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d004      	beq.n	800af66 <tcp_get_next_optbyte+0x26>
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <tcp_get_next_optbyte+0x64>)
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	88fa      	ldrh	r2, [r7, #6]
 800af62:	429a      	cmp	r2, r3
 800af64:	d208      	bcs.n	800af78 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800af66:	4b10      	ldr	r3, [pc, #64]	; (800afa8 <tcp_get_next_optbyte+0x68>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3314      	adds	r3, #20
 800af6c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	4413      	add	r3, r2
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	e00b      	b.n	800af90 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800af78:	88fb      	ldrh	r3, [r7, #6]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <tcp_get_next_optbyte+0x64>)
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800af86:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <tcp_get_next_optbyte+0x60>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	797b      	ldrb	r3, [r7, #5]
 800af8c:	4413      	add	r3, r2
 800af8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20005d1c 	.word	0x20005d1c
 800afa0:	20005d18 	.word	0x20005d18
 800afa4:	20005d16 	.word	0x20005d16
 800afa8:	20005d10 	.word	0x20005d10

0800afac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <tcp_parseopt+0x1c>
 800afba:	4b32      	ldr	r3, [pc, #200]	; (800b084 <tcp_parseopt+0xd8>)
 800afbc:	f240 727d 	movw	r2, #1917	; 0x77d
 800afc0:	4931      	ldr	r1, [pc, #196]	; (800b088 <tcp_parseopt+0xdc>)
 800afc2:	4832      	ldr	r0, [pc, #200]	; (800b08c <tcp_parseopt+0xe0>)
 800afc4:	f004 fd16 	bl	800f9f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800afc8:	4b31      	ldr	r3, [pc, #196]	; (800b090 <tcp_parseopt+0xe4>)
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d055      	beq.n	800b07c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800afd0:	4b30      	ldr	r3, [pc, #192]	; (800b094 <tcp_parseopt+0xe8>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	801a      	strh	r2, [r3, #0]
 800afd6:	e045      	b.n	800b064 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800afd8:	f7ff ffb2 	bl	800af40 <tcp_get_next_optbyte>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d006      	beq.n	800aff4 <tcp_parseopt+0x48>
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	dc2b      	bgt.n	800b042 <tcp_parseopt+0x96>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d041      	beq.n	800b072 <tcp_parseopt+0xc6>
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d127      	bne.n	800b042 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800aff2:	e037      	b.n	800b064 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aff4:	f7ff ffa4 	bl	800af40 <tcp_get_next_optbyte>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b04      	cmp	r3, #4
 800affc:	d13b      	bne.n	800b076 <tcp_parseopt+0xca>
 800affe:	4b25      	ldr	r3, [pc, #148]	; (800b094 <tcp_parseopt+0xe8>)
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	3301      	adds	r3, #1
 800b004:	4a22      	ldr	r2, [pc, #136]	; (800b090 <tcp_parseopt+0xe4>)
 800b006:	8812      	ldrh	r2, [r2, #0]
 800b008:	4293      	cmp	r3, r2
 800b00a:	da34      	bge.n	800b076 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b00c:	f7ff ff98 	bl	800af40 <tcp_get_next_optbyte>
 800b010:	4603      	mov	r3, r0
 800b012:	b29b      	uxth	r3, r3
 800b014:	021b      	lsls	r3, r3, #8
 800b016:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b018:	f7ff ff92 	bl	800af40 <tcp_get_next_optbyte>
 800b01c:	4603      	mov	r3, r0
 800b01e:	b29a      	uxth	r2, r3
 800b020:	89bb      	ldrh	r3, [r7, #12]
 800b022:	4313      	orrs	r3, r2
 800b024:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b026:	89bb      	ldrh	r3, [r7, #12]
 800b028:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b02c:	d804      	bhi.n	800b038 <tcp_parseopt+0x8c>
 800b02e:	89bb      	ldrh	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <tcp_parseopt+0x8c>
 800b034:	89ba      	ldrh	r2, [r7, #12]
 800b036:	e001      	b.n	800b03c <tcp_parseopt+0x90>
 800b038:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b040:	e010      	b.n	800b064 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b042:	f7ff ff7d 	bl	800af40 <tcp_get_next_optbyte>
 800b046:	4603      	mov	r3, r0
 800b048:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d914      	bls.n	800b07a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	b29a      	uxth	r2, r3
 800b054:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <tcp_parseopt+0xe8>)
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	3b02      	subs	r3, #2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	4b0c      	ldr	r3, [pc, #48]	; (800b094 <tcp_parseopt+0xe8>)
 800b062:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b064:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <tcp_parseopt+0xe8>)
 800b066:	881a      	ldrh	r2, [r3, #0]
 800b068:	4b09      	ldr	r3, [pc, #36]	; (800b090 <tcp_parseopt+0xe4>)
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d3b3      	bcc.n	800afd8 <tcp_parseopt+0x2c>
 800b070:	e004      	b.n	800b07c <tcp_parseopt+0xd0>
          return;
 800b072:	bf00      	nop
 800b074:	e002      	b.n	800b07c <tcp_parseopt+0xd0>
            return;
 800b076:	bf00      	nop
 800b078:	e000      	b.n	800b07c <tcp_parseopt+0xd0>
            return;
 800b07a:	bf00      	nop
      }
    }
  }
}
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	08012064 	.word	0x08012064
 800b088:	080124c8 	.word	0x080124c8
 800b08c:	080120b0 	.word	0x080120b0
 800b090:	20005d14 	.word	0x20005d14
 800b094:	20005d1c 	.word	0x20005d1c

0800b098 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b09c:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <tcp_trigger_input_pcb_close+0x1c>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f043 0310 	orr.w	r3, r3, #16
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	4b03      	ldr	r3, [pc, #12]	; (800b0b4 <tcp_trigger_input_pcb_close+0x1c>)
 800b0a8:	701a      	strb	r2, [r3, #0]
}
 800b0aa:	bf00      	nop
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	20005d2d 	.word	0x20005d2d

0800b0b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <tcp_route+0x28>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	7a1b      	ldrb	r3, [r3, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	7a1b      	ldrb	r3, [r3, #8]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fb fab8 	bl	800664c <netif_get_by_index>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	e003      	b.n	800b0e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f003 fa37 	bl	800e554 <ip4_route>
 800b0e6:	4603      	mov	r3, r0
  }
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b0f0:	b590      	push	{r4, r7, lr}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d105      	bne.n	800b112 <tcp_create_segment+0x22>
 800b106:	4b44      	ldr	r3, [pc, #272]	; (800b218 <tcp_create_segment+0x128>)
 800b108:	22a3      	movs	r2, #163	; 0xa3
 800b10a:	4944      	ldr	r1, [pc, #272]	; (800b21c <tcp_create_segment+0x12c>)
 800b10c:	4844      	ldr	r0, [pc, #272]	; (800b220 <tcp_create_segment+0x130>)
 800b10e:	f004 fc71 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d105      	bne.n	800b124 <tcp_create_segment+0x34>
 800b118:	4b3f      	ldr	r3, [pc, #252]	; (800b218 <tcp_create_segment+0x128>)
 800b11a:	22a4      	movs	r2, #164	; 0xa4
 800b11c:	4941      	ldr	r1, [pc, #260]	; (800b224 <tcp_create_segment+0x134>)
 800b11e:	4840      	ldr	r0, [pc, #256]	; (800b220 <tcp_create_segment+0x130>)
 800b120:	f004 fc68 	bl	800f9f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b124:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b132:	2003      	movs	r0, #3
 800b134:	f7fa ff8c 	bl	8006050 <memp_malloc>
 800b138:	6138      	str	r0, [r7, #16]
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d104      	bne.n	800b14a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b140:	68b8      	ldr	r0, [r7, #8]
 800b142:	f7fb fde3 	bl	8006d0c <pbuf_free>
    return NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	e061      	b.n	800b20e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b150:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	891a      	ldrh	r2, [r3, #8]
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	b29b      	uxth	r3, r3
 800b166:	429a      	cmp	r2, r3
 800b168:	d205      	bcs.n	800b176 <tcp_create_segment+0x86>
 800b16a:	4b2b      	ldr	r3, [pc, #172]	; (800b218 <tcp_create_segment+0x128>)
 800b16c:	22b0      	movs	r2, #176	; 0xb0
 800b16e:	492e      	ldr	r1, [pc, #184]	; (800b228 <tcp_create_segment+0x138>)
 800b170:	482b      	ldr	r0, [pc, #172]	; (800b220 <tcp_create_segment+0x130>)
 800b172:	f004 fc3f 	bl	800f9f4 <iprintf>
  seg->len = p->tot_len - optlen;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	891a      	ldrh	r2, [r3, #8]
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	b29a      	uxth	r2, r3
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b186:	2114      	movs	r1, #20
 800b188:	68b8      	ldr	r0, [r7, #8]
 800b18a:	f7fb fd29 	bl	8006be0 <pbuf_add_header>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b194:	6938      	ldr	r0, [r7, #16]
 800b196:	f7fd f8ce 	bl	8008336 <tcp_seg_free>
    return NULL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	e037      	b.n	800b20e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	8ada      	ldrh	r2, [r3, #22]
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	68dc      	ldr	r4, [r3, #12]
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f7fa faf7 	bl	80057a4 <lwip_htons>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8b1a      	ldrh	r2, [r3, #24]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	68dc      	ldr	r4, [r3, #12]
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f7fa faee 	bl	80057a4 <lwip_htons>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	68dc      	ldr	r4, [r3, #12]
 800b1d0:	6838      	ldr	r0, [r7, #0]
 800b1d2:	f7fa fafc 	bl	80057ce <lwip_htonl>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	089b      	lsrs	r3, r3, #2
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	3305      	adds	r3, #5
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	031b      	lsls	r3, r3, #12
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	68dc      	ldr	r4, [r3, #12]
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f7fa fad4 	bl	80057a4 <lwip_htons>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	749a      	strb	r2, [r3, #18]
 800b208:	2200      	movs	r2, #0
 800b20a:	74da      	strb	r2, [r3, #19]
  return seg;
 800b20c:	693b      	ldr	r3, [r7, #16]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	bd90      	pop	{r4, r7, pc}
 800b216:	bf00      	nop
 800b218:	080124e4 	.word	0x080124e4
 800b21c:	08012518 	.word	0x08012518
 800b220:	08012538 	.word	0x08012538
 800b224:	08012560 	.word	0x08012560
 800b228:	08012584 	.word	0x08012584

0800b22c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b08b      	sub	sp, #44	; 0x2c
 800b230:	af02      	add	r7, sp, #8
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <tcp_split_unsent_seg+0x2c>
 800b24a:	4b95      	ldr	r3, [pc, #596]	; (800b4a0 <tcp_split_unsent_seg+0x274>)
 800b24c:	f240 324b 	movw	r2, #843	; 0x34b
 800b250:	4994      	ldr	r1, [pc, #592]	; (800b4a4 <tcp_split_unsent_seg+0x278>)
 800b252:	4895      	ldr	r0, [pc, #596]	; (800b4a8 <tcp_split_unsent_seg+0x27c>)
 800b254:	f004 fbce 	bl	800f9f4 <iprintf>

  useg = pcb->unsent;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b264:	f04f 33ff 	mov.w	r3, #4294967295
 800b268:	e116      	b.n	800b498 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b26a:	887b      	ldrh	r3, [r7, #2]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b270:	4b8b      	ldr	r3, [pc, #556]	; (800b4a0 <tcp_split_unsent_seg+0x274>)
 800b272:	f240 3253 	movw	r2, #851	; 0x353
 800b276:	498d      	ldr	r1, [pc, #564]	; (800b4ac <tcp_split_unsent_seg+0x280>)
 800b278:	488b      	ldr	r0, [pc, #556]	; (800b4a8 <tcp_split_unsent_seg+0x27c>)
 800b27a:	f004 fbbb 	bl	800f9f4 <iprintf>
    return ERR_VAL;
 800b27e:	f06f 0305 	mvn.w	r3, #5
 800b282:	e109      	b.n	800b498 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	891b      	ldrh	r3, [r3, #8]
 800b288:	887a      	ldrh	r2, [r7, #2]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d301      	bcc.n	800b292 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	e102      	b.n	800b498 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b296:	887a      	ldrh	r2, [r7, #2]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d906      	bls.n	800b2aa <tcp_split_unsent_seg+0x7e>
 800b29c:	4b80      	ldr	r3, [pc, #512]	; (800b4a0 <tcp_split_unsent_seg+0x274>)
 800b29e:	f240 325b 	movw	r2, #859	; 0x35b
 800b2a2:	4983      	ldr	r1, [pc, #524]	; (800b4b0 <tcp_split_unsent_seg+0x284>)
 800b2a4:	4880      	ldr	r0, [pc, #512]	; (800b4a8 <tcp_split_unsent_seg+0x27c>)
 800b2a6:	f004 fba5 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	891b      	ldrh	r3, [r3, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <tcp_split_unsent_seg+0x94>
 800b2b2:	4b7b      	ldr	r3, [pc, #492]	; (800b4a0 <tcp_split_unsent_seg+0x274>)
 800b2b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b2b8:	497e      	ldr	r1, [pc, #504]	; (800b4b4 <tcp_split_unsent_seg+0x288>)
 800b2ba:	487b      	ldr	r0, [pc, #492]	; (800b4a8 <tcp_split_unsent_seg+0x27c>)
 800b2bc:	f004 fb9a 	bl	800f9f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	7a9b      	ldrb	r3, [r3, #10]
 800b2c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	891a      	ldrh	r2, [r3, #8]
 800b2d6:	887b      	ldrh	r3, [r7, #2]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	89bb      	ldrh	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	2036      	movs	r0, #54	; 0x36
 800b2ee:	f7fb fa29 	bl	8006744 <pbuf_alloc>
 800b2f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 80b7 	beq.w	800b46a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	891a      	ldrh	r2, [r3, #8]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	891b      	ldrh	r3, [r3, #8]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	b29a      	uxth	r2, r3
 800b30a:	887b      	ldrh	r3, [r7, #2]
 800b30c:	4413      	add	r3, r2
 800b30e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	6858      	ldr	r0, [r3, #4]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	18d1      	adds	r1, r2, r3
 800b31c:	897b      	ldrh	r3, [r7, #10]
 800b31e:	89ba      	ldrh	r2, [r7, #12]
 800b320:	f7fb feee 	bl	8007100 <pbuf_copy_partial>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	89bb      	ldrh	r3, [r7, #12]
 800b32a:	4293      	cmp	r3, r2
 800b32c:	f040 809f 	bne.w	800b46e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	899b      	ldrh	r3, [r3, #12]
 800b336:	b29b      	uxth	r3, r3
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fa fa33 	bl	80057a4 <lwip_htons>
 800b33e:	4603      	mov	r3, r0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b346:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b348:	2300      	movs	r3, #0
 800b34a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b34c:	7efb      	ldrb	r3, [r7, #27]
 800b34e:	f003 0308 	and.w	r3, r3, #8
 800b352:	2b00      	cmp	r3, #0
 800b354:	d007      	beq.n	800b366 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b356:	7efb      	ldrb	r3, [r7, #27]
 800b358:	f023 0308 	bic.w	r3, r3, #8
 800b35c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b35e:	7ebb      	ldrb	r3, [r7, #26]
 800b360:	f043 0308 	orr.w	r3, r3, #8
 800b364:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b366:	7efb      	ldrb	r3, [r7, #27]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b370:	7efb      	ldrb	r3, [r7, #27]
 800b372:	f023 0301 	bic.w	r3, r3, #1
 800b376:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b378:	7ebb      	ldrb	r3, [r7, #26]
 800b37a:	f043 0301 	orr.w	r3, r3, #1
 800b37e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	f7fa fa21 	bl	80057ce <lwip_htonl>
 800b38c:	4602      	mov	r2, r0
 800b38e:	887b      	ldrh	r3, [r7, #2]
 800b390:	18d1      	adds	r1, r2, r3
 800b392:	7eba      	ldrb	r2, [r7, #26]
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	460b      	mov	r3, r1
 800b39a:	6939      	ldr	r1, [r7, #16]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff fea7 	bl	800b0f0 <tcp_create_segment>
 800b3a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d063      	beq.n	800b472 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fb fd34 	bl	8006e1c <pbuf_clen>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	6858      	ldr	r0, [r3, #4]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	891a      	ldrh	r2, [r3, #8]
 800b3d2:	89bb      	ldrh	r3, [r7, #12]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f7fb fb11 	bl	8006a00 <pbuf_realloc>
  useg->len -= remainder;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	891a      	ldrh	r2, [r3, #8]
 800b3e2:	89bb      	ldrh	r3, [r7, #12]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	b29c      	uxth	r4, r3
 800b3f4:	7efb      	ldrb	r3, [r7, #27]
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fa f9d3 	bl	80057a4 <lwip_htons>
 800b3fe:	4603      	mov	r3, r0
 800b400:	461a      	mov	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	4322      	orrs	r2, r4
 800b408:	b292      	uxth	r2, r2
 800b40a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4618      	mov	r0, r3
 800b412:	f7fb fd03 	bl	8006e1c <pbuf_clen>
 800b416:	4603      	mov	r3, r0
 800b418:	461a      	mov	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b420:	4413      	add	r3, r2
 800b422:	b29a      	uxth	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fb fcf4 	bl	8006e1c <pbuf_clen>
 800b434:	4603      	mov	r3, r0
 800b436:	461a      	mov	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b43e:	4413      	add	r3, r2
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	69fa      	ldr	r2, [r7, #28]
 800b454:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	e016      	b.n	800b498 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b46a:	bf00      	nop
 800b46c:	e002      	b.n	800b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b472:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d006      	beq.n	800b488 <tcp_split_unsent_seg+0x25c>
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <tcp_split_unsent_seg+0x274>)
 800b47c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b480:	490d      	ldr	r1, [pc, #52]	; (800b4b8 <tcp_split_unsent_seg+0x28c>)
 800b482:	4809      	ldr	r0, [pc, #36]	; (800b4a8 <tcp_split_unsent_seg+0x27c>)
 800b484:	f004 fab6 	bl	800f9f4 <iprintf>
  if (p != NULL) {
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b48e:	6938      	ldr	r0, [r7, #16]
 800b490:	f7fb fc3c 	bl	8006d0c <pbuf_free>
  }

  return ERR_MEM;
 800b494:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3724      	adds	r7, #36	; 0x24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd90      	pop	{r4, r7, pc}
 800b4a0:	080124e4 	.word	0x080124e4
 800b4a4:	08012878 	.word	0x08012878
 800b4a8:	08012538 	.word	0x08012538
 800b4ac:	0801289c 	.word	0x0801289c
 800b4b0:	080128c0 	.word	0x080128c0
 800b4b4:	080128d0 	.word	0x080128d0
 800b4b8:	080128e0 	.word	0x080128e0

0800b4bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <tcp_send_fin+0x1c>
 800b4ca:	4b21      	ldr	r3, [pc, #132]	; (800b550 <tcp_send_fin+0x94>)
 800b4cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b4d0:	4920      	ldr	r1, [pc, #128]	; (800b554 <tcp_send_fin+0x98>)
 800b4d2:	4821      	ldr	r0, [pc, #132]	; (800b558 <tcp_send_fin+0x9c>)
 800b4d4:	f004 fa8e 	bl	800f9f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d02e      	beq.n	800b53e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	e002      	b.n	800b4ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1f8      	bne.n	800b4e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	899b      	ldrh	r3, [r3, #12]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fa f950 	bl	80057a4 <lwip_htons>
 800b504:	4603      	mov	r3, r0
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d116      	bne.n	800b53e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	899b      	ldrh	r3, [r3, #12]
 800b516:	b29c      	uxth	r4, r3
 800b518:	2001      	movs	r0, #1
 800b51a:	f7fa f943 	bl	80057a4 <lwip_htons>
 800b51e:	4603      	mov	r3, r0
 800b520:	461a      	mov	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	4322      	orrs	r2, r4
 800b528:	b292      	uxth	r2, r2
 800b52a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	8b5b      	ldrh	r3, [r3, #26]
 800b530:	f043 0320 	orr.w	r3, r3, #32
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e004      	b.n	800b548 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b53e:	2101      	movs	r1, #1
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f80b 	bl	800b55c <tcp_enqueue_flags>
 800b546:	4603      	mov	r3, r0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd90      	pop	{r4, r7, pc}
 800b550:	080124e4 	.word	0x080124e4
 800b554:	080128ec 	.word	0x080128ec
 800b558:	08012538 	.word	0x08012538

0800b55c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af02      	add	r7, sp, #8
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <tcp_enqueue_flags+0x2c>
 800b57a:	4b67      	ldr	r3, [pc, #412]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b57c:	f240 4211 	movw	r2, #1041	; 0x411
 800b580:	4966      	ldr	r1, [pc, #408]	; (800b71c <tcp_enqueue_flags+0x1c0>)
 800b582:	4867      	ldr	r0, [pc, #412]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b584:	f004 fa36 	bl	800f9f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <tcp_enqueue_flags+0x40>
 800b58e:	4b62      	ldr	r3, [pc, #392]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b590:	f240 4213 	movw	r2, #1043	; 0x413
 800b594:	4963      	ldr	r1, [pc, #396]	; (800b724 <tcp_enqueue_flags+0x1c8>)
 800b596:	4862      	ldr	r0, [pc, #392]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b598:	f004 fa2c 	bl	800f9f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b5aa:	7ffb      	ldrb	r3, [r7, #31]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 0304 	and.w	r3, r3, #4
 800b5b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5be:	4619      	mov	r1, r3
 800b5c0:	2036      	movs	r0, #54	; 0x36
 800b5c2:	f7fb f8bf 	bl	8006744 <pbuf_alloc>
 800b5c6:	6138      	str	r0, [r7, #16]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d109      	bne.n	800b5e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8b5b      	ldrh	r3, [r3, #26]
 800b5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	e095      	b.n	800b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	895a      	ldrh	r2, [r3, #10]
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d206      	bcs.n	800b5fc <tcp_enqueue_flags+0xa0>
 800b5ee:	4b4a      	ldr	r3, [pc, #296]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b5f0:	f240 4239 	movw	r2, #1081	; 0x439
 800b5f4:	494c      	ldr	r1, [pc, #304]	; (800b728 <tcp_enqueue_flags+0x1cc>)
 800b5f6:	484a      	ldr	r0, [pc, #296]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b5f8:	f004 f9fc 	bl	800f9f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b600:	78fa      	ldrb	r2, [r7, #3]
 800b602:	7ffb      	ldrb	r3, [r7, #31]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	460b      	mov	r3, r1
 800b608:	6939      	ldr	r1, [r7, #16]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fd70 	bl	800b0f0 <tcp_create_segment>
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d109      	bne.n	800b62c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	8b5b      	ldrh	r3, [r3, #26]
 800b61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	e070      	b.n	800b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d006      	beq.n	800b646 <tcp_enqueue_flags+0xea>
 800b638:	4b37      	ldr	r3, [pc, #220]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b63a:	f240 4242 	movw	r2, #1090	; 0x442
 800b63e:	493b      	ldr	r1, [pc, #236]	; (800b72c <tcp_enqueue_flags+0x1d0>)
 800b640:	4837      	ldr	r0, [pc, #220]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b642:	f004 f9d7 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	891b      	ldrh	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d006      	beq.n	800b65c <tcp_enqueue_flags+0x100>
 800b64e:	4b32      	ldr	r3, [pc, #200]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b650:	f240 4243 	movw	r2, #1091	; 0x443
 800b654:	4936      	ldr	r1, [pc, #216]	; (800b730 <tcp_enqueue_flags+0x1d4>)
 800b656:	4832      	ldr	r0, [pc, #200]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b658:	f004 f9cc 	bl	800f9f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	2b00      	cmp	r3, #0
 800b662:	d103      	bne.n	800b66c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	66da      	str	r2, [r3, #108]	; 0x6c
 800b66a:	e00d      	b.n	800b688 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b670:	61bb      	str	r3, [r7, #24]
 800b672:	e002      	b.n	800b67a <tcp_enqueue_flags+0x11e>
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f8      	bne.n	800b674 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <tcp_enqueue_flags+0x148>
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	f003 0301 	and.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b6ae:	78fb      	ldrb	r3, [r7, #3]
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8b5b      	ldrh	r3, [r3, #26]
 800b6bc:	f043 0320 	orr.w	r3, r3, #32
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fb fba6 	bl	8006e1c <pbuf_clen>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6da:	4413      	add	r3, r2
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00e      	beq.n	800b70c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <tcp_enqueue_flags+0x1b0>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <tcp_enqueue_flags+0x1b0>
 800b6fe:	4b06      	ldr	r3, [pc, #24]	; (800b718 <tcp_enqueue_flags+0x1bc>)
 800b700:	f240 4265 	movw	r2, #1125	; 0x465
 800b704:	490b      	ldr	r1, [pc, #44]	; (800b734 <tcp_enqueue_flags+0x1d8>)
 800b706:	4806      	ldr	r0, [pc, #24]	; (800b720 <tcp_enqueue_flags+0x1c4>)
 800b708:	f004 f974 	bl	800f9f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	080124e4 	.word	0x080124e4
 800b71c:	08012908 	.word	0x08012908
 800b720:	08012538 	.word	0x08012538
 800b724:	08012960 	.word	0x08012960
 800b728:	08012980 	.word	0x08012980
 800b72c:	080129bc 	.word	0x080129bc
 800b730:	080129d4 	.word	0x080129d4
 800b734:	08012a00 	.word	0x08012a00

0800b738 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b738:	b5b0      	push	{r4, r5, r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d106      	bne.n	800b754 <tcp_output+0x1c>
 800b746:	4b8a      	ldr	r3, [pc, #552]	; (800b970 <tcp_output+0x238>)
 800b748:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b74c:	4989      	ldr	r1, [pc, #548]	; (800b974 <tcp_output+0x23c>)
 800b74e:	488a      	ldr	r0, [pc, #552]	; (800b978 <tcp_output+0x240>)
 800b750:	f004 f950 	bl	800f9f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7d1b      	ldrb	r3, [r3, #20]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d106      	bne.n	800b76a <tcp_output+0x32>
 800b75c:	4b84      	ldr	r3, [pc, #528]	; (800b970 <tcp_output+0x238>)
 800b75e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b762:	4986      	ldr	r1, [pc, #536]	; (800b97c <tcp_output+0x244>)
 800b764:	4884      	ldr	r0, [pc, #528]	; (800b978 <tcp_output+0x240>)
 800b766:	f004 f945 	bl	800f9f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b76a:	4b85      	ldr	r3, [pc, #532]	; (800b980 <tcp_output+0x248>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d101      	bne.n	800b778 <tcp_output+0x40>
    return ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e1ce      	b.n	800bb16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b784:	4293      	cmp	r3, r2
 800b786:	bf28      	it	cs
 800b788:	4613      	movcs	r3, r2
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b792:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	8b5b      	ldrh	r3, [r3, #26]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 81aa 	beq.w	800bafc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fdcb 	bl	800c344 <tcp_send_empty_ack>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	e1b1      	b.n	800bb16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b7b2:	6879      	ldr	r1, [r7, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fc7c 	bl	800b0b8 <tcp_route>
 800b7c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <tcp_output+0x96>
    return ERR_RTE;
 800b7c8:	f06f 0303 	mvn.w	r3, #3
 800b7cc:	e1a3      	b.n	800bb16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <tcp_output+0xa4>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d111      	bne.n	800b800 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <tcp_output+0xb0>
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	e000      	b.n	800b7ea <tcp_output+0xb2>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <tcp_output+0xc0>
      return ERR_RTE;
 800b7f2:	f06f 0303 	mvn.w	r3, #3
 800b7f6:	e18e      	b.n	800bb16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	4618      	mov	r0, r3
 800b808:	f7f9 ffe1 	bl	80057ce <lwip_htonl>
 800b80c:	4602      	mov	r2, r0
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b816:	8912      	ldrh	r2, [r2, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	69ba      	ldr	r2, [r7, #24]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d227      	bcs.n	800b870 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b826:	461a      	mov	r2, r3
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d114      	bne.n	800b858 <tcp_output+0x120>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	2b00      	cmp	r3, #0
 800b834:	d110      	bne.n	800b858 <tcp_output+0x120>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	8b5b      	ldrh	r3, [r3, #26]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 814d 	beq.w	800bb00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fd6c 	bl	800c344 <tcp_send_empty_ack>
 800b86c:	4603      	mov	r3, r0
 800b86e:	e152      	b.n	800bb16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 811c 	beq.w	800babe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b886:	e002      	b.n	800b88e <tcp_output+0x156>
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	623b      	str	r3, [r7, #32]
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1f8      	bne.n	800b888 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b896:	e112      	b.n	800babe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	899b      	ldrh	r3, [r3, #12]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7f9 ff7f 	bl	80057a4 <lwip_htons>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d006      	beq.n	800b8c0 <tcp_output+0x188>
 800b8b2:	4b2f      	ldr	r3, [pc, #188]	; (800b970 <tcp_output+0x238>)
 800b8b4:	f240 5236 	movw	r2, #1334	; 0x536
 800b8b8:	4932      	ldr	r1, [pc, #200]	; (800b984 <tcp_output+0x24c>)
 800b8ba:	482f      	ldr	r0, [pc, #188]	; (800b978 <tcp_output+0x240>)
 800b8bc:	f004 f89a 	bl	800f9f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01f      	beq.n	800b908 <tcp_output+0x1d0>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8b5b      	ldrh	r3, [r3, #26]
 800b8cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d119      	bne.n	800b908 <tcp_output+0x1d0>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <tcp_output+0x1bc>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d110      	bne.n	800b908 <tcp_output+0x1d0>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ea:	891a      	ldrh	r2, [r3, #8]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d209      	bcs.n	800b908 <tcp_output+0x1d0>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <tcp_output+0x1d0>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b904:	2b08      	cmp	r3, #8
 800b906:	d901      	bls.n	800b90c <tcp_output+0x1d4>
 800b908:	2301      	movs	r3, #1
 800b90a:	e000      	b.n	800b90e <tcp_output+0x1d6>
 800b90c:	2300      	movs	r3, #0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8b5b      	ldrh	r3, [r3, #26]
 800b916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 80e4 	beq.w	800bae8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7d1b      	ldrb	r3, [r3, #20]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d00d      	beq.n	800b944 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	899b      	ldrh	r3, [r3, #12]
 800b92e:	b29c      	uxth	r4, r3
 800b930:	2010      	movs	r0, #16
 800b932:	f7f9 ff37 	bl	80057a4 <lwip_htons>
 800b936:	4603      	mov	r3, r0
 800b938:	461a      	mov	r2, r3
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	4322      	orrs	r2, r4
 800b940:	b292      	uxth	r2, r2
 800b942:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b94a:	f000 f909 	bl	800bb60 <tcp_output_segment>
 800b94e:	4603      	mov	r3, r0
 800b950:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d016      	beq.n	800b988 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8b5b      	ldrh	r3, [r3, #26]
 800b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	835a      	strh	r2, [r3, #26]
      return err;
 800b968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b96c:	e0d3      	b.n	800bb16 <tcp_output+0x3de>
 800b96e:	bf00      	nop
 800b970:	080124e4 	.word	0x080124e4
 800b974:	08012a28 	.word	0x08012a28
 800b978:	08012538 	.word	0x08012538
 800b97c:	08012a40 	.word	0x08012a40
 800b980:	20005d34 	.word	0x20005d34
 800b984:	08012a68 	.word	0x08012a68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	7d1b      	ldrb	r3, [r3, #20]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d006      	beq.n	800b9a6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8b5b      	ldrh	r3, [r3, #26]
 800b99c:	f023 0303 	bic.w	r3, r3, #3
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7f9 ff0e 	bl	80057ce <lwip_htonl>
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	891b      	ldrh	r3, [r3, #8]
 800b9b8:	461d      	mov	r5, r3
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	899b      	ldrh	r3, [r3, #12]
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f9 feee 	bl	80057a4 <lwip_htons>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	f003 0303 	and.w	r3, r3, #3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <tcp_output+0x2a0>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e000      	b.n	800b9da <tcp_output+0x2a2>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	442b      	add	r3, r5
 800b9dc:	4423      	add	r3, r4
 800b9de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	da02      	bge.n	800b9f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	891b      	ldrh	r3, [r3, #8]
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	899b      	ldrh	r3, [r3, #12]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f9 fecf 	bl	80057a4 <lwip_htons>
 800ba06:	4603      	mov	r3, r0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <tcp_output+0x2de>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e000      	b.n	800ba18 <tcp_output+0x2e0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	4423      	add	r3, r4
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d049      	beq.n	800bab2 <tcp_output+0x37a>
      seg->next = NULL;
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d105      	bne.n	800ba38 <tcp_output+0x300>
        pcb->unacked = seg;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	623b      	str	r3, [r7, #32]
 800ba36:	e03f      	b.n	800bab8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7f9 fec5 	bl	80057ce <lwip_htonl>
 800ba44:	4604      	mov	r4, r0
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f9 febe 	bl	80057ce <lwip_htonl>
 800ba52:	4603      	mov	r3, r0
 800ba54:	1ae3      	subs	r3, r4, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da24      	bge.n	800baa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3370      	adds	r3, #112	; 0x70
 800ba5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ba60:	e002      	b.n	800ba68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d011      	beq.n	800ba94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f9 fea8 	bl	80057ce <lwip_htonl>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f9 fea1 	bl	80057ce <lwip_htonl>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dbe6      	blt.n	800ba62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e009      	b.n	800bab8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	623b      	str	r3, [r7, #32]
 800bab0:	e002      	b.n	800bab8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bab4:	f7fc fc3f 	bl	8008336 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d012      	beq.n	800baea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f9 fe7f 	bl	80057ce <lwip_htonl>
 800bad0:	4602      	mov	r2, r0
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bada:	8912      	ldrh	r2, [r2, #8]
 800badc:	4413      	add	r3, r2
  while (seg != NULL &&
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	f4bf aed9 	bcs.w	800b898 <tcp_output+0x160>
 800bae6:	e000      	b.n	800baea <tcp_output+0x3b2>
      break;
 800bae8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d108      	bne.n	800bb04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bafa:	e004      	b.n	800bb06 <tcp_output+0x3ce>
    goto output_done;
 800bafc:	bf00      	nop
 800bafe:	e002      	b.n	800bb06 <tcp_output+0x3ce>
    goto output_done;
 800bb00:	bf00      	nop
 800bb02:	e000      	b.n	800bb06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bb04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8b5b      	ldrh	r3, [r3, #26]
 800bb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3728      	adds	r7, #40	; 0x28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <tcp_output_segment_busy+0x1c>
 800bb2e:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <tcp_output_segment_busy+0x34>)
 800bb30:	f240 529a 	movw	r2, #1434	; 0x59a
 800bb34:	4908      	ldr	r1, [pc, #32]	; (800bb58 <tcp_output_segment_busy+0x38>)
 800bb36:	4809      	ldr	r0, [pc, #36]	; (800bb5c <tcp_output_segment_busy+0x3c>)
 800bb38:	f003 ff5c 	bl	800f9f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	7b9b      	ldrb	r3, [r3, #14]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d001      	beq.n	800bb4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	080124e4 	.word	0x080124e4
 800bb58:	08012a80 	.word	0x08012a80
 800bb5c:	08012538 	.word	0x08012538

0800bb60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bb60:	b5b0      	push	{r4, r5, r7, lr}
 800bb62:	b08c      	sub	sp, #48	; 0x30
 800bb64:	af04      	add	r7, sp, #16
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <tcp_output_segment+0x20>
 800bb72:	4b63      	ldr	r3, [pc, #396]	; (800bd00 <tcp_output_segment+0x1a0>)
 800bb74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bb78:	4962      	ldr	r1, [pc, #392]	; (800bd04 <tcp_output_segment+0x1a4>)
 800bb7a:	4863      	ldr	r0, [pc, #396]	; (800bd08 <tcp_output_segment+0x1a8>)
 800bb7c:	f003 ff3a 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <tcp_output_segment+0x34>
 800bb86:	4b5e      	ldr	r3, [pc, #376]	; (800bd00 <tcp_output_segment+0x1a0>)
 800bb88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bb8c:	495f      	ldr	r1, [pc, #380]	; (800bd0c <tcp_output_segment+0x1ac>)
 800bb8e:	485e      	ldr	r0, [pc, #376]	; (800bd08 <tcp_output_segment+0x1a8>)
 800bb90:	f003 ff30 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <tcp_output_segment+0x48>
 800bb9a:	4b59      	ldr	r3, [pc, #356]	; (800bd00 <tcp_output_segment+0x1a0>)
 800bb9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bba0:	495b      	ldr	r1, [pc, #364]	; (800bd10 <tcp_output_segment+0x1b0>)
 800bba2:	4859      	ldr	r0, [pc, #356]	; (800bd08 <tcp_output_segment+0x1a8>)
 800bba4:	f003 ff26 	bl	800f9f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff ffb9 	bl	800bb20 <tcp_output_segment_busy>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e09f      	b.n	800bcf8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	68dc      	ldr	r4, [r3, #12]
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f7f9 fe04 	bl	80057ce <lwip_htonl>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68dc      	ldr	r4, [r3, #12]
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f7f9 fde6 	bl	80057a4 <lwip_htons>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7a9b      	ldrb	r3, [r3, #10]
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d015      	beq.n	800bc2a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	3304      	adds	r3, #4
 800bc02:	461a      	mov	r2, r3
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bc0a:	f7fc fe8b 	bl	8008924 <tcp_eff_send_mss_netif>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bc12:	8b7b      	ldrh	r3, [r7, #26]
 800bc14:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7f9 fdd8 	bl	80057ce <lwip_htonl>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	3304      	adds	r3, #4
 800bc28:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da02      	bge.n	800bc3a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bc42:	4b34      	ldr	r3, [pc, #208]	; (800bd14 <tcp_output_segment+0x1b4>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f9 fdbc 	bl	80057ce <lwip_htonl>
 800bc56:	4602      	mov	r2, r0
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	8959      	ldrh	r1, [r3, #10]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	8b3a      	ldrh	r2, [r7, #24]
 800bc76:	1a8a      	subs	r2, r1, r2
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	8919      	ldrh	r1, [r3, #8]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	8b3a      	ldrh	r2, [r7, #24]
 800bc88:	1a8a      	subs	r2, r1, r2
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	68d2      	ldr	r2, [r2, #12]
 800bc96:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	741a      	strb	r2, [r3, #16]
 800bca0:	2200      	movs	r2, #0
 800bca2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f103 0214 	add.w	r2, r3, #20
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	7a9b      	ldrb	r3, [r3, #10]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	4413      	add	r3, r2
 800bcb8:	69fa      	ldr	r2, [r7, #28]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d006      	beq.n	800bccc <tcp_output_segment+0x16c>
 800bcbe:	4b10      	ldr	r3, [pc, #64]	; (800bd00 <tcp_output_segment+0x1a0>)
 800bcc0:	f240 621c 	movw	r2, #1564	; 0x61c
 800bcc4:	4914      	ldr	r1, [pc, #80]	; (800bd18 <tcp_output_segment+0x1b8>)
 800bcc6:	4810      	ldr	r0, [pc, #64]	; (800bd08 <tcp_output_segment+0x1a8>)
 800bcc8:	f003 fe94 	bl	800f9f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6858      	ldr	r0, [r3, #4]
 800bcd0:	68b9      	ldr	r1, [r7, #8]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	1d1c      	adds	r4, r3, #4
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	7add      	ldrb	r5, [r3, #11]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	7a9b      	ldrb	r3, [r3, #10]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	9202      	str	r2, [sp, #8]
 800bce2:	2206      	movs	r2, #6
 800bce4:	9201      	str	r2, [sp, #4]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462b      	mov	r3, r5
 800bcea:	4622      	mov	r2, r4
 800bcec:	f002 fdf0 	bl	800e8d0 <ip4_output_if>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bcf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3720      	adds	r7, #32
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bdb0      	pop	{r4, r5, r7, pc}
 800bd00:	080124e4 	.word	0x080124e4
 800bd04:	08012aa8 	.word	0x08012aa8
 800bd08:	08012538 	.word	0x08012538
 800bd0c:	08012ac8 	.word	0x08012ac8
 800bd10:	08012ae8 	.word	0x08012ae8
 800bd14:	20005ce8 	.word	0x20005ce8
 800bd18:	08012b0c 	.word	0x08012b0c

0800bd1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bd1c:	b5b0      	push	{r4, r5, r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d106      	bne.n	800bd38 <tcp_rexmit_rto_prepare+0x1c>
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <tcp_rexmit_rto_prepare+0xd4>)
 800bd2c:	f240 6263 	movw	r2, #1635	; 0x663
 800bd30:	4930      	ldr	r1, [pc, #192]	; (800bdf4 <tcp_rexmit_rto_prepare+0xd8>)
 800bd32:	4831      	ldr	r0, [pc, #196]	; (800bdf8 <tcp_rexmit_rto_prepare+0xdc>)
 800bd34:	f003 fe5e 	bl	800f9f4 <iprintf>

  if (pcb->unacked == NULL) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bd40:	f06f 0305 	mvn.w	r3, #5
 800bd44:	e050      	b.n	800bde8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	e00b      	b.n	800bd66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7ff fee6 	bl	800bb20 <tcp_output_segment_busy>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bd5a:	f06f 0305 	mvn.w	r3, #5
 800bd5e:	e043      	b.n	800bde8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1ef      	bne.n	800bd4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f7ff fed6 	bl	800bb20 <tcp_output_segment_busy>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bd7a:	f06f 0305 	mvn.w	r3, #5
 800bd7e:	e033      	b.n	800bde8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	8b5b      	ldrh	r3, [r3, #26]
 800bd9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f9 fd0f 	bl	80057ce <lwip_htonl>
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	891b      	ldrh	r3, [r3, #8]
 800bdb6:	461d      	mov	r5, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7f9 fcef 	bl	80057a4 <lwip_htons>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0303 	and.w	r3, r3, #3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <tcp_rexmit_rto_prepare+0xba>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <tcp_rexmit_rto_prepare+0xbc>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	442b      	add	r3, r5
 800bdda:	18e2      	adds	r2, r4, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bdb0      	pop	{r4, r5, r7, pc}
 800bdf0:	080124e4 	.word	0x080124e4
 800bdf4:	08012b20 	.word	0x08012b20
 800bdf8:	08012538 	.word	0x08012538

0800bdfc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <tcp_rexmit_rto_commit+0x1c>
 800be0a:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <tcp_rexmit_rto_commit+0x44>)
 800be0c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800be10:	490c      	ldr	r1, [pc, #48]	; (800be44 <tcp_rexmit_rto_commit+0x48>)
 800be12:	480d      	ldr	r0, [pc, #52]	; (800be48 <tcp_rexmit_rto_commit+0x4c>)
 800be14:	f003 fdee 	bl	800f9f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be1e:	2bff      	cmp	r3, #255	; 0xff
 800be20:	d007      	beq.n	800be32 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be28:	3301      	adds	r3, #1
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fc80 	bl	800b738 <tcp_output>
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	080124e4 	.word	0x080124e4
 800be44:	08012b44 	.word	0x08012b44
 800be48:	08012538 	.word	0x08012538

0800be4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <tcp_rexmit_rto+0x1c>
 800be5a:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <tcp_rexmit_rto+0x38>)
 800be5c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800be60:	4909      	ldr	r1, [pc, #36]	; (800be88 <tcp_rexmit_rto+0x3c>)
 800be62:	480a      	ldr	r0, [pc, #40]	; (800be8c <tcp_rexmit_rto+0x40>)
 800be64:	f003 fdc6 	bl	800f9f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff ff57 	bl	800bd1c <tcp_rexmit_rto_prepare>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d102      	bne.n	800be7a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff ffc1 	bl	800bdfc <tcp_rexmit_rto_commit>
  }
}
 800be7a:	bf00      	nop
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	080124e4 	.word	0x080124e4
 800be88:	08012b68 	.word	0x08012b68
 800be8c:	08012538 	.word	0x08012538

0800be90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <tcp_rexmit+0x1c>
 800be9e:	4b2f      	ldr	r3, [pc, #188]	; (800bf5c <tcp_rexmit+0xcc>)
 800bea0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bea4:	492e      	ldr	r1, [pc, #184]	; (800bf60 <tcp_rexmit+0xd0>)
 800bea6:	482f      	ldr	r0, [pc, #188]	; (800bf64 <tcp_rexmit+0xd4>)
 800bea8:	f003 fda4 	bl	800f9f4 <iprintf>

  if (pcb->unacked == NULL) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d102      	bne.n	800beba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800beb4:	f06f 0305 	mvn.w	r3, #5
 800beb8:	e04c      	b.n	800bf54 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bebe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bec0:	68b8      	ldr	r0, [r7, #8]
 800bec2:	f7ff fe2d 	bl	800bb20 <tcp_output_segment_busy>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800becc:	f06f 0305 	mvn.w	r3, #5
 800bed0:	e040      	b.n	800bf54 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	336c      	adds	r3, #108	; 0x6c
 800bede:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bee0:	e002      	b.n	800bee8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d011      	beq.n	800bf14 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f9 fc68 	bl	80057ce <lwip_htonl>
 800befe:	4604      	mov	r4, r0
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7f9 fc61 	bl	80057ce <lwip_htonl>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dbe6      	blt.n	800bee2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d103      	bne.n	800bf32 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf38:	2bff      	cmp	r3, #255	; 0xff
 800bf3a:	d007      	beq.n	800bf4c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf42:	3301      	adds	r3, #1
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd90      	pop	{r4, r7, pc}
 800bf5c:	080124e4 	.word	0x080124e4
 800bf60:	08012b84 	.word	0x08012b84
 800bf64:	08012538 	.word	0x08012538

0800bf68 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <tcp_rexmit_fast+0x1c>
 800bf76:	4b2a      	ldr	r3, [pc, #168]	; (800c020 <tcp_rexmit_fast+0xb8>)
 800bf78:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bf7c:	4929      	ldr	r1, [pc, #164]	; (800c024 <tcp_rexmit_fast+0xbc>)
 800bf7e:	482a      	ldr	r0, [pc, #168]	; (800c028 <tcp_rexmit_fast+0xc0>)
 800bf80:	f003 fd38 	bl	800f9f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d045      	beq.n	800c018 <tcp_rexmit_fast+0xb0>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	8b5b      	ldrh	r3, [r3, #26]
 800bf90:	f003 0304 	and.w	r3, r3, #4
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d13f      	bne.n	800c018 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff79 	bl	800be90 <tcp_rexmit>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d139      	bne.n	800c018 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	bf28      	it	cs
 800bfb4:	4613      	movcs	r3, r2
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da00      	bge.n	800bfbe <tcp_rexmit_fast+0x56>
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	105b      	asrs	r3, r3, #1
 800bfc0:	b29a      	uxth	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bfce:	461a      	mov	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d206      	bcs.n	800bfe8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bff2:	4619      	mov	r1, r3
 800bff4:	0049      	lsls	r1, r1, #1
 800bff6:	440b      	add	r3, r1
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	4413      	add	r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	8b5b      	ldrh	r3, [r3, #26]
 800c008:	f043 0304 	orr.w	r3, r3, #4
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	080124e4 	.word	0x080124e4
 800c024:	08012b9c 	.word	0x08012b9c
 800c028:	08012538 	.word	0x08012538

0800c02c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	817b      	strh	r3, [r7, #10]
 800c03a:	4613      	mov	r3, r2
 800c03c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c03e:	897a      	ldrh	r2, [r7, #10]
 800c040:	893b      	ldrh	r3, [r7, #8]
 800c042:	4413      	add	r3, r2
 800c044:	b29b      	uxth	r3, r3
 800c046:	3314      	adds	r3, #20
 800c048:	b29b      	uxth	r3, r3
 800c04a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c04e:	4619      	mov	r1, r3
 800c050:	2022      	movs	r0, #34	; 0x22
 800c052:	f7fa fb77 	bl	8006744 <pbuf_alloc>
 800c056:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d04d      	beq.n	800c0fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c05e:	897b      	ldrh	r3, [r7, #10]
 800c060:	3313      	adds	r3, #19
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	8952      	ldrh	r2, [r2, #10]
 800c066:	4293      	cmp	r3, r2
 800c068:	db06      	blt.n	800c078 <tcp_output_alloc_header_common+0x4c>
 800c06a:	4b26      	ldr	r3, [pc, #152]	; (800c104 <tcp_output_alloc_header_common+0xd8>)
 800c06c:	f240 7223 	movw	r2, #1827	; 0x723
 800c070:	4925      	ldr	r1, [pc, #148]	; (800c108 <tcp_output_alloc_header_common+0xdc>)
 800c072:	4826      	ldr	r0, [pc, #152]	; (800c10c <tcp_output_alloc_header_common+0xe0>)
 800c074:	f003 fcbe 	bl	800f9f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c07e:	8c3b      	ldrh	r3, [r7, #32]
 800c080:	4618      	mov	r0, r3
 800c082:	f7f9 fb8f 	bl	80057a4 <lwip_htons>
 800c086:	4603      	mov	r3, r0
 800c088:	461a      	mov	r2, r3
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c090:	4618      	mov	r0, r3
 800c092:	f7f9 fb87 	bl	80057a4 <lwip_htons>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f7f9 fb92 	bl	80057ce <lwip_htonl>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c0b0:	897b      	ldrh	r3, [r7, #10]
 800c0b2:	089b      	lsrs	r3, r3, #2
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3305      	adds	r3, #5
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	031b      	lsls	r3, r3, #12
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f9 fb6b 	bl	80057a4 <lwip_htons>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c0d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f9 fb63 	bl	80057a4 <lwip_htons>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	741a      	strb	r2, [r3, #16]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	749a      	strb	r2, [r3, #18]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c0fa:	697b      	ldr	r3, [r7, #20]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	080124e4 	.word	0x080124e4
 800c108:	08012bbc 	.word	0x08012bbc
 800c10c:	08012538 	.word	0x08012538

0800c110 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c110:	b5b0      	push	{r4, r5, r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af04      	add	r7, sp, #16
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	607b      	str	r3, [r7, #4]
 800c11a:	460b      	mov	r3, r1
 800c11c:	817b      	strh	r3, [r7, #10]
 800c11e:	4613      	mov	r3, r2
 800c120:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <tcp_output_alloc_header+0x26>
 800c128:	4b15      	ldr	r3, [pc, #84]	; (800c180 <tcp_output_alloc_header+0x70>)
 800c12a:	f240 7242 	movw	r2, #1858	; 0x742
 800c12e:	4915      	ldr	r1, [pc, #84]	; (800c184 <tcp_output_alloc_header+0x74>)
 800c130:	4815      	ldr	r0, [pc, #84]	; (800c188 <tcp_output_alloc_header+0x78>)
 800c132:	f003 fc5f 	bl	800f9f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	8adb      	ldrh	r3, [r3, #22]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	8b12      	ldrh	r2, [r2, #24]
 800c142:	68f9      	ldr	r1, [r7, #12]
 800c144:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c146:	893d      	ldrh	r5, [r7, #8]
 800c148:	897c      	ldrh	r4, [r7, #10]
 800c14a:	9103      	str	r1, [sp, #12]
 800c14c:	2110      	movs	r1, #16
 800c14e:	9102      	str	r1, [sp, #8]
 800c150:	9201      	str	r2, [sp, #4]
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	462a      	mov	r2, r5
 800c158:	4621      	mov	r1, r4
 800c15a:	f7ff ff67 	bl	800c02c <tcp_output_alloc_header_common>
 800c15e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c16e:	441a      	add	r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c174:	697b      	ldr	r3, [r7, #20]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bdb0      	pop	{r4, r5, r7, pc}
 800c17e:	bf00      	nop
 800c180:	080124e4 	.word	0x080124e4
 800c184:	08012bec 	.word	0x08012bec
 800c188:	08012538 	.word	0x08012538

0800c18c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	4611      	mov	r1, r2
 800c198:	461a      	mov	r2, r3
 800c19a:	460b      	mov	r3, r1
 800c19c:	71fb      	strb	r3, [r7, #7]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <tcp_output_fill_options+0x2e>
 800c1ac:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <tcp_output_fill_options+0x70>)
 800c1ae:	f240 7256 	movw	r2, #1878	; 0x756
 800c1b2:	4913      	ldr	r1, [pc, #76]	; (800c200 <tcp_output_fill_options+0x74>)
 800c1b4:	4813      	ldr	r0, [pc, #76]	; (800c204 <tcp_output_fill_options+0x78>)
 800c1b6:	f003 fc1d 	bl	800f9f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	3314      	adds	r3, #20
 800c1c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f103 0214 	add.w	r2, r3, #20
 800c1cc:	8bfb      	ldrh	r3, [r7, #30]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	f003 0304 	and.w	r3, r3, #4
 800c1da:	440b      	add	r3, r1
 800c1dc:	4413      	add	r3, r2
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d006      	beq.n	800c1f2 <tcp_output_fill_options+0x66>
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <tcp_output_fill_options+0x70>)
 800c1e6:	f240 7275 	movw	r2, #1909	; 0x775
 800c1ea:	4907      	ldr	r1, [pc, #28]	; (800c208 <tcp_output_fill_options+0x7c>)
 800c1ec:	4805      	ldr	r0, [pc, #20]	; (800c204 <tcp_output_fill_options+0x78>)
 800c1ee:	f003 fc01 	bl	800f9f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c1f2:	bf00      	nop
 800c1f4:	3720      	adds	r7, #32
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	080124e4 	.word	0x080124e4
 800c200:	08012c14 	.word	0x08012c14
 800c204:	08012538 	.word	0x08012538
 800c208:	08012b0c 	.word	0x08012b0c

0800c20c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	; 0x28
 800c210:	af04      	add	r7, sp, #16
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <tcp_output_control_segment+0x22>
 800c220:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <tcp_output_control_segment+0x88>)
 800c222:	f240 7287 	movw	r2, #1927	; 0x787
 800c226:	491c      	ldr	r1, [pc, #112]	; (800c298 <tcp_output_control_segment+0x8c>)
 800c228:	481c      	ldr	r0, [pc, #112]	; (800c29c <tcp_output_control_segment+0x90>)
 800c22a:	f003 fbe3 	bl	800f9f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7fe ff40 	bl	800b0b8 <tcp_route>
 800c238:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c240:	23fc      	movs	r3, #252	; 0xfc
 800c242:	75fb      	strb	r3, [r7, #23]
 800c244:	e01c      	b.n	800c280 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d006      	beq.n	800c25a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	7adb      	ldrb	r3, [r3, #11]
 800c250:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	7a9b      	ldrb	r3, [r3, #10]
 800c256:	757b      	strb	r3, [r7, #21]
 800c258:	e003      	b.n	800c262 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c25a:	23ff      	movs	r3, #255	; 0xff
 800c25c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c262:	7dba      	ldrb	r2, [r7, #22]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	9302      	str	r3, [sp, #8]
 800c268:	2306      	movs	r3, #6
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	7d7b      	ldrb	r3, [r7, #21]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	4613      	mov	r3, r2
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	6879      	ldr	r1, [r7, #4]
 800c276:	68b8      	ldr	r0, [r7, #8]
 800c278:	f002 fb2a 	bl	800e8d0 <ip4_output_if>
 800c27c:	4603      	mov	r3, r0
 800c27e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c280:	68b8      	ldr	r0, [r7, #8]
 800c282:	f7fa fd43 	bl	8006d0c <pbuf_free>
  return err;
 800c286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	080124e4 	.word	0x080124e4
 800c298:	08012c3c 	.word	0x08012c3c
 800c29c:	08012538 	.word	0x08012538

0800c2a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b08b      	sub	sp, #44	; 0x2c
 800c2a4:	af04      	add	r7, sp, #16
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d106      	bne.n	800c2c2 <tcp_rst+0x22>
 800c2b4:	4b1f      	ldr	r3, [pc, #124]	; (800c334 <tcp_rst+0x94>)
 800c2b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c2ba:	491f      	ldr	r1, [pc, #124]	; (800c338 <tcp_rst+0x98>)
 800c2bc:	481f      	ldr	r0, [pc, #124]	; (800c33c <tcp_rst+0x9c>)
 800c2be:	f003 fb99 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <tcp_rst+0x36>
 800c2c8:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <tcp_rst+0x94>)
 800c2ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c2ce:	491c      	ldr	r1, [pc, #112]	; (800c340 <tcp_rst+0xa0>)
 800c2d0:	481a      	ldr	r0, [pc, #104]	; (800c33c <tcp_rst+0x9c>)
 800c2d2:	f003 fb8f 	bl	800f9f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c2da:	f246 0308 	movw	r3, #24584	; 0x6008
 800c2de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c2e0:	7dfb      	ldrb	r3, [r7, #23]
 800c2e2:	b29c      	uxth	r4, r3
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f7f9 fa72 	bl	80057ce <lwip_htonl>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	8abb      	ldrh	r3, [r7, #20]
 800c2ee:	9303      	str	r3, [sp, #12]
 800c2f0:	2314      	movs	r3, #20
 800c2f2:	9302      	str	r3, [sp, #8]
 800c2f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	2200      	movs	r2, #0
 800c300:	4621      	mov	r1, r4
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff fe92 	bl	800c02c <tcp_output_alloc_header_common>
 800c308:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00c      	beq.n	800c32a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	2200      	movs	r2, #0
 800c314:	6939      	ldr	r1, [r7, #16]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f7ff ff38 	bl	800c18c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	6939      	ldr	r1, [r7, #16]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7ff ff72 	bl	800c20c <tcp_output_control_segment>
 800c328:	e000      	b.n	800c32c <tcp_rst+0x8c>
    return;
 800c32a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c32c:	371c      	adds	r7, #28
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd90      	pop	{r4, r7, pc}
 800c332:	bf00      	nop
 800c334:	080124e4 	.word	0x080124e4
 800c338:	08012c68 	.word	0x08012c68
 800c33c:	08012538 	.word	0x08012538
 800c340:	08012c84 	.word	0x08012c84

0800c344 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c344:	b590      	push	{r4, r7, lr}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <tcp_send_empty_ack+0x24>
 800c35a:	4b28      	ldr	r3, [pc, #160]	; (800c3fc <tcp_send_empty_ack+0xb8>)
 800c35c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c360:	4927      	ldr	r1, [pc, #156]	; (800c400 <tcp_send_empty_ack+0xbc>)
 800c362:	4828      	ldr	r0, [pc, #160]	; (800c404 <tcp_send_empty_ack+0xc0>)
 800c364:	f003 fb46 	bl	800f9f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0304 	and.w	r3, r3, #4
 800c372:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c374:	7d7b      	ldrb	r3, [r7, #21]
 800c376:	b29c      	uxth	r4, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f9 fa26 	bl	80057ce <lwip_htonl>
 800c382:	4603      	mov	r3, r0
 800c384:	2200      	movs	r2, #0
 800c386:	4621      	mov	r1, r4
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff fec1 	bl	800c110 <tcp_output_alloc_header>
 800c38e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	8b5b      	ldrh	r3, [r3, #26]
 800c39a:	f043 0303 	orr.w	r3, r3, #3
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c3a4:	f06f 0301 	mvn.w	r3, #1
 800c3a8:	e023      	b.n	800c3f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c3aa:	7dbb      	ldrb	r3, [r7, #22]
 800c3ac:	7dfa      	ldrb	r2, [r7, #23]
 800c3ae:	6939      	ldr	r1, [r7, #16]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff feeb 	bl	800c18c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	6939      	ldr	r1, [r7, #16]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7ff ff24 	bl	800c20c <tcp_output_control_segment>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	8b5b      	ldrh	r3, [r3, #26]
 800c3d4:	f043 0303 	orr.w	r3, r3, #3
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	835a      	strh	r2, [r3, #26]
 800c3de:	e006      	b.n	800c3ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	8b5b      	ldrh	r3, [r3, #26]
 800c3e4:	f023 0303 	bic.w	r3, r3, #3
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd90      	pop	{r4, r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	080124e4 	.word	0x080124e4
 800c400:	08012ca0 	.word	0x08012ca0
 800c404:	08012538 	.word	0x08012538

0800c408 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c408:	b590      	push	{r4, r7, lr}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <tcp_keepalive+0x20>
 800c41a:	4b18      	ldr	r3, [pc, #96]	; (800c47c <tcp_keepalive+0x74>)
 800c41c:	f640 0224 	movw	r2, #2084	; 0x824
 800c420:	4917      	ldr	r1, [pc, #92]	; (800c480 <tcp_keepalive+0x78>)
 800c422:	4818      	ldr	r0, [pc, #96]	; (800c484 <tcp_keepalive+0x7c>)
 800c424:	f003 fae6 	bl	800f9f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	b29c      	uxth	r4, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c430:	3b01      	subs	r3, #1
 800c432:	4618      	mov	r0, r3
 800c434:	f7f9 f9cb 	bl	80057ce <lwip_htonl>
 800c438:	4603      	mov	r3, r0
 800c43a:	2200      	movs	r2, #0
 800c43c:	4621      	mov	r1, r4
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fe66 	bl	800c110 <tcp_output_alloc_header>
 800c444:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c44c:	f04f 33ff 	mov.w	r3, #4294967295
 800c450:	e010      	b.n	800c474 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	2200      	movs	r2, #0
 800c456:	6939      	ldr	r1, [r7, #16]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff fe97 	bl	800c18c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	6939      	ldr	r1, [r7, #16]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7ff fed0 	bl	800c20c <tcp_output_control_segment>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c474:	4618      	mov	r0, r3
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}
 800c47c:	080124e4 	.word	0x080124e4
 800c480:	08012cc0 	.word	0x08012cc0
 800c484:	08012538 	.word	0x08012538

0800c488 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c488:	b590      	push	{r4, r7, lr}
 800c48a:	b08b      	sub	sp, #44	; 0x2c
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c490:	2300      	movs	r3, #0
 800c492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d106      	bne.n	800c4aa <tcp_zero_window_probe+0x22>
 800c49c:	4b4c      	ldr	r3, [pc, #304]	; (800c5d0 <tcp_zero_window_probe+0x148>)
 800c49e:	f640 024f 	movw	r2, #2127	; 0x84f
 800c4a2:	494c      	ldr	r1, [pc, #304]	; (800c5d4 <tcp_zero_window_probe+0x14c>)
 800c4a4:	484c      	ldr	r0, [pc, #304]	; (800c5d8 <tcp_zero_window_probe+0x150>)
 800c4a6:	f003 faa5 	bl	800f9f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e086      	b.n	800c5c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c4c0:	2bff      	cmp	r3, #255	; 0xff
 800c4c2:	d007      	beq.n	800c4d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	899b      	ldrh	r3, [r3, #12]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f9 f961 	bl	80057a4 <lwip_htons>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <tcp_zero_window_probe+0x72>
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	891b      	ldrh	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <tcp_zero_window_probe+0x72>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <tcp_zero_window_probe+0x74>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c4fe:	7ffb      	ldrb	r3, [r7, #31]
 800c500:	2b00      	cmp	r3, #0
 800c502:	bf0c      	ite	eq
 800c504:	2301      	moveq	r3, #1
 800c506:	2300      	movne	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c510:	b299      	uxth	r1, r3
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	8bba      	ldrh	r2, [r7, #28]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fdf8 	bl	800c110 <tcp_output_alloc_header>
 800c520:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
 800c52c:	e04c      	b.n	800c5c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c534:	7ffb      	ldrb	r3, [r7, #31]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d011      	beq.n	800c55e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	899b      	ldrh	r3, [r3, #12]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	b21b      	sxth	r3, r3
 800c542:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c546:	b21c      	sxth	r4, r3
 800c548:	2011      	movs	r0, #17
 800c54a:	f7f9 f92b 	bl	80057a4 <lwip_htons>
 800c54e:	4603      	mov	r3, r0
 800c550:	b21b      	sxth	r3, r3
 800c552:	4323      	orrs	r3, r4
 800c554:	b21b      	sxth	r3, r3
 800c556:	b29a      	uxth	r2, r3
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	819a      	strh	r2, [r3, #12]
 800c55c:	e010      	b.n	800c580 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	3314      	adds	r3, #20
 800c564:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	6858      	ldr	r0, [r3, #4]
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	891a      	ldrh	r2, [r3, #8]
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	b29b      	uxth	r3, r3
 800c578:	2201      	movs	r2, #1
 800c57a:	6939      	ldr	r1, [r7, #16]
 800c57c:	f7fa fdc0 	bl	8007100 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	4618      	mov	r0, r3
 800c588:	f7f9 f921 	bl	80057ce <lwip_htonl>
 800c58c:	4603      	mov	r3, r0
 800c58e:	3301      	adds	r3, #1
 800c590:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	da02      	bge.n	800c5a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	69b9      	ldr	r1, [r7, #24]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff fded 	bl	800c18c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	69b9      	ldr	r1, [r7, #24]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff fe26 	bl	800c20c <tcp_output_control_segment>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c5c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	372c      	adds	r7, #44	; 0x2c
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd90      	pop	{r4, r7, pc}
 800c5d0:	080124e4 	.word	0x080124e4
 800c5d4:	08012cdc 	.word	0x08012cdc
 800c5d8:	08012538 	.word	0x08012538

0800c5dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c5e4:	f7fa ff0c 	bl	8007400 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <tcpip_tcp_timer+0x38>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d103      	bne.n	800c5f8 <tcpip_tcp_timer+0x1c>
 800c5f0:	4b09      	ldr	r3, [pc, #36]	; (800c618 <tcpip_tcp_timer+0x3c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4908      	ldr	r1, [pc, #32]	; (800c61c <tcpip_tcp_timer+0x40>)
 800c5fc:	20fa      	movs	r0, #250	; 0xfa
 800c5fe:	f000 f8f3 	bl	800c7e8 <sys_timeout>
 800c602:	e003      	b.n	800c60c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c604:	4b06      	ldr	r3, [pc, #24]	; (800c620 <tcpip_tcp_timer+0x44>)
 800c606:	2200      	movs	r2, #0
 800c608:	601a      	str	r2, [r3, #0]
  }
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20005cf4 	.word	0x20005cf4
 800c618:	20005cf8 	.word	0x20005cf8
 800c61c:	0800c5dd 	.word	0x0800c5dd
 800c620:	20005d40 	.word	0x20005d40

0800c624 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c628:	4b0a      	ldr	r3, [pc, #40]	; (800c654 <tcp_timer_needed+0x30>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10f      	bne.n	800c650 <tcp_timer_needed+0x2c>
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <tcp_timer_needed+0x34>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <tcp_timer_needed+0x1c>
 800c638:	4b08      	ldr	r3, [pc, #32]	; (800c65c <tcp_timer_needed+0x38>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d007      	beq.n	800c650 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c640:	4b04      	ldr	r3, [pc, #16]	; (800c654 <tcp_timer_needed+0x30>)
 800c642:	2201      	movs	r2, #1
 800c644:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c646:	2200      	movs	r2, #0
 800c648:	4905      	ldr	r1, [pc, #20]	; (800c660 <tcp_timer_needed+0x3c>)
 800c64a:	20fa      	movs	r0, #250	; 0xfa
 800c64c:	f000 f8cc 	bl	800c7e8 <sys_timeout>
  }
}
 800c650:	bf00      	nop
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20005d40 	.word	0x20005d40
 800c658:	20005cf4 	.word	0x20005cf4
 800c65c:	20005cf8 	.word	0x20005cf8
 800c660:	0800c5dd 	.word	0x0800c5dd

0800c664 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c670:	2006      	movs	r0, #6
 800c672:	f7f9 fced 	bl	8006050 <memp_malloc>
 800c676:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d109      	bne.n	800c692 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d151      	bne.n	800c728 <sys_timeout_abs+0xc4>
 800c684:	4b2a      	ldr	r3, [pc, #168]	; (800c730 <sys_timeout_abs+0xcc>)
 800c686:	22be      	movs	r2, #190	; 0xbe
 800c688:	492a      	ldr	r1, [pc, #168]	; (800c734 <sys_timeout_abs+0xd0>)
 800c68a:	482b      	ldr	r0, [pc, #172]	; (800c738 <sys_timeout_abs+0xd4>)
 800c68c:	f003 f9b2 	bl	800f9f4 <iprintf>
    return;
 800c690:	e04a      	b.n	800c728 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2200      	movs	r2, #0
 800c696:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c6aa:	4b24      	ldr	r3, [pc, #144]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c6b2:	4a22      	ldr	r2, [pc, #136]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	6013      	str	r3, [r2, #0]
    return;
 800c6b8:	e037      	b.n	800c72a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	4b1f      	ldr	r3, [pc, #124]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	0fdb      	lsrs	r3, r3, #31
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c6d2:	4b1a      	ldr	r3, [pc, #104]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c6da:	4a18      	ldr	r2, [pc, #96]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	e023      	b.n	800c72a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c6e2:	4b16      	ldr	r3, [pc, #88]	; (800c73c <sys_timeout_abs+0xd8>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	617b      	str	r3, [r7, #20]
 800c6e8:	e01a      	b.n	800c720 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00b      	beq.n	800c70a <sys_timeout_abs+0xa6>
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	0fdb      	lsrs	r3, r3, #31
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d007      	beq.n	800c71a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	601a      	str	r2, [r3, #0]
        break;
 800c718:	e007      	b.n	800c72a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e1      	bne.n	800c6ea <sys_timeout_abs+0x86>
 800c726:	e000      	b.n	800c72a <sys_timeout_abs+0xc6>
    return;
 800c728:	bf00      	nop
      }
    }
  }
}
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	08012d00 	.word	0x08012d00
 800c734:	08012d34 	.word	0x08012d34
 800c738:	08012d74 	.word	0x08012d74
 800c73c:	20005d38 	.word	0x20005d38

0800c740 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4798      	blx	r3

  now = sys_now();
 800c752:	f7f8 ff99 	bl	8005688 <sys_now>
 800c756:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <lwip_cyclic_timer+0x5c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4413      	add	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	0fdb      	lsrs	r3, r3, #31
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	4413      	add	r3, r2
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	4907      	ldr	r1, [pc, #28]	; (800c7a0 <lwip_cyclic_timer+0x60>)
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff ff6e 	bl	800c664 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c788:	e004      	b.n	800c794 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	4904      	ldr	r1, [pc, #16]	; (800c7a0 <lwip_cyclic_timer+0x60>)
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7ff ff68 	bl	800c664 <sys_timeout_abs>
}
 800c794:	bf00      	nop
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20005d3c 	.word	0x20005d3c
 800c7a0:	0800c741 	.word	0x0800c741

0800c7a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	607b      	str	r3, [r7, #4]
 800c7ae:	e00e      	b.n	800c7ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c7b0:	4a0b      	ldr	r2, [pc, #44]	; (800c7e0 <sys_timeouts_init+0x3c>)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	4a08      	ldr	r2, [pc, #32]	; (800c7e0 <sys_timeouts_init+0x3c>)
 800c7be:	4413      	add	r3, r2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4908      	ldr	r1, [pc, #32]	; (800c7e4 <sys_timeouts_init+0x40>)
 800c7c4:	f000 f810 	bl	800c7e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	607b      	str	r3, [r7, #4]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d9ed      	bls.n	800c7b0 <sys_timeouts_init+0xc>
  }
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	080138e0 	.word	0x080138e0
 800c7e4:	0800c741 	.word	0x0800c741

0800c7e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7fa:	d306      	bcc.n	800c80a <sys_timeout+0x22>
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <sys_timeout+0x40>)
 800c7fe:	f240 1229 	movw	r2, #297	; 0x129
 800c802:	490a      	ldr	r1, [pc, #40]	; (800c82c <sys_timeout+0x44>)
 800c804:	480a      	ldr	r0, [pc, #40]	; (800c830 <sys_timeout+0x48>)
 800c806:	f003 f8f5 	bl	800f9f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c80a:	f7f8 ff3d 	bl	8005688 <sys_now>
 800c80e:	4602      	mov	r2, r0
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	68b9      	ldr	r1, [r7, #8]
 800c81a:	6978      	ldr	r0, [r7, #20]
 800c81c:	f7ff ff22 	bl	800c664 <sys_timeout_abs>
#endif
}
 800c820:	bf00      	nop
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	08012d00 	.word	0x08012d00
 800c82c:	08012d9c 	.word	0x08012d9c
 800c830:	08012d74 	.word	0x08012d74

0800c834 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c83a:	f7f8 ff25 	bl	8005688 <sys_now>
 800c83e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c840:	4b1a      	ldr	r3, [pc, #104]	; (800c8ac <sys_check_timeouts+0x78>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <sys_check_timeouts+0x1a>
 800c84a:	f7f9 ff25 	bl	8006698 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c84e:	4b18      	ldr	r3, [pc, #96]	; (800c8b0 <sys_check_timeouts+0x7c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d022      	beq.n	800c8a0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	0fdb      	lsrs	r3, r3, #31
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d11a      	bne.n	800c8a4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a0f      	ldr	r2, [pc, #60]	; (800c8b0 <sys_check_timeouts+0x7c>)
 800c874:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	4a0b      	ldr	r2, [pc, #44]	; (800c8b4 <sys_check_timeouts+0x80>)
 800c888:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	2006      	movs	r0, #6
 800c88e:	f7f9 fc2b 	bl	80060e8 <memp_free>
    if (handler != NULL) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d0d3      	beq.n	800c840 <sys_check_timeouts+0xc>
      handler(arg);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6838      	ldr	r0, [r7, #0]
 800c89c:	4798      	blx	r3
  do {
 800c89e:	e7cf      	b.n	800c840 <sys_check_timeouts+0xc>
      return;
 800c8a0:	bf00      	nop
 800c8a2:	e000      	b.n	800c8a6 <sys_check_timeouts+0x72>
      return;
 800c8a4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20005ce5 	.word	0x20005ce5
 800c8b0:	20005d38 	.word	0x20005d38
 800c8b4:	20005d3c 	.word	0x20005d3c

0800c8b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c8bc:	f003 f8b2 	bl	800fa24 <rand>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	4b01      	ldr	r3, [pc, #4]	; (800c8d8 <udp_init+0x20>)
 800c8d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c8d4:	bf00      	nop
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20000010 	.word	0x20000010

0800c8dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c8e6:	4b17      	ldr	r3, [pc, #92]	; (800c944 <udp_new_port+0x68>)
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	b291      	uxth	r1, r2
 800c8ee:	4a15      	ldr	r2, [pc, #84]	; (800c944 <udp_new_port+0x68>)
 800c8f0:	8011      	strh	r1, [r2, #0]
 800c8f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d103      	bne.n	800c902 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c8fa:	4b12      	ldr	r3, [pc, #72]	; (800c944 <udp_new_port+0x68>)
 800c8fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c900:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c902:	4b11      	ldr	r3, [pc, #68]	; (800c948 <udp_new_port+0x6c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	603b      	str	r3, [r7, #0]
 800c908:	e011      	b.n	800c92e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	8a5a      	ldrh	r2, [r3, #18]
 800c90e:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <udp_new_port+0x68>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	429a      	cmp	r2, r3
 800c914:	d108      	bne.n	800c928 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c916:	88fb      	ldrh	r3, [r7, #6]
 800c918:	3301      	adds	r3, #1
 800c91a:	80fb      	strh	r3, [r7, #6]
 800c91c:	88fb      	ldrh	r3, [r7, #6]
 800c91e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c922:	d3e0      	bcc.n	800c8e6 <udp_new_port+0xa>
        return 0;
 800c924:	2300      	movs	r3, #0
 800c926:	e007      	b.n	800c938 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	603b      	str	r3, [r7, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1ea      	bne.n	800c90a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c934:	4b03      	ldr	r3, [pc, #12]	; (800c944 <udp_new_port+0x68>)
 800c936:	881b      	ldrh	r3, [r3, #0]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	370c      	adds	r7, #12
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	20000010 	.word	0x20000010
 800c948:	20005d44 	.word	0x20005d44

0800c94c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d105      	bne.n	800c96c <udp_input_local_match+0x20>
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <udp_input_local_match+0xb4>)
 800c962:	2287      	movs	r2, #135	; 0x87
 800c964:	4927      	ldr	r1, [pc, #156]	; (800ca04 <udp_input_local_match+0xb8>)
 800c966:	4828      	ldr	r0, [pc, #160]	; (800ca08 <udp_input_local_match+0xbc>)
 800c968:	f003 f844 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d105      	bne.n	800c97e <udp_input_local_match+0x32>
 800c972:	4b23      	ldr	r3, [pc, #140]	; (800ca00 <udp_input_local_match+0xb4>)
 800c974:	2288      	movs	r2, #136	; 0x88
 800c976:	4925      	ldr	r1, [pc, #148]	; (800ca0c <udp_input_local_match+0xc0>)
 800c978:	4823      	ldr	r0, [pc, #140]	; (800ca08 <udp_input_local_match+0xbc>)
 800c97a:	f003 f83b 	bl	800f9f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	7a1b      	ldrb	r3, [r3, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	7a1a      	ldrb	r2, [r3, #8]
 800c98a:	4b21      	ldr	r3, [pc, #132]	; (800ca10 <udp_input_local_match+0xc4>)
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c992:	3301      	adds	r3, #1
 800c994:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c996:	429a      	cmp	r2, r3
 800c998:	d001      	beq.n	800c99e <udp_input_local_match+0x52>
    return 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e02b      	b.n	800c9f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d018      	beq.n	800c9d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d013      	beq.n	800c9d2 <udp_input_local_match+0x86>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00f      	beq.n	800c9d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9b2:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <udp_input_local_match+0xc4>)
 800c9b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ba:	d00a      	beq.n	800c9d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <udp_input_local_match+0xc4>)
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	405a      	eors	r2, r3
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d110      	bne.n	800c9f4 <udp_input_local_match+0xa8>
          return 1;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e00f      	b.n	800c9f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <udp_input_local_match+0xa4>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <udp_input_local_match+0xa4>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <udp_input_local_match+0xc4>)
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d101      	bne.n	800c9f4 <udp_input_local_match+0xa8>
        return 1;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	08012de8 	.word	0x08012de8
 800ca04:	08012e18 	.word	0x08012e18
 800ca08:	08012e3c 	.word	0x08012e3c
 800ca0c:	08012e64 	.word	0x08012e64
 800ca10:	200005b8 	.word	0x200005b8

0800ca14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca14:	b590      	push	{r4, r7, lr}
 800ca16:	b08d      	sub	sp, #52	; 0x34
 800ca18:	af02      	add	r7, sp, #8
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d105      	bne.n	800ca34 <udp_input+0x20>
 800ca28:	4b7c      	ldr	r3, [pc, #496]	; (800cc1c <udp_input+0x208>)
 800ca2a:	22cf      	movs	r2, #207	; 0xcf
 800ca2c:	497c      	ldr	r1, [pc, #496]	; (800cc20 <udp_input+0x20c>)
 800ca2e:	487d      	ldr	r0, [pc, #500]	; (800cc24 <udp_input+0x210>)
 800ca30:	f002 ffe0 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <udp_input+0x32>
 800ca3a:	4b78      	ldr	r3, [pc, #480]	; (800cc1c <udp_input+0x208>)
 800ca3c:	22d0      	movs	r2, #208	; 0xd0
 800ca3e:	497a      	ldr	r1, [pc, #488]	; (800cc28 <udp_input+0x214>)
 800ca40:	4878      	ldr	r0, [pc, #480]	; (800cc24 <udp_input+0x210>)
 800ca42:	f002 ffd7 	bl	800f9f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	895b      	ldrh	r3, [r3, #10]
 800ca4a:	2b07      	cmp	r3, #7
 800ca4c:	d803      	bhi.n	800ca56 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7fa f95c 	bl	8006d0c <pbuf_free>
    goto end;
 800ca54:	e0de      	b.n	800cc14 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ca5c:	4b73      	ldr	r3, [pc, #460]	; (800cc2c <udp_input+0x218>)
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	4a72      	ldr	r2, [pc, #456]	; (800cc2c <udp_input+0x218>)
 800ca62:	6812      	ldr	r2, [r2, #0]
 800ca64:	4611      	mov	r1, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f002 f80a 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f8 fe94 	bl	80057a4 <lwip_htons>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	885b      	ldrh	r3, [r3, #2]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7f8 fe8c 	bl	80057a4 <lwip_htons>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ca90:	2300      	movs	r3, #0
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9c:	4b64      	ldr	r3, [pc, #400]	; (800cc30 <udp_input+0x21c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	627b      	str	r3, [r7, #36]	; 0x24
 800caa2:	e054      	b.n	800cb4e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	8a5b      	ldrh	r3, [r3, #18]
 800caa8:	89fa      	ldrh	r2, [r7, #14]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d14a      	bne.n	800cb44 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800caae:	7cfb      	ldrb	r3, [r7, #19]
 800cab0:	461a      	mov	r2, r3
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cab6:	f7ff ff49 	bl	800c94c <udp_input_local_match>
 800caba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d041      	beq.n	800cb44 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	7c1b      	ldrb	r3, [r3, #16]
 800cac4:	f003 0304 	and.w	r3, r3, #4
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d11d      	bne.n	800cb08 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	e017      	b.n	800cb08 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cad8:	7cfb      	ldrb	r3, [r7, #19]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d014      	beq.n	800cb08 <udp_input+0xf4>
 800cade:	4b53      	ldr	r3, [pc, #332]	; (800cc2c <udp_input+0x218>)
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae6:	d10f      	bne.n	800cb08 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	3304      	adds	r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d008      	beq.n	800cb08 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	3304      	adds	r3, #4
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d101      	bne.n	800cb08 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	8a9b      	ldrh	r3, [r3, #20]
 800cb0c:	8a3a      	ldrh	r2, [r7, #16]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d118      	bne.n	800cb44 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d005      	beq.n	800cb26 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	4b43      	ldr	r3, [pc, #268]	; (800cc2c <udp_input+0x218>)
 800cb20:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d10e      	bne.n	800cb44 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d014      	beq.n	800cb56 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	68da      	ldr	r2, [r3, #12]
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb34:	4b3e      	ldr	r3, [pc, #248]	; (800cc30 <udp_input+0x21c>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cb3c:	4a3c      	ldr	r2, [pc, #240]	; (800cc30 <udp_input+0x21c>)
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cb42:	e008      	b.n	800cb56 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1a7      	bne.n	800caa4 <udp_input+0x90>
 800cb54:	e000      	b.n	800cb58 <udp_input+0x144>
        break;
 800cb56:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <udp_input+0x14e>
    pcb = uncon_pcb;
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <udp_input+0x15a>
    for_us = 1;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	76fb      	strb	r3, [r7, #27]
 800cb6c:	e00a      	b.n	800cb84 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	3304      	adds	r3, #4
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	4b2d      	ldr	r3, [pc, #180]	; (800cc2c <udp_input+0x218>)
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2301      	moveq	r3, #1
 800cb7e:	2300      	movne	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cb84:	7efb      	ldrb	r3, [r7, #27]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d041      	beq.n	800cc0e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cb8a:	2108      	movs	r1, #8
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7fa f837 	bl	8006c00 <pbuf_remove_header>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00a      	beq.n	800cbae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cb98:	4b20      	ldr	r3, [pc, #128]	; (800cc1c <udp_input+0x208>)
 800cb9a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cb9e:	4925      	ldr	r1, [pc, #148]	; (800cc34 <udp_input+0x220>)
 800cba0:	4820      	ldr	r0, [pc, #128]	; (800cc24 <udp_input+0x210>)
 800cba2:	f002 ff27 	bl	800f9f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7fa f8b0 	bl	8006d0c <pbuf_free>
      goto end;
 800cbac:	e032      	b.n	800cc14 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d012      	beq.n	800cbda <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	699c      	ldr	r4, [r3, #24]
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	69d8      	ldr	r0, [r3, #28]
 800cbc4:	8a3b      	ldrh	r3, [r7, #16]
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <udp_input+0x224>)
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cbd0:	e021      	b.n	800cc16 <udp_input+0x202>
        pbuf_free(p);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7fa f89a 	bl	8006d0c <pbuf_free>
        goto end;
 800cbd8:	e01c      	b.n	800cc14 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbda:	7cfb      	ldrb	r3, [r7, #19]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d112      	bne.n	800cc06 <udp_input+0x1f2>
 800cbe0:	4b12      	ldr	r3, [pc, #72]	; (800cc2c <udp_input+0x218>)
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbe8:	2be0      	cmp	r3, #224	; 0xe0
 800cbea:	d00c      	beq.n	800cc06 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cbec:	4b0f      	ldr	r3, [pc, #60]	; (800cc2c <udp_input+0x218>)
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	b21b      	sxth	r3, r3
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7fa f874 	bl	8006ce6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cbfe:	2103      	movs	r1, #3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 fc1d 	bl	800e440 <icmp_dest_unreach>
      pbuf_free(p);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7fa f880 	bl	8006d0c <pbuf_free>
  return;
 800cc0c:	e003      	b.n	800cc16 <udp_input+0x202>
    pbuf_free(p);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fa f87c 	bl	8006d0c <pbuf_free>
  return;
 800cc14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc16:	372c      	adds	r7, #44	; 0x2c
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd90      	pop	{r4, r7, pc}
 800cc1c:	08012de8 	.word	0x08012de8
 800cc20:	08012e8c 	.word	0x08012e8c
 800cc24:	08012e3c 	.word	0x08012e3c
 800cc28:	08012ea4 	.word	0x08012ea4
 800cc2c:	200005b8 	.word	0x200005b8
 800cc30:	20005d44 	.word	0x20005d44
 800cc34:	08012ec0 	.word	0x08012ec0
 800cc38:	200005c8 	.word	0x200005c8

0800cc3c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <udp_send+0x24>
 800cc4c:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <udp_send+0x58>)
 800cc4e:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cc52:	4911      	ldr	r1, [pc, #68]	; (800cc98 <udp_send+0x5c>)
 800cc54:	4811      	ldr	r0, [pc, #68]	; (800cc9c <udp_send+0x60>)
 800cc56:	f002 fecd 	bl	800f9f4 <iprintf>
 800cc5a:	f06f 030f 	mvn.w	r3, #15
 800cc5e:	e015      	b.n	800cc8c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <udp_send+0x3e>
 800cc66:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <udp_send+0x58>)
 800cc68:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800cc6c:	490c      	ldr	r1, [pc, #48]	; (800cca0 <udp_send+0x64>)
 800cc6e:	480b      	ldr	r0, [pc, #44]	; (800cc9c <udp_send+0x60>)
 800cc70:	f002 fec0 	bl	800f9f4 <iprintf>
 800cc74:	f06f 030f 	mvn.w	r3, #15
 800cc78:	e008      	b.n	800cc8c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	1d1a      	adds	r2, r3, #4
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	8a9b      	ldrh	r3, [r3, #20]
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f80d 	bl	800cca4 <udp_sendto>
 800cc8a:	4603      	mov	r3, r0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	08012de8 	.word	0x08012de8
 800cc98:	08012edc 	.word	0x08012edc
 800cc9c:	08012e3c 	.word	0x08012e3c
 800cca0:	08012ef4 	.word	0x08012ef4

0800cca4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d109      	bne.n	800cccc <udp_sendto+0x28>
 800ccb8:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <udp_sendto+0xa4>)
 800ccba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ccbe:	4923      	ldr	r1, [pc, #140]	; (800cd4c <udp_sendto+0xa8>)
 800ccc0:	4823      	ldr	r0, [pc, #140]	; (800cd50 <udp_sendto+0xac>)
 800ccc2:	f002 fe97 	bl	800f9f4 <iprintf>
 800ccc6:	f06f 030f 	mvn.w	r3, #15
 800ccca:	e038      	b.n	800cd3e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d109      	bne.n	800cce6 <udp_sendto+0x42>
 800ccd2:	4b1d      	ldr	r3, [pc, #116]	; (800cd48 <udp_sendto+0xa4>)
 800ccd4:	f240 2219 	movw	r2, #537	; 0x219
 800ccd8:	491e      	ldr	r1, [pc, #120]	; (800cd54 <udp_sendto+0xb0>)
 800ccda:	481d      	ldr	r0, [pc, #116]	; (800cd50 <udp_sendto+0xac>)
 800ccdc:	f002 fe8a 	bl	800f9f4 <iprintf>
 800cce0:	f06f 030f 	mvn.w	r3, #15
 800cce4:	e02b      	b.n	800cd3e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d109      	bne.n	800cd00 <udp_sendto+0x5c>
 800ccec:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <udp_sendto+0xa4>)
 800ccee:	f240 221a 	movw	r2, #538	; 0x21a
 800ccf2:	4919      	ldr	r1, [pc, #100]	; (800cd58 <udp_sendto+0xb4>)
 800ccf4:	4816      	ldr	r0, [pc, #88]	; (800cd50 <udp_sendto+0xac>)
 800ccf6:	f002 fe7d 	bl	800f9f4 <iprintf>
 800ccfa:	f06f 030f 	mvn.w	r3, #15
 800ccfe:	e01e      	b.n	800cd3e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7a1b      	ldrb	r3, [r3, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d006      	beq.n	800cd16 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	7a1b      	ldrb	r3, [r3, #8]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f9 fc9d 	bl	800664c <netif_get_by_index>
 800cd12:	6178      	str	r0, [r7, #20]
 800cd14:	e003      	b.n	800cd1e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f001 fc1c 	bl	800e554 <ip4_route>
 800cd1c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800cd24:	f06f 0303 	mvn.w	r3, #3
 800cd28:	e009      	b.n	800cd3e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cd2a:	887a      	ldrh	r2, [r7, #2]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	4613      	mov	r3, r2
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 f810 	bl	800cd5c <udp_sendto_if>
 800cd3c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	08012de8 	.word	0x08012de8
 800cd4c:	08012f0c 	.word	0x08012f0c
 800cd50:	08012e3c 	.word	0x08012e3c
 800cd54:	08012f24 	.word	0x08012f24
 800cd58:	08012f40 	.word	0x08012f40

0800cd5c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af02      	add	r7, sp, #8
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d109      	bne.n	800cd84 <udp_sendto_if+0x28>
 800cd70:	4b2e      	ldr	r3, [pc, #184]	; (800ce2c <udp_sendto_if+0xd0>)
 800cd72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd76:	492e      	ldr	r1, [pc, #184]	; (800ce30 <udp_sendto_if+0xd4>)
 800cd78:	482e      	ldr	r0, [pc, #184]	; (800ce34 <udp_sendto_if+0xd8>)
 800cd7a:	f002 fe3b 	bl	800f9f4 <iprintf>
 800cd7e:	f06f 030f 	mvn.w	r3, #15
 800cd82:	e04f      	b.n	800ce24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d109      	bne.n	800cd9e <udp_sendto_if+0x42>
 800cd8a:	4b28      	ldr	r3, [pc, #160]	; (800ce2c <udp_sendto_if+0xd0>)
 800cd8c:	f240 2281 	movw	r2, #641	; 0x281
 800cd90:	4929      	ldr	r1, [pc, #164]	; (800ce38 <udp_sendto_if+0xdc>)
 800cd92:	4828      	ldr	r0, [pc, #160]	; (800ce34 <udp_sendto_if+0xd8>)
 800cd94:	f002 fe2e 	bl	800f9f4 <iprintf>
 800cd98:	f06f 030f 	mvn.w	r3, #15
 800cd9c:	e042      	b.n	800ce24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d109      	bne.n	800cdb8 <udp_sendto_if+0x5c>
 800cda4:	4b21      	ldr	r3, [pc, #132]	; (800ce2c <udp_sendto_if+0xd0>)
 800cda6:	f240 2282 	movw	r2, #642	; 0x282
 800cdaa:	4924      	ldr	r1, [pc, #144]	; (800ce3c <udp_sendto_if+0xe0>)
 800cdac:	4821      	ldr	r0, [pc, #132]	; (800ce34 <udp_sendto_if+0xd8>)
 800cdae:	f002 fe21 	bl	800f9f4 <iprintf>
 800cdb2:	f06f 030f 	mvn.w	r3, #15
 800cdb6:	e035      	b.n	800ce24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d109      	bne.n	800cdd2 <udp_sendto_if+0x76>
 800cdbe:	4b1b      	ldr	r3, [pc, #108]	; (800ce2c <udp_sendto_if+0xd0>)
 800cdc0:	f240 2283 	movw	r2, #643	; 0x283
 800cdc4:	491e      	ldr	r1, [pc, #120]	; (800ce40 <udp_sendto_if+0xe4>)
 800cdc6:	481b      	ldr	r0, [pc, #108]	; (800ce34 <udp_sendto_if+0xd8>)
 800cdc8:	f002 fe14 	bl	800f9f4 <iprintf>
 800cdcc:	f06f 030f 	mvn.w	r3, #15
 800cdd0:	e028      	b.n	800ce24 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d009      	beq.n	800cdec <udp_sendto_if+0x90>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d005      	beq.n	800cdec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cde8:	2be0      	cmp	r3, #224	; 0xe0
 800cdea:	d103      	bne.n	800cdf4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e00b      	b.n	800ce0c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d002      	beq.n	800ce08 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ce02:	f06f 0303 	mvn.w	r3, #3
 800ce06:	e00d      	b.n	800ce24 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ce0c:	887a      	ldrh	r2, [r7, #2]
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4613      	mov	r3, r2
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f811 	bl	800ce44 <udp_sendto_if_src>
 800ce22:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3718      	adds	r7, #24
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08012de8 	.word	0x08012de8
 800ce30:	08012f5c 	.word	0x08012f5c
 800ce34:	08012e3c 	.word	0x08012e3c
 800ce38:	08012f78 	.word	0x08012f78
 800ce3c:	08012f94 	.word	0x08012f94
 800ce40:	08012fb4 	.word	0x08012fb4

0800ce44 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08c      	sub	sp, #48	; 0x30
 800ce48:	af04      	add	r7, sp, #16
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
 800ce50:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d109      	bne.n	800ce6c <udp_sendto_if_src+0x28>
 800ce58:	4b65      	ldr	r3, [pc, #404]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800ce5a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ce5e:	4965      	ldr	r1, [pc, #404]	; (800cff4 <udp_sendto_if_src+0x1b0>)
 800ce60:	4865      	ldr	r0, [pc, #404]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800ce62:	f002 fdc7 	bl	800f9f4 <iprintf>
 800ce66:	f06f 030f 	mvn.w	r3, #15
 800ce6a:	e0bc      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d109      	bne.n	800ce86 <udp_sendto_if_src+0x42>
 800ce72:	4b5f      	ldr	r3, [pc, #380]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800ce74:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ce78:	4960      	ldr	r1, [pc, #384]	; (800cffc <udp_sendto_if_src+0x1b8>)
 800ce7a:	485f      	ldr	r0, [pc, #380]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800ce7c:	f002 fdba 	bl	800f9f4 <iprintf>
 800ce80:	f06f 030f 	mvn.w	r3, #15
 800ce84:	e0af      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d109      	bne.n	800cea0 <udp_sendto_if_src+0x5c>
 800ce8c:	4b58      	ldr	r3, [pc, #352]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800ce8e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ce92:	495b      	ldr	r1, [pc, #364]	; (800d000 <udp_sendto_if_src+0x1bc>)
 800ce94:	4858      	ldr	r0, [pc, #352]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800ce96:	f002 fdad 	bl	800f9f4 <iprintf>
 800ce9a:	f06f 030f 	mvn.w	r3, #15
 800ce9e:	e0a2      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d109      	bne.n	800ceba <udp_sendto_if_src+0x76>
 800cea6:	4b52      	ldr	r3, [pc, #328]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800cea8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ceac:	4955      	ldr	r1, [pc, #340]	; (800d004 <udp_sendto_if_src+0x1c0>)
 800ceae:	4852      	ldr	r0, [pc, #328]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800ceb0:	f002 fda0 	bl	800f9f4 <iprintf>
 800ceb4:	f06f 030f 	mvn.w	r3, #15
 800ceb8:	e095      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ceba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d109      	bne.n	800ced4 <udp_sendto_if_src+0x90>
 800cec0:	4b4b      	ldr	r3, [pc, #300]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800cec2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cec6:	4950      	ldr	r1, [pc, #320]	; (800d008 <udp_sendto_if_src+0x1c4>)
 800cec8:	484b      	ldr	r0, [pc, #300]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800ceca:	f002 fd93 	bl	800f9f4 <iprintf>
 800cece:	f06f 030f 	mvn.w	r3, #15
 800ced2:	e088      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	8a5b      	ldrh	r3, [r3, #18]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10f      	bne.n	800cefc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cedc:	68f9      	ldr	r1, [r7, #12]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	8a5b      	ldrh	r3, [r3, #18]
 800cee2:	461a      	mov	r2, r3
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 f893 	bl	800d010 <udp_bind>
 800ceea:	4603      	mov	r3, r0
 800ceec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ceee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800cef6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cefa:	e074      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	891b      	ldrh	r3, [r3, #8]
 800cf00:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d902      	bls.n	800cf0e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800cf08:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0c:	e06b      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800cf0e:	2108      	movs	r1, #8
 800cf10:	68b8      	ldr	r0, [r7, #8]
 800cf12:	f7f9 fe65 	bl	8006be0 <pbuf_add_header>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d015      	beq.n	800cf48 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cf1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf20:	2108      	movs	r1, #8
 800cf22:	2022      	movs	r0, #34	; 0x22
 800cf24:	f7f9 fc0e 	bl	8006744 <pbuf_alloc>
 800cf28:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d102      	bne.n	800cf36 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800cf30:	f04f 33ff 	mov.w	r3, #4294967295
 800cf34:	e057      	b.n	800cfe6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	891b      	ldrh	r3, [r3, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d006      	beq.n	800cf4c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	69f8      	ldr	r0, [r7, #28]
 800cf42:	f7f9 fffb 	bl	8006f3c <pbuf_chain>
 800cf46:	e001      	b.n	800cf4c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	895b      	ldrh	r3, [r3, #10]
 800cf50:	2b07      	cmp	r3, #7
 800cf52:	d806      	bhi.n	800cf62 <udp_sendto_if_src+0x11e>
 800cf54:	4b26      	ldr	r3, [pc, #152]	; (800cff0 <udp_sendto_if_src+0x1ac>)
 800cf56:	f240 320d 	movw	r2, #781	; 0x30d
 800cf5a:	492c      	ldr	r1, [pc, #176]	; (800d00c <udp_sendto_if_src+0x1c8>)
 800cf5c:	4826      	ldr	r0, [pc, #152]	; (800cff8 <udp_sendto_if_src+0x1b4>)
 800cf5e:	f002 fd49 	bl	800f9f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8a5b      	ldrh	r3, [r3, #18]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f8 fc19 	bl	80057a4 <lwip_htons>
 800cf72:	4603      	mov	r3, r0
 800cf74:	461a      	mov	r2, r3
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cf7a:	887b      	ldrh	r3, [r7, #2]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f8 fc11 	bl	80057a4 <lwip_htons>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461a      	mov	r2, r3
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	719a      	strb	r2, [r3, #6]
 800cf90:	2200      	movs	r2, #0
 800cf92:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	891b      	ldrh	r3, [r3, #8]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7f8 fc03 	bl	80057a4 <lwip_htons>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800cfa6:	2311      	movs	r3, #17
 800cfa8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	7adb      	ldrb	r3, [r3, #11]
 800cfae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	7a9b      	ldrb	r3, [r3, #10]
 800cfb4:	7cb9      	ldrb	r1, [r7, #18]
 800cfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfb8:	9202      	str	r2, [sp, #8]
 800cfba:	7cfa      	ldrb	r2, [r7, #19]
 800cfbc:	9201      	str	r2, [sp, #4]
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfc6:	69f8      	ldr	r0, [r7, #28]
 800cfc8:	f001 fcac 	bl	800e924 <ip4_output_if_src>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800cfd0:	69fa      	ldr	r2, [r7, #28]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d004      	beq.n	800cfe2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800cfd8:	69f8      	ldr	r0, [r7, #28]
 800cfda:	f7f9 fe97 	bl	8006d0c <pbuf_free>
    q = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800cfe2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	08012de8 	.word	0x08012de8
 800cff4:	08012fd4 	.word	0x08012fd4
 800cff8:	08012e3c 	.word	0x08012e3c
 800cffc:	08012ff4 	.word	0x08012ff4
 800d000:	08013014 	.word	0x08013014
 800d004:	08013038 	.word	0x08013038
 800d008:	0801305c 	.word	0x0801305c
 800d00c:	08013080 	.word	0x08013080

0800d010 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	4613      	mov	r3, r2
 800d01c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d024:	4b39      	ldr	r3, [pc, #228]	; (800d10c <udp_bind+0xfc>)
 800d026:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d109      	bne.n	800d042 <udp_bind+0x32>
 800d02e:	4b38      	ldr	r3, [pc, #224]	; (800d110 <udp_bind+0x100>)
 800d030:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d034:	4937      	ldr	r1, [pc, #220]	; (800d114 <udp_bind+0x104>)
 800d036:	4838      	ldr	r0, [pc, #224]	; (800d118 <udp_bind+0x108>)
 800d038:	f002 fcdc 	bl	800f9f4 <iprintf>
 800d03c:	f06f 030f 	mvn.w	r3, #15
 800d040:	e060      	b.n	800d104 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d042:	2300      	movs	r3, #0
 800d044:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d046:	4b35      	ldr	r3, [pc, #212]	; (800d11c <udp_bind+0x10c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	617b      	str	r3, [r7, #20]
 800d04c:	e009      	b.n	800d062 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	429a      	cmp	r2, r3
 800d054:	d102      	bne.n	800d05c <udp_bind+0x4c>
      rebind = 1;
 800d056:	2301      	movs	r3, #1
 800d058:	74fb      	strb	r3, [r7, #19]
      break;
 800d05a:	e005      	b.n	800d068 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1f2      	bne.n	800d04e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d068:	88fb      	ldrh	r3, [r7, #6]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <udp_bind+0x72>
    port = udp_new_port();
 800d06e:	f7ff fc35 	bl	800c8dc <udp_new_port>
 800d072:	4603      	mov	r3, r0
 800d074:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d12c      	bne.n	800d0d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d07c:	f06f 0307 	mvn.w	r3, #7
 800d080:	e040      	b.n	800d104 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d082:	4b26      	ldr	r3, [pc, #152]	; (800d11c <udp_bind+0x10c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	617b      	str	r3, [r7, #20]
 800d088:	e022      	b.n	800d0d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d01b      	beq.n	800d0ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	8a5b      	ldrh	r3, [r3, #18]
 800d096:	88fa      	ldrh	r2, [r7, #6]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d116      	bne.n	800d0ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d00d      	beq.n	800d0c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00a      	beq.n	800d0c4 <udp_bind+0xb4>
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d006      	beq.n	800d0c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d0b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d0c4:	f06f 0307 	mvn.w	r3, #7
 800d0c8:	e01c      	b.n	800d104 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1d9      	bne.n	800d08a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <udp_bind+0xd2>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	e000      	b.n	800d0e4 <udp_bind+0xd4>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	88fa      	ldrh	r2, [r7, #6]
 800d0ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d0ee:	7cfb      	ldrb	r3, [r7, #19]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d106      	bne.n	800d102 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d0f4:	4b09      	ldr	r3, [pc, #36]	; (800d11c <udp_bind+0x10c>)
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d0fc:	4a07      	ldr	r2, [pc, #28]	; (800d11c <udp_bind+0x10c>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	080138f8 	.word	0x080138f8
 800d110:	08012de8 	.word	0x08012de8
 800d114:	080130b0 	.word	0x080130b0
 800d118:	08012e3c 	.word	0x08012e3c
 800d11c:	20005d44 	.word	0x20005d44

0800d120 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d109      	bne.n	800d148 <udp_connect+0x28>
 800d134:	4b2c      	ldr	r3, [pc, #176]	; (800d1e8 <udp_connect+0xc8>)
 800d136:	f240 4235 	movw	r2, #1077	; 0x435
 800d13a:	492c      	ldr	r1, [pc, #176]	; (800d1ec <udp_connect+0xcc>)
 800d13c:	482c      	ldr	r0, [pc, #176]	; (800d1f0 <udp_connect+0xd0>)
 800d13e:	f002 fc59 	bl	800f9f4 <iprintf>
 800d142:	f06f 030f 	mvn.w	r3, #15
 800d146:	e04b      	b.n	800d1e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d109      	bne.n	800d162 <udp_connect+0x42>
 800d14e:	4b26      	ldr	r3, [pc, #152]	; (800d1e8 <udp_connect+0xc8>)
 800d150:	f240 4236 	movw	r2, #1078	; 0x436
 800d154:	4927      	ldr	r1, [pc, #156]	; (800d1f4 <udp_connect+0xd4>)
 800d156:	4826      	ldr	r0, [pc, #152]	; (800d1f0 <udp_connect+0xd0>)
 800d158:	f002 fc4c 	bl	800f9f4 <iprintf>
 800d15c:	f06f 030f 	mvn.w	r3, #15
 800d160:	e03e      	b.n	800d1e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	8a5b      	ldrh	r3, [r3, #18]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10f      	bne.n	800d18a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d16a:	68f9      	ldr	r1, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	8a5b      	ldrh	r3, [r3, #18]
 800d170:	461a      	mov	r2, r3
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff ff4c 	bl	800d010 <udp_bind>
 800d178:	4603      	mov	r3, r0
 800d17a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d17c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <udp_connect+0x6a>
      return err;
 800d184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d188:	e02a      	b.n	800d1e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <udp_connect+0x76>
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	e000      	b.n	800d198 <udp_connect+0x78>
 800d196:	2300      	movs	r3, #0
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	88fa      	ldrh	r2, [r7, #6]
 800d1a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	7c1b      	ldrb	r3, [r3, #16]
 800d1a6:	f043 0304 	orr.w	r3, r3, #4
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1b0:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <udp_connect+0xd8>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e008      	b.n	800d1ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d101      	bne.n	800d1c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e00d      	b.n	800d1e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1f3      	bne.n	800d1b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d1d0:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <udp_connect+0xd8>)
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d1d8:	4a07      	ldr	r2, [pc, #28]	; (800d1f8 <udp_connect+0xd8>)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	08012de8 	.word	0x08012de8
 800d1ec:	080130c8 	.word	0x080130c8
 800d1f0:	08012e3c 	.word	0x08012e3c
 800d1f4:	080130e4 	.word	0x080130e4
 800d1f8:	20005d44 	.word	0x20005d44

0800d1fc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d107      	bne.n	800d21a <udp_disconnect+0x1e>
 800d20a:	4b0d      	ldr	r3, [pc, #52]	; (800d240 <udp_disconnect+0x44>)
 800d20c:	f240 426a 	movw	r2, #1130	; 0x46a
 800d210:	490c      	ldr	r1, [pc, #48]	; (800d244 <udp_disconnect+0x48>)
 800d212:	480d      	ldr	r0, [pc, #52]	; (800d248 <udp_disconnect+0x4c>)
 800d214:	f002 fbee 	bl	800f9f4 <iprintf>
 800d218:	e00f      	b.n	800d23a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7c1b      	ldrb	r3, [r3, #16]
 800d230:	f023 0304 	bic.w	r3, r3, #4
 800d234:	b2da      	uxtb	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	741a      	strb	r2, [r3, #16]
}
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	08012de8 	.word	0x08012de8
 800d244:	08013100 	.word	0x08013100
 800d248:	08012e3c 	.word	0x08012e3c

0800d24c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d107      	bne.n	800d26e <udp_recv+0x22>
 800d25e:	4b08      	ldr	r3, [pc, #32]	; (800d280 <udp_recv+0x34>)
 800d260:	f240 428a 	movw	r2, #1162	; 0x48a
 800d264:	4907      	ldr	r1, [pc, #28]	; (800d284 <udp_recv+0x38>)
 800d266:	4808      	ldr	r0, [pc, #32]	; (800d288 <udp_recv+0x3c>)
 800d268:	f002 fbc4 	bl	800f9f4 <iprintf>
 800d26c:	e005      	b.n	800d27a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	61da      	str	r2, [r3, #28]
}
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	08012de8 	.word	0x08012de8
 800d284:	0801311c 	.word	0x0801311c
 800d288:	08012e3c 	.word	0x08012e3c

0800d28c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d107      	bne.n	800d2aa <udp_remove+0x1e>
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <udp_remove+0x74>)
 800d29c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d2a0:	4918      	ldr	r1, [pc, #96]	; (800d304 <udp_remove+0x78>)
 800d2a2:	4819      	ldr	r0, [pc, #100]	; (800d308 <udp_remove+0x7c>)
 800d2a4:	f002 fba6 	bl	800f9f4 <iprintf>
 800d2a8:	e026      	b.n	800d2f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d2aa:	4b18      	ldr	r3, [pc, #96]	; (800d30c <udp_remove+0x80>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d105      	bne.n	800d2c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d2b4:	4b15      	ldr	r3, [pc, #84]	; (800d30c <udp_remove+0x80>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	4a14      	ldr	r2, [pc, #80]	; (800d30c <udp_remove+0x80>)
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	e017      	b.n	800d2f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2c0:	4b12      	ldr	r3, [pc, #72]	; (800d30c <udp_remove+0x80>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	60fb      	str	r3, [r7, #12]
 800d2c6:	e010      	b.n	800d2ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d009      	beq.n	800d2e4 <udp_remove+0x58>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d104      	bne.n	800d2e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	68da      	ldr	r2, [r3, #12]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	60da      	str	r2, [r3, #12]
        break;
 800d2e2:	e005      	b.n	800d2f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1eb      	bne.n	800d2c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f7f8 fef8 	bl	80060e8 <memp_free>
}
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	08012de8 	.word	0x08012de8
 800d304:	08013134 	.word	0x08013134
 800d308:	08012e3c 	.word	0x08012e3c
 800d30c:	20005d44 	.word	0x20005d44

0800d310 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d316:	2000      	movs	r0, #0
 800d318:	f7f8 fe9a 	bl	8006050 <memp_malloc>
 800d31c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d007      	beq.n	800d334 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d324:	2220      	movs	r2, #32
 800d326:	2100      	movs	r1, #0
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f002 fb5b 	bl	800f9e4 <memset>
    pcb->ttl = UDP_TTL;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	22ff      	movs	r2, #255	; 0xff
 800d332:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d334:	687b      	ldr	r3, [r7, #4]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d01e      	beq.n	800d38e <udp_netif_ip_addr_changed+0x4e>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01a      	beq.n	800d38e <udp_netif_ip_addr_changed+0x4e>
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d017      	beq.n	800d38e <udp_netif_ip_addr_changed+0x4e>
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d013      	beq.n	800d38e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d366:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <udp_netif_ip_addr_changed+0x5c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	e00c      	b.n	800d388 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d103      	bne.n	800d382 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1ef      	bne.n	800d36e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d38e:	bf00      	nop
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	20005d44 	.word	0x20005d44

0800d3a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d3a8:	4915      	ldr	r1, [pc, #84]	; (800d400 <etharp_free_entry+0x60>)
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	4413      	add	r3, r2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	440b      	add	r3, r1
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d013      	beq.n	800d3e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d3bc:	4910      	ldr	r1, [pc, #64]	; (800d400 <etharp_free_entry+0x60>)
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	4413      	add	r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	440b      	add	r3, r1
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7f9 fc9d 	bl	8006d0c <pbuf_free>
    arp_table[i].q = NULL;
 800d3d2:	490b      	ldr	r1, [pc, #44]	; (800d400 <etharp_free_entry+0x60>)
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	4413      	add	r3, r2
 800d3dc:	00db      	lsls	r3, r3, #3
 800d3de:	440b      	add	r3, r1
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d3e4:	4906      	ldr	r1, [pc, #24]	; (800d400 <etharp_free_entry+0x60>)
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	440b      	add	r3, r1
 800d3f2:	3314      	adds	r3, #20
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20005d48 	.word	0x20005d48

0800d404 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d40a:	2300      	movs	r3, #0
 800d40c:	607b      	str	r3, [r7, #4]
 800d40e:	e096      	b.n	800d53e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d410:	494f      	ldr	r1, [pc, #316]	; (800d550 <etharp_tmr+0x14c>)
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4613      	mov	r3, r2
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	4413      	add	r3, r2
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	440b      	add	r3, r1
 800d41e:	3314      	adds	r3, #20
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 8086 	beq.w	800d538 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d42c:	4948      	ldr	r1, [pc, #288]	; (800d550 <etharp_tmr+0x14c>)
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	4613      	mov	r3, r2
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	4413      	add	r3, r2
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	440b      	add	r3, r1
 800d43a:	3312      	adds	r3, #18
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	b298      	uxth	r0, r3
 800d442:	4943      	ldr	r1, [pc, #268]	; (800d550 <etharp_tmr+0x14c>)
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	4613      	mov	r3, r2
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	4413      	add	r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	440b      	add	r3, r1
 800d450:	3312      	adds	r3, #18
 800d452:	4602      	mov	r2, r0
 800d454:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d456:	493e      	ldr	r1, [pc, #248]	; (800d550 <etharp_tmr+0x14c>)
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	4413      	add	r3, r2
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	440b      	add	r3, r1
 800d464:	3312      	adds	r3, #18
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d46c:	d215      	bcs.n	800d49a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d46e:	4938      	ldr	r1, [pc, #224]	; (800d550 <etharp_tmr+0x14c>)
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	4613      	mov	r3, r2
 800d474:	005b      	lsls	r3, r3, #1
 800d476:	4413      	add	r3, r2
 800d478:	00db      	lsls	r3, r3, #3
 800d47a:	440b      	add	r3, r1
 800d47c:	3314      	adds	r3, #20
 800d47e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d480:	2b01      	cmp	r3, #1
 800d482:	d10e      	bne.n	800d4a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d484:	4932      	ldr	r1, [pc, #200]	; (800d550 <etharp_tmr+0x14c>)
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	4613      	mov	r3, r2
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	4413      	add	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	440b      	add	r3, r1
 800d492:	3312      	adds	r3, #18
 800d494:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d496:	2b04      	cmp	r3, #4
 800d498:	d903      	bls.n	800d4a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff ff80 	bl	800d3a0 <etharp_free_entry>
 800d4a0:	e04a      	b.n	800d538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d4a2:	492b      	ldr	r1, [pc, #172]	; (800d550 <etharp_tmr+0x14c>)
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	4413      	add	r3, r2
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	440b      	add	r3, r1
 800d4b0:	3314      	adds	r3, #20
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	2b03      	cmp	r3, #3
 800d4b6:	d10a      	bne.n	800d4ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d4b8:	4925      	ldr	r1, [pc, #148]	; (800d550 <etharp_tmr+0x14c>)
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	4413      	add	r3, r2
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	440b      	add	r3, r1
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	2204      	movs	r2, #4
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	e034      	b.n	800d538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d4ce:	4920      	ldr	r1, [pc, #128]	; (800d550 <etharp_tmr+0x14c>)
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4413      	add	r3, r2
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	440b      	add	r3, r1
 800d4dc:	3314      	adds	r3, #20
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b04      	cmp	r3, #4
 800d4e2:	d10a      	bne.n	800d4fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d4e4:	491a      	ldr	r1, [pc, #104]	; (800d550 <etharp_tmr+0x14c>)
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	440b      	add	r3, r1
 800d4f2:	3314      	adds	r3, #20
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	e01e      	b.n	800d538 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d4fa:	4915      	ldr	r1, [pc, #84]	; (800d550 <etharp_tmr+0x14c>)
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4613      	mov	r3, r2
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	4413      	add	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	440b      	add	r3, r1
 800d508:	3314      	adds	r3, #20
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d113      	bne.n	800d538 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d510:	490f      	ldr	r1, [pc, #60]	; (800d550 <etharp_tmr+0x14c>)
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	440b      	add	r3, r1
 800d51e:	3308      	adds	r3, #8
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	4613      	mov	r3, r2
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	4413      	add	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4a08      	ldr	r2, [pc, #32]	; (800d550 <etharp_tmr+0x14c>)
 800d52e:	4413      	add	r3, r2
 800d530:	3304      	adds	r3, #4
 800d532:	4619      	mov	r1, r3
 800d534:	f000 fe6e 	bl	800e214 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3301      	adds	r3, #1
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b09      	cmp	r3, #9
 800d542:	f77f af65 	ble.w	800d410 <etharp_tmr+0xc>
      }
    }
  }
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20005d48 	.word	0x20005d48

0800d554 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	; 0x28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	460b      	mov	r3, r1
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d562:	230a      	movs	r3, #10
 800d564:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d566:	230a      	movs	r3, #10
 800d568:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d56a:	230a      	movs	r3, #10
 800d56c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d56e:	2300      	movs	r3, #0
 800d570:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d572:	230a      	movs	r3, #10
 800d574:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	83bb      	strh	r3, [r7, #28]
 800d57a:	2300      	movs	r3, #0
 800d57c:	837b      	strh	r3, [r7, #26]
 800d57e:	2300      	movs	r3, #0
 800d580:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d582:	2300      	movs	r3, #0
 800d584:	843b      	strh	r3, [r7, #32]
 800d586:	e0ae      	b.n	800d6e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d58c:	49a6      	ldr	r1, [pc, #664]	; (800d828 <etharp_find_entry+0x2d4>)
 800d58e:	4613      	mov	r3, r2
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	4413      	add	r3, r2
 800d594:	00db      	lsls	r3, r3, #3
 800d596:	440b      	add	r3, r1
 800d598:	3314      	adds	r3, #20
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d59e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5a2:	2b0a      	cmp	r3, #10
 800d5a4:	d105      	bne.n	800d5b2 <etharp_find_entry+0x5e>
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d102      	bne.n	800d5b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d5ac:	8c3b      	ldrh	r3, [r7, #32]
 800d5ae:	847b      	strh	r3, [r7, #34]	; 0x22
 800d5b0:	e095      	b.n	800d6de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d5b2:	7dfb      	ldrb	r3, [r7, #23]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 8092 	beq.w	800d6de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d5ba:	7dfb      	ldrb	r3, [r7, #23]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d009      	beq.n	800d5d4 <etharp_find_entry+0x80>
 800d5c0:	7dfb      	ldrb	r3, [r7, #23]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d806      	bhi.n	800d5d4 <etharp_find_entry+0x80>
 800d5c6:	4b99      	ldr	r3, [pc, #612]	; (800d82c <etharp_find_entry+0x2d8>)
 800d5c8:	f240 1223 	movw	r2, #291	; 0x123
 800d5cc:	4998      	ldr	r1, [pc, #608]	; (800d830 <etharp_find_entry+0x2dc>)
 800d5ce:	4899      	ldr	r0, [pc, #612]	; (800d834 <etharp_find_entry+0x2e0>)
 800d5d0:	f002 fa10 	bl	800f9f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d020      	beq.n	800d61c <etharp_find_entry+0xc8>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6819      	ldr	r1, [r3, #0]
 800d5de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5e2:	4891      	ldr	r0, [pc, #580]	; (800d828 <etharp_find_entry+0x2d4>)
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	4403      	add	r3, r0
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d112      	bne.n	800d61c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00c      	beq.n	800d616 <etharp_find_entry+0xc2>
 800d5fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d600:	4989      	ldr	r1, [pc, #548]	; (800d828 <etharp_find_entry+0x2d4>)
 800d602:	4613      	mov	r3, r2
 800d604:	005b      	lsls	r3, r3, #1
 800d606:	4413      	add	r3, r2
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	440b      	add	r3, r1
 800d60c:	3308      	adds	r3, #8
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	429a      	cmp	r2, r3
 800d614:	d102      	bne.n	800d61c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d61a:	e100      	b.n	800d81e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d140      	bne.n	800d6a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d626:	4980      	ldr	r1, [pc, #512]	; (800d828 <etharp_find_entry+0x2d4>)
 800d628:	4613      	mov	r3, r2
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	4413      	add	r3, r2
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	440b      	add	r3, r1
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d01a      	beq.n	800d66e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d63c:	497a      	ldr	r1, [pc, #488]	; (800d828 <etharp_find_entry+0x2d4>)
 800d63e:	4613      	mov	r3, r2
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	440b      	add	r3, r1
 800d648:	3312      	adds	r3, #18
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	8bba      	ldrh	r2, [r7, #28]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d845      	bhi.n	800d6de <etharp_find_entry+0x18a>
            old_queue = i;
 800d652:	8c3b      	ldrh	r3, [r7, #32]
 800d654:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d656:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d65a:	4973      	ldr	r1, [pc, #460]	; (800d828 <etharp_find_entry+0x2d4>)
 800d65c:	4613      	mov	r3, r2
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	4413      	add	r3, r2
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	440b      	add	r3, r1
 800d666:	3312      	adds	r3, #18
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	83bb      	strh	r3, [r7, #28]
 800d66c:	e037      	b.n	800d6de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d66e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d672:	496d      	ldr	r1, [pc, #436]	; (800d828 <etharp_find_entry+0x2d4>)
 800d674:	4613      	mov	r3, r2
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	4413      	add	r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	440b      	add	r3, r1
 800d67e:	3312      	adds	r3, #18
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	8b7a      	ldrh	r2, [r7, #26]
 800d684:	429a      	cmp	r2, r3
 800d686:	d82a      	bhi.n	800d6de <etharp_find_entry+0x18a>
            old_pending = i;
 800d688:	8c3b      	ldrh	r3, [r7, #32]
 800d68a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d68c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d690:	4965      	ldr	r1, [pc, #404]	; (800d828 <etharp_find_entry+0x2d4>)
 800d692:	4613      	mov	r3, r2
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4413      	add	r3, r2
 800d698:	00db      	lsls	r3, r3, #3
 800d69a:	440b      	add	r3, r1
 800d69c:	3312      	adds	r3, #18
 800d69e:	881b      	ldrh	r3, [r3, #0]
 800d6a0:	837b      	strh	r3, [r7, #26]
 800d6a2:	e01c      	b.n	800d6de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d919      	bls.n	800d6de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d6aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ae:	495e      	ldr	r1, [pc, #376]	; (800d828 <etharp_find_entry+0x2d4>)
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	4413      	add	r3, r2
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	440b      	add	r3, r1
 800d6ba:	3312      	adds	r3, #18
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	8b3a      	ldrh	r2, [r7, #24]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d80c      	bhi.n	800d6de <etharp_find_entry+0x18a>
            old_stable = i;
 800d6c4:	8c3b      	ldrh	r3, [r7, #32]
 800d6c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6cc:	4956      	ldr	r1, [pc, #344]	; (800d828 <etharp_find_entry+0x2d4>)
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	3312      	adds	r3, #18
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6de:	8c3b      	ldrh	r3, [r7, #32]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	843b      	strh	r3, [r7, #32]
 800d6e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6ea:	2b09      	cmp	r3, #9
 800d6ec:	f77f af4c 	ble.w	800d588 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	f003 0302 	and.w	r3, r3, #2
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d108      	bne.n	800d70c <etharp_find_entry+0x1b8>
 800d6fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d6fe:	2b0a      	cmp	r3, #10
 800d700:	d107      	bne.n	800d712 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d102      	bne.n	800d712 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d70c:	f04f 33ff 	mov.w	r3, #4294967295
 800d710:	e085      	b.n	800d81e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d712:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d716:	2b09      	cmp	r3, #9
 800d718:	dc02      	bgt.n	800d720 <etharp_find_entry+0x1cc>
    i = empty;
 800d71a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d71c:	843b      	strh	r3, [r7, #32]
 800d71e:	e039      	b.n	800d794 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d720:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d724:	2b09      	cmp	r3, #9
 800d726:	dc14      	bgt.n	800d752 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d72a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d72c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d730:	493d      	ldr	r1, [pc, #244]	; (800d828 <etharp_find_entry+0x2d4>)
 800d732:	4613      	mov	r3, r2
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	4413      	add	r3, r2
 800d738:	00db      	lsls	r3, r3, #3
 800d73a:	440b      	add	r3, r1
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d018      	beq.n	800d774 <etharp_find_entry+0x220>
 800d742:	4b3a      	ldr	r3, [pc, #232]	; (800d82c <etharp_find_entry+0x2d8>)
 800d744:	f240 126d 	movw	r2, #365	; 0x16d
 800d748:	493b      	ldr	r1, [pc, #236]	; (800d838 <etharp_find_entry+0x2e4>)
 800d74a:	483a      	ldr	r0, [pc, #232]	; (800d834 <etharp_find_entry+0x2e0>)
 800d74c:	f002 f952 	bl	800f9f4 <iprintf>
 800d750:	e010      	b.n	800d774 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d752:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d756:	2b09      	cmp	r3, #9
 800d758:	dc02      	bgt.n	800d760 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d75a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d75c:	843b      	strh	r3, [r7, #32]
 800d75e:	e009      	b.n	800d774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d764:	2b09      	cmp	r3, #9
 800d766:	dc02      	bgt.n	800d76e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d768:	8bfb      	ldrh	r3, [r7, #30]
 800d76a:	843b      	strh	r3, [r7, #32]
 800d76c:	e002      	b.n	800d774 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d76e:	f04f 33ff 	mov.w	r3, #4294967295
 800d772:	e054      	b.n	800d81e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d774:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d778:	2b09      	cmp	r3, #9
 800d77a:	dd06      	ble.n	800d78a <etharp_find_entry+0x236>
 800d77c:	4b2b      	ldr	r3, [pc, #172]	; (800d82c <etharp_find_entry+0x2d8>)
 800d77e:	f240 127f 	movw	r2, #383	; 0x17f
 800d782:	492e      	ldr	r1, [pc, #184]	; (800d83c <etharp_find_entry+0x2e8>)
 800d784:	482b      	ldr	r0, [pc, #172]	; (800d834 <etharp_find_entry+0x2e0>)
 800d786:	f002 f935 	bl	800f9f4 <iprintf>
    etharp_free_entry(i);
 800d78a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fe06 	bl	800d3a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d794:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d798:	2b09      	cmp	r3, #9
 800d79a:	dd06      	ble.n	800d7aa <etharp_find_entry+0x256>
 800d79c:	4b23      	ldr	r3, [pc, #140]	; (800d82c <etharp_find_entry+0x2d8>)
 800d79e:	f240 1283 	movw	r2, #387	; 0x183
 800d7a2:	4926      	ldr	r1, [pc, #152]	; (800d83c <etharp_find_entry+0x2e8>)
 800d7a4:	4823      	ldr	r0, [pc, #140]	; (800d834 <etharp_find_entry+0x2e0>)
 800d7a6:	f002 f925 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d7aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7ae:	491e      	ldr	r1, [pc, #120]	; (800d828 <etharp_find_entry+0x2d4>)
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	4413      	add	r3, r2
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	440b      	add	r3, r1
 800d7ba:	3314      	adds	r3, #20
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d006      	beq.n	800d7d0 <etharp_find_entry+0x27c>
 800d7c2:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <etharp_find_entry+0x2d8>)
 800d7c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d7c8:	491d      	ldr	r1, [pc, #116]	; (800d840 <etharp_find_entry+0x2ec>)
 800d7ca:	481a      	ldr	r0, [pc, #104]	; (800d834 <etharp_find_entry+0x2e0>)
 800d7cc:	f002 f912 	bl	800f9f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00b      	beq.n	800d7ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d7d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	4812      	ldr	r0, [pc, #72]	; (800d828 <etharp_find_entry+0x2d4>)
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	4403      	add	r3, r0
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d7ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7f2:	490d      	ldr	r1, [pc, #52]	; (800d828 <etharp_find_entry+0x2d4>)
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	3312      	adds	r3, #18
 800d800:	2200      	movs	r2, #0
 800d802:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d808:	4907      	ldr	r1, [pc, #28]	; (800d828 <etharp_find_entry+0x2d4>)
 800d80a:	4613      	mov	r3, r2
 800d80c:	005b      	lsls	r3, r3, #1
 800d80e:	4413      	add	r3, r2
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	440b      	add	r3, r1
 800d814:	3308      	adds	r3, #8
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d81a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3728      	adds	r7, #40	; 0x28
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20005d48 	.word	0x20005d48
 800d82c:	0801314c 	.word	0x0801314c
 800d830:	08013184 	.word	0x08013184
 800d834:	080131c4 	.word	0x080131c4
 800d838:	080131ec 	.word	0x080131ec
 800d83c:	08013204 	.word	0x08013204
 800d840:	08013218 	.word	0x08013218

0800d844 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af02      	add	r7, sp, #8
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d858:	2b06      	cmp	r3, #6
 800d85a:	d006      	beq.n	800d86a <etharp_update_arp_entry+0x26>
 800d85c:	4b48      	ldr	r3, [pc, #288]	; (800d980 <etharp_update_arp_entry+0x13c>)
 800d85e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d862:	4948      	ldr	r1, [pc, #288]	; (800d984 <etharp_update_arp_entry+0x140>)
 800d864:	4848      	ldr	r0, [pc, #288]	; (800d988 <etharp_update_arp_entry+0x144>)
 800d866:	f002 f8c5 	bl	800f9f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d012      	beq.n	800d896 <etharp_update_arp_entry+0x52>
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00e      	beq.n	800d896 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68f9      	ldr	r1, [r7, #12]
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 f8fe 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800d884:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d886:	2b00      	cmp	r3, #0
 800d888:	d105      	bne.n	800d896 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d892:	2be0      	cmp	r3, #224	; 0xe0
 800d894:	d102      	bne.n	800d89c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d896:	f06f 030f 	mvn.w	r3, #15
 800d89a:	e06c      	b.n	800d976 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d89c:	78fb      	ldrb	r3, [r7, #3]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	68b8      	ldr	r0, [r7, #8]
 800d8a4:	f7ff fe56 	bl	800d554 <etharp_find_entry>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d8ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	da02      	bge.n	800d8ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d8b4:	8afb      	ldrh	r3, [r7, #22]
 800d8b6:	b25b      	sxtb	r3, r3
 800d8b8:	e05d      	b.n	800d976 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d8ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8be:	4933      	ldr	r1, [pc, #204]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	4413      	add	r3, r2
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	440b      	add	r3, r1
 800d8ca:	3314      	adds	r3, #20
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8d4:	492d      	ldr	r1, [pc, #180]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	4413      	add	r3, r2
 800d8dc:	00db      	lsls	r3, r3, #3
 800d8de:	440b      	add	r3, r1
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d8e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	005b      	lsls	r3, r3, #1
 800d8ee:	4413      	add	r3, r2
 800d8f0:	00db      	lsls	r3, r3, #3
 800d8f2:	3308      	adds	r3, #8
 800d8f4:	4a25      	ldr	r2, [pc, #148]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	2206      	movs	r2, #6
 800d8fc:	6879      	ldr	r1, [r7, #4]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f002 f848 	bl	800f994 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d908:	4920      	ldr	r1, [pc, #128]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d90a:	4613      	mov	r3, r2
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4413      	add	r3, r2
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	440b      	add	r3, r1
 800d914:	3312      	adds	r3, #18
 800d916:	2200      	movs	r2, #0
 800d918:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d91a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d91e:	491b      	ldr	r1, [pc, #108]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d920:	4613      	mov	r3, r2
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	4413      	add	r3, r2
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	440b      	add	r3, r1
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d021      	beq.n	800d974 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d930:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d934:	4915      	ldr	r1, [pc, #84]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d936:	4613      	mov	r3, r2
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	4413      	add	r3, r2
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	440b      	add	r3, r1
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d948:	4910      	ldr	r1, [pc, #64]	; (800d98c <etharp_update_arp_entry+0x148>)
 800d94a:	4613      	mov	r3, r2
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	4413      	add	r3, r2
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	440b      	add	r3, r1
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d95e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6939      	ldr	r1, [r7, #16]
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f001 ff97 	bl	800f89c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d96e:	6938      	ldr	r0, [r7, #16]
 800d970:	f7f9 f9cc 	bl	8006d0c <pbuf_free>
  }
  return ERR_OK;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	0801314c 	.word	0x0801314c
 800d984:	08013244 	.word	0x08013244
 800d988:	080131c4 	.word	0x080131c4
 800d98c:	20005d48 	.word	0x20005d48

0800d990 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d998:	2300      	movs	r3, #0
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	e01e      	b.n	800d9dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d99e:	4913      	ldr	r1, [pc, #76]	; (800d9ec <etharp_cleanup_netif+0x5c>)
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	005b      	lsls	r3, r3, #1
 800d9a6:	4413      	add	r3, r2
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	440b      	add	r3, r1
 800d9ac:	3314      	adds	r3, #20
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d9b2:	7afb      	ldrb	r3, [r7, #11]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00e      	beq.n	800d9d6 <etharp_cleanup_netif+0x46>
 800d9b8:	490c      	ldr	r1, [pc, #48]	; (800d9ec <etharp_cleanup_netif+0x5c>)
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	440b      	add	r3, r1
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d102      	bne.n	800d9d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7ff fce5 	bl	800d3a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b09      	cmp	r3, #9
 800d9e0:	dddd      	ble.n	800d99e <etharp_cleanup_netif+0xe>
    }
  }
}
 800d9e2:	bf00      	nop
 800d9e4:	bf00      	nop
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20005d48 	.word	0x20005d48

0800d9f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d9f0:	b5b0      	push	{r4, r5, r7, lr}
 800d9f2:	b08a      	sub	sp, #40	; 0x28
 800d9f4:	af04      	add	r7, sp, #16
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d107      	bne.n	800da10 <etharp_input+0x20>
 800da00:	4b3d      	ldr	r3, [pc, #244]	; (800daf8 <etharp_input+0x108>)
 800da02:	f240 228a 	movw	r2, #650	; 0x28a
 800da06:	493d      	ldr	r1, [pc, #244]	; (800dafc <etharp_input+0x10c>)
 800da08:	483d      	ldr	r0, [pc, #244]	; (800db00 <etharp_input+0x110>)
 800da0a:	f001 fff3 	bl	800f9f4 <iprintf>
 800da0e:	e06f      	b.n	800daf0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da20:	d10c      	bne.n	800da3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da26:	2b06      	cmp	r3, #6
 800da28:	d108      	bne.n	800da3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d104      	bne.n	800da3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	885b      	ldrh	r3, [r3, #2]
 800da36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da38:	2b08      	cmp	r3, #8
 800da3a:	d003      	beq.n	800da44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7f9 f965 	bl	8006d0c <pbuf_free>
    return;
 800da42:	e055      	b.n	800daf0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	330e      	adds	r3, #14
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	3318      	adds	r3, #24
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3304      	adds	r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <etharp_input+0x74>
    for_us = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	75fb      	strb	r3, [r7, #23]
 800da62:	e009      	b.n	800da78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	3304      	adds	r3, #4
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	bf0c      	ite	eq
 800da70:	2301      	moveq	r3, #1
 800da72:	2300      	movne	r3, #0
 800da74:	b2db      	uxtb	r3, r3
 800da76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	f103 0208 	add.w	r2, r3, #8
 800da7e:	7dfb      	ldrb	r3, [r7, #23]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <etharp_input+0x98>
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <etharp_input+0x9a>
 800da88:	2302      	movs	r3, #2
 800da8a:	f107 010c 	add.w	r1, r7, #12
 800da8e:	6838      	ldr	r0, [r7, #0]
 800da90:	f7ff fed8 	bl	800d844 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	88db      	ldrh	r3, [r3, #6]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da9e:	d003      	beq.n	800daa8 <etharp_input+0xb8>
 800daa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daa4:	d01e      	beq.n	800dae4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800daa6:	e020      	b.n	800daea <etharp_input+0xfa>
      if (for_us) {
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d01c      	beq.n	800dae8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dac4:	693a      	ldr	r2, [r7, #16]
 800dac6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dac8:	2102      	movs	r1, #2
 800daca:	9103      	str	r1, [sp, #12]
 800dacc:	f107 010c 	add.w	r1, r7, #12
 800dad0:	9102      	str	r1, [sp, #8]
 800dad2:	9201      	str	r2, [sp, #4]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	462b      	mov	r3, r5
 800dad8:	4622      	mov	r2, r4
 800dada:	4601      	mov	r1, r0
 800dadc:	6838      	ldr	r0, [r7, #0]
 800dade:	f000 faeb 	bl	800e0b8 <etharp_raw>
      break;
 800dae2:	e001      	b.n	800dae8 <etharp_input+0xf8>
      break;
 800dae4:	bf00      	nop
 800dae6:	e000      	b.n	800daea <etharp_input+0xfa>
      break;
 800dae8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7f9 f90e 	bl	8006d0c <pbuf_free>
}
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bdb0      	pop	{r4, r5, r7, pc}
 800daf6:	bf00      	nop
 800daf8:	0801314c 	.word	0x0801314c
 800dafc:	0801329c 	.word	0x0801329c
 800db00:	080131c4 	.word	0x080131c4

0800db04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af02      	add	r7, sp, #8
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	4613      	mov	r3, r2
 800db10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db12:	79fa      	ldrb	r2, [r7, #7]
 800db14:	4944      	ldr	r1, [pc, #272]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db16:	4613      	mov	r3, r2
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	4413      	add	r3, r2
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	440b      	add	r3, r1
 800db20:	3314      	adds	r3, #20
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d806      	bhi.n	800db36 <etharp_output_to_arp_index+0x32>
 800db28:	4b40      	ldr	r3, [pc, #256]	; (800dc2c <etharp_output_to_arp_index+0x128>)
 800db2a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800db2e:	4940      	ldr	r1, [pc, #256]	; (800dc30 <etharp_output_to_arp_index+0x12c>)
 800db30:	4840      	ldr	r0, [pc, #256]	; (800dc34 <etharp_output_to_arp_index+0x130>)
 800db32:	f001 ff5f 	bl	800f9f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800db36:	79fa      	ldrb	r2, [r7, #7]
 800db38:	493b      	ldr	r1, [pc, #236]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db3a:	4613      	mov	r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	4413      	add	r3, r2
 800db40:	00db      	lsls	r3, r3, #3
 800db42:	440b      	add	r3, r1
 800db44:	3314      	adds	r3, #20
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d153      	bne.n	800dbf4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800db4c:	79fa      	ldrb	r2, [r7, #7]
 800db4e:	4936      	ldr	r1, [pc, #216]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db50:	4613      	mov	r3, r2
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4413      	add	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	440b      	add	r3, r1
 800db5a:	3312      	adds	r3, #18
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800db62:	d919      	bls.n	800db98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db64:	79fa      	ldrb	r2, [r7, #7]
 800db66:	4613      	mov	r3, r2
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	4413      	add	r3, r2
 800db6c:	00db      	lsls	r3, r3, #3
 800db6e:	4a2e      	ldr	r2, [pc, #184]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db70:	4413      	add	r3, r2
 800db72:	3304      	adds	r3, #4
 800db74:	4619      	mov	r1, r3
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 fb4c 	bl	800e214 <etharp_request>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d138      	bne.n	800dbf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800db82:	79fa      	ldrb	r2, [r7, #7]
 800db84:	4928      	ldr	r1, [pc, #160]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db86:	4613      	mov	r3, r2
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	00db      	lsls	r3, r3, #3
 800db8e:	440b      	add	r3, r1
 800db90:	3314      	adds	r3, #20
 800db92:	2203      	movs	r2, #3
 800db94:	701a      	strb	r2, [r3, #0]
 800db96:	e02d      	b.n	800dbf4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800db98:	79fa      	ldrb	r2, [r7, #7]
 800db9a:	4923      	ldr	r1, [pc, #140]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800db9c:	4613      	mov	r3, r2
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	4413      	add	r3, r2
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	440b      	add	r3, r1
 800dba6:	3312      	adds	r3, #18
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dbae:	d321      	bcc.n	800dbf4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dbb0:	79fa      	ldrb	r2, [r7, #7]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	4413      	add	r3, r2
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	4a1b      	ldr	r2, [pc, #108]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800dbbc:	4413      	add	r3, r2
 800dbbe:	1d19      	adds	r1, r3, #4
 800dbc0:	79fa      	ldrb	r2, [r7, #7]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	3308      	adds	r3, #8
 800dbcc:	4a16      	ldr	r2, [pc, #88]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800dbce:	4413      	add	r3, r2
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 fafb 	bl	800e1d0 <etharp_request_dst>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d109      	bne.n	800dbf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dbe0:	79fa      	ldrb	r2, [r7, #7]
 800dbe2:	4911      	ldr	r1, [pc, #68]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	4413      	add	r3, r2
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	440b      	add	r3, r1
 800dbee:	3314      	adds	r3, #20
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dbfa:	79fa      	ldrb	r2, [r7, #7]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	005b      	lsls	r3, r3, #1
 800dc00:	4413      	add	r3, r2
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	3308      	adds	r3, #8
 800dc06:	4a08      	ldr	r2, [pc, #32]	; (800dc28 <etharp_output_to_arp_index+0x124>)
 800dc08:	4413      	add	r3, r2
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc10:	9200      	str	r2, [sp, #0]
 800dc12:	460a      	mov	r2, r1
 800dc14:	68b9      	ldr	r1, [r7, #8]
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f001 fe40 	bl	800f89c <ethernet_output>
 800dc1c:	4603      	mov	r3, r0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20005d48 	.word	0x20005d48
 800dc2c:	0801314c 	.word	0x0801314c
 800dc30:	080132bc 	.word	0x080132bc
 800dc34:	080131c4 	.word	0x080131c4

0800dc38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08a      	sub	sp, #40	; 0x28
 800dc3c:	af02      	add	r7, sp, #8
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <etharp_output+0x24>
 800dc4e:	4b73      	ldr	r3, [pc, #460]	; (800de1c <etharp_output+0x1e4>)
 800dc50:	f240 321e 	movw	r2, #798	; 0x31e
 800dc54:	4972      	ldr	r1, [pc, #456]	; (800de20 <etharp_output+0x1e8>)
 800dc56:	4873      	ldr	r0, [pc, #460]	; (800de24 <etharp_output+0x1ec>)
 800dc58:	f001 fecc 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <etharp_output+0x38>
 800dc62:	4b6e      	ldr	r3, [pc, #440]	; (800de1c <etharp_output+0x1e4>)
 800dc64:	f240 321f 	movw	r2, #799	; 0x31f
 800dc68:	496f      	ldr	r1, [pc, #444]	; (800de28 <etharp_output+0x1f0>)
 800dc6a:	486e      	ldr	r0, [pc, #440]	; (800de24 <etharp_output+0x1ec>)
 800dc6c:	f001 fec2 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d106      	bne.n	800dc84 <etharp_output+0x4c>
 800dc76:	4b69      	ldr	r3, [pc, #420]	; (800de1c <etharp_output+0x1e4>)
 800dc78:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dc7c:	496b      	ldr	r1, [pc, #428]	; (800de2c <etharp_output+0x1f4>)
 800dc7e:	4869      	ldr	r0, [pc, #420]	; (800de24 <etharp_output+0x1ec>)
 800dc80:	f001 feb8 	bl	800f9f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68f9      	ldr	r1, [r7, #12]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fef8 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dc96:	4b66      	ldr	r3, [pc, #408]	; (800de30 <etharp_output+0x1f8>)
 800dc98:	61fb      	str	r3, [r7, #28]
 800dc9a:	e0af      	b.n	800ddfc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dca4:	2be0      	cmp	r3, #224	; 0xe0
 800dca6:	d118      	bne.n	800dcda <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dcac:	2300      	movs	r3, #0
 800dcae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dcb0:	235e      	movs	r3, #94	; 0x5e
 800dcb2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3302      	adds	r3, #2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	3303      	adds	r3, #3
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dcd2:	f107 0310 	add.w	r3, r7, #16
 800dcd6:	61fb      	str	r3, [r7, #28]
 800dcd8:	e090      	b.n	800ddfc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3304      	adds	r3, #4
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	405a      	eors	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3308      	adds	r3, #8
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4013      	ands	r3, r2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d012      	beq.n	800dd18 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dcf8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d00b      	beq.n	800dd18 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	330c      	adds	r3, #12
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d003      	beq.n	800dd12 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	330c      	adds	r3, #12
 800dd0e:	61bb      	str	r3, [r7, #24]
 800dd10:	e002      	b.n	800dd18 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dd12:	f06f 0303 	mvn.w	r3, #3
 800dd16:	e07d      	b.n	800de14 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dd18:	4b46      	ldr	r3, [pc, #280]	; (800de34 <etharp_output+0x1fc>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4a46      	ldr	r2, [pc, #280]	; (800de38 <etharp_output+0x200>)
 800dd20:	460b      	mov	r3, r1
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	440b      	add	r3, r1
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	4413      	add	r3, r2
 800dd2a:	3314      	adds	r3, #20
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d925      	bls.n	800dd7e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dd32:	4b40      	ldr	r3, [pc, #256]	; (800de34 <etharp_output+0x1fc>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	4619      	mov	r1, r3
 800dd38:	4a3f      	ldr	r2, [pc, #252]	; (800de38 <etharp_output+0x200>)
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	440b      	add	r3, r1
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	4413      	add	r3, r2
 800dd44:	3308      	adds	r3, #8
 800dd46:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d117      	bne.n	800dd7e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	4b38      	ldr	r3, [pc, #224]	; (800de34 <etharp_output+0x1fc>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	4618      	mov	r0, r3
 800dd58:	4937      	ldr	r1, [pc, #220]	; (800de38 <etharp_output+0x200>)
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	4403      	add	r3, r0
 800dd60:	00db      	lsls	r3, r3, #3
 800dd62:	440b      	add	r3, r1
 800dd64:	3304      	adds	r3, #4
 800dd66:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d108      	bne.n	800dd7e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dd6c:	4b31      	ldr	r3, [pc, #196]	; (800de34 <etharp_output+0x1fc>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68b9      	ldr	r1, [r7, #8]
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7ff fec5 	bl	800db04 <etharp_output_to_arp_index>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	e04a      	b.n	800de14 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dd7e:	2300      	movs	r3, #0
 800dd80:	75fb      	strb	r3, [r7, #23]
 800dd82:	e031      	b.n	800dde8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dd84:	7dfa      	ldrb	r2, [r7, #23]
 800dd86:	492c      	ldr	r1, [pc, #176]	; (800de38 <etharp_output+0x200>)
 800dd88:	4613      	mov	r3, r2
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	4413      	add	r3, r2
 800dd8e:	00db      	lsls	r3, r3, #3
 800dd90:	440b      	add	r3, r1
 800dd92:	3314      	adds	r3, #20
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d923      	bls.n	800dde2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800dd9a:	7dfa      	ldrb	r2, [r7, #23]
 800dd9c:	4926      	ldr	r1, [pc, #152]	; (800de38 <etharp_output+0x200>)
 800dd9e:	4613      	mov	r3, r2
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	440b      	add	r3, r1
 800dda8:	3308      	adds	r3, #8
 800ddaa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d117      	bne.n	800dde2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	6819      	ldr	r1, [r3, #0]
 800ddb6:	7dfa      	ldrb	r2, [r7, #23]
 800ddb8:	481f      	ldr	r0, [pc, #124]	; (800de38 <etharp_output+0x200>)
 800ddba:	4613      	mov	r3, r2
 800ddbc:	005b      	lsls	r3, r3, #1
 800ddbe:	4413      	add	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	4403      	add	r3, r0
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ddc8:	4299      	cmp	r1, r3
 800ddca:	d10a      	bne.n	800dde2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ddcc:	4a19      	ldr	r2, [pc, #100]	; (800de34 <etharp_output+0x1fc>)
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ddd2:	7dfb      	ldrb	r3, [r7, #23]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff fe93 	bl	800db04 <etharp_output_to_arp_index>
 800ddde:	4603      	mov	r3, r0
 800dde0:	e018      	b.n	800de14 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dde2:	7dfb      	ldrb	r3, [r7, #23]
 800dde4:	3301      	adds	r3, #1
 800dde6:	75fb      	strb	r3, [r7, #23]
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	2b09      	cmp	r3, #9
 800ddec:	d9ca      	bls.n	800dd84 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	69b9      	ldr	r1, [r7, #24]
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f822 	bl	800de3c <etharp_query>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	e00b      	b.n	800de14 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800de02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	68b9      	ldr	r1, [r7, #8]
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f001 fd45 	bl	800f89c <ethernet_output>
 800de12:	4603      	mov	r3, r0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3720      	adds	r7, #32
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	0801314c 	.word	0x0801314c
 800de20:	0801329c 	.word	0x0801329c
 800de24:	080131c4 	.word	0x080131c4
 800de28:	080132ec 	.word	0x080132ec
 800de2c:	0801328c 	.word	0x0801328c
 800de30:	080138fc 	.word	0x080138fc
 800de34:	20005e38 	.word	0x20005e38
 800de38:	20005d48 	.word	0x20005d48

0800de3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08c      	sub	sp, #48	; 0x30
 800de40:	af02      	add	r7, sp, #8
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3326      	adds	r3, #38	; 0x26
 800de4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800de4e:	23ff      	movs	r3, #255	; 0xff
 800de50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	4618      	mov	r0, r3
 800de60:	f000 fe0e 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10c      	bne.n	800de84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800de72:	2be0      	cmp	r3, #224	; 0xe0
 800de74:	d006      	beq.n	800de84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d102      	bne.n	800de8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800de84:	f06f 030f 	mvn.w	r3, #15
 800de88:	e101      	b.n	800e08e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	2101      	movs	r1, #1
 800de8e:	68b8      	ldr	r0, [r7, #8]
 800de90:	f7ff fb60 	bl	800d554 <etharp_find_entry>
 800de94:	4603      	mov	r3, r0
 800de96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800de98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da02      	bge.n	800dea6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dea0:	8a7b      	ldrh	r3, [r7, #18]
 800dea2:	b25b      	sxtb	r3, r3
 800dea4:	e0f3      	b.n	800e08e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dea6:	8a7b      	ldrh	r3, [r7, #18]
 800dea8:	2b7e      	cmp	r3, #126	; 0x7e
 800deaa:	d906      	bls.n	800deba <etharp_query+0x7e>
 800deac:	4b7a      	ldr	r3, [pc, #488]	; (800e098 <etharp_query+0x25c>)
 800deae:	f240 32c1 	movw	r2, #961	; 0x3c1
 800deb2:	497a      	ldr	r1, [pc, #488]	; (800e09c <etharp_query+0x260>)
 800deb4:	487a      	ldr	r0, [pc, #488]	; (800e0a0 <etharp_query+0x264>)
 800deb6:	f001 fd9d 	bl	800f9f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800deba:	8a7b      	ldrh	r3, [r7, #18]
 800debc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800debe:	7c7a      	ldrb	r2, [r7, #17]
 800dec0:	4978      	ldr	r1, [pc, #480]	; (800e0a4 <etharp_query+0x268>)
 800dec2:	4613      	mov	r3, r2
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4413      	add	r3, r2
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	440b      	add	r3, r1
 800decc:	3314      	adds	r3, #20
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d115      	bne.n	800df00 <etharp_query+0xc4>
    is_new_entry = 1;
 800ded4:	2301      	movs	r3, #1
 800ded6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ded8:	7c7a      	ldrb	r2, [r7, #17]
 800deda:	4972      	ldr	r1, [pc, #456]	; (800e0a4 <etharp_query+0x268>)
 800dedc:	4613      	mov	r3, r2
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	4413      	add	r3, r2
 800dee2:	00db      	lsls	r3, r3, #3
 800dee4:	440b      	add	r3, r1
 800dee6:	3314      	adds	r3, #20
 800dee8:	2201      	movs	r2, #1
 800deea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800deec:	7c7a      	ldrb	r2, [r7, #17]
 800deee:	496d      	ldr	r1, [pc, #436]	; (800e0a4 <etharp_query+0x268>)
 800def0:	4613      	mov	r3, r2
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	4413      	add	r3, r2
 800def6:	00db      	lsls	r3, r3, #3
 800def8:	440b      	add	r3, r1
 800defa:	3308      	adds	r3, #8
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800df00:	7c7a      	ldrb	r2, [r7, #17]
 800df02:	4968      	ldr	r1, [pc, #416]	; (800e0a4 <etharp_query+0x268>)
 800df04:	4613      	mov	r3, r2
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	4413      	add	r3, r2
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	440b      	add	r3, r1
 800df0e:	3314      	adds	r3, #20
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d011      	beq.n	800df3a <etharp_query+0xfe>
 800df16:	7c7a      	ldrb	r2, [r7, #17]
 800df18:	4962      	ldr	r1, [pc, #392]	; (800e0a4 <etharp_query+0x268>)
 800df1a:	4613      	mov	r3, r2
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	4413      	add	r3, r2
 800df20:	00db      	lsls	r3, r3, #3
 800df22:	440b      	add	r3, r1
 800df24:	3314      	adds	r3, #20
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d806      	bhi.n	800df3a <etharp_query+0xfe>
 800df2c:	4b5a      	ldr	r3, [pc, #360]	; (800e098 <etharp_query+0x25c>)
 800df2e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800df32:	495d      	ldr	r1, [pc, #372]	; (800e0a8 <etharp_query+0x26c>)
 800df34:	485a      	ldr	r0, [pc, #360]	; (800e0a0 <etharp_query+0x264>)
 800df36:	f001 fd5d 	bl	800f9f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <etharp_query+0x10a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10c      	bne.n	800df60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f963 	bl	800e214 <etharp_request>
 800df4e:	4603      	mov	r3, r0
 800df50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d102      	bne.n	800df60 <etharp_query+0x124>
      return result;
 800df5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df5e:	e096      	b.n	800e08e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d106      	bne.n	800df74 <etharp_query+0x138>
 800df66:	4b4c      	ldr	r3, [pc, #304]	; (800e098 <etharp_query+0x25c>)
 800df68:	f240 32e1 	movw	r2, #993	; 0x3e1
 800df6c:	494f      	ldr	r1, [pc, #316]	; (800e0ac <etharp_query+0x270>)
 800df6e:	484c      	ldr	r0, [pc, #304]	; (800e0a0 <etharp_query+0x264>)
 800df70:	f001 fd40 	bl	800f9f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800df74:	7c7a      	ldrb	r2, [r7, #17]
 800df76:	494b      	ldr	r1, [pc, #300]	; (800e0a4 <etharp_query+0x268>)
 800df78:	4613      	mov	r3, r2
 800df7a:	005b      	lsls	r3, r3, #1
 800df7c:	4413      	add	r3, r2
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	440b      	add	r3, r1
 800df82:	3314      	adds	r3, #20
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d917      	bls.n	800dfba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800df8a:	4a49      	ldr	r2, [pc, #292]	; (800e0b0 <etharp_query+0x274>)
 800df8c:	7c7b      	ldrb	r3, [r7, #17]
 800df8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800df90:	7c7a      	ldrb	r2, [r7, #17]
 800df92:	4613      	mov	r3, r2
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	4413      	add	r3, r2
 800df98:	00db      	lsls	r3, r3, #3
 800df9a:	3308      	adds	r3, #8
 800df9c:	4a41      	ldr	r2, [pc, #260]	; (800e0a4 <etharp_query+0x268>)
 800df9e:	4413      	add	r3, r2
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfa6:	9200      	str	r2, [sp, #0]
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f001 fc75 	bl	800f89c <ethernet_output>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfb8:	e067      	b.n	800e08a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dfba:	7c7a      	ldrb	r2, [r7, #17]
 800dfbc:	4939      	ldr	r1, [pc, #228]	; (800e0a4 <etharp_query+0x268>)
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	440b      	add	r3, r1
 800dfc8:	3314      	adds	r3, #20
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d15c      	bne.n	800e08a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dfd8:	e01c      	b.n	800e014 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	895a      	ldrh	r2, [r3, #10]
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	891b      	ldrh	r3, [r3, #8]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d10a      	bne.n	800dffc <etharp_query+0x1c0>
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d006      	beq.n	800dffc <etharp_query+0x1c0>
 800dfee:	4b2a      	ldr	r3, [pc, #168]	; (800e098 <etharp_query+0x25c>)
 800dff0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800dff4:	492f      	ldr	r1, [pc, #188]	; (800e0b4 <etharp_query+0x278>)
 800dff6:	482a      	ldr	r0, [pc, #168]	; (800e0a0 <etharp_query+0x264>)
 800dff8:	f001 fcfc 	bl	800f9f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	7b1b      	ldrb	r3, [r3, #12]
 800e000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <etharp_query+0x1d2>
        copy_needed = 1;
 800e008:	2301      	movs	r3, #1
 800e00a:	61bb      	str	r3, [r7, #24]
        break;
 800e00c:	e005      	b.n	800e01a <etharp_query+0x1de>
      }
      p = p->next;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1df      	bne.n	800dfda <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d007      	beq.n	800e030 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e026:	200e      	movs	r0, #14
 800e028:	f7f9 f96e 	bl	8007308 <pbuf_clone>
 800e02c:	61f8      	str	r0, [r7, #28]
 800e02e:	e004      	b.n	800e03a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e034:	69f8      	ldr	r0, [r7, #28]
 800e036:	f7f8 ff09 	bl	8006e4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d021      	beq.n	800e084 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e040:	7c7a      	ldrb	r2, [r7, #17]
 800e042:	4918      	ldr	r1, [pc, #96]	; (800e0a4 <etharp_query+0x268>)
 800e044:	4613      	mov	r3, r2
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	4413      	add	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	440b      	add	r3, r1
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00a      	beq.n	800e06a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e054:	7c7a      	ldrb	r2, [r7, #17]
 800e056:	4913      	ldr	r1, [pc, #76]	; (800e0a4 <etharp_query+0x268>)
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	440b      	add	r3, r1
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4618      	mov	r0, r3
 800e066:	f7f8 fe51 	bl	8006d0c <pbuf_free>
      }
      arp_table[i].q = p;
 800e06a:	7c7a      	ldrb	r2, [r7, #17]
 800e06c:	490d      	ldr	r1, [pc, #52]	; (800e0a4 <etharp_query+0x268>)
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	69fa      	ldr	r2, [r7, #28]
 800e07a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e082:	e002      	b.n	800e08a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e084:	23ff      	movs	r3, #255	; 0xff
 800e086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e08a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3728      	adds	r7, #40	; 0x28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	0801314c 	.word	0x0801314c
 800e09c:	080132f8 	.word	0x080132f8
 800e0a0:	080131c4 	.word	0x080131c4
 800e0a4:	20005d48 	.word	0x20005d48
 800e0a8:	08013308 	.word	0x08013308
 800e0ac:	080132ec 	.word	0x080132ec
 800e0b0:	20005e38 	.word	0x20005e38
 800e0b4:	08013330 	.word	0x08013330

0800e0b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08a      	sub	sp, #40	; 0x28
 800e0bc:	af02      	add	r7, sp, #8
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
 800e0c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d106      	bne.n	800e0de <etharp_raw+0x26>
 800e0d0:	4b3a      	ldr	r3, [pc, #232]	; (800e1bc <etharp_raw+0x104>)
 800e0d2:	f240 4257 	movw	r2, #1111	; 0x457
 800e0d6:	493a      	ldr	r1, [pc, #232]	; (800e1c0 <etharp_raw+0x108>)
 800e0d8:	483a      	ldr	r0, [pc, #232]	; (800e1c4 <etharp_raw+0x10c>)
 800e0da:	f001 fc8b 	bl	800f9f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e0de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0e2:	211c      	movs	r1, #28
 800e0e4:	200e      	movs	r0, #14
 800e0e6:	f7f8 fb2d 	bl	8006744 <pbuf_alloc>
 800e0ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f6:	e05d      	b.n	800e1b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	895b      	ldrh	r3, [r3, #10]
 800e0fc:	2b1b      	cmp	r3, #27
 800e0fe:	d806      	bhi.n	800e10e <etharp_raw+0x56>
 800e100:	4b2e      	ldr	r3, [pc, #184]	; (800e1bc <etharp_raw+0x104>)
 800e102:	f240 4262 	movw	r2, #1122	; 0x462
 800e106:	4930      	ldr	r1, [pc, #192]	; (800e1c8 <etharp_raw+0x110>)
 800e108:	482e      	ldr	r0, [pc, #184]	; (800e1c4 <etharp_raw+0x10c>)
 800e10a:	f001 fc73 	bl	800f9f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e114:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e116:	4618      	mov	r0, r3
 800e118:	f7f7 fb44 	bl	80057a4 <lwip_htons>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461a      	mov	r2, r3
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e12a:	2b06      	cmp	r3, #6
 800e12c:	d006      	beq.n	800e13c <etharp_raw+0x84>
 800e12e:	4b23      	ldr	r3, [pc, #140]	; (800e1bc <etharp_raw+0x104>)
 800e130:	f240 4269 	movw	r2, #1129	; 0x469
 800e134:	4925      	ldr	r1, [pc, #148]	; (800e1cc <etharp_raw+0x114>)
 800e136:	4823      	ldr	r0, [pc, #140]	; (800e1c4 <etharp_raw+0x10c>)
 800e138:	f001 fc5c 	bl	800f9f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	3308      	adds	r3, #8
 800e140:	2206      	movs	r2, #6
 800e142:	6839      	ldr	r1, [r7, #0]
 800e144:	4618      	mov	r0, r3
 800e146:	f001 fc25 	bl	800f994 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	3312      	adds	r3, #18
 800e14e:	2206      	movs	r2, #6
 800e150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e152:	4618      	mov	r0, r3
 800e154:	f001 fc1e 	bl	800f994 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	330e      	adds	r3, #14
 800e15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e15e:	6812      	ldr	r2, [r2, #0]
 800e160:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	3318      	adds	r3, #24
 800e166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e168:	6812      	ldr	r2, [r2, #0]
 800e16a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
 800e172:	2200      	movs	r2, #0
 800e174:	f042 0201 	orr.w	r2, r2, #1
 800e178:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f042 0208 	orr.w	r2, r2, #8
 800e182:	709a      	strb	r2, [r3, #2]
 800e184:	2200      	movs	r2, #0
 800e186:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2206      	movs	r2, #6
 800e18c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2204      	movs	r2, #4
 800e192:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e194:	f640 0306 	movw	r3, #2054	; 0x806
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	69b9      	ldr	r1, [r7, #24]
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f001 fb7b 	bl	800f89c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e1a6:	69b8      	ldr	r0, [r7, #24]
 800e1a8:	f7f8 fdb0 	bl	8006d0c <pbuf_free>
  p = NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e1b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3720      	adds	r7, #32
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	0801314c 	.word	0x0801314c
 800e1c0:	0801329c 	.word	0x0801329c
 800e1c4:	080131c4 	.word	0x080131c4
 800e1c8:	0801334c 	.word	0x0801334c
 800e1cc:	08013380 	.word	0x08013380

0800e1d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af04      	add	r7, sp, #16
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	9203      	str	r2, [sp, #12]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	9202      	str	r2, [sp, #8]
 800e1f4:	4a06      	ldr	r2, [pc, #24]	; (800e210 <etharp_request_dst+0x40>)
 800e1f6:	9201      	str	r2, [sp, #4]
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff ff5a 	bl	800e0b8 <etharp_raw>
 800e204:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	08013904 	.word	0x08013904

0800e214 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e21e:	4a05      	ldr	r2, [pc, #20]	; (800e234 <etharp_request+0x20>)
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff ffd4 	bl	800e1d0 <etharp_request_dst>
 800e228:	4603      	mov	r3, r0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	080138fc 	.word	0x080138fc

0800e238 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08e      	sub	sp, #56	; 0x38
 800e23c:	af04      	add	r7, sp, #16
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e242:	4b79      	ldr	r3, [pc, #484]	; (800e428 <icmp_input+0x1f0>)
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	f003 030f 	and.w	r3, r3, #15
 800e250:	b2db      	uxtb	r3, r3
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	b2db      	uxtb	r3, r3
 800e256:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e25a:	2b13      	cmp	r3, #19
 800e25c:	f240 80cd 	bls.w	800e3fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	895b      	ldrh	r3, [r3, #10]
 800e264:	2b03      	cmp	r3, #3
 800e266:	f240 80ca 	bls.w	800e3fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e274:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 80b7 	beq.w	800e3ec <icmp_input+0x1b4>
 800e27e:	2b08      	cmp	r3, #8
 800e280:	f040 80b7 	bne.w	800e3f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e284:	4b69      	ldr	r3, [pc, #420]	; (800e42c <icmp_input+0x1f4>)
 800e286:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e288:	4b67      	ldr	r3, [pc, #412]	; (800e428 <icmp_input+0x1f0>)
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e290:	2be0      	cmp	r3, #224	; 0xe0
 800e292:	f000 80bb 	beq.w	800e40c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e296:	4b64      	ldr	r3, [pc, #400]	; (800e428 <icmp_input+0x1f0>)
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	4a63      	ldr	r2, [pc, #396]	; (800e428 <icmp_input+0x1f0>)
 800e29c:	6812      	ldr	r2, [r2, #0]
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 fbed 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f040 80b1 	bne.w	800e410 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	891b      	ldrh	r3, [r3, #8]
 800e2b2:	2b07      	cmp	r3, #7
 800e2b4:	f240 80a5 	bls.w	800e402 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e2b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2ba:	330e      	adds	r3, #14
 800e2bc:	4619      	mov	r1, r3
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7f8 fc8e 	bl	8006be0 <pbuf_add_header>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d04b      	beq.n	800e362 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	891a      	ldrh	r2, [r3, #8]
 800e2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2d0:	4413      	add	r3, r2
 800e2d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	891b      	ldrh	r3, [r3, #8]
 800e2d8:	8b7a      	ldrh	r2, [r7, #26]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	f0c0 809a 	bcc.w	800e414 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e2e0:	8b7b      	ldrh	r3, [r7, #26]
 800e2e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	200e      	movs	r0, #14
 800e2ea:	f7f8 fa2b 	bl	8006744 <pbuf_alloc>
 800e2ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 8090 	beq.w	800e418 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	895b      	ldrh	r3, [r3, #10]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e300:	3308      	adds	r3, #8
 800e302:	429a      	cmp	r2, r3
 800e304:	d203      	bcs.n	800e30e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e306:	6978      	ldr	r0, [r7, #20]
 800e308:	f7f8 fd00 	bl	8006d0c <pbuf_free>
          goto icmperr;
 800e30c:	e085      	b.n	800e41a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e316:	4618      	mov	r0, r3
 800e318:	f001 fb3c 	bl	800f994 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e31c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e31e:	4619      	mov	r1, r3
 800e320:	6978      	ldr	r0, [r7, #20]
 800e322:	f7f8 fc6d 	bl	8006c00 <pbuf_remove_header>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d009      	beq.n	800e340 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e32c:	4b40      	ldr	r3, [pc, #256]	; (800e430 <icmp_input+0x1f8>)
 800e32e:	22b6      	movs	r2, #182	; 0xb6
 800e330:	4940      	ldr	r1, [pc, #256]	; (800e434 <icmp_input+0x1fc>)
 800e332:	4841      	ldr	r0, [pc, #260]	; (800e438 <icmp_input+0x200>)
 800e334:	f001 fb5e 	bl	800f9f4 <iprintf>
          pbuf_free(r);
 800e338:	6978      	ldr	r0, [r7, #20]
 800e33a:	f7f8 fce7 	bl	8006d0c <pbuf_free>
          goto icmperr;
 800e33e:	e06c      	b.n	800e41a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	6978      	ldr	r0, [r7, #20]
 800e344:	f7f8 fe0a 	bl	8006f5c <pbuf_copy>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d003      	beq.n	800e356 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e34e:	6978      	ldr	r0, [r7, #20]
 800e350:	f7f8 fcdc 	bl	8006d0c <pbuf_free>
          goto icmperr;
 800e354:	e061      	b.n	800e41a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7f8 fcd8 	bl	8006d0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	607b      	str	r3, [r7, #4]
 800e360:	e00f      	b.n	800e382 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e364:	330e      	adds	r3, #14
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7f8 fc49 	bl	8006c00 <pbuf_remove_header>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d006      	beq.n	800e382 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e374:	4b2e      	ldr	r3, [pc, #184]	; (800e430 <icmp_input+0x1f8>)
 800e376:	22c7      	movs	r2, #199	; 0xc7
 800e378:	4930      	ldr	r1, [pc, #192]	; (800e43c <icmp_input+0x204>)
 800e37a:	482f      	ldr	r0, [pc, #188]	; (800e438 <icmp_input+0x200>)
 800e37c:	f001 fb3a 	bl	800f9f4 <iprintf>
          goto icmperr;
 800e380:	e04b      	b.n	800e41a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7f8 fc27 	bl	8006be0 <pbuf_add_header>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d12b      	bne.n	800e3f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e3a6:	4b20      	ldr	r3, [pc, #128]	; (800e428 <icmp_input+0x1f0>)
 800e3a8:	691a      	ldr	r2, [r3, #16]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	709a      	strb	r2, [r3, #2]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	22ff      	movs	r2, #255	; 0xff
 800e3c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	729a      	strb	r2, [r3, #10]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	9302      	str	r3, [sp, #8]
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	23ff      	movs	r3, #255	; 0xff
 800e3dc:	2200      	movs	r2, #0
 800e3de:	69f9      	ldr	r1, [r7, #28]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fa75 	bl	800e8d0 <ip4_output_if>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e3ea:	e001      	b.n	800e3f0 <icmp_input+0x1b8>
      break;
 800e3ec:	bf00      	nop
 800e3ee:	e000      	b.n	800e3f2 <icmp_input+0x1ba>
      break;
 800e3f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7f8 fc8a 	bl	8006d0c <pbuf_free>
  return;
 800e3f8:	e013      	b.n	800e422 <icmp_input+0x1ea>
    goto lenerr;
 800e3fa:	bf00      	nop
 800e3fc:	e002      	b.n	800e404 <icmp_input+0x1cc>
    goto lenerr;
 800e3fe:	bf00      	nop
 800e400:	e000      	b.n	800e404 <icmp_input+0x1cc>
        goto lenerr;
 800e402:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7f8 fc81 	bl	8006d0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e40a:	e00a      	b.n	800e422 <icmp_input+0x1ea>
        goto icmperr;
 800e40c:	bf00      	nop
 800e40e:	e004      	b.n	800e41a <icmp_input+0x1e2>
        goto icmperr;
 800e410:	bf00      	nop
 800e412:	e002      	b.n	800e41a <icmp_input+0x1e2>
          goto icmperr;
 800e414:	bf00      	nop
 800e416:	e000      	b.n	800e41a <icmp_input+0x1e2>
          goto icmperr;
 800e418:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7f8 fc76 	bl	8006d0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e420:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e422:	3728      	adds	r7, #40	; 0x28
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	200005b8 	.word	0x200005b8
 800e42c:	200005cc 	.word	0x200005cc
 800e430:	080133c4 	.word	0x080133c4
 800e434:	080133fc 	.word	0x080133fc
 800e438:	08013434 	.word	0x08013434
 800e43c:	0801345c 	.word	0x0801345c

0800e440 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e44c:	78fb      	ldrb	r3, [r7, #3]
 800e44e:	461a      	mov	r2, r3
 800e450:	2103      	movs	r1, #3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f814 	bl	800e480 <icmp_send_response>
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e46c:	78fb      	ldrb	r3, [r7, #3]
 800e46e:	461a      	mov	r2, r3
 800e470:	210b      	movs	r1, #11
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 f804 	bl	800e480 <icmp_send_response>
}
 800e478:	bf00      	nop
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08c      	sub	sp, #48	; 0x30
 800e484:	af04      	add	r7, sp, #16
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	460b      	mov	r3, r1
 800e48a:	70fb      	strb	r3, [r7, #3]
 800e48c:	4613      	mov	r3, r2
 800e48e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e490:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e494:	2124      	movs	r1, #36	; 0x24
 800e496:	2022      	movs	r0, #34	; 0x22
 800e498:	f7f8 f954 	bl	8006744 <pbuf_alloc>
 800e49c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d04c      	beq.n	800e53e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	895b      	ldrh	r3, [r3, #10]
 800e4a8:	2b23      	cmp	r3, #35	; 0x23
 800e4aa:	d806      	bhi.n	800e4ba <icmp_send_response+0x3a>
 800e4ac:	4b26      	ldr	r3, [pc, #152]	; (800e548 <icmp_send_response+0xc8>)
 800e4ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e4b2:	4926      	ldr	r1, [pc, #152]	; (800e54c <icmp_send_response+0xcc>)
 800e4b4:	4826      	ldr	r0, [pc, #152]	; (800e550 <icmp_send_response+0xd0>)
 800e4b6:	f001 fa9d 	bl	800f9f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	78fa      	ldrb	r2, [r7, #3]
 800e4ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	78ba      	ldrb	r2, [r7, #2]
 800e4d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	711a      	strb	r2, [r3, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	719a      	strb	r2, [r3, #6]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	f103 0008 	add.w	r0, r3, #8
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	221c      	movs	r2, #28
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	f001 fa4d 	bl	800f994 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e500:	f107 030c 	add.w	r3, r7, #12
 800e504:	4618      	mov	r0, r3
 800e506:	f000 f825 	bl	800e554 <ip4_route>
 800e50a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d011      	beq.n	800e536 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2200      	movs	r2, #0
 800e516:	709a      	strb	r2, [r3, #2]
 800e518:	2200      	movs	r2, #0
 800e51a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e51c:	f107 020c 	add.w	r2, r7, #12
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	9302      	str	r3, [sp, #8]
 800e524:	2301      	movs	r3, #1
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	2300      	movs	r3, #0
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	23ff      	movs	r3, #255	; 0xff
 800e52e:	2100      	movs	r1, #0
 800e530:	69f8      	ldr	r0, [r7, #28]
 800e532:	f000 f9cd 	bl	800e8d0 <ip4_output_if>
  }
  pbuf_free(q);
 800e536:	69f8      	ldr	r0, [r7, #28]
 800e538:	f7f8 fbe8 	bl	8006d0c <pbuf_free>
 800e53c:	e000      	b.n	800e540 <icmp_send_response+0xc0>
    return;
 800e53e:	bf00      	nop
}
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	080133c4 	.word	0x080133c4
 800e54c:	08013490 	.word	0x08013490
 800e550:	08013434 	.word	0x08013434

0800e554 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e55c:	4b33      	ldr	r3, [pc, #204]	; (800e62c <ip4_route+0xd8>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	e036      	b.n	800e5d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e56a:	f003 0301 	and.w	r3, r3, #1
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	d02b      	beq.n	800e5cc <ip4_route+0x78>
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e57a:	089b      	lsrs	r3, r3, #2
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d022      	beq.n	800e5cc <ip4_route+0x78>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3304      	adds	r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d01d      	beq.n	800e5cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3304      	adds	r3, #4
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	405a      	eors	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3308      	adds	r3, #8
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	e038      	b.n	800e61e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5b2:	f003 0302 	and.w	r3, r3, #2
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d108      	bne.n	800e5cc <ip4_route+0x78>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d101      	bne.n	800e5cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	e028      	b.n	800e61e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1c5      	bne.n	800e564 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e5d8:	4b15      	ldr	r3, [pc, #84]	; (800e630 <ip4_route+0xdc>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d01a      	beq.n	800e616 <ip4_route+0xc2>
 800e5e0:	4b13      	ldr	r3, [pc, #76]	; (800e630 <ip4_route+0xdc>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d012      	beq.n	800e616 <ip4_route+0xc2>
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <ip4_route+0xdc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5f8:	f003 0304 	and.w	r3, r3, #4
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00a      	beq.n	800e616 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <ip4_route+0xdc>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3304      	adds	r3, #4
 800e606:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d004      	beq.n	800e616 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b7f      	cmp	r3, #127	; 0x7f
 800e614:	d101      	bne.n	800e61a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e616:	2300      	movs	r3, #0
 800e618:	e001      	b.n	800e61e <ip4_route+0xca>
  }

  return netif_default;
 800e61a:	4b05      	ldr	r3, [pc, #20]	; (800e630 <ip4_route+0xdc>)
 800e61c:	681b      	ldr	r3, [r3, #0]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	20005cdc 	.word	0x20005cdc
 800e630:	20005ce0 	.word	0x20005ce0

0800e634 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d016      	beq.n	800e67a <ip4_input_accept+0x46>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3304      	adds	r3, #4
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d011      	beq.n	800e67a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e656:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <ip4_input_accept+0x50>)
 800e658:	695a      	ldr	r2, [r3, #20]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3304      	adds	r3, #4
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	429a      	cmp	r2, r3
 800e662:	d008      	beq.n	800e676 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e664:	4b07      	ldr	r3, [pc, #28]	; (800e684 <ip4_input_accept+0x50>)
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fa08 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800e670:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	200005b8 	.word	0x200005b8

0800e688 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	091b      	lsrs	r3, r3, #4
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	2b04      	cmp	r3, #4
 800e6a2:	d004      	beq.n	800e6ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7f8 fb31 	bl	8006d0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e107      	b.n	800e8be <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 030f 	and.w	r3, r3, #15
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f7 f86d 	bl	80057a4 <lwip_htons>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	891b      	ldrh	r3, [r3, #8]
 800e6d2:	89ba      	ldrh	r2, [r7, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d204      	bcs.n	800e6e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e6d8:	89bb      	ldrh	r3, [r7, #12]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7f8 f98f 	bl	8006a00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	895b      	ldrh	r3, [r3, #10]
 800e6e6:	89fa      	ldrh	r2, [r7, #14]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d807      	bhi.n	800e6fc <ip4_input+0x74>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	891b      	ldrh	r3, [r3, #8]
 800e6f0:	89ba      	ldrh	r2, [r7, #12]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d802      	bhi.n	800e6fc <ip4_input+0x74>
 800e6f6:	89fb      	ldrh	r3, [r7, #14]
 800e6f8:	2b13      	cmp	r3, #19
 800e6fa:	d804      	bhi.n	800e706 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7f8 fb05 	bl	8006d0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	e0db      	b.n	800e8be <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	4a6f      	ldr	r2, [pc, #444]	; (800e8c8 <ip4_input+0x240>)
 800e70c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	4a6d      	ldr	r2, [pc, #436]	; (800e8c8 <ip4_input+0x240>)
 800e714:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e716:	4b6c      	ldr	r3, [pc, #432]	; (800e8c8 <ip4_input+0x240>)
 800e718:	695b      	ldr	r3, [r3, #20]
 800e71a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e71e:	2be0      	cmp	r3, #224	; 0xe0
 800e720:	d112      	bne.n	800e748 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e728:	f003 0301 	and.w	r3, r3, #1
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d007      	beq.n	800e742 <ip4_input+0xba>
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	3304      	adds	r3, #4
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <ip4_input+0xba>
      netif = inp;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	613b      	str	r3, [r7, #16]
 800e740:	e02a      	b.n	800e798 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]
 800e746:	e027      	b.n	800e798 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e748:	6838      	ldr	r0, [r7, #0]
 800e74a:	f7ff ff73 	bl	800e634 <ip4_input_accept>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <ip4_input+0xd2>
      netif = inp;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	613b      	str	r3, [r7, #16]
 800e758:	e01e      	b.n	800e798 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e75e:	4b5a      	ldr	r3, [pc, #360]	; (800e8c8 <ip4_input+0x240>)
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b7f      	cmp	r3, #127	; 0x7f
 800e766:	d017      	beq.n	800e798 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e768:	4b58      	ldr	r3, [pc, #352]	; (800e8cc <ip4_input+0x244>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	613b      	str	r3, [r7, #16]
 800e76e:	e00e      	b.n	800e78e <ip4_input+0x106>
          if (netif == inp) {
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	429a      	cmp	r2, r3
 800e776:	d006      	beq.n	800e786 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e778:	6938      	ldr	r0, [r7, #16]
 800e77a:	f7ff ff5b 	bl	800e634 <ip4_input_accept>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d108      	bne.n	800e796 <ip4_input+0x10e>
 800e784:	e000      	b.n	800e788 <ip4_input+0x100>
            continue;
 800e786:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	613b      	str	r3, [r7, #16]
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1ed      	bne.n	800e770 <ip4_input+0xe8>
 800e794:	e000      	b.n	800e798 <ip4_input+0x110>
            break;
 800e796:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e798:	4b4b      	ldr	r3, [pc, #300]	; (800e8c8 <ip4_input+0x240>)
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f96e 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d105      	bne.n	800e7b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e7aa:	4b47      	ldr	r3, [pc, #284]	; (800e8c8 <ip4_input+0x240>)
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e7b2:	2be0      	cmp	r3, #224	; 0xe0
 800e7b4:	d104      	bne.n	800e7c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7f8 faa8 	bl	8006d0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	e07e      	b.n	800e8be <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d104      	bne.n	800e7d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7f8 faa0 	bl	8006d0c <pbuf_free>
    return ERR_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	e076      	b.n	800e8be <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	88db      	ldrh	r3, [r3, #6]
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e7dc:	4013      	ands	r3, r2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00b      	beq.n	800e7fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fc92 	bl	800f10c <ip4_reass>
 800e7e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d101      	bne.n	800e7f4 <ip4_input+0x16c>
      return ERR_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e064      	b.n	800e8be <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e7fa:	4a33      	ldr	r2, [pc, #204]	; (800e8c8 <ip4_input+0x240>)
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e800:	4a31      	ldr	r2, [pc, #196]	; (800e8c8 <ip4_input+0x240>)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e806:	4a30      	ldr	r2, [pc, #192]	; (800e8c8 <ip4_input+0x240>)
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 030f 	and.w	r3, r3, #15
 800e814:	b2db      	uxtb	r3, r3
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	4b2a      	ldr	r3, [pc, #168]	; (800e8c8 <ip4_input+0x240>)
 800e81e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e820:	89fb      	ldrh	r3, [r7, #14]
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7f8 f9eb 	bl	8006c00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	7a5b      	ldrb	r3, [r3, #9]
 800e82e:	2b11      	cmp	r3, #17
 800e830:	d006      	beq.n	800e840 <ip4_input+0x1b8>
 800e832:	2b11      	cmp	r3, #17
 800e834:	dc13      	bgt.n	800e85e <ip4_input+0x1d6>
 800e836:	2b01      	cmp	r3, #1
 800e838:	d00c      	beq.n	800e854 <ip4_input+0x1cc>
 800e83a:	2b06      	cmp	r3, #6
 800e83c:	d005      	beq.n	800e84a <ip4_input+0x1c2>
 800e83e:	e00e      	b.n	800e85e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7fe f8e6 	bl	800ca14 <udp_input>
        break;
 800e848:	e026      	b.n	800e898 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e84a:	6839      	ldr	r1, [r7, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7fa f927 	bl	8008aa0 <tcp_input>
        break;
 800e852:	e021      	b.n	800e898 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fcee 	bl	800e238 <icmp_input>
        break;
 800e85c:	e01c      	b.n	800e898 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e85e:	4b1a      	ldr	r3, [pc, #104]	; (800e8c8 <ip4_input+0x240>)
 800e860:	695b      	ldr	r3, [r3, #20]
 800e862:	6939      	ldr	r1, [r7, #16]
 800e864:	4618      	mov	r0, r3
 800e866:	f000 f90b 	bl	800ea80 <ip4_addr_isbroadcast_u32>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d10f      	bne.n	800e890 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e870:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <ip4_input+0x240>)
 800e872:	695b      	ldr	r3, [r3, #20]
 800e874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e878:	2be0      	cmp	r3, #224	; 0xe0
 800e87a:	d009      	beq.n	800e890 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e87c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7f8 fa2f 	bl	8006ce6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e888:	2102      	movs	r1, #2
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fdd8 	bl	800e440 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7f8 fa3b 	bl	8006d0c <pbuf_free>
        break;
 800e896:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e898:	4b0b      	ldr	r3, [pc, #44]	; (800e8c8 <ip4_input+0x240>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <ip4_input+0x240>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e8a4:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <ip4_input+0x240>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e8aa:	4b07      	ldr	r3, [pc, #28]	; (800e8c8 <ip4_input+0x240>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <ip4_input+0x240>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e8b6:	4b04      	ldr	r3, [pc, #16]	; (800e8c8 <ip4_input+0x240>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	200005b8 	.word	0x200005b8
 800e8cc:	20005cdc 	.word	0x20005cdc

0800e8d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	; 0x28
 800e8d4:	af04      	add	r7, sp, #16
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d003      	beq.n	800e8f6 <ip4_output_if+0x26>
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d102      	bne.n	800e8fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e8fc:	78fa      	ldrb	r2, [r7, #3]
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	9302      	str	r3, [sp, #8]
 800e902:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e906:	9301      	str	r3, [sp, #4]
 800e908:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	4613      	mov	r3, r2
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	6979      	ldr	r1, [r7, #20]
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 f805 	bl	800e924 <ip4_output_if_src>
 800e91a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b088      	sub	sp, #32
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	7b9b      	ldrb	r3, [r3, #14]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d006      	beq.n	800e948 <ip4_output_if_src+0x24>
 800e93a:	4b4b      	ldr	r3, [pc, #300]	; (800ea68 <ip4_output_if_src+0x144>)
 800e93c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e940:	494a      	ldr	r1, [pc, #296]	; (800ea6c <ip4_output_if_src+0x148>)
 800e942:	484b      	ldr	r0, [pc, #300]	; (800ea70 <ip4_output_if_src+0x14c>)
 800e944:	f001 f856 	bl	800f9f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d060      	beq.n	800ea10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e94e:	2314      	movs	r3, #20
 800e950:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e952:	2114      	movs	r1, #20
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f7f8 f943 	bl	8006be0 <pbuf_add_header>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e960:	f06f 0301 	mvn.w	r3, #1
 800e964:	e07c      	b.n	800ea60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	895b      	ldrh	r3, [r3, #10]
 800e970:	2b13      	cmp	r3, #19
 800e972:	d806      	bhi.n	800e982 <ip4_output_if_src+0x5e>
 800e974:	4b3c      	ldr	r3, [pc, #240]	; (800ea68 <ip4_output_if_src+0x144>)
 800e976:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e97a:	493e      	ldr	r1, [pc, #248]	; (800ea74 <ip4_output_if_src+0x150>)
 800e97c:	483c      	ldr	r0, [pc, #240]	; (800ea70 <ip4_output_if_src+0x14c>)
 800e97e:	f001 f839 	bl	800f9f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	78fa      	ldrb	r2, [r7, #3]
 800e986:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e98e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e998:	8b7b      	ldrh	r3, [r7, #26]
 800e99a:	089b      	lsrs	r3, r3, #2
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e9b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	891b      	ldrh	r3, [r3, #8]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f6 fef4 	bl	80057a4 <lwip_htons>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	461a      	mov	r2, r3
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	719a      	strb	r2, [r3, #6]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e9ce:	4b2a      	ldr	r3, [pc, #168]	; (800ea78 <ip4_output_if_src+0x154>)
 800e9d0:	881b      	ldrh	r3, [r3, #0]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7f6 fee6 	bl	80057a4 <lwip_htons>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	461a      	mov	r2, r3
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e9e0:	4b25      	ldr	r3, [pc, #148]	; (800ea78 <ip4_output_if_src+0x154>)
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	4b23      	ldr	r3, [pc, #140]	; (800ea78 <ip4_output_if_src+0x154>)
 800e9ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d104      	bne.n	800e9fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e9f2:	4b22      	ldr	r3, [pc, #136]	; (800ea7c <ip4_output_if_src+0x158>)
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	60da      	str	r2, [r3, #12]
 800e9fa:	e003      	b.n	800ea04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	2200      	movs	r2, #0
 800ea08:	729a      	strb	r2, [r3, #10]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	72da      	strb	r2, [r3, #11]
 800ea0e:	e00f      	b.n	800ea30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	895b      	ldrh	r3, [r3, #10]
 800ea14:	2b13      	cmp	r3, #19
 800ea16:	d802      	bhi.n	800ea1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea18:	f06f 0301 	mvn.w	r3, #1
 800ea1c:	e020      	b.n	800ea60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ea2a:	f107 0314 	add.w	r3, r7, #20
 800ea2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00c      	beq.n	800ea52 <ip4_output_if_src+0x12e>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	891a      	ldrh	r2, [r3, #8]
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d906      	bls.n	800ea52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f000 fd53 	bl	800f4f4 <ip4_frag>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	e006      	b.n	800ea60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	68f9      	ldr	r1, [r7, #12]
 800ea5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea5c:	4798      	blx	r3
 800ea5e:	4603      	mov	r3, r0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3720      	adds	r7, #32
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	080134bc 	.word	0x080134bc
 800ea6c:	080134f0 	.word	0x080134f0
 800ea70:	080134fc 	.word	0x080134fc
 800ea74:	08013524 	.word	0x08013524
 800ea78:	20005e3a 	.word	0x20005e3a
 800ea7c:	080138f8 	.word	0x080138f8

0800ea80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea94:	d002      	beq.n	800ea9c <ip4_addr_isbroadcast_u32+0x1c>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e02a      	b.n	800eaf6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eaa6:	f003 0302 	and.w	r3, r3, #2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e021      	b.n	800eaf6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	3304      	adds	r3, #4
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d101      	bne.n	800eac2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	e019      	b.n	800eaf6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	3304      	adds	r3, #4
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	405a      	eors	r2, r3
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	3308      	adds	r3, #8
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4013      	ands	r3, r2
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10d      	bne.n	800eaf4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	3308      	adds	r3, #8
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	43da      	mvns	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	3308      	adds	r3, #8
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d101      	bne.n	800eaf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eaf4:	2300      	movs	r3, #0
  }
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800eb0e:	4b12      	ldr	r3, [pc, #72]	; (800eb58 <ip_reass_tmr+0x54>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800eb14:	e018      	b.n	800eb48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	7fdb      	ldrb	r3, [r3, #31]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00b      	beq.n	800eb36 <ip_reass_tmr+0x32>
      r->timer--;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	7fdb      	ldrb	r3, [r3, #31]
 800eb22:	3b01      	subs	r3, #1
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	e008      	b.n	800eb48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f80a 	bl	800eb5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1e3      	bne.n	800eb16 <ip_reass_tmr+0x12>
    }
  }
}
 800eb4e:	bf00      	nop
 800eb50:	bf00      	nop
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20005e3c 	.word	0x20005e3c

0800eb5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b088      	sub	sp, #32
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d105      	bne.n	800eb7e <ip_reass_free_complete_datagram+0x22>
 800eb72:	4b45      	ldr	r3, [pc, #276]	; (800ec88 <ip_reass_free_complete_datagram+0x12c>)
 800eb74:	22ab      	movs	r2, #171	; 0xab
 800eb76:	4945      	ldr	r1, [pc, #276]	; (800ec8c <ip_reass_free_complete_datagram+0x130>)
 800eb78:	4845      	ldr	r0, [pc, #276]	; (800ec90 <ip_reass_free_complete_datagram+0x134>)
 800eb7a:	f000 ff3b 	bl	800f9f4 <iprintf>
  if (prev != NULL) {
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d005      	beq.n	800eb9a <ip_reass_free_complete_datagram+0x3e>
 800eb8e:	4b3e      	ldr	r3, [pc, #248]	; (800ec88 <ip_reass_free_complete_datagram+0x12c>)
 800eb90:	22ad      	movs	r2, #173	; 0xad
 800eb92:	4940      	ldr	r1, [pc, #256]	; (800ec94 <ip_reass_free_complete_datagram+0x138>)
 800eb94:	483e      	ldr	r0, [pc, #248]	; (800ec90 <ip_reass_free_complete_datagram+0x134>)
 800eb96:	f000 ff2d 	bl	800f9f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	889b      	ldrh	r3, [r3, #4]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d12a      	bne.n	800ec02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	6858      	ldr	r0, [r3, #4]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	2214      	movs	r2, #20
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	f000 fee5 	bl	800f994 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ebca:	2101      	movs	r1, #1
 800ebcc:	69b8      	ldr	r0, [r7, #24]
 800ebce:	f7ff fc47 	bl	800e460 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ebd2:	69b8      	ldr	r0, [r7, #24]
 800ebd4:	f7f8 f922 	bl	8006e1c <pbuf_clen>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ebdc:	8bfa      	ldrh	r2, [r7, #30]
 800ebde:	8a7b      	ldrh	r3, [r7, #18]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebe6:	db05      	blt.n	800ebf4 <ip_reass_free_complete_datagram+0x98>
 800ebe8:	4b27      	ldr	r3, [pc, #156]	; (800ec88 <ip_reass_free_complete_datagram+0x12c>)
 800ebea:	22bc      	movs	r2, #188	; 0xbc
 800ebec:	492a      	ldr	r1, [pc, #168]	; (800ec98 <ip_reass_free_complete_datagram+0x13c>)
 800ebee:	4828      	ldr	r0, [pc, #160]	; (800ec90 <ip_reass_free_complete_datagram+0x134>)
 800ebf0:	f000 ff00 	bl	800f9f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ebf4:	8bfa      	ldrh	r2, [r7, #30]
 800ebf6:	8a7b      	ldrh	r3, [r7, #18]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ebfc:	69b8      	ldr	r0, [r7, #24]
 800ebfe:	f7f8 f885 	bl	8006d0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ec08:	e01f      	b.n	800ec4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f7f8 f8fe 	bl	8006e1c <pbuf_clen>
 800ec20:	4603      	mov	r3, r0
 800ec22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ec24:	8bfa      	ldrh	r2, [r7, #30]
 800ec26:	8a7b      	ldrh	r3, [r7, #18]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec2e:	db05      	blt.n	800ec3c <ip_reass_free_complete_datagram+0xe0>
 800ec30:	4b15      	ldr	r3, [pc, #84]	; (800ec88 <ip_reass_free_complete_datagram+0x12c>)
 800ec32:	22cc      	movs	r2, #204	; 0xcc
 800ec34:	4918      	ldr	r1, [pc, #96]	; (800ec98 <ip_reass_free_complete_datagram+0x13c>)
 800ec36:	4816      	ldr	r0, [pc, #88]	; (800ec90 <ip_reass_free_complete_datagram+0x134>)
 800ec38:	f000 fedc 	bl	800f9f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ec3c:	8bfa      	ldrh	r2, [r7, #30]
 800ec3e:	8a7b      	ldrh	r3, [r7, #18]
 800ec40:	4413      	add	r3, r2
 800ec42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f7f8 f861 	bl	8006d0c <pbuf_free>
  while (p != NULL) {
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1dc      	bne.n	800ec0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f8c2 	bl	800eddc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ec58:	4b10      	ldr	r3, [pc, #64]	; (800ec9c <ip_reass_free_complete_datagram+0x140>)
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	8bfa      	ldrh	r2, [r7, #30]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d905      	bls.n	800ec6e <ip_reass_free_complete_datagram+0x112>
 800ec62:	4b09      	ldr	r3, [pc, #36]	; (800ec88 <ip_reass_free_complete_datagram+0x12c>)
 800ec64:	22d2      	movs	r2, #210	; 0xd2
 800ec66:	490e      	ldr	r1, [pc, #56]	; (800eca0 <ip_reass_free_complete_datagram+0x144>)
 800ec68:	4809      	ldr	r0, [pc, #36]	; (800ec90 <ip_reass_free_complete_datagram+0x134>)
 800ec6a:	f000 fec3 	bl	800f9f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ec6e:	4b0b      	ldr	r3, [pc, #44]	; (800ec9c <ip_reass_free_complete_datagram+0x140>)
 800ec70:	881a      	ldrh	r2, [r3, #0]
 800ec72:	8bfb      	ldrh	r3, [r7, #30]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	4b08      	ldr	r3, [pc, #32]	; (800ec9c <ip_reass_free_complete_datagram+0x140>)
 800ec7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ec7c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3720      	adds	r7, #32
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	08013554 	.word	0x08013554
 800ec8c:	08013590 	.word	0x08013590
 800ec90:	0801359c 	.word	0x0801359c
 800ec94:	080135c4 	.word	0x080135c4
 800ec98:	080135d8 	.word	0x080135d8
 800ec9c:	20005e40 	.word	0x20005e40
 800eca0:	080135f8 	.word	0x080135f8

0800eca4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b08a      	sub	sp, #40	; 0x28
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ecc2:	4b28      	ldr	r3, [pc, #160]	; (800ed64 <ip_reass_remove_oldest_datagram+0xc0>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ecc8:	e030      	b.n	800ed2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eccc:	695a      	ldr	r2, [r3, #20]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d10c      	bne.n	800ecf0 <ip_reass_remove_oldest_datagram+0x4c>
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	699a      	ldr	r2, [r3, #24]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d106      	bne.n	800ecf0 <ip_reass_remove_oldest_datagram+0x4c>
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	899a      	ldrh	r2, [r3, #12]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	889b      	ldrh	r3, [r3, #4]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d014      	beq.n	800ed1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ecf6:	6a3b      	ldr	r3, [r7, #32]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d104      	bne.n	800ed06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	61bb      	str	r3, [r7, #24]
 800ed04:	e009      	b.n	800ed1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	7fda      	ldrb	r2, [r3, #31]
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	7fdb      	ldrb	r3, [r3, #31]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d803      	bhi.n	800ed1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ed12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ed22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1cb      	bne.n	800ecca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ed32:	6a3b      	ldr	r3, [r7, #32]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d008      	beq.n	800ed4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ed38:	69b9      	ldr	r1, [r7, #24]
 800ed3a:	6a38      	ldr	r0, [r7, #32]
 800ed3c:	f7ff ff0e 	bl	800eb5c <ip_reass_free_complete_datagram>
 800ed40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	4413      	add	r3, r2
 800ed48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	da02      	bge.n	800ed58 <ip_reass_remove_oldest_datagram+0xb4>
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	dcac      	bgt.n	800ecb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ed58:	697b      	ldr	r3, [r7, #20]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3728      	adds	r7, #40	; 0x28
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20005e3c 	.word	0x20005e3c

0800ed68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ed72:	2004      	movs	r0, #4
 800ed74:	f7f7 f96c 	bl	8006050 <memp_malloc>
 800ed78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d110      	bne.n	800eda2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ff8e 	bl	800eca4 <ip_reass_remove_oldest_datagram>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	dc03      	bgt.n	800ed98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ed90:	2004      	movs	r0, #4
 800ed92:	f7f7 f95d 	bl	8006050 <memp_malloc>
 800ed96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e016      	b.n	800edd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eda2:	2220      	movs	r2, #32
 800eda4:	2100      	movs	r1, #0
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 fe1c 	bl	800f9e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	220f      	movs	r2, #15
 800edb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800edb2:	4b09      	ldr	r3, [pc, #36]	; (800edd8 <ip_reass_enqueue_new_datagram+0x70>)
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800edba:	4a07      	ldr	r2, [pc, #28]	; (800edd8 <ip_reass_enqueue_new_datagram+0x70>)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	3308      	adds	r3, #8
 800edc4:	2214      	movs	r2, #20
 800edc6:	6879      	ldr	r1, [r7, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 fde3 	bl	800f994 <memcpy>
  return ipr;
 800edce:	68fb      	ldr	r3, [r7, #12]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20005e3c 	.word	0x20005e3c

0800eddc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ede6:	4b10      	ldr	r3, [pc, #64]	; (800ee28 <ip_reass_dequeue_datagram+0x4c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	429a      	cmp	r2, r3
 800edee:	d104      	bne.n	800edfa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <ip_reass_dequeue_datagram+0x4c>)
 800edf6:	6013      	str	r3, [r2, #0]
 800edf8:	e00d      	b.n	800ee16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <ip_reass_dequeue_datagram+0x32>
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <ip_reass_dequeue_datagram+0x50>)
 800ee02:	f240 1245 	movw	r2, #325	; 0x145
 800ee06:	490a      	ldr	r1, [pc, #40]	; (800ee30 <ip_reass_dequeue_datagram+0x54>)
 800ee08:	480a      	ldr	r0, [pc, #40]	; (800ee34 <ip_reass_dequeue_datagram+0x58>)
 800ee0a:	f000 fdf3 	bl	800f9f4 <iprintf>
    prev->next = ipr->next;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ee16:	6879      	ldr	r1, [r7, #4]
 800ee18:	2004      	movs	r0, #4
 800ee1a:	f7f7 f965 	bl	80060e8 <memp_free>
}
 800ee1e:	bf00      	nop
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20005e3c 	.word	0x20005e3c
 800ee2c:	08013554 	.word	0x08013554
 800ee30:	0801361c 	.word	0x0801361c
 800ee34:	0801359c 	.word	0x0801359c

0800ee38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b08c      	sub	sp, #48	; 0x30
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	885b      	ldrh	r3, [r3, #2]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7f6 fca3 	bl	80057a4 <lwip_htons>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ee62:	69fb      	ldr	r3, [r7, #28]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	f003 030f 	and.w	r3, r3, #15
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ee70:	7e7b      	ldrb	r3, [r7, #25]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	8b7a      	ldrh	r2, [r7, #26]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d202      	bcs.n	800ee80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee7e:	e135      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ee80:	7e7b      	ldrb	r3, [r7, #25]
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	8b7a      	ldrh	r2, [r7, #26]
 800ee86:	1ad3      	subs	r3, r2, r3
 800ee88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	88db      	ldrh	r3, [r3, #6]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f6 fc87 	bl	80057a4 <lwip_htons>
 800ee96:	4603      	mov	r3, r0
 800ee98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeaa:	2200      	movs	r2, #0
 800eeac:	701a      	strb	r2, [r3, #0]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	705a      	strb	r2, [r3, #1]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	709a      	strb	r2, [r3, #2]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800eeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebc:	8afa      	ldrh	r2, [r7, #22]
 800eebe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800eec0:	8afa      	ldrh	r2, [r7, #22]
 800eec2:	8b7b      	ldrh	r3, [r7, #26]
 800eec4:	4413      	add	r3, r2
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	88db      	ldrh	r3, [r3, #6]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	8afa      	ldrh	r2, [r7, #22]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d902      	bls.n	800eede <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
 800eedc:	e106      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	627b      	str	r3, [r7, #36]	; 0x24
 800eee4:	e068      	b.n	800efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	889b      	ldrh	r3, [r3, #4]
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	889b      	ldrh	r3, [r3, #4]
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d235      	bcs.n	800ef68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d020      	beq.n	800ef4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0a:	889b      	ldrh	r3, [r3, #4]
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef10:	88db      	ldrh	r3, [r3, #6]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d307      	bcc.n	800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	88db      	ldrh	r3, [r3, #6]
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	889b      	ldrh	r3, [r3, #4]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d902      	bls.n	800ef2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef28:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2c:	e0de      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ef34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	889b      	ldrh	r3, [r3, #4]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d03d      	beq.n	800efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ef48:	e03a      	b.n	800efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	88db      	ldrh	r3, [r3, #6]
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	889b      	ldrh	r3, [r3, #4]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d902      	bls.n	800ef60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5e:	e0c5      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	605a      	str	r2, [r3, #4]
      break;
 800ef66:	e02b      	b.n	800efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	889b      	ldrh	r3, [r3, #4]
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	889b      	ldrh	r3, [r3, #4]
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d102      	bne.n	800ef7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7c:	e0b6      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef80:	889b      	ldrh	r3, [r3, #4]
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	88db      	ldrh	r3, [r3, #6]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d202      	bcs.n	800ef94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef92:	e0ab      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d009      	beq.n	800efae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ef9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9c:	88db      	ldrh	r3, [r3, #6]
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	889b      	ldrh	r3, [r3, #4]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d001      	beq.n	800efae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d193      	bne.n	800eee6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800efbe:	e000      	b.n	800efc2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800efc0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d12d      	bne.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d01c      	beq.n	800f008 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800efce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd0:	88db      	ldrh	r3, [r3, #6]
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	889b      	ldrh	r3, [r3, #4]
 800efd8:	b29b      	uxth	r3, r3
 800efda:	429a      	cmp	r2, r3
 800efdc:	d906      	bls.n	800efec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800efde:	4b45      	ldr	r3, [pc, #276]	; (800f0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800efe0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800efe4:	4944      	ldr	r1, [pc, #272]	; (800f0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800efe6:	4845      	ldr	r0, [pc, #276]	; (800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800efe8:	f000 fd04 	bl	800f9f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800eff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff4:	88db      	ldrh	r3, [r3, #6]
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	889b      	ldrh	r3, [r3, #4]
 800effc:	b29b      	uxth	r3, r3
 800effe:	429a      	cmp	r2, r3
 800f000:	d010      	beq.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	623b      	str	r3, [r7, #32]
 800f006:	e00d      	b.n	800f024 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d006      	beq.n	800f01e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f010:	4b38      	ldr	r3, [pc, #224]	; (800f0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f012:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f016:	493a      	ldr	r1, [pc, #232]	; (800f100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f018:	4838      	ldr	r0, [pc, #224]	; (800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f01a:	f000 fceb 	bl	800f9f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d105      	bne.n	800f036 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	7f9b      	ldrb	r3, [r3, #30]
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	2b00      	cmp	r3, #0
 800f034:	d059      	beq.n	800f0ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d04f      	beq.n	800f0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d006      	beq.n	800f052 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	889b      	ldrh	r3, [r3, #4]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	623b      	str	r3, [r7, #32]
 800f056:	e041      	b.n	800f0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f062:	e012      	b.n	800f08a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	88db      	ldrh	r3, [r3, #6]
 800f06e:	b29a      	uxth	r2, r3
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	889b      	ldrh	r3, [r3, #4]
 800f074:	b29b      	uxth	r3, r3
 800f076:	429a      	cmp	r2, r3
 800f078:	d002      	beq.n	800f080 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	623b      	str	r3, [r7, #32]
            break;
 800f07e:	e007      	b.n	800f090 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e9      	bne.n	800f064 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d022      	beq.n	800f0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d106      	bne.n	800f0ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f09e:	4b15      	ldr	r3, [pc, #84]	; (800f0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0a0:	f240 12df 	movw	r2, #479	; 0x1df
 800f0a4:	4917      	ldr	r1, [pc, #92]	; (800f104 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f0a6:	4815      	ldr	r0, [pc, #84]	; (800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0a8:	f000 fca4 	bl	800f9f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d106      	bne.n	800f0c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f0b8:	4b0e      	ldr	r3, [pc, #56]	; (800f0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f0be:	4911      	ldr	r1, [pc, #68]	; (800f104 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f0c0:	480e      	ldr	r0, [pc, #56]	; (800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0c2:	f000 fc97 	bl	800f9f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d006      	beq.n	800f0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f0ce:	4b09      	ldr	r3, [pc, #36]	; (800f0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f0d4:	490c      	ldr	r1, [pc, #48]	; (800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f0d6:	4809      	ldr	r0, [pc, #36]	; (800f0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0d8:	f000 fc8c 	bl	800f9f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	bf14      	ite	ne
 800f0e2:	2301      	movne	r3, #1
 800f0e4:	2300      	moveq	r3, #0
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	e000      	b.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3730      	adds	r7, #48	; 0x30
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	08013554 	.word	0x08013554
 800f0f8:	08013638 	.word	0x08013638
 800f0fc:	0801359c 	.word	0x0801359c
 800f100:	08013658 	.word	0x08013658
 800f104:	08013690 	.word	0x08013690
 800f108:	080136a0 	.word	0x080136a0

0800f10c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08e      	sub	sp, #56	; 0x38
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	f003 030f 	and.w	r3, r3, #15
 800f122:	b2db      	uxtb	r3, r3
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b14      	cmp	r3, #20
 800f12a:	f040 8171 	bne.w	800f410 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f130:	88db      	ldrh	r3, [r3, #6]
 800f132:	b29b      	uxth	r3, r3
 800f134:	4618      	mov	r0, r3
 800f136:	f7f6 fb35 	bl	80057a4 <lwip_htons>
 800f13a:	4603      	mov	r3, r0
 800f13c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f140:	b29b      	uxth	r3, r3
 800f142:	00db      	lsls	r3, r3, #3
 800f144:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f148:	885b      	ldrh	r3, [r3, #2]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f6 fb29 	bl	80057a4 <lwip_htons>
 800f152:	4603      	mov	r3, r0
 800f154:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	f003 030f 	and.w	r3, r3, #15
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f16e:	429a      	cmp	r2, r3
 800f170:	f0c0 8150 	bcc.w	800f414 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f178:	b29b      	uxth	r3, r3
 800f17a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7f7 fe4b 	bl	8006e1c <pbuf_clen>
 800f186:	4603      	mov	r3, r0
 800f188:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f18a:	4b8c      	ldr	r3, [pc, #560]	; (800f3bc <ip4_reass+0x2b0>)
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	8c3b      	ldrh	r3, [r7, #32]
 800f192:	4413      	add	r3, r2
 800f194:	2b0a      	cmp	r3, #10
 800f196:	dd10      	ble.n	800f1ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f198:	8c3b      	ldrh	r3, [r7, #32]
 800f19a:	4619      	mov	r1, r3
 800f19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f19e:	f7ff fd81 	bl	800eca4 <ip_reass_remove_oldest_datagram>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f000 8137 	beq.w	800f418 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f1aa:	4b84      	ldr	r3, [pc, #528]	; (800f3bc <ip4_reass+0x2b0>)
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	8c3b      	ldrh	r3, [r7, #32]
 800f1b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f1b4:	2b0a      	cmp	r3, #10
 800f1b6:	f300 812f 	bgt.w	800f418 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f1ba:	4b81      	ldr	r3, [pc, #516]	; (800f3c0 <ip4_reass+0x2b4>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	633b      	str	r3, [r7, #48]	; 0x30
 800f1c0:	e015      	b.n	800f1ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	695a      	ldr	r2, [r3, #20]
 800f1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d10c      	bne.n	800f1e8 <ip4_reass+0xdc>
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d0:	699a      	ldr	r2, [r3, #24]
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d106      	bne.n	800f1e8 <ip4_reass+0xdc>
 800f1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1dc:	899a      	ldrh	r2, [r3, #12]
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	889b      	ldrh	r3, [r3, #4]
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d006      	beq.n	800f1f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1e6      	bne.n	800f1c2 <ip4_reass+0xb6>
 800f1f4:	e000      	b.n	800f1f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f1f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d109      	bne.n	800f212 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f1fe:	8c3b      	ldrh	r3, [r7, #32]
 800f200:	4619      	mov	r1, r3
 800f202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f204:	f7ff fdb0 	bl	800ed68 <ip_reass_enqueue_new_datagram>
 800f208:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d11c      	bne.n	800f24a <ip4_reass+0x13e>
      goto nullreturn;
 800f210:	e105      	b.n	800f41e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f214:	88db      	ldrh	r3, [r3, #6]
 800f216:	b29b      	uxth	r3, r3
 800f218:	4618      	mov	r0, r3
 800f21a:	f7f6 fac3 	bl	80057a4 <lwip_htons>
 800f21e:	4603      	mov	r3, r0
 800f220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f224:	2b00      	cmp	r3, #0
 800f226:	d110      	bne.n	800f24a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	89db      	ldrh	r3, [r3, #14]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f6 fab9 	bl	80057a4 <lwip_htons>
 800f232:	4603      	mov	r3, r0
 800f234:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d006      	beq.n	800f24a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	3308      	adds	r3, #8
 800f240:	2214      	movs	r2, #20
 800f242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f244:	4618      	mov	r0, r3
 800f246:	f000 fba5 	bl	800f994 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	88db      	ldrh	r3, [r3, #6]
 800f24e:	b29b      	uxth	r3, r3
 800f250:	f003 0320 	and.w	r3, r3, #32
 800f254:	2b00      	cmp	r3, #0
 800f256:	bf0c      	ite	eq
 800f258:	2301      	moveq	r3, #1
 800f25a:	2300      	movne	r3, #0
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00e      	beq.n	800f284 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f266:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f26a:	4413      	add	r3, r2
 800f26c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f26e:	8b7a      	ldrh	r2, [r7, #26]
 800f270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f272:	429a      	cmp	r2, r3
 800f274:	f0c0 80a0 	bcc.w	800f3b8 <ip4_reass+0x2ac>
 800f278:	8b7b      	ldrh	r3, [r7, #26]
 800f27a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f27e:	4293      	cmp	r3, r2
 800f280:	f200 809a 	bhi.w	800f3b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f284:	69fa      	ldr	r2, [r7, #28]
 800f286:	6879      	ldr	r1, [r7, #4]
 800f288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f28a:	f7ff fdd5 	bl	800ee38 <ip_reass_chain_frag_into_datagram_and_validate>
 800f28e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f296:	f000 809b 	beq.w	800f3d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f29a:	4b48      	ldr	r3, [pc, #288]	; (800f3bc <ip4_reass+0x2b0>)
 800f29c:	881a      	ldrh	r2, [r3, #0]
 800f29e:	8c3b      	ldrh	r3, [r7, #32]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	4b45      	ldr	r3, [pc, #276]	; (800f3bc <ip4_reass+0x2b0>)
 800f2a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00d      	beq.n	800f2ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f2ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2b2:	4413      	add	r3, r2
 800f2b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b8:	8a7a      	ldrh	r2, [r7, #18]
 800f2ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2be:	7f9b      	ldrb	r3, [r3, #30]
 800f2c0:	f043 0301 	orr.w	r3, r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d171      	bne.n	800f3b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d2:	8b9b      	ldrh	r3, [r3, #28]
 800f2d4:	3314      	adds	r3, #20
 800f2d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	2214      	movs	r2, #20
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2f4:	f000 fb4e 	bl	800f994 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f2f8:	8a3b      	ldrh	r3, [r7, #16]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7f6 fa52 	bl	80057a4 <lwip_htons>
 800f300:	4603      	mov	r3, r0
 800f302:	461a      	mov	r2, r3
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	2200      	movs	r2, #0
 800f30c:	719a      	strb	r2, [r3, #6]
 800f30e:	2200      	movs	r2, #0
 800f310:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f314:	2200      	movs	r2, #0
 800f316:	729a      	strb	r2, [r3, #10]
 800f318:	2200      	movs	r2, #0
 800f31a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f322:	e00d      	b.n	800f340 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f32a:	2114      	movs	r1, #20
 800f32c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f32e:	f7f7 fc67 	bl	8006c00 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7f7 fdab 	bl	8006e90 <pbuf_cat>
      r = iprh->next_pbuf;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f342:	2b00      	cmp	r3, #0
 800f344:	d1ee      	bne.n	800f324 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f346:	4b1e      	ldr	r3, [pc, #120]	; (800f3c0 <ip4_reass+0x2b4>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d102      	bne.n	800f356 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f350:	2300      	movs	r3, #0
 800f352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f354:	e010      	b.n	800f378 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f356:	4b1a      	ldr	r3, [pc, #104]	; (800f3c0 <ip4_reass+0x2b4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f35c:	e007      	b.n	800f36e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f364:	429a      	cmp	r2, r3
 800f366:	d006      	beq.n	800f376 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1f4      	bne.n	800f35e <ip4_reass+0x252>
 800f374:	e000      	b.n	800f378 <ip4_reass+0x26c>
          break;
 800f376:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f37a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f37c:	f7ff fd2e 	bl	800eddc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7f7 fd4b 	bl	8006e1c <pbuf_clen>
 800f386:	4603      	mov	r3, r0
 800f388:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f38a:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <ip4_reass+0x2b0>)
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	8c3a      	ldrh	r2, [r7, #32]
 800f390:	429a      	cmp	r2, r3
 800f392:	d906      	bls.n	800f3a2 <ip4_reass+0x296>
 800f394:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <ip4_reass+0x2b8>)
 800f396:	f240 229b 	movw	r2, #667	; 0x29b
 800f39a:	490b      	ldr	r1, [pc, #44]	; (800f3c8 <ip4_reass+0x2bc>)
 800f39c:	480b      	ldr	r0, [pc, #44]	; (800f3cc <ip4_reass+0x2c0>)
 800f39e:	f000 fb29 	bl	800f9f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f3a2:	4b06      	ldr	r3, [pc, #24]	; (800f3bc <ip4_reass+0x2b0>)
 800f3a4:	881a      	ldrh	r2, [r3, #0]
 800f3a6:	8c3b      	ldrh	r3, [r7, #32]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <ip4_reass+0x2b0>)
 800f3ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	e038      	b.n	800f426 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e036      	b.n	800f426 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f3b8:	bf00      	nop
 800f3ba:	e00a      	b.n	800f3d2 <ip4_reass+0x2c6>
 800f3bc:	20005e40 	.word	0x20005e40
 800f3c0:	20005e3c 	.word	0x20005e3c
 800f3c4:	08013554 	.word	0x08013554
 800f3c8:	080136c4 	.word	0x080136c4
 800f3cc:	0801359c 	.word	0x0801359c
    goto nullreturn_ipr;
 800f3d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <ip4_reass+0x2da>
 800f3d8:	4b15      	ldr	r3, [pc, #84]	; (800f430 <ip4_reass+0x324>)
 800f3da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f3de:	4915      	ldr	r1, [pc, #84]	; (800f434 <ip4_reass+0x328>)
 800f3e0:	4815      	ldr	r0, [pc, #84]	; (800f438 <ip4_reass+0x32c>)
 800f3e2:	f000 fb07 	bl	800f9f4 <iprintf>
  if (ipr->p == NULL) {
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d116      	bne.n	800f41c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f3ee:	4b13      	ldr	r3, [pc, #76]	; (800f43c <ip4_reass+0x330>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d006      	beq.n	800f406 <ip4_reass+0x2fa>
 800f3f8:	4b0d      	ldr	r3, [pc, #52]	; (800f430 <ip4_reass+0x324>)
 800f3fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f3fe:	4910      	ldr	r1, [pc, #64]	; (800f440 <ip4_reass+0x334>)
 800f400:	480d      	ldr	r0, [pc, #52]	; (800f438 <ip4_reass+0x32c>)
 800f402:	f000 faf7 	bl	800f9f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f406:	2100      	movs	r1, #0
 800f408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f40a:	f7ff fce7 	bl	800eddc <ip_reass_dequeue_datagram>
 800f40e:	e006      	b.n	800f41e <ip4_reass+0x312>
    goto nullreturn;
 800f410:	bf00      	nop
 800f412:	e004      	b.n	800f41e <ip4_reass+0x312>
    goto nullreturn;
 800f414:	bf00      	nop
 800f416:	e002      	b.n	800f41e <ip4_reass+0x312>
      goto nullreturn;
 800f418:	bf00      	nop
 800f41a:	e000      	b.n	800f41e <ip4_reass+0x312>
  }

nullreturn:
 800f41c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7f7 fc74 	bl	8006d0c <pbuf_free>
  return NULL;
 800f424:	2300      	movs	r3, #0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3738      	adds	r7, #56	; 0x38
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	08013554 	.word	0x08013554
 800f434:	080136e0 	.word	0x080136e0
 800f438:	0801359c 	.word	0x0801359c
 800f43c:	20005e3c 	.word	0x20005e3c
 800f440:	080136ec 	.word	0x080136ec

0800f444 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f448:	2005      	movs	r0, #5
 800f44a:	f7f6 fe01 	bl	8006050 <memp_malloc>
 800f44e:	4603      	mov	r3, r0
}
 800f450:	4618      	mov	r0, r3
 800f452:	bd80      	pop	{r7, pc}

0800f454 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f462:	4b07      	ldr	r3, [pc, #28]	; (800f480 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f464:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f468:	4906      	ldr	r1, [pc, #24]	; (800f484 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f46a:	4807      	ldr	r0, [pc, #28]	; (800f488 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f46c:	f000 fac2 	bl	800f9f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f470:	6879      	ldr	r1, [r7, #4]
 800f472:	2005      	movs	r0, #5
 800f474:	f7f6 fe38 	bl	80060e8 <memp_free>
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	08013554 	.word	0x08013554
 800f484:	0801370c 	.word	0x0801370c
 800f488:	0801359c 	.word	0x0801359c

0800f48c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <ipfrag_free_pbuf_custom+0x20>
 800f49e:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <ipfrag_free_pbuf_custom+0x58>)
 800f4a0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f4a4:	4910      	ldr	r1, [pc, #64]	; (800f4e8 <ipfrag_free_pbuf_custom+0x5c>)
 800f4a6:	4811      	ldr	r0, [pc, #68]	; (800f4ec <ipfrag_free_pbuf_custom+0x60>)
 800f4a8:	f000 faa4 	bl	800f9f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d006      	beq.n	800f4c2 <ipfrag_free_pbuf_custom+0x36>
 800f4b4:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <ipfrag_free_pbuf_custom+0x58>)
 800f4b6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f4ba:	490d      	ldr	r1, [pc, #52]	; (800f4f0 <ipfrag_free_pbuf_custom+0x64>)
 800f4bc:	480b      	ldr	r0, [pc, #44]	; (800f4ec <ipfrag_free_pbuf_custom+0x60>)
 800f4be:	f000 fa99 	bl	800f9f4 <iprintf>
  if (pcr->original != NULL) {
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	695b      	ldr	r3, [r3, #20]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7f7 fc1c 	bl	8006d0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	f7ff ffbd 	bl	800f454 <ip_frag_free_pbuf_custom_ref>
}
 800f4da:	bf00      	nop
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	08013554 	.word	0x08013554
 800f4e8:	08013718 	.word	0x08013718
 800f4ec:	0801359c 	.word	0x0801359c
 800f4f0:	08013724 	.word	0x08013724

0800f4f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b094      	sub	sp, #80	; 0x50
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f500:	2300      	movs	r3, #0
 800f502:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f50a:	3b14      	subs	r3, #20
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	da00      	bge.n	800f512 <ip4_frag+0x1e>
 800f510:	3307      	adds	r3, #7
 800f512:	10db      	asrs	r3, r3, #3
 800f514:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f516:	2314      	movs	r3, #20
 800f518:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f522:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	f003 030f 	and.w	r3, r3, #15
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	b2db      	uxtb	r3, r3
 800f532:	2b14      	cmp	r3, #20
 800f534:	d002      	beq.n	800f53c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f536:	f06f 0305 	mvn.w	r3, #5
 800f53a:	e110      	b.n	800f75e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	895b      	ldrh	r3, [r3, #10]
 800f540:	2b13      	cmp	r3, #19
 800f542:	d809      	bhi.n	800f558 <ip4_frag+0x64>
 800f544:	4b88      	ldr	r3, [pc, #544]	; (800f768 <ip4_frag+0x274>)
 800f546:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f54a:	4988      	ldr	r1, [pc, #544]	; (800f76c <ip4_frag+0x278>)
 800f54c:	4888      	ldr	r0, [pc, #544]	; (800f770 <ip4_frag+0x27c>)
 800f54e:	f000 fa51 	bl	800f9f4 <iprintf>
 800f552:	f06f 0305 	mvn.w	r3, #5
 800f556:	e102      	b.n	800f75e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	88db      	ldrh	r3, [r3, #6]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f6 f920 	bl	80057a4 <lwip_htons>
 800f564:	4603      	mov	r3, r0
 800f566:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f568:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f56a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f56e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f578:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	891b      	ldrh	r3, [r3, #8]
 800f57e:	3b14      	subs	r3, #20
 800f580:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f584:	e0e1      	b.n	800f74a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f586:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f588:	00db      	lsls	r3, r3, #3
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f590:	4293      	cmp	r3, r2
 800f592:	bf28      	it	cs
 800f594:	4613      	movcs	r3, r2
 800f596:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f598:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f59c:	2114      	movs	r1, #20
 800f59e:	200e      	movs	r0, #14
 800f5a0:	f7f7 f8d0 	bl	8006744 <pbuf_alloc>
 800f5a4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 80d5 	beq.w	800f758 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	895b      	ldrh	r3, [r3, #10]
 800f5b2:	2b13      	cmp	r3, #19
 800f5b4:	d806      	bhi.n	800f5c4 <ip4_frag+0xd0>
 800f5b6:	4b6c      	ldr	r3, [pc, #432]	; (800f768 <ip4_frag+0x274>)
 800f5b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f5bc:	496d      	ldr	r1, [pc, #436]	; (800f774 <ip4_frag+0x280>)
 800f5be:	486c      	ldr	r0, [pc, #432]	; (800f770 <ip4_frag+0x27c>)
 800f5c0:	f000 fa18 	bl	800f9f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	2214      	movs	r2, #20
 800f5ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 f9e1 	bl	800f994 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f5d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f5de:	e064      	b.n	800f6aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	895a      	ldrh	r2, [r3, #10]
 800f5e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	895b      	ldrh	r3, [r3, #10]
 800f5ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d906      	bls.n	800f602 <ip4_frag+0x10e>
 800f5f4:	4b5c      	ldr	r3, [pc, #368]	; (800f768 <ip4_frag+0x274>)
 800f5f6:	f240 322d 	movw	r2, #813	; 0x32d
 800f5fa:	495f      	ldr	r1, [pc, #380]	; (800f778 <ip4_frag+0x284>)
 800f5fc:	485c      	ldr	r0, [pc, #368]	; (800f770 <ip4_frag+0x27c>)
 800f5fe:	f000 f9f9 	bl	800f9f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f602:	8bfa      	ldrh	r2, [r7, #30]
 800f604:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f608:	4293      	cmp	r3, r2
 800f60a:	bf28      	it	cs
 800f60c:	4613      	movcs	r3, r2
 800f60e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f612:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f616:	2b00      	cmp	r3, #0
 800f618:	d105      	bne.n	800f626 <ip4_frag+0x132>
        poff = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	60fb      	str	r3, [r7, #12]
        continue;
 800f624:	e041      	b.n	800f6aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f626:	f7ff ff0d 	bl	800f444 <ip_frag_alloc_pbuf_custom_ref>
 800f62a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d103      	bne.n	800f63a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f634:	f7f7 fb6a 	bl	8006d0c <pbuf_free>
        goto memerr;
 800f638:	e08f      	b.n	800f75a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f63a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f640:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f642:	4413      	add	r3, r2
 800f644:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f648:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f64c:	9201      	str	r2, [sp, #4]
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	4603      	mov	r3, r0
 800f652:	2241      	movs	r2, #65	; 0x41
 800f654:	2000      	movs	r0, #0
 800f656:	f7f7 f99f 	bl	8006998 <pbuf_alloced_custom>
 800f65a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d106      	bne.n	800f670 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f662:	69b8      	ldr	r0, [r7, #24]
 800f664:	f7ff fef6 	bl	800f454 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f66a:	f7f7 fb4f 	bl	8006d0c <pbuf_free>
        goto memerr;
 800f66e:	e074      	b.n	800f75a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f7f7 fbeb 	bl	8006e4c <pbuf_ref>
      pcr->original = p;
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	4a3f      	ldr	r2, [pc, #252]	; (800f77c <ip4_frag+0x288>)
 800f680:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f682:	6979      	ldr	r1, [r7, #20]
 800f684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f686:	f7f7 fc03 	bl	8006e90 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f68a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f68e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f698:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d004      	beq.n	800f6aa <ip4_frag+0x1b6>
        poff = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f6aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d196      	bne.n	800f5e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f6b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f6b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f6b8:	4413      	add	r3, r2
 800f6ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f6c0:	f1a3 0213 	sub.w	r2, r3, #19
 800f6c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	bfcc      	ite	gt
 800f6cc:	2301      	movgt	r3, #1
 800f6ce:	2300      	movle	r3, #0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f6d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f6d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <ip4_frag+0x1f6>
 800f6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d003      	beq.n	800f6f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f6ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f6f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f6f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7f6 f855 	bl	80057a4 <lwip_htons>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f702:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f704:	3314      	adds	r3, #20
 800f706:	b29b      	uxth	r3, r3
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f6 f84b 	bl	80057a4 <lwip_htons>
 800f70e:	4603      	mov	r3, r0
 800f710:	461a      	mov	r2, r3
 800f712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f714:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	2200      	movs	r2, #0
 800f71a:	729a      	strb	r2, [r3, #10]
 800f71c:	2200      	movs	r2, #0
 800f71e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f728:	68b8      	ldr	r0, [r7, #8]
 800f72a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f72c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f72e:	f7f7 faed 	bl	8006d0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f732:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f73e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f742:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f744:	4413      	add	r3, r2
 800f746:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f74a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f47f af19 	bne.w	800f586 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	e002      	b.n	800f75e <ip4_frag+0x26a>
      goto memerr;
 800f758:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3748      	adds	r7, #72	; 0x48
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	08013554 	.word	0x08013554
 800f76c:	08013730 	.word	0x08013730
 800f770:	0801359c 	.word	0x0801359c
 800f774:	0801374c 	.word	0x0801374c
 800f778:	0801376c 	.word	0x0801376c
 800f77c:	0800f48d 	.word	0x0800f48d

0800f780 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f78a:	230e      	movs	r3, #14
 800f78c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	895b      	ldrh	r3, [r3, #10]
 800f792:	2b0e      	cmp	r3, #14
 800f794:	d96e      	bls.n	800f874 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	7bdb      	ldrb	r3, [r3, #15]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	7b1a      	ldrb	r2, [r3, #12]
 800f7b6:	7b5b      	ldrb	r3, [r3, #13]
 800f7b8:	021b      	lsls	r3, r3, #8
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d023      	beq.n	800f812 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d10f      	bne.n	800f7f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	785b      	ldrb	r3, [r3, #1]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d11b      	bne.n	800f812 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f7de:	2b5e      	cmp	r3, #94	; 0x5e
 800f7e0:	d117      	bne.n	800f812 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7b5b      	ldrb	r3, [r3, #13]
 800f7e6:	f043 0310 	orr.w	r3, r3, #16
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	735a      	strb	r2, [r3, #13]
 800f7f0:	e00f      	b.n	800f812 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	2206      	movs	r2, #6
 800f7f6:	4928      	ldr	r1, [pc, #160]	; (800f898 <ethernet_input+0x118>)
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 f8bb 	bl	800f974 <memcmp>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d106      	bne.n	800f812 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7b5b      	ldrb	r3, [r3, #13]
 800f808:	f043 0308 	orr.w	r3, r3, #8
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f812:	89fb      	ldrh	r3, [r7, #14]
 800f814:	2b08      	cmp	r3, #8
 800f816:	d003      	beq.n	800f820 <ethernet_input+0xa0>
 800f818:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f81c:	d014      	beq.n	800f848 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f81e:	e032      	b.n	800f886 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f826:	f003 0308 	and.w	r3, r3, #8
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d024      	beq.n	800f878 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f82e:	8afb      	ldrh	r3, [r7, #22]
 800f830:	4619      	mov	r1, r3
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7f7 f9e4 	bl	8006c00 <pbuf_remove_header>
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d11e      	bne.n	800f87c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f83e:	6839      	ldr	r1, [r7, #0]
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7fe ff21 	bl	800e688 <ip4_input>
      break;
 800f846:	e013      	b.n	800f870 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f84e:	f003 0308 	and.w	r3, r3, #8
 800f852:	2b00      	cmp	r3, #0
 800f854:	d014      	beq.n	800f880 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f856:	8afb      	ldrh	r3, [r7, #22]
 800f858:	4619      	mov	r1, r3
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7f7 f9d0 	bl	8006c00 <pbuf_remove_header>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10e      	bne.n	800f884 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7fe f8c1 	bl	800d9f0 <etharp_input>
      break;
 800f86e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	e00c      	b.n	800f88e <ethernet_input+0x10e>
    goto free_and_return;
 800f874:	bf00      	nop
 800f876:	e006      	b.n	800f886 <ethernet_input+0x106>
        goto free_and_return;
 800f878:	bf00      	nop
 800f87a:	e004      	b.n	800f886 <ethernet_input+0x106>
        goto free_and_return;
 800f87c:	bf00      	nop
 800f87e:	e002      	b.n	800f886 <ethernet_input+0x106>
        goto free_and_return;
 800f880:	bf00      	nop
 800f882:	e000      	b.n	800f886 <ethernet_input+0x106>
        goto free_and_return;
 800f884:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7f7 fa40 	bl	8006d0c <pbuf_free>
  return ERR_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	080138fc 	.word	0x080138fc

0800f89c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
 800f8a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f8aa:	8c3b      	ldrh	r3, [r7, #32]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7f5 ff79 	bl	80057a4 <lwip_htons>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f8b6:	210e      	movs	r1, #14
 800f8b8:	68b8      	ldr	r0, [r7, #8]
 800f8ba:	f7f7 f991 	bl	8006be0 <pbuf_add_header>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d125      	bne.n	800f910 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	8afa      	ldrh	r2, [r7, #22]
 800f8ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2206      	movs	r2, #6
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f000 f85c 	bl	800f994 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	3306      	adds	r3, #6
 800f8e0:	2206      	movs	r2, #6
 800f8e2:	6879      	ldr	r1, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 f855 	bl	800f994 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8f0:	2b06      	cmp	r3, #6
 800f8f2:	d006      	beq.n	800f902 <ethernet_output+0x66>
 800f8f4:	4b0a      	ldr	r3, [pc, #40]	; (800f920 <ethernet_output+0x84>)
 800f8f6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f8fa:	490a      	ldr	r1, [pc, #40]	; (800f924 <ethernet_output+0x88>)
 800f8fc:	480a      	ldr	r0, [pc, #40]	; (800f928 <ethernet_output+0x8c>)
 800f8fe:	f000 f879 	bl	800f9f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	4798      	blx	r3
 800f90c:	4603      	mov	r3, r0
 800f90e:	e002      	b.n	800f916 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f910:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f912:	f06f 0301 	mvn.w	r3, #1
}
 800f916:	4618      	mov	r0, r3
 800f918:	3718      	adds	r7, #24
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	0801377c 	.word	0x0801377c
 800f924:	080137b4 	.word	0x080137b4
 800f928:	080137e8 	.word	0x080137e8

0800f92c <__libc_init_array>:
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	4d0d      	ldr	r5, [pc, #52]	; (800f964 <__libc_init_array+0x38>)
 800f930:	4c0d      	ldr	r4, [pc, #52]	; (800f968 <__libc_init_array+0x3c>)
 800f932:	1b64      	subs	r4, r4, r5
 800f934:	10a4      	asrs	r4, r4, #2
 800f936:	2600      	movs	r6, #0
 800f938:	42a6      	cmp	r6, r4
 800f93a:	d109      	bne.n	800f950 <__libc_init_array+0x24>
 800f93c:	4d0b      	ldr	r5, [pc, #44]	; (800f96c <__libc_init_array+0x40>)
 800f93e:	4c0c      	ldr	r4, [pc, #48]	; (800f970 <__libc_init_array+0x44>)
 800f940:	f001 fa5c 	bl	8010dfc <_init>
 800f944:	1b64      	subs	r4, r4, r5
 800f946:	10a4      	asrs	r4, r4, #2
 800f948:	2600      	movs	r6, #0
 800f94a:	42a6      	cmp	r6, r4
 800f94c:	d105      	bne.n	800f95a <__libc_init_array+0x2e>
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	f855 3b04 	ldr.w	r3, [r5], #4
 800f954:	4798      	blx	r3
 800f956:	3601      	adds	r6, #1
 800f958:	e7ee      	b.n	800f938 <__libc_init_array+0xc>
 800f95a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f95e:	4798      	blx	r3
 800f960:	3601      	adds	r6, #1
 800f962:	e7f2      	b.n	800f94a <__libc_init_array+0x1e>
 800f964:	08013a5c 	.word	0x08013a5c
 800f968:	08013a5c 	.word	0x08013a5c
 800f96c:	08013a5c 	.word	0x08013a5c
 800f970:	08013a60 	.word	0x08013a60

0800f974 <memcmp>:
 800f974:	b510      	push	{r4, lr}
 800f976:	3901      	subs	r1, #1
 800f978:	4402      	add	r2, r0
 800f97a:	4290      	cmp	r0, r2
 800f97c:	d101      	bne.n	800f982 <memcmp+0xe>
 800f97e:	2000      	movs	r0, #0
 800f980:	e005      	b.n	800f98e <memcmp+0x1a>
 800f982:	7803      	ldrb	r3, [r0, #0]
 800f984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f988:	42a3      	cmp	r3, r4
 800f98a:	d001      	beq.n	800f990 <memcmp+0x1c>
 800f98c:	1b18      	subs	r0, r3, r4
 800f98e:	bd10      	pop	{r4, pc}
 800f990:	3001      	adds	r0, #1
 800f992:	e7f2      	b.n	800f97a <memcmp+0x6>

0800f994 <memcpy>:
 800f994:	440a      	add	r2, r1
 800f996:	4291      	cmp	r1, r2
 800f998:	f100 33ff 	add.w	r3, r0, #4294967295
 800f99c:	d100      	bne.n	800f9a0 <memcpy+0xc>
 800f99e:	4770      	bx	lr
 800f9a0:	b510      	push	{r4, lr}
 800f9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9aa:	4291      	cmp	r1, r2
 800f9ac:	d1f9      	bne.n	800f9a2 <memcpy+0xe>
 800f9ae:	bd10      	pop	{r4, pc}

0800f9b0 <memmove>:
 800f9b0:	4288      	cmp	r0, r1
 800f9b2:	b510      	push	{r4, lr}
 800f9b4:	eb01 0402 	add.w	r4, r1, r2
 800f9b8:	d902      	bls.n	800f9c0 <memmove+0x10>
 800f9ba:	4284      	cmp	r4, r0
 800f9bc:	4623      	mov	r3, r4
 800f9be:	d807      	bhi.n	800f9d0 <memmove+0x20>
 800f9c0:	1e43      	subs	r3, r0, #1
 800f9c2:	42a1      	cmp	r1, r4
 800f9c4:	d008      	beq.n	800f9d8 <memmove+0x28>
 800f9c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9ce:	e7f8      	b.n	800f9c2 <memmove+0x12>
 800f9d0:	4402      	add	r2, r0
 800f9d2:	4601      	mov	r1, r0
 800f9d4:	428a      	cmp	r2, r1
 800f9d6:	d100      	bne.n	800f9da <memmove+0x2a>
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9e2:	e7f7      	b.n	800f9d4 <memmove+0x24>

0800f9e4 <memset>:
 800f9e4:	4402      	add	r2, r0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d100      	bne.n	800f9ee <memset+0xa>
 800f9ec:	4770      	bx	lr
 800f9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f9f2:	e7f9      	b.n	800f9e8 <memset+0x4>

0800f9f4 <iprintf>:
 800f9f4:	b40f      	push	{r0, r1, r2, r3}
 800f9f6:	4b0a      	ldr	r3, [pc, #40]	; (800fa20 <iprintf+0x2c>)
 800f9f8:	b513      	push	{r0, r1, r4, lr}
 800f9fa:	681c      	ldr	r4, [r3, #0]
 800f9fc:	b124      	cbz	r4, 800fa08 <iprintf+0x14>
 800f9fe:	69a3      	ldr	r3, [r4, #24]
 800fa00:	b913      	cbnz	r3, 800fa08 <iprintf+0x14>
 800fa02:	4620      	mov	r0, r4
 800fa04:	f000 f8e2 	bl	800fbcc <__sinit>
 800fa08:	ab05      	add	r3, sp, #20
 800fa0a:	9a04      	ldr	r2, [sp, #16]
 800fa0c:	68a1      	ldr	r1, [r4, #8]
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	4620      	mov	r0, r4
 800fa12:	f000 fbfb 	bl	801020c <_vfiprintf_r>
 800fa16:	b002      	add	sp, #8
 800fa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa1c:	b004      	add	sp, #16
 800fa1e:	4770      	bx	lr
 800fa20:	20000014 	.word	0x20000014

0800fa24 <rand>:
 800fa24:	4b16      	ldr	r3, [pc, #88]	; (800fa80 <rand+0x5c>)
 800fa26:	b510      	push	{r4, lr}
 800fa28:	681c      	ldr	r4, [r3, #0]
 800fa2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fa2c:	b9b3      	cbnz	r3, 800fa5c <rand+0x38>
 800fa2e:	2018      	movs	r0, #24
 800fa30:	f000 f97e 	bl	800fd30 <malloc>
 800fa34:	63a0      	str	r0, [r4, #56]	; 0x38
 800fa36:	b928      	cbnz	r0, 800fa44 <rand+0x20>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	4b12      	ldr	r3, [pc, #72]	; (800fa84 <rand+0x60>)
 800fa3c:	4812      	ldr	r0, [pc, #72]	; (800fa88 <rand+0x64>)
 800fa3e:	214e      	movs	r1, #78	; 0x4e
 800fa40:	f000 f84e 	bl	800fae0 <__assert_func>
 800fa44:	4a11      	ldr	r2, [pc, #68]	; (800fa8c <rand+0x68>)
 800fa46:	4b12      	ldr	r3, [pc, #72]	; (800fa90 <rand+0x6c>)
 800fa48:	e9c0 2300 	strd	r2, r3, [r0]
 800fa4c:	4b11      	ldr	r3, [pc, #68]	; (800fa94 <rand+0x70>)
 800fa4e:	6083      	str	r3, [r0, #8]
 800fa50:	230b      	movs	r3, #11
 800fa52:	8183      	strh	r3, [r0, #12]
 800fa54:	2201      	movs	r2, #1
 800fa56:	2300      	movs	r3, #0
 800fa58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fa5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fa5e:	4a0e      	ldr	r2, [pc, #56]	; (800fa98 <rand+0x74>)
 800fa60:	6920      	ldr	r0, [r4, #16]
 800fa62:	6963      	ldr	r3, [r4, #20]
 800fa64:	490d      	ldr	r1, [pc, #52]	; (800fa9c <rand+0x78>)
 800fa66:	4342      	muls	r2, r0
 800fa68:	fb01 2203 	mla	r2, r1, r3, r2
 800fa6c:	fba0 0101 	umull	r0, r1, r0, r1
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	eb42 0001 	adc.w	r0, r2, r1
 800fa76:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fa7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	20000014 	.word	0x20000014
 800fa84:	08013910 	.word	0x08013910
 800fa88:	08013927 	.word	0x08013927
 800fa8c:	abcd330e 	.word	0xabcd330e
 800fa90:	e66d1234 	.word	0xe66d1234
 800fa94:	0005deec 	.word	0x0005deec
 800fa98:	5851f42d 	.word	0x5851f42d
 800fa9c:	4c957f2d 	.word	0x4c957f2d

0800faa0 <siprintf>:
 800faa0:	b40e      	push	{r1, r2, r3}
 800faa2:	b500      	push	{lr}
 800faa4:	b09c      	sub	sp, #112	; 0x70
 800faa6:	ab1d      	add	r3, sp, #116	; 0x74
 800faa8:	9002      	str	r0, [sp, #8]
 800faaa:	9006      	str	r0, [sp, #24]
 800faac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fab0:	4809      	ldr	r0, [pc, #36]	; (800fad8 <siprintf+0x38>)
 800fab2:	9107      	str	r1, [sp, #28]
 800fab4:	9104      	str	r1, [sp, #16]
 800fab6:	4909      	ldr	r1, [pc, #36]	; (800fadc <siprintf+0x3c>)
 800fab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fabc:	9105      	str	r1, [sp, #20]
 800fabe:	6800      	ldr	r0, [r0, #0]
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	a902      	add	r1, sp, #8
 800fac4:	f000 fa78 	bl	800ffb8 <_svfiprintf_r>
 800fac8:	9b02      	ldr	r3, [sp, #8]
 800faca:	2200      	movs	r2, #0
 800facc:	701a      	strb	r2, [r3, #0]
 800face:	b01c      	add	sp, #112	; 0x70
 800fad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fad4:	b003      	add	sp, #12
 800fad6:	4770      	bx	lr
 800fad8:	20000014 	.word	0x20000014
 800fadc:	ffff0208 	.word	0xffff0208

0800fae0 <__assert_func>:
 800fae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fae2:	4614      	mov	r4, r2
 800fae4:	461a      	mov	r2, r3
 800fae6:	4b09      	ldr	r3, [pc, #36]	; (800fb0c <__assert_func+0x2c>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4605      	mov	r5, r0
 800faec:	68d8      	ldr	r0, [r3, #12]
 800faee:	b14c      	cbz	r4, 800fb04 <__assert_func+0x24>
 800faf0:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <__assert_func+0x30>)
 800faf2:	9100      	str	r1, [sp, #0]
 800faf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800faf8:	4906      	ldr	r1, [pc, #24]	; (800fb14 <__assert_func+0x34>)
 800fafa:	462b      	mov	r3, r5
 800fafc:	f000 f8e4 	bl	800fcc8 <fiprintf>
 800fb00:	f000 ff6e 	bl	80109e0 <abort>
 800fb04:	4b04      	ldr	r3, [pc, #16]	; (800fb18 <__assert_func+0x38>)
 800fb06:	461c      	mov	r4, r3
 800fb08:	e7f3      	b.n	800faf2 <__assert_func+0x12>
 800fb0a:	bf00      	nop
 800fb0c:	20000014 	.word	0x20000014
 800fb10:	08013982 	.word	0x08013982
 800fb14:	0801398f 	.word	0x0801398f
 800fb18:	080139bd 	.word	0x080139bd

0800fb1c <std>:
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	b510      	push	{r4, lr}
 800fb20:	4604      	mov	r4, r0
 800fb22:	e9c0 3300 	strd	r3, r3, [r0]
 800fb26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb2a:	6083      	str	r3, [r0, #8]
 800fb2c:	8181      	strh	r1, [r0, #12]
 800fb2e:	6643      	str	r3, [r0, #100]	; 0x64
 800fb30:	81c2      	strh	r2, [r0, #14]
 800fb32:	6183      	str	r3, [r0, #24]
 800fb34:	4619      	mov	r1, r3
 800fb36:	2208      	movs	r2, #8
 800fb38:	305c      	adds	r0, #92	; 0x5c
 800fb3a:	f7ff ff53 	bl	800f9e4 <memset>
 800fb3e:	4b05      	ldr	r3, [pc, #20]	; (800fb54 <std+0x38>)
 800fb40:	6263      	str	r3, [r4, #36]	; 0x24
 800fb42:	4b05      	ldr	r3, [pc, #20]	; (800fb58 <std+0x3c>)
 800fb44:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb46:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <std+0x40>)
 800fb48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb4a:	4b05      	ldr	r3, [pc, #20]	; (800fb60 <std+0x44>)
 800fb4c:	6224      	str	r4, [r4, #32]
 800fb4e:	6323      	str	r3, [r4, #48]	; 0x30
 800fb50:	bd10      	pop	{r4, pc}
 800fb52:	bf00      	nop
 800fb54:	080107b5 	.word	0x080107b5
 800fb58:	080107d7 	.word	0x080107d7
 800fb5c:	0801080f 	.word	0x0801080f
 800fb60:	08010833 	.word	0x08010833

0800fb64 <_cleanup_r>:
 800fb64:	4901      	ldr	r1, [pc, #4]	; (800fb6c <_cleanup_r+0x8>)
 800fb66:	f000 b8c1 	b.w	800fcec <_fwalk_reent>
 800fb6a:	bf00      	nop
 800fb6c:	08010b1d 	.word	0x08010b1d

0800fb70 <__sfmoreglue>:
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	2268      	movs	r2, #104	; 0x68
 800fb74:	1e4d      	subs	r5, r1, #1
 800fb76:	4355      	muls	r5, r2
 800fb78:	460e      	mov	r6, r1
 800fb7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb7e:	f000 f94b 	bl	800fe18 <_malloc_r>
 800fb82:	4604      	mov	r4, r0
 800fb84:	b140      	cbz	r0, 800fb98 <__sfmoreglue+0x28>
 800fb86:	2100      	movs	r1, #0
 800fb88:	e9c0 1600 	strd	r1, r6, [r0]
 800fb8c:	300c      	adds	r0, #12
 800fb8e:	60a0      	str	r0, [r4, #8]
 800fb90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb94:	f7ff ff26 	bl	800f9e4 <memset>
 800fb98:	4620      	mov	r0, r4
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}

0800fb9c <__sfp_lock_acquire>:
 800fb9c:	4801      	ldr	r0, [pc, #4]	; (800fba4 <__sfp_lock_acquire+0x8>)
 800fb9e:	f000 b8c5 	b.w	800fd2c <__retarget_lock_acquire_recursive>
 800fba2:	bf00      	nop
 800fba4:	20005e49 	.word	0x20005e49

0800fba8 <__sfp_lock_release>:
 800fba8:	4801      	ldr	r0, [pc, #4]	; (800fbb0 <__sfp_lock_release+0x8>)
 800fbaa:	f000 b8c0 	b.w	800fd2e <__retarget_lock_release_recursive>
 800fbae:	bf00      	nop
 800fbb0:	20005e49 	.word	0x20005e49

0800fbb4 <__sinit_lock_acquire>:
 800fbb4:	4801      	ldr	r0, [pc, #4]	; (800fbbc <__sinit_lock_acquire+0x8>)
 800fbb6:	f000 b8b9 	b.w	800fd2c <__retarget_lock_acquire_recursive>
 800fbba:	bf00      	nop
 800fbbc:	20005e4a 	.word	0x20005e4a

0800fbc0 <__sinit_lock_release>:
 800fbc0:	4801      	ldr	r0, [pc, #4]	; (800fbc8 <__sinit_lock_release+0x8>)
 800fbc2:	f000 b8b4 	b.w	800fd2e <__retarget_lock_release_recursive>
 800fbc6:	bf00      	nop
 800fbc8:	20005e4a 	.word	0x20005e4a

0800fbcc <__sinit>:
 800fbcc:	b510      	push	{r4, lr}
 800fbce:	4604      	mov	r4, r0
 800fbd0:	f7ff fff0 	bl	800fbb4 <__sinit_lock_acquire>
 800fbd4:	69a3      	ldr	r3, [r4, #24]
 800fbd6:	b11b      	cbz	r3, 800fbe0 <__sinit+0x14>
 800fbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbdc:	f7ff bff0 	b.w	800fbc0 <__sinit_lock_release>
 800fbe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fbe4:	6523      	str	r3, [r4, #80]	; 0x50
 800fbe6:	4b13      	ldr	r3, [pc, #76]	; (800fc34 <__sinit+0x68>)
 800fbe8:	4a13      	ldr	r2, [pc, #76]	; (800fc38 <__sinit+0x6c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	62a2      	str	r2, [r4, #40]	; 0x28
 800fbee:	42a3      	cmp	r3, r4
 800fbf0:	bf04      	itt	eq
 800fbf2:	2301      	moveq	r3, #1
 800fbf4:	61a3      	streq	r3, [r4, #24]
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 f820 	bl	800fc3c <__sfp>
 800fbfc:	6060      	str	r0, [r4, #4]
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 f81c 	bl	800fc3c <__sfp>
 800fc04:	60a0      	str	r0, [r4, #8]
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 f818 	bl	800fc3c <__sfp>
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	60e0      	str	r0, [r4, #12]
 800fc10:	2104      	movs	r1, #4
 800fc12:	6860      	ldr	r0, [r4, #4]
 800fc14:	f7ff ff82 	bl	800fb1c <std>
 800fc18:	68a0      	ldr	r0, [r4, #8]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	2109      	movs	r1, #9
 800fc1e:	f7ff ff7d 	bl	800fb1c <std>
 800fc22:	68e0      	ldr	r0, [r4, #12]
 800fc24:	2202      	movs	r2, #2
 800fc26:	2112      	movs	r1, #18
 800fc28:	f7ff ff78 	bl	800fb1c <std>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	61a3      	str	r3, [r4, #24]
 800fc30:	e7d2      	b.n	800fbd8 <__sinit+0xc>
 800fc32:	bf00      	nop
 800fc34:	0801390c 	.word	0x0801390c
 800fc38:	0800fb65 	.word	0x0800fb65

0800fc3c <__sfp>:
 800fc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3e:	4607      	mov	r7, r0
 800fc40:	f7ff ffac 	bl	800fb9c <__sfp_lock_acquire>
 800fc44:	4b1e      	ldr	r3, [pc, #120]	; (800fcc0 <__sfp+0x84>)
 800fc46:	681e      	ldr	r6, [r3, #0]
 800fc48:	69b3      	ldr	r3, [r6, #24]
 800fc4a:	b913      	cbnz	r3, 800fc52 <__sfp+0x16>
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7ff ffbd 	bl	800fbcc <__sinit>
 800fc52:	3648      	adds	r6, #72	; 0x48
 800fc54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	d503      	bpl.n	800fc64 <__sfp+0x28>
 800fc5c:	6833      	ldr	r3, [r6, #0]
 800fc5e:	b30b      	cbz	r3, 800fca4 <__sfp+0x68>
 800fc60:	6836      	ldr	r6, [r6, #0]
 800fc62:	e7f7      	b.n	800fc54 <__sfp+0x18>
 800fc64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc68:	b9d5      	cbnz	r5, 800fca0 <__sfp+0x64>
 800fc6a:	4b16      	ldr	r3, [pc, #88]	; (800fcc4 <__sfp+0x88>)
 800fc6c:	60e3      	str	r3, [r4, #12]
 800fc6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc72:	6665      	str	r5, [r4, #100]	; 0x64
 800fc74:	f000 f859 	bl	800fd2a <__retarget_lock_init_recursive>
 800fc78:	f7ff ff96 	bl	800fba8 <__sfp_lock_release>
 800fc7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fc80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fc84:	6025      	str	r5, [r4, #0]
 800fc86:	61a5      	str	r5, [r4, #24]
 800fc88:	2208      	movs	r2, #8
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc90:	f7ff fea8 	bl	800f9e4 <memset>
 800fc94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fca0:	3468      	adds	r4, #104	; 0x68
 800fca2:	e7d9      	b.n	800fc58 <__sfp+0x1c>
 800fca4:	2104      	movs	r1, #4
 800fca6:	4638      	mov	r0, r7
 800fca8:	f7ff ff62 	bl	800fb70 <__sfmoreglue>
 800fcac:	4604      	mov	r4, r0
 800fcae:	6030      	str	r0, [r6, #0]
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d1d5      	bne.n	800fc60 <__sfp+0x24>
 800fcb4:	f7ff ff78 	bl	800fba8 <__sfp_lock_release>
 800fcb8:	230c      	movs	r3, #12
 800fcba:	603b      	str	r3, [r7, #0]
 800fcbc:	e7ee      	b.n	800fc9c <__sfp+0x60>
 800fcbe:	bf00      	nop
 800fcc0:	0801390c 	.word	0x0801390c
 800fcc4:	ffff0001 	.word	0xffff0001

0800fcc8 <fiprintf>:
 800fcc8:	b40e      	push	{r1, r2, r3}
 800fcca:	b503      	push	{r0, r1, lr}
 800fccc:	4601      	mov	r1, r0
 800fcce:	ab03      	add	r3, sp, #12
 800fcd0:	4805      	ldr	r0, [pc, #20]	; (800fce8 <fiprintf+0x20>)
 800fcd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd6:	6800      	ldr	r0, [r0, #0]
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	f000 fa97 	bl	801020c <_vfiprintf_r>
 800fcde:	b002      	add	sp, #8
 800fce0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fce4:	b003      	add	sp, #12
 800fce6:	4770      	bx	lr
 800fce8:	20000014 	.word	0x20000014

0800fcec <_fwalk_reent>:
 800fcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	4688      	mov	r8, r1
 800fcf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fcf8:	2700      	movs	r7, #0
 800fcfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcfe:	f1b9 0901 	subs.w	r9, r9, #1
 800fd02:	d505      	bpl.n	800fd10 <_fwalk_reent+0x24>
 800fd04:	6824      	ldr	r4, [r4, #0]
 800fd06:	2c00      	cmp	r4, #0
 800fd08:	d1f7      	bne.n	800fcfa <_fwalk_reent+0xe>
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd10:	89ab      	ldrh	r3, [r5, #12]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d907      	bls.n	800fd26 <_fwalk_reent+0x3a>
 800fd16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	d003      	beq.n	800fd26 <_fwalk_reent+0x3a>
 800fd1e:	4629      	mov	r1, r5
 800fd20:	4630      	mov	r0, r6
 800fd22:	47c0      	blx	r8
 800fd24:	4307      	orrs	r7, r0
 800fd26:	3568      	adds	r5, #104	; 0x68
 800fd28:	e7e9      	b.n	800fcfe <_fwalk_reent+0x12>

0800fd2a <__retarget_lock_init_recursive>:
 800fd2a:	4770      	bx	lr

0800fd2c <__retarget_lock_acquire_recursive>:
 800fd2c:	4770      	bx	lr

0800fd2e <__retarget_lock_release_recursive>:
 800fd2e:	4770      	bx	lr

0800fd30 <malloc>:
 800fd30:	4b02      	ldr	r3, [pc, #8]	; (800fd3c <malloc+0xc>)
 800fd32:	4601      	mov	r1, r0
 800fd34:	6818      	ldr	r0, [r3, #0]
 800fd36:	f000 b86f 	b.w	800fe18 <_malloc_r>
 800fd3a:	bf00      	nop
 800fd3c:	20000014 	.word	0x20000014

0800fd40 <_free_r>:
 800fd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd42:	2900      	cmp	r1, #0
 800fd44:	d044      	beq.n	800fdd0 <_free_r+0x90>
 800fd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd4a:	9001      	str	r0, [sp, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd52:	bfb8      	it	lt
 800fd54:	18e4      	addlt	r4, r4, r3
 800fd56:	f000 ff95 	bl	8010c84 <__malloc_lock>
 800fd5a:	4a1e      	ldr	r2, [pc, #120]	; (800fdd4 <_free_r+0x94>)
 800fd5c:	9801      	ldr	r0, [sp, #4]
 800fd5e:	6813      	ldr	r3, [r2, #0]
 800fd60:	b933      	cbnz	r3, 800fd70 <_free_r+0x30>
 800fd62:	6063      	str	r3, [r4, #4]
 800fd64:	6014      	str	r4, [r2, #0]
 800fd66:	b003      	add	sp, #12
 800fd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd6c:	f000 bf90 	b.w	8010c90 <__malloc_unlock>
 800fd70:	42a3      	cmp	r3, r4
 800fd72:	d908      	bls.n	800fd86 <_free_r+0x46>
 800fd74:	6825      	ldr	r5, [r4, #0]
 800fd76:	1961      	adds	r1, r4, r5
 800fd78:	428b      	cmp	r3, r1
 800fd7a:	bf01      	itttt	eq
 800fd7c:	6819      	ldreq	r1, [r3, #0]
 800fd7e:	685b      	ldreq	r3, [r3, #4]
 800fd80:	1949      	addeq	r1, r1, r5
 800fd82:	6021      	streq	r1, [r4, #0]
 800fd84:	e7ed      	b.n	800fd62 <_free_r+0x22>
 800fd86:	461a      	mov	r2, r3
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	b10b      	cbz	r3, 800fd90 <_free_r+0x50>
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	d9fa      	bls.n	800fd86 <_free_r+0x46>
 800fd90:	6811      	ldr	r1, [r2, #0]
 800fd92:	1855      	adds	r5, r2, r1
 800fd94:	42a5      	cmp	r5, r4
 800fd96:	d10b      	bne.n	800fdb0 <_free_r+0x70>
 800fd98:	6824      	ldr	r4, [r4, #0]
 800fd9a:	4421      	add	r1, r4
 800fd9c:	1854      	adds	r4, r2, r1
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	6011      	str	r1, [r2, #0]
 800fda2:	d1e0      	bne.n	800fd66 <_free_r+0x26>
 800fda4:	681c      	ldr	r4, [r3, #0]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	6053      	str	r3, [r2, #4]
 800fdaa:	4421      	add	r1, r4
 800fdac:	6011      	str	r1, [r2, #0]
 800fdae:	e7da      	b.n	800fd66 <_free_r+0x26>
 800fdb0:	d902      	bls.n	800fdb8 <_free_r+0x78>
 800fdb2:	230c      	movs	r3, #12
 800fdb4:	6003      	str	r3, [r0, #0]
 800fdb6:	e7d6      	b.n	800fd66 <_free_r+0x26>
 800fdb8:	6825      	ldr	r5, [r4, #0]
 800fdba:	1961      	adds	r1, r4, r5
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	bf04      	itt	eq
 800fdc0:	6819      	ldreq	r1, [r3, #0]
 800fdc2:	685b      	ldreq	r3, [r3, #4]
 800fdc4:	6063      	str	r3, [r4, #4]
 800fdc6:	bf04      	itt	eq
 800fdc8:	1949      	addeq	r1, r1, r5
 800fdca:	6021      	streq	r1, [r4, #0]
 800fdcc:	6054      	str	r4, [r2, #4]
 800fdce:	e7ca      	b.n	800fd66 <_free_r+0x26>
 800fdd0:	b003      	add	sp, #12
 800fdd2:	bd30      	pop	{r4, r5, pc}
 800fdd4:	20005e4c 	.word	0x20005e4c

0800fdd8 <sbrk_aligned>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	4e0e      	ldr	r6, [pc, #56]	; (800fe14 <sbrk_aligned+0x3c>)
 800fddc:	460c      	mov	r4, r1
 800fdde:	6831      	ldr	r1, [r6, #0]
 800fde0:	4605      	mov	r5, r0
 800fde2:	b911      	cbnz	r1, 800fdea <sbrk_aligned+0x12>
 800fde4:	f000 fcd6 	bl	8010794 <_sbrk_r>
 800fde8:	6030      	str	r0, [r6, #0]
 800fdea:	4621      	mov	r1, r4
 800fdec:	4628      	mov	r0, r5
 800fdee:	f000 fcd1 	bl	8010794 <_sbrk_r>
 800fdf2:	1c43      	adds	r3, r0, #1
 800fdf4:	d00a      	beq.n	800fe0c <sbrk_aligned+0x34>
 800fdf6:	1cc4      	adds	r4, r0, #3
 800fdf8:	f024 0403 	bic.w	r4, r4, #3
 800fdfc:	42a0      	cmp	r0, r4
 800fdfe:	d007      	beq.n	800fe10 <sbrk_aligned+0x38>
 800fe00:	1a21      	subs	r1, r4, r0
 800fe02:	4628      	mov	r0, r5
 800fe04:	f000 fcc6 	bl	8010794 <_sbrk_r>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	d101      	bne.n	800fe10 <sbrk_aligned+0x38>
 800fe0c:	f04f 34ff 	mov.w	r4, #4294967295
 800fe10:	4620      	mov	r0, r4
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	20005e50 	.word	0x20005e50

0800fe18 <_malloc_r>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	1ccd      	adds	r5, r1, #3
 800fe1e:	f025 0503 	bic.w	r5, r5, #3
 800fe22:	3508      	adds	r5, #8
 800fe24:	2d0c      	cmp	r5, #12
 800fe26:	bf38      	it	cc
 800fe28:	250c      	movcc	r5, #12
 800fe2a:	2d00      	cmp	r5, #0
 800fe2c:	4607      	mov	r7, r0
 800fe2e:	db01      	blt.n	800fe34 <_malloc_r+0x1c>
 800fe30:	42a9      	cmp	r1, r5
 800fe32:	d905      	bls.n	800fe40 <_malloc_r+0x28>
 800fe34:	230c      	movs	r3, #12
 800fe36:	603b      	str	r3, [r7, #0]
 800fe38:	2600      	movs	r6, #0
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe40:	4e2e      	ldr	r6, [pc, #184]	; (800fefc <_malloc_r+0xe4>)
 800fe42:	f000 ff1f 	bl	8010c84 <__malloc_lock>
 800fe46:	6833      	ldr	r3, [r6, #0]
 800fe48:	461c      	mov	r4, r3
 800fe4a:	bb34      	cbnz	r4, 800fe9a <_malloc_r+0x82>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4638      	mov	r0, r7
 800fe50:	f7ff ffc2 	bl	800fdd8 <sbrk_aligned>
 800fe54:	1c43      	adds	r3, r0, #1
 800fe56:	4604      	mov	r4, r0
 800fe58:	d14d      	bne.n	800fef6 <_malloc_r+0xde>
 800fe5a:	6834      	ldr	r4, [r6, #0]
 800fe5c:	4626      	mov	r6, r4
 800fe5e:	2e00      	cmp	r6, #0
 800fe60:	d140      	bne.n	800fee4 <_malloc_r+0xcc>
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	4631      	mov	r1, r6
 800fe66:	4638      	mov	r0, r7
 800fe68:	eb04 0803 	add.w	r8, r4, r3
 800fe6c:	f000 fc92 	bl	8010794 <_sbrk_r>
 800fe70:	4580      	cmp	r8, r0
 800fe72:	d13a      	bne.n	800feea <_malloc_r+0xd2>
 800fe74:	6821      	ldr	r1, [r4, #0]
 800fe76:	3503      	adds	r5, #3
 800fe78:	1a6d      	subs	r5, r5, r1
 800fe7a:	f025 0503 	bic.w	r5, r5, #3
 800fe7e:	3508      	adds	r5, #8
 800fe80:	2d0c      	cmp	r5, #12
 800fe82:	bf38      	it	cc
 800fe84:	250c      	movcc	r5, #12
 800fe86:	4629      	mov	r1, r5
 800fe88:	4638      	mov	r0, r7
 800fe8a:	f7ff ffa5 	bl	800fdd8 <sbrk_aligned>
 800fe8e:	3001      	adds	r0, #1
 800fe90:	d02b      	beq.n	800feea <_malloc_r+0xd2>
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	442b      	add	r3, r5
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	e00e      	b.n	800feb8 <_malloc_r+0xa0>
 800fe9a:	6822      	ldr	r2, [r4, #0]
 800fe9c:	1b52      	subs	r2, r2, r5
 800fe9e:	d41e      	bmi.n	800fede <_malloc_r+0xc6>
 800fea0:	2a0b      	cmp	r2, #11
 800fea2:	d916      	bls.n	800fed2 <_malloc_r+0xba>
 800fea4:	1961      	adds	r1, r4, r5
 800fea6:	42a3      	cmp	r3, r4
 800fea8:	6025      	str	r5, [r4, #0]
 800feaa:	bf18      	it	ne
 800feac:	6059      	strne	r1, [r3, #4]
 800feae:	6863      	ldr	r3, [r4, #4]
 800feb0:	bf08      	it	eq
 800feb2:	6031      	streq	r1, [r6, #0]
 800feb4:	5162      	str	r2, [r4, r5]
 800feb6:	604b      	str	r3, [r1, #4]
 800feb8:	4638      	mov	r0, r7
 800feba:	f104 060b 	add.w	r6, r4, #11
 800febe:	f000 fee7 	bl	8010c90 <__malloc_unlock>
 800fec2:	f026 0607 	bic.w	r6, r6, #7
 800fec6:	1d23      	adds	r3, r4, #4
 800fec8:	1af2      	subs	r2, r6, r3
 800feca:	d0b6      	beq.n	800fe3a <_malloc_r+0x22>
 800fecc:	1b9b      	subs	r3, r3, r6
 800fece:	50a3      	str	r3, [r4, r2]
 800fed0:	e7b3      	b.n	800fe3a <_malloc_r+0x22>
 800fed2:	6862      	ldr	r2, [r4, #4]
 800fed4:	42a3      	cmp	r3, r4
 800fed6:	bf0c      	ite	eq
 800fed8:	6032      	streq	r2, [r6, #0]
 800feda:	605a      	strne	r2, [r3, #4]
 800fedc:	e7ec      	b.n	800feb8 <_malloc_r+0xa0>
 800fede:	4623      	mov	r3, r4
 800fee0:	6864      	ldr	r4, [r4, #4]
 800fee2:	e7b2      	b.n	800fe4a <_malloc_r+0x32>
 800fee4:	4634      	mov	r4, r6
 800fee6:	6876      	ldr	r6, [r6, #4]
 800fee8:	e7b9      	b.n	800fe5e <_malloc_r+0x46>
 800feea:	230c      	movs	r3, #12
 800feec:	603b      	str	r3, [r7, #0]
 800feee:	4638      	mov	r0, r7
 800fef0:	f000 fece 	bl	8010c90 <__malloc_unlock>
 800fef4:	e7a1      	b.n	800fe3a <_malloc_r+0x22>
 800fef6:	6025      	str	r5, [r4, #0]
 800fef8:	e7de      	b.n	800feb8 <_malloc_r+0xa0>
 800fefa:	bf00      	nop
 800fefc:	20005e4c 	.word	0x20005e4c

0800ff00 <__ssputs_r>:
 800ff00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff04:	688e      	ldr	r6, [r1, #8]
 800ff06:	429e      	cmp	r6, r3
 800ff08:	4682      	mov	sl, r0
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	4690      	mov	r8, r2
 800ff0e:	461f      	mov	r7, r3
 800ff10:	d838      	bhi.n	800ff84 <__ssputs_r+0x84>
 800ff12:	898a      	ldrh	r2, [r1, #12]
 800ff14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff18:	d032      	beq.n	800ff80 <__ssputs_r+0x80>
 800ff1a:	6825      	ldr	r5, [r4, #0]
 800ff1c:	6909      	ldr	r1, [r1, #16]
 800ff1e:	eba5 0901 	sub.w	r9, r5, r1
 800ff22:	6965      	ldr	r5, [r4, #20]
 800ff24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	444b      	add	r3, r9
 800ff30:	106d      	asrs	r5, r5, #1
 800ff32:	429d      	cmp	r5, r3
 800ff34:	bf38      	it	cc
 800ff36:	461d      	movcc	r5, r3
 800ff38:	0553      	lsls	r3, r2, #21
 800ff3a:	d531      	bpl.n	800ffa0 <__ssputs_r+0xa0>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f7ff ff6b 	bl	800fe18 <_malloc_r>
 800ff42:	4606      	mov	r6, r0
 800ff44:	b950      	cbnz	r0, 800ff5c <__ssputs_r+0x5c>
 800ff46:	230c      	movs	r3, #12
 800ff48:	f8ca 3000 	str.w	r3, [sl]
 800ff4c:	89a3      	ldrh	r3, [r4, #12]
 800ff4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	f04f 30ff 	mov.w	r0, #4294967295
 800ff58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff5c:	6921      	ldr	r1, [r4, #16]
 800ff5e:	464a      	mov	r2, r9
 800ff60:	f7ff fd18 	bl	800f994 <memcpy>
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff6e:	81a3      	strh	r3, [r4, #12]
 800ff70:	6126      	str	r6, [r4, #16]
 800ff72:	6165      	str	r5, [r4, #20]
 800ff74:	444e      	add	r6, r9
 800ff76:	eba5 0509 	sub.w	r5, r5, r9
 800ff7a:	6026      	str	r6, [r4, #0]
 800ff7c:	60a5      	str	r5, [r4, #8]
 800ff7e:	463e      	mov	r6, r7
 800ff80:	42be      	cmp	r6, r7
 800ff82:	d900      	bls.n	800ff86 <__ssputs_r+0x86>
 800ff84:	463e      	mov	r6, r7
 800ff86:	6820      	ldr	r0, [r4, #0]
 800ff88:	4632      	mov	r2, r6
 800ff8a:	4641      	mov	r1, r8
 800ff8c:	f7ff fd10 	bl	800f9b0 <memmove>
 800ff90:	68a3      	ldr	r3, [r4, #8]
 800ff92:	1b9b      	subs	r3, r3, r6
 800ff94:	60a3      	str	r3, [r4, #8]
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	4433      	add	r3, r6
 800ff9a:	6023      	str	r3, [r4, #0]
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	e7db      	b.n	800ff58 <__ssputs_r+0x58>
 800ffa0:	462a      	mov	r2, r5
 800ffa2:	f000 fe7b 	bl	8010c9c <_realloc_r>
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d1e1      	bne.n	800ff70 <__ssputs_r+0x70>
 800ffac:	6921      	ldr	r1, [r4, #16]
 800ffae:	4650      	mov	r0, sl
 800ffb0:	f7ff fec6 	bl	800fd40 <_free_r>
 800ffb4:	e7c7      	b.n	800ff46 <__ssputs_r+0x46>
	...

0800ffb8 <_svfiprintf_r>:
 800ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffbc:	4698      	mov	r8, r3
 800ffbe:	898b      	ldrh	r3, [r1, #12]
 800ffc0:	061b      	lsls	r3, r3, #24
 800ffc2:	b09d      	sub	sp, #116	; 0x74
 800ffc4:	4607      	mov	r7, r0
 800ffc6:	460d      	mov	r5, r1
 800ffc8:	4614      	mov	r4, r2
 800ffca:	d50e      	bpl.n	800ffea <_svfiprintf_r+0x32>
 800ffcc:	690b      	ldr	r3, [r1, #16]
 800ffce:	b963      	cbnz	r3, 800ffea <_svfiprintf_r+0x32>
 800ffd0:	2140      	movs	r1, #64	; 0x40
 800ffd2:	f7ff ff21 	bl	800fe18 <_malloc_r>
 800ffd6:	6028      	str	r0, [r5, #0]
 800ffd8:	6128      	str	r0, [r5, #16]
 800ffda:	b920      	cbnz	r0, 800ffe6 <_svfiprintf_r+0x2e>
 800ffdc:	230c      	movs	r3, #12
 800ffde:	603b      	str	r3, [r7, #0]
 800ffe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe4:	e0d1      	b.n	801018a <_svfiprintf_r+0x1d2>
 800ffe6:	2340      	movs	r3, #64	; 0x40
 800ffe8:	616b      	str	r3, [r5, #20]
 800ffea:	2300      	movs	r3, #0
 800ffec:	9309      	str	r3, [sp, #36]	; 0x24
 800ffee:	2320      	movs	r3, #32
 800fff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fff8:	2330      	movs	r3, #48	; 0x30
 800fffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80101a4 <_svfiprintf_r+0x1ec>
 800fffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010002:	f04f 0901 	mov.w	r9, #1
 8010006:	4623      	mov	r3, r4
 8010008:	469a      	mov	sl, r3
 801000a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801000e:	b10a      	cbz	r2, 8010014 <_svfiprintf_r+0x5c>
 8010010:	2a25      	cmp	r2, #37	; 0x25
 8010012:	d1f9      	bne.n	8010008 <_svfiprintf_r+0x50>
 8010014:	ebba 0b04 	subs.w	fp, sl, r4
 8010018:	d00b      	beq.n	8010032 <_svfiprintf_r+0x7a>
 801001a:	465b      	mov	r3, fp
 801001c:	4622      	mov	r2, r4
 801001e:	4629      	mov	r1, r5
 8010020:	4638      	mov	r0, r7
 8010022:	f7ff ff6d 	bl	800ff00 <__ssputs_r>
 8010026:	3001      	adds	r0, #1
 8010028:	f000 80aa 	beq.w	8010180 <_svfiprintf_r+0x1c8>
 801002c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801002e:	445a      	add	r2, fp
 8010030:	9209      	str	r2, [sp, #36]	; 0x24
 8010032:	f89a 3000 	ldrb.w	r3, [sl]
 8010036:	2b00      	cmp	r3, #0
 8010038:	f000 80a2 	beq.w	8010180 <_svfiprintf_r+0x1c8>
 801003c:	2300      	movs	r3, #0
 801003e:	f04f 32ff 	mov.w	r2, #4294967295
 8010042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010046:	f10a 0a01 	add.w	sl, sl, #1
 801004a:	9304      	str	r3, [sp, #16]
 801004c:	9307      	str	r3, [sp, #28]
 801004e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010052:	931a      	str	r3, [sp, #104]	; 0x68
 8010054:	4654      	mov	r4, sl
 8010056:	2205      	movs	r2, #5
 8010058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801005c:	4851      	ldr	r0, [pc, #324]	; (80101a4 <_svfiprintf_r+0x1ec>)
 801005e:	f7f0 f8ef 	bl	8000240 <memchr>
 8010062:	9a04      	ldr	r2, [sp, #16]
 8010064:	b9d8      	cbnz	r0, 801009e <_svfiprintf_r+0xe6>
 8010066:	06d0      	lsls	r0, r2, #27
 8010068:	bf44      	itt	mi
 801006a:	2320      	movmi	r3, #32
 801006c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010070:	0711      	lsls	r1, r2, #28
 8010072:	bf44      	itt	mi
 8010074:	232b      	movmi	r3, #43	; 0x2b
 8010076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801007a:	f89a 3000 	ldrb.w	r3, [sl]
 801007e:	2b2a      	cmp	r3, #42	; 0x2a
 8010080:	d015      	beq.n	80100ae <_svfiprintf_r+0xf6>
 8010082:	9a07      	ldr	r2, [sp, #28]
 8010084:	4654      	mov	r4, sl
 8010086:	2000      	movs	r0, #0
 8010088:	f04f 0c0a 	mov.w	ip, #10
 801008c:	4621      	mov	r1, r4
 801008e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010092:	3b30      	subs	r3, #48	; 0x30
 8010094:	2b09      	cmp	r3, #9
 8010096:	d94e      	bls.n	8010136 <_svfiprintf_r+0x17e>
 8010098:	b1b0      	cbz	r0, 80100c8 <_svfiprintf_r+0x110>
 801009a:	9207      	str	r2, [sp, #28]
 801009c:	e014      	b.n	80100c8 <_svfiprintf_r+0x110>
 801009e:	eba0 0308 	sub.w	r3, r0, r8
 80100a2:	fa09 f303 	lsl.w	r3, r9, r3
 80100a6:	4313      	orrs	r3, r2
 80100a8:	9304      	str	r3, [sp, #16]
 80100aa:	46a2      	mov	sl, r4
 80100ac:	e7d2      	b.n	8010054 <_svfiprintf_r+0x9c>
 80100ae:	9b03      	ldr	r3, [sp, #12]
 80100b0:	1d19      	adds	r1, r3, #4
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	9103      	str	r1, [sp, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	bfbb      	ittet	lt
 80100ba:	425b      	neglt	r3, r3
 80100bc:	f042 0202 	orrlt.w	r2, r2, #2
 80100c0:	9307      	strge	r3, [sp, #28]
 80100c2:	9307      	strlt	r3, [sp, #28]
 80100c4:	bfb8      	it	lt
 80100c6:	9204      	strlt	r2, [sp, #16]
 80100c8:	7823      	ldrb	r3, [r4, #0]
 80100ca:	2b2e      	cmp	r3, #46	; 0x2e
 80100cc:	d10c      	bne.n	80100e8 <_svfiprintf_r+0x130>
 80100ce:	7863      	ldrb	r3, [r4, #1]
 80100d0:	2b2a      	cmp	r3, #42	; 0x2a
 80100d2:	d135      	bne.n	8010140 <_svfiprintf_r+0x188>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	1d1a      	adds	r2, r3, #4
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	9203      	str	r2, [sp, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	bfb8      	it	lt
 80100e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80100e4:	3402      	adds	r4, #2
 80100e6:	9305      	str	r3, [sp, #20]
 80100e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80101b4 <_svfiprintf_r+0x1fc>
 80100ec:	7821      	ldrb	r1, [r4, #0]
 80100ee:	2203      	movs	r2, #3
 80100f0:	4650      	mov	r0, sl
 80100f2:	f7f0 f8a5 	bl	8000240 <memchr>
 80100f6:	b140      	cbz	r0, 801010a <_svfiprintf_r+0x152>
 80100f8:	2340      	movs	r3, #64	; 0x40
 80100fa:	eba0 000a 	sub.w	r0, r0, sl
 80100fe:	fa03 f000 	lsl.w	r0, r3, r0
 8010102:	9b04      	ldr	r3, [sp, #16]
 8010104:	4303      	orrs	r3, r0
 8010106:	3401      	adds	r4, #1
 8010108:	9304      	str	r3, [sp, #16]
 801010a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801010e:	4826      	ldr	r0, [pc, #152]	; (80101a8 <_svfiprintf_r+0x1f0>)
 8010110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010114:	2206      	movs	r2, #6
 8010116:	f7f0 f893 	bl	8000240 <memchr>
 801011a:	2800      	cmp	r0, #0
 801011c:	d038      	beq.n	8010190 <_svfiprintf_r+0x1d8>
 801011e:	4b23      	ldr	r3, [pc, #140]	; (80101ac <_svfiprintf_r+0x1f4>)
 8010120:	bb1b      	cbnz	r3, 801016a <_svfiprintf_r+0x1b2>
 8010122:	9b03      	ldr	r3, [sp, #12]
 8010124:	3307      	adds	r3, #7
 8010126:	f023 0307 	bic.w	r3, r3, #7
 801012a:	3308      	adds	r3, #8
 801012c:	9303      	str	r3, [sp, #12]
 801012e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010130:	4433      	add	r3, r6
 8010132:	9309      	str	r3, [sp, #36]	; 0x24
 8010134:	e767      	b.n	8010006 <_svfiprintf_r+0x4e>
 8010136:	fb0c 3202 	mla	r2, ip, r2, r3
 801013a:	460c      	mov	r4, r1
 801013c:	2001      	movs	r0, #1
 801013e:	e7a5      	b.n	801008c <_svfiprintf_r+0xd4>
 8010140:	2300      	movs	r3, #0
 8010142:	3401      	adds	r4, #1
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	4619      	mov	r1, r3
 8010148:	f04f 0c0a 	mov.w	ip, #10
 801014c:	4620      	mov	r0, r4
 801014e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010152:	3a30      	subs	r2, #48	; 0x30
 8010154:	2a09      	cmp	r2, #9
 8010156:	d903      	bls.n	8010160 <_svfiprintf_r+0x1a8>
 8010158:	2b00      	cmp	r3, #0
 801015a:	d0c5      	beq.n	80100e8 <_svfiprintf_r+0x130>
 801015c:	9105      	str	r1, [sp, #20]
 801015e:	e7c3      	b.n	80100e8 <_svfiprintf_r+0x130>
 8010160:	fb0c 2101 	mla	r1, ip, r1, r2
 8010164:	4604      	mov	r4, r0
 8010166:	2301      	movs	r3, #1
 8010168:	e7f0      	b.n	801014c <_svfiprintf_r+0x194>
 801016a:	ab03      	add	r3, sp, #12
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	462a      	mov	r2, r5
 8010170:	4b0f      	ldr	r3, [pc, #60]	; (80101b0 <_svfiprintf_r+0x1f8>)
 8010172:	a904      	add	r1, sp, #16
 8010174:	4638      	mov	r0, r7
 8010176:	f3af 8000 	nop.w
 801017a:	1c42      	adds	r2, r0, #1
 801017c:	4606      	mov	r6, r0
 801017e:	d1d6      	bne.n	801012e <_svfiprintf_r+0x176>
 8010180:	89ab      	ldrh	r3, [r5, #12]
 8010182:	065b      	lsls	r3, r3, #25
 8010184:	f53f af2c 	bmi.w	800ffe0 <_svfiprintf_r+0x28>
 8010188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801018a:	b01d      	add	sp, #116	; 0x74
 801018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010190:	ab03      	add	r3, sp, #12
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	462a      	mov	r2, r5
 8010196:	4b06      	ldr	r3, [pc, #24]	; (80101b0 <_svfiprintf_r+0x1f8>)
 8010198:	a904      	add	r1, sp, #16
 801019a:	4638      	mov	r0, r7
 801019c:	f000 f9d4 	bl	8010548 <_printf_i>
 80101a0:	e7eb      	b.n	801017a <_svfiprintf_r+0x1c2>
 80101a2:	bf00      	nop
 80101a4:	08013a20 	.word	0x08013a20
 80101a8:	08013a2a 	.word	0x08013a2a
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0800ff01 	.word	0x0800ff01
 80101b4:	08013a26 	.word	0x08013a26

080101b8 <__sfputc_r>:
 80101b8:	6893      	ldr	r3, [r2, #8]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	2b00      	cmp	r3, #0
 80101be:	b410      	push	{r4}
 80101c0:	6093      	str	r3, [r2, #8]
 80101c2:	da08      	bge.n	80101d6 <__sfputc_r+0x1e>
 80101c4:	6994      	ldr	r4, [r2, #24]
 80101c6:	42a3      	cmp	r3, r4
 80101c8:	db01      	blt.n	80101ce <__sfputc_r+0x16>
 80101ca:	290a      	cmp	r1, #10
 80101cc:	d103      	bne.n	80101d6 <__sfputc_r+0x1e>
 80101ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101d2:	f000 bb33 	b.w	801083c <__swbuf_r>
 80101d6:	6813      	ldr	r3, [r2, #0]
 80101d8:	1c58      	adds	r0, r3, #1
 80101da:	6010      	str	r0, [r2, #0]
 80101dc:	7019      	strb	r1, [r3, #0]
 80101de:	4608      	mov	r0, r1
 80101e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <__sfputs_r>:
 80101e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e8:	4606      	mov	r6, r0
 80101ea:	460f      	mov	r7, r1
 80101ec:	4614      	mov	r4, r2
 80101ee:	18d5      	adds	r5, r2, r3
 80101f0:	42ac      	cmp	r4, r5
 80101f2:	d101      	bne.n	80101f8 <__sfputs_r+0x12>
 80101f4:	2000      	movs	r0, #0
 80101f6:	e007      	b.n	8010208 <__sfputs_r+0x22>
 80101f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101fc:	463a      	mov	r2, r7
 80101fe:	4630      	mov	r0, r6
 8010200:	f7ff ffda 	bl	80101b8 <__sfputc_r>
 8010204:	1c43      	adds	r3, r0, #1
 8010206:	d1f3      	bne.n	80101f0 <__sfputs_r+0xa>
 8010208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801020c <_vfiprintf_r>:
 801020c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010210:	460d      	mov	r5, r1
 8010212:	b09d      	sub	sp, #116	; 0x74
 8010214:	4614      	mov	r4, r2
 8010216:	4698      	mov	r8, r3
 8010218:	4606      	mov	r6, r0
 801021a:	b118      	cbz	r0, 8010224 <_vfiprintf_r+0x18>
 801021c:	6983      	ldr	r3, [r0, #24]
 801021e:	b90b      	cbnz	r3, 8010224 <_vfiprintf_r+0x18>
 8010220:	f7ff fcd4 	bl	800fbcc <__sinit>
 8010224:	4b89      	ldr	r3, [pc, #548]	; (801044c <_vfiprintf_r+0x240>)
 8010226:	429d      	cmp	r5, r3
 8010228:	d11b      	bne.n	8010262 <_vfiprintf_r+0x56>
 801022a:	6875      	ldr	r5, [r6, #4]
 801022c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801022e:	07d9      	lsls	r1, r3, #31
 8010230:	d405      	bmi.n	801023e <_vfiprintf_r+0x32>
 8010232:	89ab      	ldrh	r3, [r5, #12]
 8010234:	059a      	lsls	r2, r3, #22
 8010236:	d402      	bmi.n	801023e <_vfiprintf_r+0x32>
 8010238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801023a:	f7ff fd77 	bl	800fd2c <__retarget_lock_acquire_recursive>
 801023e:	89ab      	ldrh	r3, [r5, #12]
 8010240:	071b      	lsls	r3, r3, #28
 8010242:	d501      	bpl.n	8010248 <_vfiprintf_r+0x3c>
 8010244:	692b      	ldr	r3, [r5, #16]
 8010246:	b9eb      	cbnz	r3, 8010284 <_vfiprintf_r+0x78>
 8010248:	4629      	mov	r1, r5
 801024a:	4630      	mov	r0, r6
 801024c:	f000 fb5a 	bl	8010904 <__swsetup_r>
 8010250:	b1c0      	cbz	r0, 8010284 <_vfiprintf_r+0x78>
 8010252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010254:	07dc      	lsls	r4, r3, #31
 8010256:	d50e      	bpl.n	8010276 <_vfiprintf_r+0x6a>
 8010258:	f04f 30ff 	mov.w	r0, #4294967295
 801025c:	b01d      	add	sp, #116	; 0x74
 801025e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010262:	4b7b      	ldr	r3, [pc, #492]	; (8010450 <_vfiprintf_r+0x244>)
 8010264:	429d      	cmp	r5, r3
 8010266:	d101      	bne.n	801026c <_vfiprintf_r+0x60>
 8010268:	68b5      	ldr	r5, [r6, #8]
 801026a:	e7df      	b.n	801022c <_vfiprintf_r+0x20>
 801026c:	4b79      	ldr	r3, [pc, #484]	; (8010454 <_vfiprintf_r+0x248>)
 801026e:	429d      	cmp	r5, r3
 8010270:	bf08      	it	eq
 8010272:	68f5      	ldreq	r5, [r6, #12]
 8010274:	e7da      	b.n	801022c <_vfiprintf_r+0x20>
 8010276:	89ab      	ldrh	r3, [r5, #12]
 8010278:	0598      	lsls	r0, r3, #22
 801027a:	d4ed      	bmi.n	8010258 <_vfiprintf_r+0x4c>
 801027c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801027e:	f7ff fd56 	bl	800fd2e <__retarget_lock_release_recursive>
 8010282:	e7e9      	b.n	8010258 <_vfiprintf_r+0x4c>
 8010284:	2300      	movs	r3, #0
 8010286:	9309      	str	r3, [sp, #36]	; 0x24
 8010288:	2320      	movs	r3, #32
 801028a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801028e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010292:	2330      	movs	r3, #48	; 0x30
 8010294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010458 <_vfiprintf_r+0x24c>
 8010298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801029c:	f04f 0901 	mov.w	r9, #1
 80102a0:	4623      	mov	r3, r4
 80102a2:	469a      	mov	sl, r3
 80102a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a8:	b10a      	cbz	r2, 80102ae <_vfiprintf_r+0xa2>
 80102aa:	2a25      	cmp	r2, #37	; 0x25
 80102ac:	d1f9      	bne.n	80102a2 <_vfiprintf_r+0x96>
 80102ae:	ebba 0b04 	subs.w	fp, sl, r4
 80102b2:	d00b      	beq.n	80102cc <_vfiprintf_r+0xc0>
 80102b4:	465b      	mov	r3, fp
 80102b6:	4622      	mov	r2, r4
 80102b8:	4629      	mov	r1, r5
 80102ba:	4630      	mov	r0, r6
 80102bc:	f7ff ff93 	bl	80101e6 <__sfputs_r>
 80102c0:	3001      	adds	r0, #1
 80102c2:	f000 80aa 	beq.w	801041a <_vfiprintf_r+0x20e>
 80102c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102c8:	445a      	add	r2, fp
 80102ca:	9209      	str	r2, [sp, #36]	; 0x24
 80102cc:	f89a 3000 	ldrb.w	r3, [sl]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 80a2 	beq.w	801041a <_vfiprintf_r+0x20e>
 80102d6:	2300      	movs	r3, #0
 80102d8:	f04f 32ff 	mov.w	r2, #4294967295
 80102dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102e0:	f10a 0a01 	add.w	sl, sl, #1
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	9307      	str	r3, [sp, #28]
 80102e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102ec:	931a      	str	r3, [sp, #104]	; 0x68
 80102ee:	4654      	mov	r4, sl
 80102f0:	2205      	movs	r2, #5
 80102f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102f6:	4858      	ldr	r0, [pc, #352]	; (8010458 <_vfiprintf_r+0x24c>)
 80102f8:	f7ef ffa2 	bl	8000240 <memchr>
 80102fc:	9a04      	ldr	r2, [sp, #16]
 80102fe:	b9d8      	cbnz	r0, 8010338 <_vfiprintf_r+0x12c>
 8010300:	06d1      	lsls	r1, r2, #27
 8010302:	bf44      	itt	mi
 8010304:	2320      	movmi	r3, #32
 8010306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801030a:	0713      	lsls	r3, r2, #28
 801030c:	bf44      	itt	mi
 801030e:	232b      	movmi	r3, #43	; 0x2b
 8010310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010314:	f89a 3000 	ldrb.w	r3, [sl]
 8010318:	2b2a      	cmp	r3, #42	; 0x2a
 801031a:	d015      	beq.n	8010348 <_vfiprintf_r+0x13c>
 801031c:	9a07      	ldr	r2, [sp, #28]
 801031e:	4654      	mov	r4, sl
 8010320:	2000      	movs	r0, #0
 8010322:	f04f 0c0a 	mov.w	ip, #10
 8010326:	4621      	mov	r1, r4
 8010328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801032c:	3b30      	subs	r3, #48	; 0x30
 801032e:	2b09      	cmp	r3, #9
 8010330:	d94e      	bls.n	80103d0 <_vfiprintf_r+0x1c4>
 8010332:	b1b0      	cbz	r0, 8010362 <_vfiprintf_r+0x156>
 8010334:	9207      	str	r2, [sp, #28]
 8010336:	e014      	b.n	8010362 <_vfiprintf_r+0x156>
 8010338:	eba0 0308 	sub.w	r3, r0, r8
 801033c:	fa09 f303 	lsl.w	r3, r9, r3
 8010340:	4313      	orrs	r3, r2
 8010342:	9304      	str	r3, [sp, #16]
 8010344:	46a2      	mov	sl, r4
 8010346:	e7d2      	b.n	80102ee <_vfiprintf_r+0xe2>
 8010348:	9b03      	ldr	r3, [sp, #12]
 801034a:	1d19      	adds	r1, r3, #4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	9103      	str	r1, [sp, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	bfbb      	ittet	lt
 8010354:	425b      	neglt	r3, r3
 8010356:	f042 0202 	orrlt.w	r2, r2, #2
 801035a:	9307      	strge	r3, [sp, #28]
 801035c:	9307      	strlt	r3, [sp, #28]
 801035e:	bfb8      	it	lt
 8010360:	9204      	strlt	r2, [sp, #16]
 8010362:	7823      	ldrb	r3, [r4, #0]
 8010364:	2b2e      	cmp	r3, #46	; 0x2e
 8010366:	d10c      	bne.n	8010382 <_vfiprintf_r+0x176>
 8010368:	7863      	ldrb	r3, [r4, #1]
 801036a:	2b2a      	cmp	r3, #42	; 0x2a
 801036c:	d135      	bne.n	80103da <_vfiprintf_r+0x1ce>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	1d1a      	adds	r2, r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	9203      	str	r2, [sp, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfb8      	it	lt
 801037a:	f04f 33ff 	movlt.w	r3, #4294967295
 801037e:	3402      	adds	r4, #2
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010468 <_vfiprintf_r+0x25c>
 8010386:	7821      	ldrb	r1, [r4, #0]
 8010388:	2203      	movs	r2, #3
 801038a:	4650      	mov	r0, sl
 801038c:	f7ef ff58 	bl	8000240 <memchr>
 8010390:	b140      	cbz	r0, 80103a4 <_vfiprintf_r+0x198>
 8010392:	2340      	movs	r3, #64	; 0x40
 8010394:	eba0 000a 	sub.w	r0, r0, sl
 8010398:	fa03 f000 	lsl.w	r0, r3, r0
 801039c:	9b04      	ldr	r3, [sp, #16]
 801039e:	4303      	orrs	r3, r0
 80103a0:	3401      	adds	r4, #1
 80103a2:	9304      	str	r3, [sp, #16]
 80103a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a8:	482c      	ldr	r0, [pc, #176]	; (801045c <_vfiprintf_r+0x250>)
 80103aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103ae:	2206      	movs	r2, #6
 80103b0:	f7ef ff46 	bl	8000240 <memchr>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d03f      	beq.n	8010438 <_vfiprintf_r+0x22c>
 80103b8:	4b29      	ldr	r3, [pc, #164]	; (8010460 <_vfiprintf_r+0x254>)
 80103ba:	bb1b      	cbnz	r3, 8010404 <_vfiprintf_r+0x1f8>
 80103bc:	9b03      	ldr	r3, [sp, #12]
 80103be:	3307      	adds	r3, #7
 80103c0:	f023 0307 	bic.w	r3, r3, #7
 80103c4:	3308      	adds	r3, #8
 80103c6:	9303      	str	r3, [sp, #12]
 80103c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ca:	443b      	add	r3, r7
 80103cc:	9309      	str	r3, [sp, #36]	; 0x24
 80103ce:	e767      	b.n	80102a0 <_vfiprintf_r+0x94>
 80103d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80103d4:	460c      	mov	r4, r1
 80103d6:	2001      	movs	r0, #1
 80103d8:	e7a5      	b.n	8010326 <_vfiprintf_r+0x11a>
 80103da:	2300      	movs	r3, #0
 80103dc:	3401      	adds	r4, #1
 80103de:	9305      	str	r3, [sp, #20]
 80103e0:	4619      	mov	r1, r3
 80103e2:	f04f 0c0a 	mov.w	ip, #10
 80103e6:	4620      	mov	r0, r4
 80103e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103ec:	3a30      	subs	r2, #48	; 0x30
 80103ee:	2a09      	cmp	r2, #9
 80103f0:	d903      	bls.n	80103fa <_vfiprintf_r+0x1ee>
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0c5      	beq.n	8010382 <_vfiprintf_r+0x176>
 80103f6:	9105      	str	r1, [sp, #20]
 80103f8:	e7c3      	b.n	8010382 <_vfiprintf_r+0x176>
 80103fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80103fe:	4604      	mov	r4, r0
 8010400:	2301      	movs	r3, #1
 8010402:	e7f0      	b.n	80103e6 <_vfiprintf_r+0x1da>
 8010404:	ab03      	add	r3, sp, #12
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	462a      	mov	r2, r5
 801040a:	4b16      	ldr	r3, [pc, #88]	; (8010464 <_vfiprintf_r+0x258>)
 801040c:	a904      	add	r1, sp, #16
 801040e:	4630      	mov	r0, r6
 8010410:	f3af 8000 	nop.w
 8010414:	4607      	mov	r7, r0
 8010416:	1c78      	adds	r0, r7, #1
 8010418:	d1d6      	bne.n	80103c8 <_vfiprintf_r+0x1bc>
 801041a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801041c:	07d9      	lsls	r1, r3, #31
 801041e:	d405      	bmi.n	801042c <_vfiprintf_r+0x220>
 8010420:	89ab      	ldrh	r3, [r5, #12]
 8010422:	059a      	lsls	r2, r3, #22
 8010424:	d402      	bmi.n	801042c <_vfiprintf_r+0x220>
 8010426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010428:	f7ff fc81 	bl	800fd2e <__retarget_lock_release_recursive>
 801042c:	89ab      	ldrh	r3, [r5, #12]
 801042e:	065b      	lsls	r3, r3, #25
 8010430:	f53f af12 	bmi.w	8010258 <_vfiprintf_r+0x4c>
 8010434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010436:	e711      	b.n	801025c <_vfiprintf_r+0x50>
 8010438:	ab03      	add	r3, sp, #12
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	462a      	mov	r2, r5
 801043e:	4b09      	ldr	r3, [pc, #36]	; (8010464 <_vfiprintf_r+0x258>)
 8010440:	a904      	add	r1, sp, #16
 8010442:	4630      	mov	r0, r6
 8010444:	f000 f880 	bl	8010548 <_printf_i>
 8010448:	e7e4      	b.n	8010414 <_vfiprintf_r+0x208>
 801044a:	bf00      	nop
 801044c:	080139e0 	.word	0x080139e0
 8010450:	08013a00 	.word	0x08013a00
 8010454:	080139c0 	.word	0x080139c0
 8010458:	08013a20 	.word	0x08013a20
 801045c:	08013a2a 	.word	0x08013a2a
 8010460:	00000000 	.word	0x00000000
 8010464:	080101e7 	.word	0x080101e7
 8010468:	08013a26 	.word	0x08013a26

0801046c <_printf_common>:
 801046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010470:	4616      	mov	r6, r2
 8010472:	4699      	mov	r9, r3
 8010474:	688a      	ldr	r2, [r1, #8]
 8010476:	690b      	ldr	r3, [r1, #16]
 8010478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801047c:	4293      	cmp	r3, r2
 801047e:	bfb8      	it	lt
 8010480:	4613      	movlt	r3, r2
 8010482:	6033      	str	r3, [r6, #0]
 8010484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010488:	4607      	mov	r7, r0
 801048a:	460c      	mov	r4, r1
 801048c:	b10a      	cbz	r2, 8010492 <_printf_common+0x26>
 801048e:	3301      	adds	r3, #1
 8010490:	6033      	str	r3, [r6, #0]
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	0699      	lsls	r1, r3, #26
 8010496:	bf42      	ittt	mi
 8010498:	6833      	ldrmi	r3, [r6, #0]
 801049a:	3302      	addmi	r3, #2
 801049c:	6033      	strmi	r3, [r6, #0]
 801049e:	6825      	ldr	r5, [r4, #0]
 80104a0:	f015 0506 	ands.w	r5, r5, #6
 80104a4:	d106      	bne.n	80104b4 <_printf_common+0x48>
 80104a6:	f104 0a19 	add.w	sl, r4, #25
 80104aa:	68e3      	ldr	r3, [r4, #12]
 80104ac:	6832      	ldr	r2, [r6, #0]
 80104ae:	1a9b      	subs	r3, r3, r2
 80104b0:	42ab      	cmp	r3, r5
 80104b2:	dc26      	bgt.n	8010502 <_printf_common+0x96>
 80104b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104b8:	1e13      	subs	r3, r2, #0
 80104ba:	6822      	ldr	r2, [r4, #0]
 80104bc:	bf18      	it	ne
 80104be:	2301      	movne	r3, #1
 80104c0:	0692      	lsls	r2, r2, #26
 80104c2:	d42b      	bmi.n	801051c <_printf_common+0xb0>
 80104c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104c8:	4649      	mov	r1, r9
 80104ca:	4638      	mov	r0, r7
 80104cc:	47c0      	blx	r8
 80104ce:	3001      	adds	r0, #1
 80104d0:	d01e      	beq.n	8010510 <_printf_common+0xa4>
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	68e5      	ldr	r5, [r4, #12]
 80104d6:	6832      	ldr	r2, [r6, #0]
 80104d8:	f003 0306 	and.w	r3, r3, #6
 80104dc:	2b04      	cmp	r3, #4
 80104de:	bf08      	it	eq
 80104e0:	1aad      	subeq	r5, r5, r2
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	6922      	ldr	r2, [r4, #16]
 80104e6:	bf0c      	ite	eq
 80104e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104ec:	2500      	movne	r5, #0
 80104ee:	4293      	cmp	r3, r2
 80104f0:	bfc4      	itt	gt
 80104f2:	1a9b      	subgt	r3, r3, r2
 80104f4:	18ed      	addgt	r5, r5, r3
 80104f6:	2600      	movs	r6, #0
 80104f8:	341a      	adds	r4, #26
 80104fa:	42b5      	cmp	r5, r6
 80104fc:	d11a      	bne.n	8010534 <_printf_common+0xc8>
 80104fe:	2000      	movs	r0, #0
 8010500:	e008      	b.n	8010514 <_printf_common+0xa8>
 8010502:	2301      	movs	r3, #1
 8010504:	4652      	mov	r2, sl
 8010506:	4649      	mov	r1, r9
 8010508:	4638      	mov	r0, r7
 801050a:	47c0      	blx	r8
 801050c:	3001      	adds	r0, #1
 801050e:	d103      	bne.n	8010518 <_printf_common+0xac>
 8010510:	f04f 30ff 	mov.w	r0, #4294967295
 8010514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010518:	3501      	adds	r5, #1
 801051a:	e7c6      	b.n	80104aa <_printf_common+0x3e>
 801051c:	18e1      	adds	r1, r4, r3
 801051e:	1c5a      	adds	r2, r3, #1
 8010520:	2030      	movs	r0, #48	; 0x30
 8010522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010526:	4422      	add	r2, r4
 8010528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801052c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010530:	3302      	adds	r3, #2
 8010532:	e7c7      	b.n	80104c4 <_printf_common+0x58>
 8010534:	2301      	movs	r3, #1
 8010536:	4622      	mov	r2, r4
 8010538:	4649      	mov	r1, r9
 801053a:	4638      	mov	r0, r7
 801053c:	47c0      	blx	r8
 801053e:	3001      	adds	r0, #1
 8010540:	d0e6      	beq.n	8010510 <_printf_common+0xa4>
 8010542:	3601      	adds	r6, #1
 8010544:	e7d9      	b.n	80104fa <_printf_common+0x8e>
	...

08010548 <_printf_i>:
 8010548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801054c:	7e0f      	ldrb	r7, [r1, #24]
 801054e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010550:	2f78      	cmp	r7, #120	; 0x78
 8010552:	4691      	mov	r9, r2
 8010554:	4680      	mov	r8, r0
 8010556:	460c      	mov	r4, r1
 8010558:	469a      	mov	sl, r3
 801055a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801055e:	d807      	bhi.n	8010570 <_printf_i+0x28>
 8010560:	2f62      	cmp	r7, #98	; 0x62
 8010562:	d80a      	bhi.n	801057a <_printf_i+0x32>
 8010564:	2f00      	cmp	r7, #0
 8010566:	f000 80d8 	beq.w	801071a <_printf_i+0x1d2>
 801056a:	2f58      	cmp	r7, #88	; 0x58
 801056c:	f000 80a3 	beq.w	80106b6 <_printf_i+0x16e>
 8010570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010578:	e03a      	b.n	80105f0 <_printf_i+0xa8>
 801057a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801057e:	2b15      	cmp	r3, #21
 8010580:	d8f6      	bhi.n	8010570 <_printf_i+0x28>
 8010582:	a101      	add	r1, pc, #4	; (adr r1, 8010588 <_printf_i+0x40>)
 8010584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010588:	080105e1 	.word	0x080105e1
 801058c:	080105f5 	.word	0x080105f5
 8010590:	08010571 	.word	0x08010571
 8010594:	08010571 	.word	0x08010571
 8010598:	08010571 	.word	0x08010571
 801059c:	08010571 	.word	0x08010571
 80105a0:	080105f5 	.word	0x080105f5
 80105a4:	08010571 	.word	0x08010571
 80105a8:	08010571 	.word	0x08010571
 80105ac:	08010571 	.word	0x08010571
 80105b0:	08010571 	.word	0x08010571
 80105b4:	08010701 	.word	0x08010701
 80105b8:	08010625 	.word	0x08010625
 80105bc:	080106e3 	.word	0x080106e3
 80105c0:	08010571 	.word	0x08010571
 80105c4:	08010571 	.word	0x08010571
 80105c8:	08010723 	.word	0x08010723
 80105cc:	08010571 	.word	0x08010571
 80105d0:	08010625 	.word	0x08010625
 80105d4:	08010571 	.word	0x08010571
 80105d8:	08010571 	.word	0x08010571
 80105dc:	080106eb 	.word	0x080106eb
 80105e0:	682b      	ldr	r3, [r5, #0]
 80105e2:	1d1a      	adds	r2, r3, #4
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	602a      	str	r2, [r5, #0]
 80105e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105f0:	2301      	movs	r3, #1
 80105f2:	e0a3      	b.n	801073c <_printf_i+0x1f4>
 80105f4:	6820      	ldr	r0, [r4, #0]
 80105f6:	6829      	ldr	r1, [r5, #0]
 80105f8:	0606      	lsls	r6, r0, #24
 80105fa:	f101 0304 	add.w	r3, r1, #4
 80105fe:	d50a      	bpl.n	8010616 <_printf_i+0xce>
 8010600:	680e      	ldr	r6, [r1, #0]
 8010602:	602b      	str	r3, [r5, #0]
 8010604:	2e00      	cmp	r6, #0
 8010606:	da03      	bge.n	8010610 <_printf_i+0xc8>
 8010608:	232d      	movs	r3, #45	; 0x2d
 801060a:	4276      	negs	r6, r6
 801060c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010610:	485e      	ldr	r0, [pc, #376]	; (801078c <_printf_i+0x244>)
 8010612:	230a      	movs	r3, #10
 8010614:	e019      	b.n	801064a <_printf_i+0x102>
 8010616:	680e      	ldr	r6, [r1, #0]
 8010618:	602b      	str	r3, [r5, #0]
 801061a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801061e:	bf18      	it	ne
 8010620:	b236      	sxthne	r6, r6
 8010622:	e7ef      	b.n	8010604 <_printf_i+0xbc>
 8010624:	682b      	ldr	r3, [r5, #0]
 8010626:	6820      	ldr	r0, [r4, #0]
 8010628:	1d19      	adds	r1, r3, #4
 801062a:	6029      	str	r1, [r5, #0]
 801062c:	0601      	lsls	r1, r0, #24
 801062e:	d501      	bpl.n	8010634 <_printf_i+0xec>
 8010630:	681e      	ldr	r6, [r3, #0]
 8010632:	e002      	b.n	801063a <_printf_i+0xf2>
 8010634:	0646      	lsls	r6, r0, #25
 8010636:	d5fb      	bpl.n	8010630 <_printf_i+0xe8>
 8010638:	881e      	ldrh	r6, [r3, #0]
 801063a:	4854      	ldr	r0, [pc, #336]	; (801078c <_printf_i+0x244>)
 801063c:	2f6f      	cmp	r7, #111	; 0x6f
 801063e:	bf0c      	ite	eq
 8010640:	2308      	moveq	r3, #8
 8010642:	230a      	movne	r3, #10
 8010644:	2100      	movs	r1, #0
 8010646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801064a:	6865      	ldr	r5, [r4, #4]
 801064c:	60a5      	str	r5, [r4, #8]
 801064e:	2d00      	cmp	r5, #0
 8010650:	bfa2      	ittt	ge
 8010652:	6821      	ldrge	r1, [r4, #0]
 8010654:	f021 0104 	bicge.w	r1, r1, #4
 8010658:	6021      	strge	r1, [r4, #0]
 801065a:	b90e      	cbnz	r6, 8010660 <_printf_i+0x118>
 801065c:	2d00      	cmp	r5, #0
 801065e:	d04d      	beq.n	80106fc <_printf_i+0x1b4>
 8010660:	4615      	mov	r5, r2
 8010662:	fbb6 f1f3 	udiv	r1, r6, r3
 8010666:	fb03 6711 	mls	r7, r3, r1, r6
 801066a:	5dc7      	ldrb	r7, [r0, r7]
 801066c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010670:	4637      	mov	r7, r6
 8010672:	42bb      	cmp	r3, r7
 8010674:	460e      	mov	r6, r1
 8010676:	d9f4      	bls.n	8010662 <_printf_i+0x11a>
 8010678:	2b08      	cmp	r3, #8
 801067a:	d10b      	bne.n	8010694 <_printf_i+0x14c>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	07de      	lsls	r6, r3, #31
 8010680:	d508      	bpl.n	8010694 <_printf_i+0x14c>
 8010682:	6923      	ldr	r3, [r4, #16]
 8010684:	6861      	ldr	r1, [r4, #4]
 8010686:	4299      	cmp	r1, r3
 8010688:	bfde      	ittt	le
 801068a:	2330      	movle	r3, #48	; 0x30
 801068c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010694:	1b52      	subs	r2, r2, r5
 8010696:	6122      	str	r2, [r4, #16]
 8010698:	f8cd a000 	str.w	sl, [sp]
 801069c:	464b      	mov	r3, r9
 801069e:	aa03      	add	r2, sp, #12
 80106a0:	4621      	mov	r1, r4
 80106a2:	4640      	mov	r0, r8
 80106a4:	f7ff fee2 	bl	801046c <_printf_common>
 80106a8:	3001      	adds	r0, #1
 80106aa:	d14c      	bne.n	8010746 <_printf_i+0x1fe>
 80106ac:	f04f 30ff 	mov.w	r0, #4294967295
 80106b0:	b004      	add	sp, #16
 80106b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b6:	4835      	ldr	r0, [pc, #212]	; (801078c <_printf_i+0x244>)
 80106b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106bc:	6829      	ldr	r1, [r5, #0]
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80106c4:	6029      	str	r1, [r5, #0]
 80106c6:	061d      	lsls	r5, r3, #24
 80106c8:	d514      	bpl.n	80106f4 <_printf_i+0x1ac>
 80106ca:	07df      	lsls	r7, r3, #31
 80106cc:	bf44      	itt	mi
 80106ce:	f043 0320 	orrmi.w	r3, r3, #32
 80106d2:	6023      	strmi	r3, [r4, #0]
 80106d4:	b91e      	cbnz	r6, 80106de <_printf_i+0x196>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	f023 0320 	bic.w	r3, r3, #32
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	2310      	movs	r3, #16
 80106e0:	e7b0      	b.n	8010644 <_printf_i+0xfc>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	f043 0320 	orr.w	r3, r3, #32
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	2378      	movs	r3, #120	; 0x78
 80106ec:	4828      	ldr	r0, [pc, #160]	; (8010790 <_printf_i+0x248>)
 80106ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106f2:	e7e3      	b.n	80106bc <_printf_i+0x174>
 80106f4:	0659      	lsls	r1, r3, #25
 80106f6:	bf48      	it	mi
 80106f8:	b2b6      	uxthmi	r6, r6
 80106fa:	e7e6      	b.n	80106ca <_printf_i+0x182>
 80106fc:	4615      	mov	r5, r2
 80106fe:	e7bb      	b.n	8010678 <_printf_i+0x130>
 8010700:	682b      	ldr	r3, [r5, #0]
 8010702:	6826      	ldr	r6, [r4, #0]
 8010704:	6961      	ldr	r1, [r4, #20]
 8010706:	1d18      	adds	r0, r3, #4
 8010708:	6028      	str	r0, [r5, #0]
 801070a:	0635      	lsls	r5, r6, #24
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	d501      	bpl.n	8010714 <_printf_i+0x1cc>
 8010710:	6019      	str	r1, [r3, #0]
 8010712:	e002      	b.n	801071a <_printf_i+0x1d2>
 8010714:	0670      	lsls	r0, r6, #25
 8010716:	d5fb      	bpl.n	8010710 <_printf_i+0x1c8>
 8010718:	8019      	strh	r1, [r3, #0]
 801071a:	2300      	movs	r3, #0
 801071c:	6123      	str	r3, [r4, #16]
 801071e:	4615      	mov	r5, r2
 8010720:	e7ba      	b.n	8010698 <_printf_i+0x150>
 8010722:	682b      	ldr	r3, [r5, #0]
 8010724:	1d1a      	adds	r2, r3, #4
 8010726:	602a      	str	r2, [r5, #0]
 8010728:	681d      	ldr	r5, [r3, #0]
 801072a:	6862      	ldr	r2, [r4, #4]
 801072c:	2100      	movs	r1, #0
 801072e:	4628      	mov	r0, r5
 8010730:	f7ef fd86 	bl	8000240 <memchr>
 8010734:	b108      	cbz	r0, 801073a <_printf_i+0x1f2>
 8010736:	1b40      	subs	r0, r0, r5
 8010738:	6060      	str	r0, [r4, #4]
 801073a:	6863      	ldr	r3, [r4, #4]
 801073c:	6123      	str	r3, [r4, #16]
 801073e:	2300      	movs	r3, #0
 8010740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010744:	e7a8      	b.n	8010698 <_printf_i+0x150>
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	462a      	mov	r2, r5
 801074a:	4649      	mov	r1, r9
 801074c:	4640      	mov	r0, r8
 801074e:	47d0      	blx	sl
 8010750:	3001      	adds	r0, #1
 8010752:	d0ab      	beq.n	80106ac <_printf_i+0x164>
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	079b      	lsls	r3, r3, #30
 8010758:	d413      	bmi.n	8010782 <_printf_i+0x23a>
 801075a:	68e0      	ldr	r0, [r4, #12]
 801075c:	9b03      	ldr	r3, [sp, #12]
 801075e:	4298      	cmp	r0, r3
 8010760:	bfb8      	it	lt
 8010762:	4618      	movlt	r0, r3
 8010764:	e7a4      	b.n	80106b0 <_printf_i+0x168>
 8010766:	2301      	movs	r3, #1
 8010768:	4632      	mov	r2, r6
 801076a:	4649      	mov	r1, r9
 801076c:	4640      	mov	r0, r8
 801076e:	47d0      	blx	sl
 8010770:	3001      	adds	r0, #1
 8010772:	d09b      	beq.n	80106ac <_printf_i+0x164>
 8010774:	3501      	adds	r5, #1
 8010776:	68e3      	ldr	r3, [r4, #12]
 8010778:	9903      	ldr	r1, [sp, #12]
 801077a:	1a5b      	subs	r3, r3, r1
 801077c:	42ab      	cmp	r3, r5
 801077e:	dcf2      	bgt.n	8010766 <_printf_i+0x21e>
 8010780:	e7eb      	b.n	801075a <_printf_i+0x212>
 8010782:	2500      	movs	r5, #0
 8010784:	f104 0619 	add.w	r6, r4, #25
 8010788:	e7f5      	b.n	8010776 <_printf_i+0x22e>
 801078a:	bf00      	nop
 801078c:	08013a31 	.word	0x08013a31
 8010790:	08013a42 	.word	0x08013a42

08010794 <_sbrk_r>:
 8010794:	b538      	push	{r3, r4, r5, lr}
 8010796:	4d06      	ldr	r5, [pc, #24]	; (80107b0 <_sbrk_r+0x1c>)
 8010798:	2300      	movs	r3, #0
 801079a:	4604      	mov	r4, r0
 801079c:	4608      	mov	r0, r1
 801079e:	602b      	str	r3, [r5, #0]
 80107a0:	f7f0 fb0e 	bl	8000dc0 <_sbrk>
 80107a4:	1c43      	adds	r3, r0, #1
 80107a6:	d102      	bne.n	80107ae <_sbrk_r+0x1a>
 80107a8:	682b      	ldr	r3, [r5, #0]
 80107aa:	b103      	cbz	r3, 80107ae <_sbrk_r+0x1a>
 80107ac:	6023      	str	r3, [r4, #0]
 80107ae:	bd38      	pop	{r3, r4, r5, pc}
 80107b0:	20005e44 	.word	0x20005e44

080107b4 <__sread>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	460c      	mov	r4, r1
 80107b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107bc:	f000 fa9e 	bl	8010cfc <_read_r>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	bfab      	itete	ge
 80107c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107c6:	89a3      	ldrhlt	r3, [r4, #12]
 80107c8:	181b      	addge	r3, r3, r0
 80107ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107ce:	bfac      	ite	ge
 80107d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80107d2:	81a3      	strhlt	r3, [r4, #12]
 80107d4:	bd10      	pop	{r4, pc}

080107d6 <__swrite>:
 80107d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107da:	461f      	mov	r7, r3
 80107dc:	898b      	ldrh	r3, [r1, #12]
 80107de:	05db      	lsls	r3, r3, #23
 80107e0:	4605      	mov	r5, r0
 80107e2:	460c      	mov	r4, r1
 80107e4:	4616      	mov	r6, r2
 80107e6:	d505      	bpl.n	80107f4 <__swrite+0x1e>
 80107e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ec:	2302      	movs	r3, #2
 80107ee:	2200      	movs	r2, #0
 80107f0:	f000 f9d0 	bl	8010b94 <_lseek_r>
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107fe:	81a3      	strh	r3, [r4, #12]
 8010800:	4632      	mov	r2, r6
 8010802:	463b      	mov	r3, r7
 8010804:	4628      	mov	r0, r5
 8010806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801080a:	f000 b869 	b.w	80108e0 <_write_r>

0801080e <__sseek>:
 801080e:	b510      	push	{r4, lr}
 8010810:	460c      	mov	r4, r1
 8010812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010816:	f000 f9bd 	bl	8010b94 <_lseek_r>
 801081a:	1c43      	adds	r3, r0, #1
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	bf15      	itete	ne
 8010820:	6560      	strne	r0, [r4, #84]	; 0x54
 8010822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801082a:	81a3      	strheq	r3, [r4, #12]
 801082c:	bf18      	it	ne
 801082e:	81a3      	strhne	r3, [r4, #12]
 8010830:	bd10      	pop	{r4, pc}

08010832 <__sclose>:
 8010832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010836:	f000 b8db 	b.w	80109f0 <_close_r>
	...

0801083c <__swbuf_r>:
 801083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801083e:	460e      	mov	r6, r1
 8010840:	4614      	mov	r4, r2
 8010842:	4605      	mov	r5, r0
 8010844:	b118      	cbz	r0, 801084e <__swbuf_r+0x12>
 8010846:	6983      	ldr	r3, [r0, #24]
 8010848:	b90b      	cbnz	r3, 801084e <__swbuf_r+0x12>
 801084a:	f7ff f9bf 	bl	800fbcc <__sinit>
 801084e:	4b21      	ldr	r3, [pc, #132]	; (80108d4 <__swbuf_r+0x98>)
 8010850:	429c      	cmp	r4, r3
 8010852:	d12b      	bne.n	80108ac <__swbuf_r+0x70>
 8010854:	686c      	ldr	r4, [r5, #4]
 8010856:	69a3      	ldr	r3, [r4, #24]
 8010858:	60a3      	str	r3, [r4, #8]
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	071a      	lsls	r2, r3, #28
 801085e:	d52f      	bpl.n	80108c0 <__swbuf_r+0x84>
 8010860:	6923      	ldr	r3, [r4, #16]
 8010862:	b36b      	cbz	r3, 80108c0 <__swbuf_r+0x84>
 8010864:	6923      	ldr	r3, [r4, #16]
 8010866:	6820      	ldr	r0, [r4, #0]
 8010868:	1ac0      	subs	r0, r0, r3
 801086a:	6963      	ldr	r3, [r4, #20]
 801086c:	b2f6      	uxtb	r6, r6
 801086e:	4283      	cmp	r3, r0
 8010870:	4637      	mov	r7, r6
 8010872:	dc04      	bgt.n	801087e <__swbuf_r+0x42>
 8010874:	4621      	mov	r1, r4
 8010876:	4628      	mov	r0, r5
 8010878:	f000 f950 	bl	8010b1c <_fflush_r>
 801087c:	bb30      	cbnz	r0, 80108cc <__swbuf_r+0x90>
 801087e:	68a3      	ldr	r3, [r4, #8]
 8010880:	3b01      	subs	r3, #1
 8010882:	60a3      	str	r3, [r4, #8]
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	1c5a      	adds	r2, r3, #1
 8010888:	6022      	str	r2, [r4, #0]
 801088a:	701e      	strb	r6, [r3, #0]
 801088c:	6963      	ldr	r3, [r4, #20]
 801088e:	3001      	adds	r0, #1
 8010890:	4283      	cmp	r3, r0
 8010892:	d004      	beq.n	801089e <__swbuf_r+0x62>
 8010894:	89a3      	ldrh	r3, [r4, #12]
 8010896:	07db      	lsls	r3, r3, #31
 8010898:	d506      	bpl.n	80108a8 <__swbuf_r+0x6c>
 801089a:	2e0a      	cmp	r6, #10
 801089c:	d104      	bne.n	80108a8 <__swbuf_r+0x6c>
 801089e:	4621      	mov	r1, r4
 80108a0:	4628      	mov	r0, r5
 80108a2:	f000 f93b 	bl	8010b1c <_fflush_r>
 80108a6:	b988      	cbnz	r0, 80108cc <__swbuf_r+0x90>
 80108a8:	4638      	mov	r0, r7
 80108aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ac:	4b0a      	ldr	r3, [pc, #40]	; (80108d8 <__swbuf_r+0x9c>)
 80108ae:	429c      	cmp	r4, r3
 80108b0:	d101      	bne.n	80108b6 <__swbuf_r+0x7a>
 80108b2:	68ac      	ldr	r4, [r5, #8]
 80108b4:	e7cf      	b.n	8010856 <__swbuf_r+0x1a>
 80108b6:	4b09      	ldr	r3, [pc, #36]	; (80108dc <__swbuf_r+0xa0>)
 80108b8:	429c      	cmp	r4, r3
 80108ba:	bf08      	it	eq
 80108bc:	68ec      	ldreq	r4, [r5, #12]
 80108be:	e7ca      	b.n	8010856 <__swbuf_r+0x1a>
 80108c0:	4621      	mov	r1, r4
 80108c2:	4628      	mov	r0, r5
 80108c4:	f000 f81e 	bl	8010904 <__swsetup_r>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d0cb      	beq.n	8010864 <__swbuf_r+0x28>
 80108cc:	f04f 37ff 	mov.w	r7, #4294967295
 80108d0:	e7ea      	b.n	80108a8 <__swbuf_r+0x6c>
 80108d2:	bf00      	nop
 80108d4:	080139e0 	.word	0x080139e0
 80108d8:	08013a00 	.word	0x08013a00
 80108dc:	080139c0 	.word	0x080139c0

080108e0 <_write_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4d07      	ldr	r5, [pc, #28]	; (8010900 <_write_r+0x20>)
 80108e4:	4604      	mov	r4, r0
 80108e6:	4608      	mov	r0, r1
 80108e8:	4611      	mov	r1, r2
 80108ea:	2200      	movs	r2, #0
 80108ec:	602a      	str	r2, [r5, #0]
 80108ee:	461a      	mov	r2, r3
 80108f0:	f7f0 fa15 	bl	8000d1e <_write>
 80108f4:	1c43      	adds	r3, r0, #1
 80108f6:	d102      	bne.n	80108fe <_write_r+0x1e>
 80108f8:	682b      	ldr	r3, [r5, #0]
 80108fa:	b103      	cbz	r3, 80108fe <_write_r+0x1e>
 80108fc:	6023      	str	r3, [r4, #0]
 80108fe:	bd38      	pop	{r3, r4, r5, pc}
 8010900:	20005e44 	.word	0x20005e44

08010904 <__swsetup_r>:
 8010904:	4b32      	ldr	r3, [pc, #200]	; (80109d0 <__swsetup_r+0xcc>)
 8010906:	b570      	push	{r4, r5, r6, lr}
 8010908:	681d      	ldr	r5, [r3, #0]
 801090a:	4606      	mov	r6, r0
 801090c:	460c      	mov	r4, r1
 801090e:	b125      	cbz	r5, 801091a <__swsetup_r+0x16>
 8010910:	69ab      	ldr	r3, [r5, #24]
 8010912:	b913      	cbnz	r3, 801091a <__swsetup_r+0x16>
 8010914:	4628      	mov	r0, r5
 8010916:	f7ff f959 	bl	800fbcc <__sinit>
 801091a:	4b2e      	ldr	r3, [pc, #184]	; (80109d4 <__swsetup_r+0xd0>)
 801091c:	429c      	cmp	r4, r3
 801091e:	d10f      	bne.n	8010940 <__swsetup_r+0x3c>
 8010920:	686c      	ldr	r4, [r5, #4]
 8010922:	89a3      	ldrh	r3, [r4, #12]
 8010924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010928:	0719      	lsls	r1, r3, #28
 801092a:	d42c      	bmi.n	8010986 <__swsetup_r+0x82>
 801092c:	06dd      	lsls	r5, r3, #27
 801092e:	d411      	bmi.n	8010954 <__swsetup_r+0x50>
 8010930:	2309      	movs	r3, #9
 8010932:	6033      	str	r3, [r6, #0]
 8010934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010938:	81a3      	strh	r3, [r4, #12]
 801093a:	f04f 30ff 	mov.w	r0, #4294967295
 801093e:	e03e      	b.n	80109be <__swsetup_r+0xba>
 8010940:	4b25      	ldr	r3, [pc, #148]	; (80109d8 <__swsetup_r+0xd4>)
 8010942:	429c      	cmp	r4, r3
 8010944:	d101      	bne.n	801094a <__swsetup_r+0x46>
 8010946:	68ac      	ldr	r4, [r5, #8]
 8010948:	e7eb      	b.n	8010922 <__swsetup_r+0x1e>
 801094a:	4b24      	ldr	r3, [pc, #144]	; (80109dc <__swsetup_r+0xd8>)
 801094c:	429c      	cmp	r4, r3
 801094e:	bf08      	it	eq
 8010950:	68ec      	ldreq	r4, [r5, #12]
 8010952:	e7e6      	b.n	8010922 <__swsetup_r+0x1e>
 8010954:	0758      	lsls	r0, r3, #29
 8010956:	d512      	bpl.n	801097e <__swsetup_r+0x7a>
 8010958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801095a:	b141      	cbz	r1, 801096e <__swsetup_r+0x6a>
 801095c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010960:	4299      	cmp	r1, r3
 8010962:	d002      	beq.n	801096a <__swsetup_r+0x66>
 8010964:	4630      	mov	r0, r6
 8010966:	f7ff f9eb 	bl	800fd40 <_free_r>
 801096a:	2300      	movs	r3, #0
 801096c:	6363      	str	r3, [r4, #52]	; 0x34
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	2300      	movs	r3, #0
 8010978:	6063      	str	r3, [r4, #4]
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	89a3      	ldrh	r3, [r4, #12]
 8010980:	f043 0308 	orr.w	r3, r3, #8
 8010984:	81a3      	strh	r3, [r4, #12]
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	b94b      	cbnz	r3, 801099e <__swsetup_r+0x9a>
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010994:	d003      	beq.n	801099e <__swsetup_r+0x9a>
 8010996:	4621      	mov	r1, r4
 8010998:	4630      	mov	r0, r6
 801099a:	f000 f933 	bl	8010c04 <__smakebuf_r>
 801099e:	89a0      	ldrh	r0, [r4, #12]
 80109a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109a4:	f010 0301 	ands.w	r3, r0, #1
 80109a8:	d00a      	beq.n	80109c0 <__swsetup_r+0xbc>
 80109aa:	2300      	movs	r3, #0
 80109ac:	60a3      	str	r3, [r4, #8]
 80109ae:	6963      	ldr	r3, [r4, #20]
 80109b0:	425b      	negs	r3, r3
 80109b2:	61a3      	str	r3, [r4, #24]
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	b943      	cbnz	r3, 80109ca <__swsetup_r+0xc6>
 80109b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109bc:	d1ba      	bne.n	8010934 <__swsetup_r+0x30>
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	0781      	lsls	r1, r0, #30
 80109c2:	bf58      	it	pl
 80109c4:	6963      	ldrpl	r3, [r4, #20]
 80109c6:	60a3      	str	r3, [r4, #8]
 80109c8:	e7f4      	b.n	80109b4 <__swsetup_r+0xb0>
 80109ca:	2000      	movs	r0, #0
 80109cc:	e7f7      	b.n	80109be <__swsetup_r+0xba>
 80109ce:	bf00      	nop
 80109d0:	20000014 	.word	0x20000014
 80109d4:	080139e0 	.word	0x080139e0
 80109d8:	08013a00 	.word	0x08013a00
 80109dc:	080139c0 	.word	0x080139c0

080109e0 <abort>:
 80109e0:	b508      	push	{r3, lr}
 80109e2:	2006      	movs	r0, #6
 80109e4:	f000 f9c4 	bl	8010d70 <raise>
 80109e8:	2001      	movs	r0, #1
 80109ea:	f7f0 f971 	bl	8000cd0 <_exit>
	...

080109f0 <_close_r>:
 80109f0:	b538      	push	{r3, r4, r5, lr}
 80109f2:	4d06      	ldr	r5, [pc, #24]	; (8010a0c <_close_r+0x1c>)
 80109f4:	2300      	movs	r3, #0
 80109f6:	4604      	mov	r4, r0
 80109f8:	4608      	mov	r0, r1
 80109fa:	602b      	str	r3, [r5, #0]
 80109fc:	f7f0 f9ab 	bl	8000d56 <_close>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	d102      	bne.n	8010a0a <_close_r+0x1a>
 8010a04:	682b      	ldr	r3, [r5, #0]
 8010a06:	b103      	cbz	r3, 8010a0a <_close_r+0x1a>
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	bd38      	pop	{r3, r4, r5, pc}
 8010a0c:	20005e44 	.word	0x20005e44

08010a10 <__sflush_r>:
 8010a10:	898a      	ldrh	r2, [r1, #12]
 8010a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a16:	4605      	mov	r5, r0
 8010a18:	0710      	lsls	r0, r2, #28
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	d458      	bmi.n	8010ad0 <__sflush_r+0xc0>
 8010a1e:	684b      	ldr	r3, [r1, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	dc05      	bgt.n	8010a30 <__sflush_r+0x20>
 8010a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	dc02      	bgt.n	8010a30 <__sflush_r+0x20>
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a32:	2e00      	cmp	r6, #0
 8010a34:	d0f9      	beq.n	8010a2a <__sflush_r+0x1a>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a3c:	682f      	ldr	r7, [r5, #0]
 8010a3e:	602b      	str	r3, [r5, #0]
 8010a40:	d032      	beq.n	8010aa8 <__sflush_r+0x98>
 8010a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a44:	89a3      	ldrh	r3, [r4, #12]
 8010a46:	075a      	lsls	r2, r3, #29
 8010a48:	d505      	bpl.n	8010a56 <__sflush_r+0x46>
 8010a4a:	6863      	ldr	r3, [r4, #4]
 8010a4c:	1ac0      	subs	r0, r0, r3
 8010a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a50:	b10b      	cbz	r3, 8010a56 <__sflush_r+0x46>
 8010a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a54:	1ac0      	subs	r0, r0, r3
 8010a56:	2300      	movs	r3, #0
 8010a58:	4602      	mov	r2, r0
 8010a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a5c:	6a21      	ldr	r1, [r4, #32]
 8010a5e:	4628      	mov	r0, r5
 8010a60:	47b0      	blx	r6
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	89a3      	ldrh	r3, [r4, #12]
 8010a66:	d106      	bne.n	8010a76 <__sflush_r+0x66>
 8010a68:	6829      	ldr	r1, [r5, #0]
 8010a6a:	291d      	cmp	r1, #29
 8010a6c:	d82c      	bhi.n	8010ac8 <__sflush_r+0xb8>
 8010a6e:	4a2a      	ldr	r2, [pc, #168]	; (8010b18 <__sflush_r+0x108>)
 8010a70:	40ca      	lsrs	r2, r1
 8010a72:	07d6      	lsls	r6, r2, #31
 8010a74:	d528      	bpl.n	8010ac8 <__sflush_r+0xb8>
 8010a76:	2200      	movs	r2, #0
 8010a78:	6062      	str	r2, [r4, #4]
 8010a7a:	04d9      	lsls	r1, r3, #19
 8010a7c:	6922      	ldr	r2, [r4, #16]
 8010a7e:	6022      	str	r2, [r4, #0]
 8010a80:	d504      	bpl.n	8010a8c <__sflush_r+0x7c>
 8010a82:	1c42      	adds	r2, r0, #1
 8010a84:	d101      	bne.n	8010a8a <__sflush_r+0x7a>
 8010a86:	682b      	ldr	r3, [r5, #0]
 8010a88:	b903      	cbnz	r3, 8010a8c <__sflush_r+0x7c>
 8010a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8010a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a8e:	602f      	str	r7, [r5, #0]
 8010a90:	2900      	cmp	r1, #0
 8010a92:	d0ca      	beq.n	8010a2a <__sflush_r+0x1a>
 8010a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a98:	4299      	cmp	r1, r3
 8010a9a:	d002      	beq.n	8010aa2 <__sflush_r+0x92>
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	f7ff f94f 	bl	800fd40 <_free_r>
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8010aa6:	e7c1      	b.n	8010a2c <__sflush_r+0x1c>
 8010aa8:	6a21      	ldr	r1, [r4, #32]
 8010aaa:	2301      	movs	r3, #1
 8010aac:	4628      	mov	r0, r5
 8010aae:	47b0      	blx	r6
 8010ab0:	1c41      	adds	r1, r0, #1
 8010ab2:	d1c7      	bne.n	8010a44 <__sflush_r+0x34>
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d0c4      	beq.n	8010a44 <__sflush_r+0x34>
 8010aba:	2b1d      	cmp	r3, #29
 8010abc:	d001      	beq.n	8010ac2 <__sflush_r+0xb2>
 8010abe:	2b16      	cmp	r3, #22
 8010ac0:	d101      	bne.n	8010ac6 <__sflush_r+0xb6>
 8010ac2:	602f      	str	r7, [r5, #0]
 8010ac4:	e7b1      	b.n	8010a2a <__sflush_r+0x1a>
 8010ac6:	89a3      	ldrh	r3, [r4, #12]
 8010ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010acc:	81a3      	strh	r3, [r4, #12]
 8010ace:	e7ad      	b.n	8010a2c <__sflush_r+0x1c>
 8010ad0:	690f      	ldr	r7, [r1, #16]
 8010ad2:	2f00      	cmp	r7, #0
 8010ad4:	d0a9      	beq.n	8010a2a <__sflush_r+0x1a>
 8010ad6:	0793      	lsls	r3, r2, #30
 8010ad8:	680e      	ldr	r6, [r1, #0]
 8010ada:	bf08      	it	eq
 8010adc:	694b      	ldreq	r3, [r1, #20]
 8010ade:	600f      	str	r7, [r1, #0]
 8010ae0:	bf18      	it	ne
 8010ae2:	2300      	movne	r3, #0
 8010ae4:	eba6 0807 	sub.w	r8, r6, r7
 8010ae8:	608b      	str	r3, [r1, #8]
 8010aea:	f1b8 0f00 	cmp.w	r8, #0
 8010aee:	dd9c      	ble.n	8010a2a <__sflush_r+0x1a>
 8010af0:	6a21      	ldr	r1, [r4, #32]
 8010af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010af4:	4643      	mov	r3, r8
 8010af6:	463a      	mov	r2, r7
 8010af8:	4628      	mov	r0, r5
 8010afa:	47b0      	blx	r6
 8010afc:	2800      	cmp	r0, #0
 8010afe:	dc06      	bgt.n	8010b0e <__sflush_r+0xfe>
 8010b00:	89a3      	ldrh	r3, [r4, #12]
 8010b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b06:	81a3      	strh	r3, [r4, #12]
 8010b08:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0c:	e78e      	b.n	8010a2c <__sflush_r+0x1c>
 8010b0e:	4407      	add	r7, r0
 8010b10:	eba8 0800 	sub.w	r8, r8, r0
 8010b14:	e7e9      	b.n	8010aea <__sflush_r+0xda>
 8010b16:	bf00      	nop
 8010b18:	20400001 	.word	0x20400001

08010b1c <_fflush_r>:
 8010b1c:	b538      	push	{r3, r4, r5, lr}
 8010b1e:	690b      	ldr	r3, [r1, #16]
 8010b20:	4605      	mov	r5, r0
 8010b22:	460c      	mov	r4, r1
 8010b24:	b913      	cbnz	r3, 8010b2c <_fflush_r+0x10>
 8010b26:	2500      	movs	r5, #0
 8010b28:	4628      	mov	r0, r5
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	b118      	cbz	r0, 8010b36 <_fflush_r+0x1a>
 8010b2e:	6983      	ldr	r3, [r0, #24]
 8010b30:	b90b      	cbnz	r3, 8010b36 <_fflush_r+0x1a>
 8010b32:	f7ff f84b 	bl	800fbcc <__sinit>
 8010b36:	4b14      	ldr	r3, [pc, #80]	; (8010b88 <_fflush_r+0x6c>)
 8010b38:	429c      	cmp	r4, r3
 8010b3a:	d11b      	bne.n	8010b74 <_fflush_r+0x58>
 8010b3c:	686c      	ldr	r4, [r5, #4]
 8010b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d0ef      	beq.n	8010b26 <_fflush_r+0xa>
 8010b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b48:	07d0      	lsls	r0, r2, #31
 8010b4a:	d404      	bmi.n	8010b56 <_fflush_r+0x3a>
 8010b4c:	0599      	lsls	r1, r3, #22
 8010b4e:	d402      	bmi.n	8010b56 <_fflush_r+0x3a>
 8010b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b52:	f7ff f8eb 	bl	800fd2c <__retarget_lock_acquire_recursive>
 8010b56:	4628      	mov	r0, r5
 8010b58:	4621      	mov	r1, r4
 8010b5a:	f7ff ff59 	bl	8010a10 <__sflush_r>
 8010b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b60:	07da      	lsls	r2, r3, #31
 8010b62:	4605      	mov	r5, r0
 8010b64:	d4e0      	bmi.n	8010b28 <_fflush_r+0xc>
 8010b66:	89a3      	ldrh	r3, [r4, #12]
 8010b68:	059b      	lsls	r3, r3, #22
 8010b6a:	d4dd      	bmi.n	8010b28 <_fflush_r+0xc>
 8010b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b6e:	f7ff f8de 	bl	800fd2e <__retarget_lock_release_recursive>
 8010b72:	e7d9      	b.n	8010b28 <_fflush_r+0xc>
 8010b74:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <_fflush_r+0x70>)
 8010b76:	429c      	cmp	r4, r3
 8010b78:	d101      	bne.n	8010b7e <_fflush_r+0x62>
 8010b7a:	68ac      	ldr	r4, [r5, #8]
 8010b7c:	e7df      	b.n	8010b3e <_fflush_r+0x22>
 8010b7e:	4b04      	ldr	r3, [pc, #16]	; (8010b90 <_fflush_r+0x74>)
 8010b80:	429c      	cmp	r4, r3
 8010b82:	bf08      	it	eq
 8010b84:	68ec      	ldreq	r4, [r5, #12]
 8010b86:	e7da      	b.n	8010b3e <_fflush_r+0x22>
 8010b88:	080139e0 	.word	0x080139e0
 8010b8c:	08013a00 	.word	0x08013a00
 8010b90:	080139c0 	.word	0x080139c0

08010b94 <_lseek_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4d07      	ldr	r5, [pc, #28]	; (8010bb4 <_lseek_r+0x20>)
 8010b98:	4604      	mov	r4, r0
 8010b9a:	4608      	mov	r0, r1
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	602a      	str	r2, [r5, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f7f0 f8fe 	bl	8000da4 <_lseek>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d102      	bne.n	8010bb2 <_lseek_r+0x1e>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	b103      	cbz	r3, 8010bb2 <_lseek_r+0x1e>
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
 8010bb4:	20005e44 	.word	0x20005e44

08010bb8 <__swhatbuf_r>:
 8010bb8:	b570      	push	{r4, r5, r6, lr}
 8010bba:	460e      	mov	r6, r1
 8010bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	b096      	sub	sp, #88	; 0x58
 8010bc4:	4614      	mov	r4, r2
 8010bc6:	461d      	mov	r5, r3
 8010bc8:	da08      	bge.n	8010bdc <__swhatbuf_r+0x24>
 8010bca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	602a      	str	r2, [r5, #0]
 8010bd2:	061a      	lsls	r2, r3, #24
 8010bd4:	d410      	bmi.n	8010bf8 <__swhatbuf_r+0x40>
 8010bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bda:	e00e      	b.n	8010bfa <__swhatbuf_r+0x42>
 8010bdc:	466a      	mov	r2, sp
 8010bde:	f000 f8e3 	bl	8010da8 <_fstat_r>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	dbf1      	blt.n	8010bca <__swhatbuf_r+0x12>
 8010be6:	9a01      	ldr	r2, [sp, #4]
 8010be8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010bec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010bf0:	425a      	negs	r2, r3
 8010bf2:	415a      	adcs	r2, r3
 8010bf4:	602a      	str	r2, [r5, #0]
 8010bf6:	e7ee      	b.n	8010bd6 <__swhatbuf_r+0x1e>
 8010bf8:	2340      	movs	r3, #64	; 0x40
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	6023      	str	r3, [r4, #0]
 8010bfe:	b016      	add	sp, #88	; 0x58
 8010c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c04 <__smakebuf_r>:
 8010c04:	898b      	ldrh	r3, [r1, #12]
 8010c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c08:	079d      	lsls	r5, r3, #30
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	460c      	mov	r4, r1
 8010c0e:	d507      	bpl.n	8010c20 <__smakebuf_r+0x1c>
 8010c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c14:	6023      	str	r3, [r4, #0]
 8010c16:	6123      	str	r3, [r4, #16]
 8010c18:	2301      	movs	r3, #1
 8010c1a:	6163      	str	r3, [r4, #20]
 8010c1c:	b002      	add	sp, #8
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	ab01      	add	r3, sp, #4
 8010c22:	466a      	mov	r2, sp
 8010c24:	f7ff ffc8 	bl	8010bb8 <__swhatbuf_r>
 8010c28:	9900      	ldr	r1, [sp, #0]
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	4630      	mov	r0, r6
 8010c2e:	f7ff f8f3 	bl	800fe18 <_malloc_r>
 8010c32:	b948      	cbnz	r0, 8010c48 <__smakebuf_r+0x44>
 8010c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c38:	059a      	lsls	r2, r3, #22
 8010c3a:	d4ef      	bmi.n	8010c1c <__smakebuf_r+0x18>
 8010c3c:	f023 0303 	bic.w	r3, r3, #3
 8010c40:	f043 0302 	orr.w	r3, r3, #2
 8010c44:	81a3      	strh	r3, [r4, #12]
 8010c46:	e7e3      	b.n	8010c10 <__smakebuf_r+0xc>
 8010c48:	4b0d      	ldr	r3, [pc, #52]	; (8010c80 <__smakebuf_r+0x7c>)
 8010c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c4c:	89a3      	ldrh	r3, [r4, #12]
 8010c4e:	6020      	str	r0, [r4, #0]
 8010c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c54:	81a3      	strh	r3, [r4, #12]
 8010c56:	9b00      	ldr	r3, [sp, #0]
 8010c58:	6163      	str	r3, [r4, #20]
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	6120      	str	r0, [r4, #16]
 8010c5e:	b15b      	cbz	r3, 8010c78 <__smakebuf_r+0x74>
 8010c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c64:	4630      	mov	r0, r6
 8010c66:	f000 f8b1 	bl	8010dcc <_isatty_r>
 8010c6a:	b128      	cbz	r0, 8010c78 <__smakebuf_r+0x74>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	f023 0303 	bic.w	r3, r3, #3
 8010c72:	f043 0301 	orr.w	r3, r3, #1
 8010c76:	81a3      	strh	r3, [r4, #12]
 8010c78:	89a0      	ldrh	r0, [r4, #12]
 8010c7a:	4305      	orrs	r5, r0
 8010c7c:	81a5      	strh	r5, [r4, #12]
 8010c7e:	e7cd      	b.n	8010c1c <__smakebuf_r+0x18>
 8010c80:	0800fb65 	.word	0x0800fb65

08010c84 <__malloc_lock>:
 8010c84:	4801      	ldr	r0, [pc, #4]	; (8010c8c <__malloc_lock+0x8>)
 8010c86:	f7ff b851 	b.w	800fd2c <__retarget_lock_acquire_recursive>
 8010c8a:	bf00      	nop
 8010c8c:	20005e48 	.word	0x20005e48

08010c90 <__malloc_unlock>:
 8010c90:	4801      	ldr	r0, [pc, #4]	; (8010c98 <__malloc_unlock+0x8>)
 8010c92:	f7ff b84c 	b.w	800fd2e <__retarget_lock_release_recursive>
 8010c96:	bf00      	nop
 8010c98:	20005e48 	.word	0x20005e48

08010c9c <_realloc_r>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4680      	mov	r8, r0
 8010ca2:	4614      	mov	r4, r2
 8010ca4:	460e      	mov	r6, r1
 8010ca6:	b921      	cbnz	r1, 8010cb2 <_realloc_r+0x16>
 8010ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cac:	4611      	mov	r1, r2
 8010cae:	f7ff b8b3 	b.w	800fe18 <_malloc_r>
 8010cb2:	b92a      	cbnz	r2, 8010cc0 <_realloc_r+0x24>
 8010cb4:	f7ff f844 	bl	800fd40 <_free_r>
 8010cb8:	4625      	mov	r5, r4
 8010cba:	4628      	mov	r0, r5
 8010cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc0:	f000 f894 	bl	8010dec <_malloc_usable_size_r>
 8010cc4:	4284      	cmp	r4, r0
 8010cc6:	4607      	mov	r7, r0
 8010cc8:	d802      	bhi.n	8010cd0 <_realloc_r+0x34>
 8010cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cce:	d812      	bhi.n	8010cf6 <_realloc_r+0x5a>
 8010cd0:	4621      	mov	r1, r4
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	f7ff f8a0 	bl	800fe18 <_malloc_r>
 8010cd8:	4605      	mov	r5, r0
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d0ed      	beq.n	8010cba <_realloc_r+0x1e>
 8010cde:	42bc      	cmp	r4, r7
 8010ce0:	4622      	mov	r2, r4
 8010ce2:	4631      	mov	r1, r6
 8010ce4:	bf28      	it	cs
 8010ce6:	463a      	movcs	r2, r7
 8010ce8:	f7fe fe54 	bl	800f994 <memcpy>
 8010cec:	4631      	mov	r1, r6
 8010cee:	4640      	mov	r0, r8
 8010cf0:	f7ff f826 	bl	800fd40 <_free_r>
 8010cf4:	e7e1      	b.n	8010cba <_realloc_r+0x1e>
 8010cf6:	4635      	mov	r5, r6
 8010cf8:	e7df      	b.n	8010cba <_realloc_r+0x1e>
	...

08010cfc <_read_r>:
 8010cfc:	b538      	push	{r3, r4, r5, lr}
 8010cfe:	4d07      	ldr	r5, [pc, #28]	; (8010d1c <_read_r+0x20>)
 8010d00:	4604      	mov	r4, r0
 8010d02:	4608      	mov	r0, r1
 8010d04:	4611      	mov	r1, r2
 8010d06:	2200      	movs	r2, #0
 8010d08:	602a      	str	r2, [r5, #0]
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	f7ef ffea 	bl	8000ce4 <_read>
 8010d10:	1c43      	adds	r3, r0, #1
 8010d12:	d102      	bne.n	8010d1a <_read_r+0x1e>
 8010d14:	682b      	ldr	r3, [r5, #0]
 8010d16:	b103      	cbz	r3, 8010d1a <_read_r+0x1e>
 8010d18:	6023      	str	r3, [r4, #0]
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	20005e44 	.word	0x20005e44

08010d20 <_raise_r>:
 8010d20:	291f      	cmp	r1, #31
 8010d22:	b538      	push	{r3, r4, r5, lr}
 8010d24:	4604      	mov	r4, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	d904      	bls.n	8010d34 <_raise_r+0x14>
 8010d2a:	2316      	movs	r3, #22
 8010d2c:	6003      	str	r3, [r0, #0]
 8010d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d32:	bd38      	pop	{r3, r4, r5, pc}
 8010d34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d36:	b112      	cbz	r2, 8010d3e <_raise_r+0x1e>
 8010d38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d3c:	b94b      	cbnz	r3, 8010d52 <_raise_r+0x32>
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f000 f830 	bl	8010da4 <_getpid_r>
 8010d44:	462a      	mov	r2, r5
 8010d46:	4601      	mov	r1, r0
 8010d48:	4620      	mov	r0, r4
 8010d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d4e:	f000 b817 	b.w	8010d80 <_kill_r>
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d00a      	beq.n	8010d6c <_raise_r+0x4c>
 8010d56:	1c59      	adds	r1, r3, #1
 8010d58:	d103      	bne.n	8010d62 <_raise_r+0x42>
 8010d5a:	2316      	movs	r3, #22
 8010d5c:	6003      	str	r3, [r0, #0]
 8010d5e:	2001      	movs	r0, #1
 8010d60:	e7e7      	b.n	8010d32 <_raise_r+0x12>
 8010d62:	2400      	movs	r4, #0
 8010d64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d68:	4628      	mov	r0, r5
 8010d6a:	4798      	blx	r3
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	e7e0      	b.n	8010d32 <_raise_r+0x12>

08010d70 <raise>:
 8010d70:	4b02      	ldr	r3, [pc, #8]	; (8010d7c <raise+0xc>)
 8010d72:	4601      	mov	r1, r0
 8010d74:	6818      	ldr	r0, [r3, #0]
 8010d76:	f7ff bfd3 	b.w	8010d20 <_raise_r>
 8010d7a:	bf00      	nop
 8010d7c:	20000014 	.word	0x20000014

08010d80 <_kill_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d07      	ldr	r5, [pc, #28]	; (8010da0 <_kill_r+0x20>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	602b      	str	r3, [r5, #0]
 8010d8e:	f7ef ff8d 	bl	8000cac <_kill>
 8010d92:	1c43      	adds	r3, r0, #1
 8010d94:	d102      	bne.n	8010d9c <_kill_r+0x1c>
 8010d96:	682b      	ldr	r3, [r5, #0]
 8010d98:	b103      	cbz	r3, 8010d9c <_kill_r+0x1c>
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	bd38      	pop	{r3, r4, r5, pc}
 8010d9e:	bf00      	nop
 8010da0:	20005e44 	.word	0x20005e44

08010da4 <_getpid_r>:
 8010da4:	f7ef bf7a 	b.w	8000c9c <_getpid>

08010da8 <_fstat_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4d07      	ldr	r5, [pc, #28]	; (8010dc8 <_fstat_r+0x20>)
 8010dac:	2300      	movs	r3, #0
 8010dae:	4604      	mov	r4, r0
 8010db0:	4608      	mov	r0, r1
 8010db2:	4611      	mov	r1, r2
 8010db4:	602b      	str	r3, [r5, #0]
 8010db6:	f7ef ffda 	bl	8000d6e <_fstat>
 8010dba:	1c43      	adds	r3, r0, #1
 8010dbc:	d102      	bne.n	8010dc4 <_fstat_r+0x1c>
 8010dbe:	682b      	ldr	r3, [r5, #0]
 8010dc0:	b103      	cbz	r3, 8010dc4 <_fstat_r+0x1c>
 8010dc2:	6023      	str	r3, [r4, #0]
 8010dc4:	bd38      	pop	{r3, r4, r5, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20005e44 	.word	0x20005e44

08010dcc <_isatty_r>:
 8010dcc:	b538      	push	{r3, r4, r5, lr}
 8010dce:	4d06      	ldr	r5, [pc, #24]	; (8010de8 <_isatty_r+0x1c>)
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	602b      	str	r3, [r5, #0]
 8010dd8:	f7ef ffd9 	bl	8000d8e <_isatty>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_isatty_r+0x1a>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_isatty_r+0x1a>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	20005e44 	.word	0x20005e44

08010dec <_malloc_usable_size_r>:
 8010dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df0:	1f18      	subs	r0, r3, #4
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	bfbc      	itt	lt
 8010df6:	580b      	ldrlt	r3, [r1, r0]
 8010df8:	18c0      	addlt	r0, r0, r3
 8010dfa:	4770      	bx	lr

08010dfc <_init>:
 8010dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfe:	bf00      	nop
 8010e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e02:	bc08      	pop	{r3}
 8010e04:	469e      	mov	lr, r3
 8010e06:	4770      	bx	lr

08010e08 <_fini>:
 8010e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0a:	bf00      	nop
 8010e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e0e:	bc08      	pop	{r3}
 8010e10:	469e      	mov	lr, r3
 8010e12:	4770      	bx	lr
