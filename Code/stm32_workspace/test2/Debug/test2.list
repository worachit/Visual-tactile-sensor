
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800913c  0800913c  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009144  08009144  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009144  08009144  00019144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800914c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025e98  20000054  080091a0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20025eec  080091a0  00025eec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c58  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347b  00000000  00000000  00039cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a628  00000000  00000000  0003f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1cc  00000000  00000000  00069ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100392  00000000  00000000  000840a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  00184488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000054 	.word	0x20000054
 8000214:	00000000 	.word	0x00000000
 8000218:	08008ba4 	.word	0x08008ba4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000058 	.word	0x20000058
 8000234:	08008ba4 	.word	0x08008ba4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <OV5640_WriteReg>:
		is_dma_usart_finish = 1;
	}
}

int32_t OV5640_WriteReg(uint16_t device_address, uint16_t reg, uint8_t *data,
		uint16_t length) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af04      	add	r7, sp, #16
 8000542:	60ba      	str	r2, [r7, #8]
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	81fb      	strh	r3, [r7, #14]
 800054a:	460b      	mov	r3, r1
 800054c:	81bb      	strh	r3, [r7, #12]
 800054e:	4613      	mov	r3, r2
 8000550:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(&hi2c1, device_address, reg, 2, data, length, 1000)
 8000552:	89ba      	ldrh	r2, [r7, #12]
 8000554:	89f9      	ldrh	r1, [r7, #14]
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9302      	str	r3, [sp, #8]
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2302      	movs	r3, #2
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <OV5640_WriteReg+0x48>)
 8000568:	f005 f8f2 	bl	8005750 <HAL_I2C_Mem_Write>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <OV5640_WriteReg+0x3a>
			== HAL_OK) {
		return OV5640_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e001      	b.n	800057a <OV5640_WriteReg+0x3e>
	}
	return OV5640_ERROR;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000120 	.word	0x20000120

08000588 <OV5640_ReadReg>:
int32_t OV5640_ReadReg(uint16_t device_address, uint16_t reg, uint8_t *data,
		uint16_t length) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af04      	add	r7, sp, #16
 800058e:	60ba      	str	r2, [r7, #8]
 8000590:	461a      	mov	r2, r3
 8000592:	4603      	mov	r3, r0
 8000594:	81fb      	strh	r3, [r7, #14]
 8000596:	460b      	mov	r3, r1
 8000598:	81bb      	strh	r3, [r7, #12]
 800059a:	4613      	mov	r3, r2
 800059c:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Read(&hi2c1, device_address + 1, reg, 2, data, length, 1000)
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b299      	uxth	r1, r3
 80005a4:	89ba      	ldrh	r2, [r7, #12]
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2302      	movs	r3, #2
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <OV5640_ReadReg+0x4c>)
 80005b8:	f005 f9de 	bl	8005978 <HAL_I2C_Mem_Read>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <OV5640_ReadReg+0x3e>
			== HAL_OK) {
		return OV5640_OK;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e001      	b.n	80005ca <OV5640_ReadReg+0x42>
	}
	return OV5640_ERROR;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000120 	.word	0x20000120

080005d8 <OV5640_Powerup>:
void OV5640_Powerup() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <OV5640_Powerup+0x3c>)
 80005e4:	f005 f80a 	bl	80055fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <OV5640_Powerup+0x3c>)
 80005f0:	f005 f804 	bl	80055fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f002 fd2b 	bl	8003050 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <OV5640_Powerup+0x3c>)
 8000602:	f004 fffb 	bl	80055fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f002 fd21 	bl	8003050 <HAL_Delay>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020c00 	.word	0x40020c00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f002 fcba 	bl	8002f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8ab 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 faab 	bl	8000b80 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062a:	f000 f9cb 	bl	80009c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062e:	f000 f9f9 	bl	8000a24 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000632:	f000 f915 	bl	8000860 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000636:	f000 f947 	bl	80008c8 <MX_I2C1_Init>
  MX_DMA_Init();
 800063a:	f000 fa21 	bl	8000a80 <MX_DMA_Init>
  MX_FMC_Init();
 800063e:	f000 fa3d 	bl	8000abc <MX_FMC_Init>
  MX_SPI1_Init();
 8000642:	f000 f981 	bl	8000948 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cam_i2c.Address = 0x78;
 8000646:	4b43      	ldr	r3, [pc, #268]	; (8000754 <main+0x13c>)
 8000648:	2278      	movs	r2, #120	; 0x78
 800064a:	811a      	strh	r2, [r3, #8]
  cam_i2c.WriteReg = OV5640_WriteReg;
 800064c:	4b41      	ldr	r3, [pc, #260]	; (8000754 <main+0x13c>)
 800064e:	4a42      	ldr	r2, [pc, #264]	; (8000758 <main+0x140>)
 8000650:	60da      	str	r2, [r3, #12]
  cam_i2c.ReadReg = OV5640_ReadReg;
 8000652:	4b40      	ldr	r3, [pc, #256]	; (8000754 <main+0x13c>)
 8000654:	4a41      	ldr	r2, [pc, #260]	; (800075c <main+0x144>)
 8000656:	611a      	str	r2, [r3, #16]

  OV5640_RegisterBusIO(&p_cam, &cam_i2c);
 8000658:	493e      	ldr	r1, [pc, #248]	; (8000754 <main+0x13c>)
 800065a:	4841      	ldr	r0, [pc, #260]	; (8000760 <main+0x148>)
 800065c:	f000 fbaa 	bl	8000db4 <OV5640_RegisterBusIO>

	int32_t status = OV5640_ERROR;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	60fb      	str	r3, [r7, #12]
	uint32_t resolution;
	uint8_t RGBGain[6];
	memset(RGBGain, 0, sizeof(RGBGain));
 8000666:	463b      	mov	r3, r7
 8000668:	2206      	movs	r2, #6
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f008 fa91 	bl	8008b94 <memset>

	OV5640_Powerup();
 8000672:	f7ff ffb1 	bl	80005d8 <OV5640_Powerup>
	status = OV5640_CAMERA_Driver.Init(&p_cam, OV5640_R320x240, OV5640_RGB565);
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <main+0x14c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	4838      	ldr	r0, [pc, #224]	; (8000760 <main+0x148>)
 8000680:	4798      	blx	r3
 8000682:	60f8      	str	r0, [r7, #12]
	// verify with resolution ()
	status = OV5640_CAMERA_Driver.GetResolution(&p_cam, &resolution);
 8000684:	4b37      	ldr	r3, [pc, #220]	; (8000764 <main+0x14c>)
 8000686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000688:	f107 0208 	add.w	r2, r7, #8
 800068c:	4611      	mov	r1, r2
 800068e:	4834      	ldr	r0, [pc, #208]	; (8000760 <main+0x148>)
 8000690:	4798      	blx	r3
 8000692:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetColorEffect(&p_cam,
 8000694:	4b33      	ldr	r3, [pc, #204]	; (8000764 <main+0x14c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	2100      	movs	r1, #0
 800069a:	4831      	ldr	r0, [pc, #196]	; (8000760 <main+0x148>)
 800069c:	4798      	blx	r3
 800069e:	60f8      	str	r0, [r7, #12]
	OV5640_COLOR_EFFECT_NONE);
	status = OV5640_CAMERA_Driver.SetBrightness(&p_cam, 2);
 80006a0:	4b30      	ldr	r3, [pc, #192]	; (8000764 <main+0x14c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	2102      	movs	r1, #2
 80006a6:	482e      	ldr	r0, [pc, #184]	; (8000760 <main+0x148>)
 80006a8:	4798      	blx	r3
 80006aa:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetSaturation(&p_cam, 0);
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <main+0x14c>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	2100      	movs	r1, #0
 80006b2:	482b      	ldr	r0, [pc, #172]	; (8000760 <main+0x148>)
 80006b4:	4798      	blx	r3
 80006b6:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetContrast(&p_cam, 0);
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x14c>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	2100      	movs	r1, #0
 80006be:	4828      	ldr	r0, [pc, #160]	; (8000760 <main+0x148>)
 80006c0:	4798      	blx	r3
 80006c2:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetHueDegree(&p_cam, 0);
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x14c>)
 80006c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c8:	2100      	movs	r1, #0
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <main+0x148>)
 80006cc:	4798      	blx	r3
 80006ce:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_MANUAL_DEFAULT);
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <main+0x14c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	2110      	movs	r1, #16
 80006d6:	4822      	ldr	r0, [pc, #136]	; (8000760 <main+0x148>)
 80006d8:	4798      	blx	r3
 80006da:	60f8      	str	r0, [r7, #12]
//	status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_AUTO);
	HAL_Delay(10000);
 80006dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80006e0:	f002 fcb6 	bl	8003050 <HAL_Delay>


	/////////////////////////////////////////
	memset(image, 0, sizeof(image));
 80006e4:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80006e8:	2100      	movs	r1, #0
 80006ea:	481f      	ldr	r0, [pc, #124]	; (8000768 <main+0x150>)
 80006ec:	f008 fa52 	bl	8008b94 <memset>
	//  status = OV5640_CAMERA_Driver.GetAWBRGBGain(&p_cam, RGBGain);
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) image,
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <main+0x150>)
 80006f2:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80006f6:	2102      	movs	r1, #2
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <main+0x154>)
 80006fa:	f002 fe59 	bl	80033b0 <HAL_DCMI_Start_DMA>
			sizeof(image));
	//  status = OV5640_CAMERA_Driver.GetAWBRGBGain(&p_cam, RGBGain);
	HAL_Delay(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000702:	f002 fca5 	bl	8003050 <HAL_Delay>
	HAL_DCMI_Suspend(&hdcmi);
 8000706:	4819      	ldr	r0, [pc, #100]	; (800076c <main+0x154>)
 8000708:	f002 ff5e 	bl	80035c8 <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(&hdcmi);
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <main+0x154>)
 800070e:	f002 fefd 	bl	800350c <HAL_DCMI_Stop>
	HAL_Delay(500);
 8000712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000716:	f002 fc9b 	bl	8003050 <HAL_Delay>

	if (sizeof(image) > 65535) {
		HAL_UART_Transmit(&huart3, image, 65535, 10000);
 800071a:	f242 7310 	movw	r3, #10000	; 0x2710
 800071e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000722:	4911      	ldr	r1, [pc, #68]	; (8000768 <main+0x150>)
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <main+0x158>)
 8000726:	f007 f964 	bl	80079f2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, image + 65535, 65535, 10000);
 800072a:	4912      	ldr	r1, [pc, #72]	; (8000774 <main+0x15c>)
 800072c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000734:	480e      	ldr	r0, [pc, #56]	; (8000770 <main+0x158>)
 8000736:	f007 f95c 	bl	80079f2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, image + 65535*2, sizeof(image) - 65535*2, 10000);
 800073a:	490f      	ldr	r1, [pc, #60]	; (8000778 <main+0x160>)
 800073c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000740:	f645 0202 	movw	r2, #22530	; 0x5802
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <main+0x158>)
 8000746:	f007 f954 	bl	80079f2 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, image, sizeof(image), 10000);
	}
	HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074e:	f002 fc7f 	bl	8003050 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000752:	e7fe      	b.n	8000752 <main+0x13a>
 8000754:	200006cc 	.word	0x200006cc
 8000758:	0800053d 	.word	0x0800053d
 800075c:	08000589 	.word	0x08000589
 8000760:	200006a4 	.word	0x200006a4
 8000764:	20000000 	.word	0x20000000
 8000768:	200006e4 	.word	0x200006e4
 800076c:	20000070 	.word	0x20000070
 8000770:	200001d0 	.word	0x200001d0
 8000774:	200106e3 	.word	0x200106e3
 8000778:	200206e2 	.word	0x200206e2

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2234      	movs	r2, #52	; 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f008 fa02 	bl	8008b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a0:	f005 fe8a 	bl	80064b8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <SystemClock_Config+0xdc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <SystemClock_Config+0xdc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SystemClock_Config+0xdc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <SystemClock_Config+0xe0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c4:	4a25      	ldr	r2, [pc, #148]	; (800085c <SystemClock_Config+0xe0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemClock_Config+0xe0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007f0:	2360      	movs	r3, #96	; 0x60
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4618      	mov	r0, r3
 8000806:	f005 feb7 	bl	8006578 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 faca 	bl	8000da8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000814:	f005 fe60 	bl	80064d8 <HAL_PWREx_EnableOverDrive>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800081e:	f000 fac3 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2103      	movs	r1, #3
 800083e:	4618      	mov	r0, r3
 8000840:	f006 f948 	bl	8006ad4 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800084a:	f000 faad 	bl	8000da8 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_DCMI_Init+0x64>)
 8000868:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_DCMI_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000872:	2220      	movs	r2, #32
 8000874:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_DCMI_Init+0x60>)
 800087e:	2240      	movs	r2, #64	; 0x40
 8000880:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_DCMI_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_DCMI_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_DCMI_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_DCMI_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_DCMI_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_DCMI_Init+0x60>)
 80008ae:	f002 fd05 	bl	80032bc <HAL_DCMI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fa76 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000070 	.word	0x20000070
 80008c4:	50050000 	.word	0x50050000

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	f004 fe94 	bl	8005630 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fa4b 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C1_Init+0x74>)
 8000916:	f005 fbef 	bl	80060f8 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fa42 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000928:	f005 fc31 	bl	800618e <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa39 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000120 	.word	0x20000120
 8000940:	40005400 	.word	0x40005400
 8000944:	20303e5d 	.word	0x20303e5d

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_SPI1_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_SPI1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_SPI1_Init+0x74>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x74>)
 8000962:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x74>)
 8000976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x74>)
 8000996:	2207      	movs	r2, #7
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI1_Init+0x74>)
 80009a8:	f006 fee2 	bl	8007770 <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 f9f9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000016c 	.word	0x2000016c
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART3_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a08:	f006 ffa5 	bl	8007956 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f9c9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001d0 	.word	0x200001d0
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2206      	movs	r2, #6
 8000a34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	f005 fbdd 	bl	8006226 <HAL_PCD_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f999 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000254 	.word	0x20000254

08000a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x38>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2039      	movs	r0, #57	; 0x39
 8000aa4:	f002 fbd3 	bl	800324e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000aa8:	2039      	movs	r0, #57	; 0x39
 8000aaa:	f002 fbec 	bl	8003286 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000ad6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ada:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <MX_FMC_Init+0xc0>)
 8000ae0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b40:	230f      	movs	r3, #15
 8000b42:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000b44:	23ff      	movs	r3, #255	; 0xff
 8000b46:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b50:	2311      	movs	r3, #17
 8000b52:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_FMC_Init+0xbc>)
 8000b60:	f006 feb1 	bl	80078c6 <HAL_SRAM_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000b6a:	f000 f91d 	bl	8000da8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000658 	.word	0x20000658
 8000b7c:	a0000104 	.word	0xa0000104

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a7d      	ldr	r2, [pc, #500]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b7b      	ldr	r3, [pc, #492]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a77      	ldr	r2, [pc, #476]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b75      	ldr	r3, [pc, #468]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	4b72      	ldr	r3, [pc, #456]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a71      	ldr	r2, [pc, #452]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	4b6c      	ldr	r3, [pc, #432]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a6b      	ldr	r2, [pc, #428]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b66      	ldr	r3, [pc, #408]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a65      	ldr	r2, [pc, #404]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b63      	ldr	r3, [pc, #396]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b60      	ldr	r3, [pc, #384]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a5f      	ldr	r2, [pc, #380]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a59      	ldr	r2, [pc, #356]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a53      	ldr	r2, [pc, #332]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <MX_GPIO_Init+0x210>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c5c:	484d      	ldr	r0, [pc, #308]	; (8000d94 <MX_GPIO_Init+0x214>)
 8000c5e:	f004 fccd 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAMERA_PWDN_Pin|CAMERA_RST_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c68:	484b      	ldr	r0, [pc, #300]	; (8000d98 <MX_GPIO_Init+0x218>)
 8000c6a:	f004 fcc7 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	484a      	ldr	r0, [pc, #296]	; (8000d9c <MX_GPIO_Init+0x21c>)
 8000c74:	f004 fcc2 	bl	80055fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4844      	ldr	r0, [pc, #272]	; (8000da0 <MX_GPIO_Init+0x220>)
 8000c90:	f004 fb08 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c94:	2332      	movs	r3, #50	; 0x32
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	483c      	ldr	r0, [pc, #240]	; (8000da0 <MX_GPIO_Init+0x220>)
 8000cb0:	f004 faf8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb4:	2386      	movs	r3, #134	; 0x86
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4835      	ldr	r0, [pc, #212]	; (8000da4 <MX_GPIO_Init+0x224>)
 8000cd0:	f004 fae8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cd4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4829      	ldr	r0, [pc, #164]	; (8000d94 <MX_GPIO_Init+0x214>)
 8000cee:	f004 fad9 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d04:	230b      	movs	r3, #11
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4821      	ldr	r0, [pc, #132]	; (8000d94 <MX_GPIO_Init+0x214>)
 8000d10:	f004 fac8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_PWDN_Pin CAMERA_RST_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin|CAMERA_RST_Pin;
 8000d14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_GPIO_Init+0x218>)
 8000d2e:	f004 fab9 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <MX_GPIO_Init+0x21c>)
 8000d4a:	f004 faab 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <MX_GPIO_Init+0x21c>)
 8000d62:	f004 fa9f 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_GPIO_Init+0x21c>)
 8000d84:	f004 fa8e 	bl	80052a4 <HAL_GPIO_Init>

}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	; 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020000 	.word	0x40020000

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	e030      	b.n	8000e2e <OV5640_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	891a      	ldrh	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <OV5640_RegisterBusIO+0x84>)
 8000e00:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <OV5640_RegisterBusIO+0x88>)
 8000e06:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	621a      	str	r2, [r3, #32]

	pObj->IsInitialized = 0U;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <OV5640_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4798      	blx	r3
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	e002      	b.n	8000e2e <OV5640_RegisterBusIO+0x7a>
    }
    else
    {
      ret = OV5640_ERROR;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	080027af 	.word	0x080027af
 8000e3c:	080027e1 	.word	0x080027e1

08000e40 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d165      	bne.n	8000f26 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d80e      	bhi.n	8000e7e <OV5640_Init+0x3e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00f      	beq.n	8000e86 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d00c      	beq.n	8000e86 <OV5640_Init+0x46>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d009      	beq.n	8000e86 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	d006      	beq.n	8000e86 <OV5640_Init+0x46>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d003      	beq.n	8000e86 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	e04f      	b.n	8000f26 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e01f      	b.n	8000ecc <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e92:	d018      	beq.n	8000ec6 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8000e94:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <OV5640_Init+0xf0>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	885b      	ldrh	r3, [r3, #2]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <OV5640_Init+0xf0>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000eb0:	f107 0217 	add.w	r2, r7, #23
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f001 fcc3 	bl	8002840 <ov5640_write_reg>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2bfd      	cmp	r3, #253	; 0xfd
 8000ed0:	d9dc      	bls.n	8000e8c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d126      	bne.n	8000f26 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 f9e0 	bl	80012a0 <OV5640_SetResolution>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	e01b      	b.n	8000f26 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f000 f833 	bl	8000f5c <OV5640_SetPixelFormat>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	e010      	b.n	8000f26 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8000f04:	2300      	movs	r3, #0
 8000f06:	2201      	movs	r2, #1
 8000f08:	2101      	movs	r1, #1
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 fb64 	bl	80015d8 <OV5640_SetPolarities>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	e003      	b.n	8000f26 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8000f26:	69bb      	ldr	r3, [r7, #24]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08008c04 	.word	0x08008c04

08000f34 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d103      	bne.n	8000f4e <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00f      	beq.n	8000f90 <OV5640_SetPixelFormat+0x34>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d00c      	beq.n	8000f90 <OV5640_SetPixelFormat+0x34>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d009      	beq.n	8000f90 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b07      	cmp	r3, #7
 8000f80:	d006      	beq.n	8000f90 <OV5640_SetPixelFormat+0x34>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d003      	beq.n	8000f90 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e16a      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	f200 80c3 	bhi.w	8001120 <OV5640_SetPixelFormat+0x1c4>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <OV5640_SetPixelFormat+0x44>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08001019 	.word	0x08001019
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08001121 	.word	0x08001121
 8000fac:	08001121 	.word	0x08001121
 8000fb0:	08001121 	.word	0x08001121
 8000fb4:	08001121 	.word	0x08001121
 8000fb8:	08001071 	.word	0x08001071
 8000fbc:	080010c9 	.word	0x080010c9
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e024      	b.n	8001010 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d01d      	beq.n	800100a <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8000fce:	4aa8      	ldr	r2, [pc, #672]	; (8001270 <OV5640_SetPixelFormat+0x314>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 0018 	add.w	r0, r3, #24
 8000fe2:	4aa3      	ldr	r2, [pc, #652]	; (8001270 <OV5640_SetPixelFormat+0x314>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000fea:	f107 020f 	add.w	r2, r7, #15
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f001 fc26 	bl	8002840 <ov5640_write_reg>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e003      	b.n	800100a <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f001 fbc5 	bl	8002794 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d9d7      	bls.n	8000fc6 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001016:	e0af      	b.n	8001178 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e024      	b.n	8001068 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d01d      	beq.n	8001062 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001026:	4a93      	ldr	r2, [pc, #588]	; (8001274 <OV5640_SetPixelFormat+0x318>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	885b      	ldrh	r3, [r3, #2]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f103 0018 	add.w	r0, r3, #24
 800103a:	4a8e      	ldr	r2, [pc, #568]	; (8001274 <OV5640_SetPixelFormat+0x318>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001042:	f107 020f 	add.w	r2, r7, #15
 8001046:	2301      	movs	r3, #1
 8001048:	f001 fbfa 	bl	8002840 <ov5640_write_reg>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e003      	b.n	8001062 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800105a:	2101      	movs	r1, #1
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f001 fb99 	bl	8002794 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	3301      	adds	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d9d7      	bls.n	800101e <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800106e:	e083      	b.n	8001178 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e024      	b.n	80010c0 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d01d      	beq.n	80010ba <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800107e:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <OV5640_SetPixelFormat+0x31c>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	885b      	ldrh	r3, [r3, #2]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f103 0018 	add.w	r0, r3, #24
 8001092:	4a79      	ldr	r2, [pc, #484]	; (8001278 <OV5640_SetPixelFormat+0x31c>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800109a:	f107 020f 	add.w	r2, r7, #15
 800109e:	2301      	movs	r3, #1
 80010a0:	f001 fbce 	bl	8002840 <ov5640_write_reg>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e003      	b.n	80010ba <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f001 fb6d 	bl	8002794 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3301      	adds	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d9d7      	bls.n	8001076 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80010c6:	e057      	b.n	8001178 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	e024      	b.n	8001118 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d01d      	beq.n	8001112 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80010d6:	4a69      	ldr	r2, [pc, #420]	; (800127c <OV5640_SetPixelFormat+0x320>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	885b      	ldrh	r3, [r3, #2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0018 	add.w	r0, r3, #24
 80010ea:	4a64      	ldr	r2, [pc, #400]	; (800127c <OV5640_SetPixelFormat+0x320>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010f2:	f107 020f 	add.w	r2, r7, #15
 80010f6:	2301      	movs	r3, #1
 80010f8:	f001 fba2 	bl	8002840 <ov5640_write_reg>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e003      	b.n	8001112 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800110a:	2101      	movs	r1, #1
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 fb41 	bl	8002794 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	3301      	adds	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d9d7      	bls.n	80010ce <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800111e:	e02b      	b.n	8001178 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e024      	b.n	8001170 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d01d      	beq.n	800116a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800112e:	4a54      	ldr	r2, [pc, #336]	; (8001280 <OV5640_SetPixelFormat+0x324>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0018 	add.w	r0, r3, #24
 8001142:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <OV5640_SetPixelFormat+0x324>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800114a:	f107 020f 	add.w	r2, r7, #15
 800114e:	2301      	movs	r3, #1
 8001150:	f001 fb76 	bl	8002840 <ov5640_write_reg>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e003      	b.n	800116a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 fb15 	bl	8002794 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3301      	adds	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d9d7      	bls.n	8001126 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001176:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b08      	cmp	r3, #8
 800117c:	d173      	bne.n	8001266 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f103 0018 	add.w	r0, r3, #24
 8001184:	f107 020f 	add.w	r2, r7, #15
 8001188:	2301      	movs	r3, #1
 800118a:	f643 0121 	movw	r1, #14369	; 0x3821
 800118e:	f001 fb40 	bl	8002812 <ov5640_read_reg>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e062      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f103 0018 	add.w	r0, r3, #24
 80011b0:	f107 020f 	add.w	r2, r7, #15
 80011b4:	2301      	movs	r3, #1
 80011b6:	f643 0121 	movw	r1, #14369	; 0x3821
 80011ba:	f001 fb41 	bl	8002840 <ov5640_write_reg>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e04c      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 0018 	add.w	r0, r3, #24
 80011d2:	f107 020f 	add.w	r2, r7, #15
 80011d6:	2301      	movs	r3, #1
 80011d8:	f243 0102 	movw	r1, #12290	; 0x3002
 80011dc:	f001 fb19 	bl	8002812 <ov5640_read_reg>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e03b      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	f023 031c 	bic.w	r3, r3, #28
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 0018 	add.w	r0, r3, #24
 80011fe:	f107 020f 	add.w	r2, r7, #15
 8001202:	2301      	movs	r3, #1
 8001204:	f243 0102 	movw	r1, #12290	; 0x3002
 8001208:	f001 fb1a 	bl	8002840 <ov5640_write_reg>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e025      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 0018 	add.w	r0, r3, #24
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	2301      	movs	r3, #1
 8001226:	f243 0106 	movw	r1, #12294	; 0x3006
 800122a:	f001 faf2 	bl	8002812 <ov5640_read_reg>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e014      	b.n	8001266 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001242:	b2db      	uxtb	r3, r3
 8001244:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f103 0018 	add.w	r0, r3, #24
 800124c:	f107 020f 	add.w	r2, r7, #15
 8001250:	2301      	movs	r3, #1
 8001252:	f243 0106 	movw	r1, #12294	; 0x3006
 8001256:	f001 faf3 	bl	8002840 <ov5640_write_reg>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001266:	697b      	ldr	r3, [r7, #20]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08008ffc 	.word	0x08008ffc
 8001274:	08009004 	.word	0x08009004
 8001278:	0800900c 	.word	0x0800900c
 800127c:	08009014 	.word	0x08009014
 8001280:	0800901c 	.word	0x0800901c

08001284 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d903      	bls.n	80012bc <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e0d8      	b.n	800146e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	f200 80d1 	bhi.w	8001466 <OV5640_SetResolution+0x1c6>
 80012c4:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <OV5640_SetResolution+0x2c>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012e1 	.word	0x080012e1
 80012d0:	0800132f 	.word	0x0800132f
 80012d4:	0800137d 	.word	0x0800137d
 80012d8:	080013cb 	.word	0x080013cb
 80012dc:	08001419 	.word	0x08001419
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e01f      	b.n	8001326 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d018      	beq.n	8001320 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80012ee:	4a62      	ldr	r2, [pc, #392]	; (8001478 <OV5640_SetResolution+0x1d8>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	885b      	ldrh	r3, [r3, #2]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f103 0018 	add.w	r0, r3, #24
 8001302:	4a5d      	ldr	r2, [pc, #372]	; (8001478 <OV5640_SetResolution+0x1d8>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800130a:	f107 020f 	add.w	r2, r7, #15
 800130e:	2301      	movs	r3, #1
 8001310:	f001 fa96 	bl	8002840 <ov5640_write_reg>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	3301      	adds	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d9dc      	bls.n	80012e6 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800132c:	e09f      	b.n	800146e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	e01f      	b.n	8001374 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133a:	d018      	beq.n	800136e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <OV5640_SetResolution+0x1dc>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	885b      	ldrh	r3, [r3, #2]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 0018 	add.w	r0, r3, #24
 8001350:	4a4a      	ldr	r2, [pc, #296]	; (800147c <OV5640_SetResolution+0x1dc>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001358:	f107 020f 	add.w	r2, r7, #15
 800135c:	2301      	movs	r3, #1
 800135e:	f001 fa6f 	bl	8002840 <ov5640_write_reg>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	3301      	adds	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d9dc      	bls.n	8001334 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800137a:	e078      	b.n	800146e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	e01f      	b.n	80013c2 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d018      	beq.n	80013bc <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800138a:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <OV5640_SetResolution+0x1e0>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	885b      	ldrh	r3, [r3, #2]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 0018 	add.w	r0, r3, #24
 800139e:	4a38      	ldr	r2, [pc, #224]	; (8001480 <OV5640_SetResolution+0x1e0>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013a6:	f107 020f 	add.w	r2, r7, #15
 80013aa:	2301      	movs	r3, #1
 80013ac:	f001 fa48 	bl	8002840 <ov5640_write_reg>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	3301      	adds	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d9dc      	bls.n	8001382 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80013c8:	e051      	b.n	800146e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e01f      	b.n	8001410 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d018      	beq.n	800140a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80013d8:	4a2a      	ldr	r2, [pc, #168]	; (8001484 <OV5640_SetResolution+0x1e4>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	885b      	ldrh	r3, [r3, #2]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f103 0018 	add.w	r0, r3, #24
 80013ec:	4a25      	ldr	r2, [pc, #148]	; (8001484 <OV5640_SetResolution+0x1e4>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013f4:	f107 020f 	add.w	r2, r7, #15
 80013f8:	2301      	movs	r3, #1
 80013fa:	f001 fa21 	bl	8002840 <ov5640_write_reg>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	3301      	adds	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d9dc      	bls.n	80013d0 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001416:	e02a      	b.n	800146e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e01f      	b.n	800145e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d018      	beq.n	8001458 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <OV5640_SetResolution+0x1e8>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	885b      	ldrh	r3, [r3, #2]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f103 0018 	add.w	r0, r3, #24
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <OV5640_SetResolution+0x1e8>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001442:	f107 020f 	add.w	r2, r7, #15
 8001446:	2301      	movs	r3, #1
 8001448:	f001 f9fa 	bl	8002840 <ov5640_write_reg>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	3301      	adds	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d9dc      	bls.n	800141e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001464:	e003      	b.n	800146e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
 800146a:	617b      	str	r3, [r7, #20]
        break;
 800146c:	bf00      	nop
    }
  }

  return ret;
 800146e:	697b      	ldr	r3, [r7, #20]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08009024 	.word	0x08009024
 800147c:	08009034 	.word	0x08009034
 8001480:	08009044 	.word	0x08009044
 8001484:	08009054 	.word	0x08009054
 8001488:	08009064 	.word	0x08009064

0800148c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f103 0018 	add.w	r0, r3, #24
 800149c:	f107 020f 	add.w	r2, r7, #15
 80014a0:	2301      	movs	r3, #1
 80014a2:	f643 0108 	movw	r1, #14344	; 0x3808
 80014a6:	f001 f9b4 	bl	8002812 <ov5640_read_reg>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e08a      	b.n	80015ce <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f103 0018 	add.w	r0, r3, #24
 80014c6:	f107 020f 	add.w	r2, r7, #15
 80014ca:	2301      	movs	r3, #1
 80014cc:	f643 0109 	movw	r1, #14345	; 0x3809
 80014d0:	f001 f99f 	bl	8002812 <ov5640_read_reg>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e075      	b.n	80015ce <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	8a7b      	ldrh	r3, [r7, #18]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f103 0018 	add.w	r0, r3, #24
 80014f2:	f107 020f 	add.w	r2, r7, #15
 80014f6:	2301      	movs	r3, #1
 80014f8:	f643 010a 	movw	r1, #14346	; 0x380a
 80014fc:	f001 f989 	bl	8002812 <ov5640_read_reg>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e05f      	b.n	80015ce <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	b29b      	uxth	r3, r3
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f103 0018 	add.w	r0, r3, #24
 800151c:	f107 020f 	add.w	r2, r7, #15
 8001520:	2301      	movs	r3, #1
 8001522:	f643 010b 	movw	r1, #14347	; 0x380b
 8001526:	f001 f974 	bl	8002812 <ov5640_read_reg>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	e04a      	b.n	80015ce <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	b29a      	uxth	r2, r3
 800153c:	8a3b      	ldrh	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001542:	8a7b      	ldrh	r3, [r7, #18]
 8001544:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001548:	d109      	bne.n	800155e <OV5640_GetResolution+0xd2>
 800154a:	8a3b      	ldrh	r3, [r7, #16]
 800154c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001550:	d105      	bne.n	800155e <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2204      	movs	r2, #4
 8001556:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e037      	b.n	80015ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800155e:	8a7b      	ldrh	r3, [r7, #18]
 8001560:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001564:	d109      	bne.n	800157a <OV5640_GetResolution+0xee>
 8001566:	8a3b      	ldrh	r3, [r7, #16]
 8001568:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800156c:	d105      	bne.n	800157a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2203      	movs	r2, #3
 8001572:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e029      	b.n	80015ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800157a:	8a7b      	ldrh	r3, [r7, #18]
 800157c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001580:	d109      	bne.n	8001596 <OV5640_GetResolution+0x10a>
 8001582:	8a3b      	ldrh	r3, [r7, #16]
 8001584:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001588:	d105      	bne.n	8001596 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e01b      	b.n	80015ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001596:	8a7b      	ldrh	r3, [r7, #18]
 8001598:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800159c:	d108      	bne.n	80015b0 <OV5640_GetResolution+0x124>
 800159e:	8a3b      	ldrh	r3, [r7, #16]
 80015a0:	2bf0      	cmp	r3, #240	; 0xf0
 80015a2:	d105      	bne.n	80015b0 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e00e      	b.n	80015ce <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80015b0:	8a7b      	ldrh	r3, [r7, #18]
 80015b2:	2ba0      	cmp	r3, #160	; 0xa0
 80015b4:	d108      	bne.n	80015c8 <OV5640_GetResolution+0x13c>
 80015b6:	8a3b      	ldrh	r3, [r7, #16]
 80015b8:	2b78      	cmp	r3, #120	; 0x78
 80015ba:	d105      	bne.n	80015c8 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e002      	b.n	80015ce <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80015ce:	697b      	ldr	r3, [r7, #20]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d011      	beq.n	8001614 <OV5640_SetPolarities+0x3c>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <OV5640_SetPolarities+0x24>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10b      	bne.n	8001614 <OV5640_SetPolarities+0x3c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <OV5640_SetPolarities+0x3c>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d006      	beq.n	800161c <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e01e      	b.n	800165a <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f103 0018 	add.w	r0, r3, #24
 8001640:	f107 0213 	add.w	r2, r7, #19
 8001644:	2301      	movs	r3, #1
 8001646:	f244 7140 	movw	r1, #18240	; 0x4740
 800164a:	f001 f8f9 	bl	8002840 <ov5640_write_reg>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800165a:	697b      	ldr	r3, [r7, #20]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f103 0018 	add.w	r0, r3, #24
 800167e:	f107 020b 	add.w	r2, r7, #11
 8001682:	2301      	movs	r3, #1
 8001684:	f243 0108 	movw	r1, #12296	; 0x3008
 8001688:	f001 f8da 	bl	8002840 <ov5640_write_reg>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e032      	b.n	8001700 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800169a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f001 f878 	bl	8002794 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f103 0018 	add.w	r0, r3, #24
 80016aa:	f107 020b 	add.w	r2, r7, #11
 80016ae:	2301      	movs	r3, #1
 80016b0:	f243 010a 	movw	r1, #12298	; 0x300a
 80016b4:	f001 f8ad 	bl	8002812 <ov5640_read_reg>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e01c      	b.n	8001700 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0018 	add.w	r0, r3, #24
 80016d4:	f107 020b 	add.w	r2, r7, #11
 80016d8:	2301      	movs	r3, #1
 80016da:	f243 010b 	movw	r1, #12299	; 0x300b
 80016de:	f001 f898 	bl	8002812 <ov5640_read_reg>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e007      	b.n	8001700 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	7afa      	ldrb	r2, [r7, #11]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001700:	68fb      	ldr	r3, [r7, #12]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e01f      	b.n	8001762 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2201      	movs	r2, #1
 8001726:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x06},
    {OV5640_AWB_B_GAIN_LSB, 0x93},
  };

  tmp = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 0018 	add.w	r0, r3, #24
 8001784:	f107 020f 	add.w	r2, r7, #15
 8001788:	2301      	movs	r3, #1
 800178a:	f243 4106 	movw	r1, #13318	; 0x3406
 800178e:	f001 f857 	bl	8002840 <ov5640_write_reg>
 8001792:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800179a:	2346      	movs	r3, #70	; 0x46
 800179c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f103 0018 	add.w	r0, r3, #24
 80017a4:	f107 020f 	add.w	r2, r7, #15
 80017a8:	2301      	movs	r3, #1
 80017aa:	f245 1190 	movw	r1, #20880	; 0x5190
 80017ae:	f001 f847 	bl	8002840 <ov5640_write_reg>
 80017b2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80017ba:	23f8      	movs	r3, #248	; 0xf8
 80017bc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f103 0018 	add.w	r0, r3, #24
 80017c4:	f107 020f 	add.w	r2, r7, #15
 80017c8:	2301      	movs	r3, #1
 80017ca:	f245 1191 	movw	r1, #20881	; 0x5191
 80017ce:	f001 f837 	bl	8002840 <ov5640_write_reg>
 80017d2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80017da:	2304      	movs	r3, #4
 80017dc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f103 0018 	add.w	r0, r3, #24
 80017e4:	f107 020f 	add.w	r2, r7, #15
 80017e8:	2301      	movs	r3, #1
 80017ea:	f245 1192 	movw	r1, #20882	; 0x5192
 80017ee:	f001 f827 	bl	8002840 <ov5640_write_reg>
 80017f2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 8112 	bne.w	8001a20 <OV5640_SetLightMode+0x2b0>
  {
    switch (LightMode)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	2b0f      	cmp	r3, #15
 8001802:	f200 80e6 	bhi.w	80019d2 <OV5640_SetLightMode+0x262>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <OV5640_SetLightMode+0x9c>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	0800184d 	.word	0x0800184d
 8001810:	0800189b 	.word	0x0800189b
 8001814:	080019d3 	.word	0x080019d3
 8001818:	08001937 	.word	0x08001937
 800181c:	080019d3 	.word	0x080019d3
 8001820:	080019d3 	.word	0x080019d3
 8001824:	080019d3 	.word	0x080019d3
 8001828:	080018e9 	.word	0x080018e9
 800182c:	080019d3 	.word	0x080019d3
 8001830:	080019d3 	.word	0x080019d3
 8001834:	080019d3 	.word	0x080019d3
 8001838:	080019d3 	.word	0x080019d3
 800183c:	080019d3 	.word	0x080019d3
 8001840:	080019d3 	.word	0x080019d3
 8001844:	080019d3 	.word	0x080019d3
 8001848:	08001985 	.word	0x08001985
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e01f      	b.n	8001892 <OV5640_SetLightMode+0x122>
        {
          if (ret != OV5640_ERROR)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d018      	beq.n	800188c <OV5640_SetLightMode+0x11c>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800185a:	4a74      	ldr	r2, [pc, #464]	; (8001a2c <OV5640_SetLightMode+0x2bc>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	885b      	ldrh	r3, [r3, #2]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 0018 	add.w	r0, r3, #24
 800186e:	4a6f      	ldr	r2, [pc, #444]	; (8001a2c <OV5640_SetLightMode+0x2bc>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001876:	f107 020f 	add.w	r2, r7, #15
 800187a:	2301      	movs	r3, #1
 800187c:	f000 ffe0 	bl	8002840 <ov5640_write_reg>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <OV5640_SetLightMode+0x11c>
            {
              ret = OV5640_ERROR;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b06      	cmp	r3, #6
 8001896:	d9dc      	bls.n	8001852 <OV5640_SetLightMode+0xe2>
            }
          }
        }
        break;
 8001898:	e0c3      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e01f      	b.n	80018e0 <OV5640_SetLightMode+0x170>
        {
          if (ret != OV5640_ERROR)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d018      	beq.n	80018da <OV5640_SetLightMode+0x16a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80018a8:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <OV5640_SetLightMode+0x2c0>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f103 0018 	add.w	r0, r3, #24
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <OV5640_SetLightMode+0x2c0>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018c4:	f107 020f 	add.w	r2, r7, #15
 80018c8:	2301      	movs	r3, #1
 80018ca:	f000 ffb9 	bl	8002840 <ov5640_write_reg>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <OV5640_SetLightMode+0x16a>
            {
              ret = OV5640_ERROR;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3301      	adds	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d9dc      	bls.n	80018a0 <OV5640_SetLightMode+0x130>
            }
          }
        }
        break;
 80018e6:	e09c      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e01f      	b.n	800192e <OV5640_SetLightMode+0x1be>
        {
          if (ret != OV5640_ERROR)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d018      	beq.n	8001928 <OV5640_SetLightMode+0x1b8>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80018f6:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <OV5640_SetLightMode+0x2c4>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f103 0018 	add.w	r0, r3, #24
 800190a:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <OV5640_SetLightMode+0x2c4>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001912:	f107 020f 	add.w	r2, r7, #15
 8001916:	2301      	movs	r3, #1
 8001918:	f000 ff92 	bl	8002840 <ov5640_write_reg>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <OV5640_SetLightMode+0x1b8>
            {
              ret = OV5640_ERROR;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3301      	adds	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b06      	cmp	r3, #6
 8001932:	d9dc      	bls.n	80018ee <OV5640_SetLightMode+0x17e>
            }
          }
        }
        break;
 8001934:	e075      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	e01f      	b.n	800197c <OV5640_SetLightMode+0x20c>
        {
          if (ret != OV5640_ERROR)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001942:	d018      	beq.n	8001976 <OV5640_SetLightMode+0x206>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001944:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <OV5640_SetLightMode+0x2c8>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	885b      	ldrh	r3, [r3, #2]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f103 0018 	add.w	r0, r3, #24
 8001958:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <OV5640_SetLightMode+0x2c8>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001960:	f107 020f 	add.w	r2, r7, #15
 8001964:	2301      	movs	r3, #1
 8001966:	f000 ff6b 	bl	8002840 <ov5640_write_reg>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <OV5640_SetLightMode+0x206>
            {
              ret = OV5640_ERROR;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b06      	cmp	r3, #6
 8001980:	d9dc      	bls.n	800193c <OV5640_SetLightMode+0x1cc>
            }
          }
        }
        break;
 8001982:	e04e      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_MANUAL_DEFAULT:
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e01f      	b.n	80019ca <OV5640_SetLightMode+0x25a>
        {
          if (ret != OV5640_ERROR)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d018      	beq.n	80019c4 <OV5640_SetLightMode+0x254>
          {
            tmp = (uint8_t)OV5640_LightModeManualDefault[index][1];
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <OV5640_SetLightMode+0x2cc>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	885b      	ldrh	r3, [r3, #2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeManualDefault[index][0], &tmp, 1) != OV5640_OK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 0018 	add.w	r0, r3, #24
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <OV5640_SetLightMode+0x2cc>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019ae:	f107 020f 	add.w	r2, r7, #15
 80019b2:	2301      	movs	r3, #1
 80019b4:	f000 ff44 	bl	8002840 <ov5640_write_reg>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <OV5640_SetLightMode+0x254>
            {
              ret = OV5640_ERROR;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3301      	adds	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	d9dc      	bls.n	800198a <OV5640_SetLightMode+0x21a>
            }
          }
        }
        break;
 80019d0:	e027      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e01f      	b.n	8001a18 <OV5640_SetLightMode+0x2a8>
        {
          if (ret != OV5640_ERROR)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d018      	beq.n	8001a12 <OV5640_SetLightMode+0x2a2>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <OV5640_SetLightMode+0x2d0>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	885b      	ldrh	r3, [r3, #2]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 0018 	add.w	r0, r3, #24
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <OV5640_SetLightMode+0x2d0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019fc:	f107 020f 	add.w	r2, r7, #15
 8001a00:	2301      	movs	r3, #1
 8001a02:	f000 ff1d 	bl	8002840 <ov5640_write_reg>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <OV5640_SetLightMode+0x2a2>
            {
              ret = OV5640_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d9dc      	bls.n	80019d8 <OV5640_SetLightMode+0x268>
            }
          }
        }
        break;
 8001a1e:	e000      	b.n	8001a22 <OV5640_SetLightMode+0x2b2>
    }
  }
 8001a20:	bf00      	nop
  return ret;
 8001a22:	697b      	ldr	r3, [r7, #20]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08009074 	.word	0x08009074
 8001a30:	08009090 	.word	0x08009090
 8001a34:	080090ac 	.word	0x080090ac
 8001a38:	080090c8 	.word	0x080090c8
 8001a3c:	080090e4 	.word	0x080090e4
 8001a40:	08009100 	.word	0x08009100

08001a44 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	2b1f      	cmp	r3, #31
 8001a54:	f200 81c0 	bhi.w	8001dd8 <OV5640_SetColorEffect+0x394>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <OV5640_SetColorEffect+0x1c>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001ae1 	.word	0x08001ae1
 8001a64:	08001b6b 	.word	0x08001b6b
 8001a68:	08001dd9 	.word	0x08001dd9
 8001a6c:	08001bf5 	.word	0x08001bf5
 8001a70:	08001dd9 	.word	0x08001dd9
 8001a74:	08001dd9 	.word	0x08001dd9
 8001a78:	08001dd9 	.word	0x08001dd9
 8001a7c:	08001c7f 	.word	0x08001c7f
 8001a80:	08001dd9 	.word	0x08001dd9
 8001a84:	08001dd9 	.word	0x08001dd9
 8001a88:	08001dd9 	.word	0x08001dd9
 8001a8c:	08001dd9 	.word	0x08001dd9
 8001a90:	08001dd9 	.word	0x08001dd9
 8001a94:	08001dd9 	.word	0x08001dd9
 8001a98:	08001dd9 	.word	0x08001dd9
 8001a9c:	08001d09 	.word	0x08001d09
 8001aa0:	08001dd9 	.word	0x08001dd9
 8001aa4:	08001dd9 	.word	0x08001dd9
 8001aa8:	08001dd9 	.word	0x08001dd9
 8001aac:	08001dd9 	.word	0x08001dd9
 8001ab0:	08001dd9 	.word	0x08001dd9
 8001ab4:	08001dd9 	.word	0x08001dd9
 8001ab8:	08001dd9 	.word	0x08001dd9
 8001abc:	08001dd9 	.word	0x08001dd9
 8001ac0:	08001dd9 	.word	0x08001dd9
 8001ac4:	08001dd9 	.word	0x08001dd9
 8001ac8:	08001dd9 	.word	0x08001dd9
 8001acc:	08001dd9 	.word	0x08001dd9
 8001ad0:	08001dd9 	.word	0x08001dd9
 8001ad4:	08001dd9 	.word	0x08001dd9
 8001ad8:	08001dd9 	.word	0x08001dd9
 8001adc:	08001d91 	.word	0x08001d91
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8001ae0:	23ff      	movs	r3, #255	; 0xff
 8001ae2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0018 	add.w	r0, r3, #24
 8001aea:	f107 020b 	add.w	r2, r7, #11
 8001aee:	2301      	movs	r3, #1
 8001af0:	f245 0101 	movw	r1, #20481	; 0x5001
 8001af4:	f000 fea4 	bl	8002840 <ov5640_write_reg>
 8001af8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10c      	bne.n	8001b1a <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8001b00:	2318      	movs	r3, #24
 8001b02:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0018 	add.w	r0, r3, #24
 8001b0a:	f107 020b 	add.w	r2, r7, #11
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001b14:	f000 fe94 	bl	8002840 <ov5640_write_reg>
 8001b18:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10c      	bne.n	8001b3a <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8001b20:	23a0      	movs	r3, #160	; 0xa0
 8001b22:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 0018 	add.w	r0, r3, #24
 8001b2a:	f107 020b 	add.w	r2, r7, #11
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f245 5183 	movw	r1, #21891	; 0x5583
 8001b34:	f000 fe84 	bl	8002840 <ov5640_write_reg>
 8001b38:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10c      	bne.n	8001b5a <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f103 0018 	add.w	r0, r3, #24
 8001b4a:	f107 020b 	add.w	r2, r7, #11
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f245 5184 	movw	r1, #21892	; 0x5584
 8001b54:	f000 fe74 	bl	8002840 <ov5640_write_reg>
 8001b58:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 815f 	beq.w	8001e20 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001b68:	e15a      	b.n	8001e20 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001b6a:	23ff      	movs	r3, #255	; 0xff
 8001b6c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f103 0018 	add.w	r0, r3, #24
 8001b74:	f107 020b 	add.w	r2, r7, #11
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001b7e:	f000 fe5f 	bl	8002840 <ov5640_write_reg>
 8001b82:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001b8a:	2318      	movs	r3, #24
 8001b8c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f103 0018 	add.w	r0, r3, #24
 8001b94:	f107 020b 	add.w	r2, r7, #11
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001b9e:	f000 fe4f 	bl	8002840 <ov5640_write_reg>
 8001ba2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f103 0018 	add.w	r0, r3, #24
 8001bb4:	f107 020b 	add.w	r2, r7, #11
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f245 5183 	movw	r1, #21891	; 0x5583
 8001bbe:	f000 fe3f 	bl	8002840 <ov5640_write_reg>
 8001bc2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f103 0018 	add.w	r0, r3, #24
 8001bd4:	f107 020b 	add.w	r2, r7, #11
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f245 5184 	movw	r1, #21892	; 0x5584
 8001bde:	f000 fe2f 	bl	8002840 <ov5640_write_reg>
 8001be2:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 811c 	beq.w	8001e24 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001bf2:	e117      	b.n	8001e24 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f103 0018 	add.w	r0, r3, #24
 8001bfe:	f107 020b 	add.w	r2, r7, #11
 8001c02:	2301      	movs	r3, #1
 8001c04:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c08:	f000 fe1a 	bl	8002840 <ov5640_write_reg>
 8001c0c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10c      	bne.n	8001c2e <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001c14:	2318      	movs	r3, #24
 8001c16:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f103 0018 	add.w	r0, r3, #24
 8001c1e:	f107 020b 	add.w	r2, r7, #11
 8001c22:	2301      	movs	r3, #1
 8001c24:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001c28:	f000 fe0a 	bl	8002840 <ov5640_write_reg>
 8001c2c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001c34:	2360      	movs	r3, #96	; 0x60
 8001c36:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0018 	add.w	r0, r3, #24
 8001c3e:	f107 020b 	add.w	r2, r7, #11
 8001c42:	2301      	movs	r3, #1
 8001c44:	f245 5183 	movw	r1, #21891	; 0x5583
 8001c48:	f000 fdfa 	bl	8002840 <ov5640_write_reg>
 8001c4c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001c54:	2360      	movs	r3, #96	; 0x60
 8001c56:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f103 0018 	add.w	r0, r3, #24
 8001c5e:	f107 020b 	add.w	r2, r7, #11
 8001c62:	2301      	movs	r3, #1
 8001c64:	f245 5184 	movw	r1, #21892	; 0x5584
 8001c68:	f000 fdea 	bl	8002840 <ov5640_write_reg>
 8001c6c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80d9 	beq.w	8001e28 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001c7c:	e0d4      	b.n	8001e28 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8001c7e:	23ff      	movs	r3, #255	; 0xff
 8001c80:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f103 0018 	add.w	r0, r3, #24
 8001c88:	f107 020b 	add.w	r2, r7, #11
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c92:	f000 fdd5 	bl	8002840 <ov5640_write_reg>
 8001c96:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8001c9e:	2318      	movs	r3, #24
 8001ca0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f103 0018 	add.w	r0, r3, #24
 8001ca8:	f107 020b 	add.w	r2, r7, #11
 8001cac:	2301      	movs	r3, #1
 8001cae:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001cb2:	f000 fdc5 	bl	8002840 <ov5640_write_reg>
 8001cb6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f103 0018 	add.w	r0, r3, #24
 8001cc8:	f107 020b 	add.w	r2, r7, #11
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f245 5183 	movw	r1, #21891	; 0x5583
 8001cd2:	f000 fdb5 	bl	8002840 <ov5640_write_reg>
 8001cd6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f103 0018 	add.w	r0, r3, #24
 8001ce8:	f107 020b 	add.w	r2, r7, #11
 8001cec:	2301      	movs	r3, #1
 8001cee:	f245 5184 	movw	r1, #21892	; 0x5584
 8001cf2:	f000 fda5 	bl	8002840 <ov5640_write_reg>
 8001cf6:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8096 	beq.w	8001e2c <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001d06:	e091      	b.n	8001e2c <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 0018 	add.w	r0, r3, #24
 8001d12:	f107 020b 	add.w	r2, r7, #11
 8001d16:	2301      	movs	r3, #1
 8001d18:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d1c:	f000 fd90 	bl	8002840 <ov5640_write_reg>
 8001d20:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8001d28:	2318      	movs	r3, #24
 8001d2a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f103 0018 	add.w	r0, r3, #24
 8001d32:	f107 020b 	add.w	r2, r7, #11
 8001d36:	2301      	movs	r3, #1
 8001d38:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001d3c:	f000 fd80 	bl	8002840 <ov5640_write_reg>
 8001d40:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10c      	bne.n	8001d62 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8001d48:	2340      	movs	r3, #64	; 0x40
 8001d4a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 0018 	add.w	r0, r3, #24
 8001d52:	f107 020b 	add.w	r2, r7, #11
 8001d56:	2301      	movs	r3, #1
 8001d58:	f245 5183 	movw	r1, #21891	; 0x5583
 8001d5c:	f000 fd70 	bl	8002840 <ov5640_write_reg>
 8001d60:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10c      	bne.n	8001d82 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8001d68:	23a0      	movs	r3, #160	; 0xa0
 8001d6a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f103 0018 	add.w	r0, r3, #24
 8001d72:	f107 020b 	add.w	r2, r7, #11
 8001d76:	2301      	movs	r3, #1
 8001d78:	f245 5184 	movw	r1, #21892	; 0x5584
 8001d7c:	f000 fd60 	bl	8002840 <ov5640_write_reg>
 8001d80:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d053      	beq.n	8001e30 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001d8e:	e04f      	b.n	8001e30 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8001d90:	23ff      	movs	r3, #255	; 0xff
 8001d92:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f103 0018 	add.w	r0, r3, #24
 8001d9a:	f107 020b 	add.w	r2, r7, #11
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f245 0101 	movw	r1, #20481	; 0x5001
 8001da4:	f000 fd4c 	bl	8002840 <ov5640_write_reg>
 8001da8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10c      	bne.n	8001dca <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f103 0018 	add.w	r0, r3, #24
 8001dba:	f107 020b 	add.w	r2, r7, #11
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001dc4:	f000 fd3c 	bl	8002840 <ov5640_write_reg>
 8001dc8:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d031      	beq.n	8001e34 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001dd6:	e02d      	b.n	8001e34 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8001dd8:	237f      	movs	r3, #127	; 0x7f
 8001dda:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f103 0018 	add.w	r0, r3, #24
 8001de2:	f107 020b 	add.w	r2, r7, #11
 8001de6:	2301      	movs	r3, #1
 8001de8:	f245 0101 	movw	r1, #20481	; 0x5001
 8001dec:	f000 fd28 	bl	8002840 <ov5640_write_reg>
 8001df0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10c      	bne.n	8001e12 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0018 	add.w	r0, r3, #24
 8001e02:	f107 020b 	add.w	r2, r7, #11
 8001e06:	2301      	movs	r3, #1
 8001e08:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001e0c:	f000 fd18 	bl	8002840 <ov5640_write_reg>
 8001e10:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00f      	beq.n	8001e38 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	60fb      	str	r3, [r7, #12]
      }

      break;
 8001e1e:	e00b      	b.n	8001e38 <OV5640_SetColorEffect+0x3f4>
      break;
 8001e20:	bf00      	nop
 8001e22:	e00a      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e24:	bf00      	nop
 8001e26:	e008      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e28:	bf00      	nop
 8001e2a:	e006      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e004      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e30:	bf00      	nop
 8001e32:	e002      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e34:	bf00      	nop
 8001e36:	e000      	b.n	8001e3a <OV5640_SetColorEffect+0x3f6>
      break;
 8001e38:	bf00      	nop
  }

  return ret;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8001e4e:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <OV5640_SetBrightness+0xdc>)
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e56:	c303      	stmia	r3!, {r0, r1}
 8001e58:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001e5a:	23ff      	movs	r3, #255	; 0xff
 8001e5c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f103 0018 	add.w	r0, r3, #24
 8001e64:	f107 020f 	add.w	r2, r7, #15
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e6e:	f000 fce7 	bl	8002840 <ov5640_write_reg>
 8001e72:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d111      	bne.n	8001e9e <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	3320      	adds	r3, #32
 8001e80:	443b      	add	r3, r7
 8001e82:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e86:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0018 	add.w	r0, r3, #24
 8001e8e:	f107 020f 	add.w	r2, r7, #15
 8001e92:	2301      	movs	r3, #1
 8001e94:	f245 5187 	movw	r1, #21895	; 0x5587
 8001e98:	f000 fcd2 	bl	8002840 <ov5640_write_reg>
 8001e9c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10c      	bne.n	8001ebe <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f103 0018 	add.w	r0, r3, #24
 8001eae:	f107 020f 	add.w	r2, r7, #15
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001eb8:	f000 fcc2 	bl	8002840 <ov5640_write_reg>
 8001ebc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d127      	bne.n	8001f14 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da12      	bge.n	8001ef0 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0018 	add.w	r0, r3, #24
 8001ed4:	f107 020f 	add.w	r2, r7, #15
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f245 5188 	movw	r1, #21896	; 0x5588
 8001ede:	f000 fcaf 	bl	8002840 <ov5640_write_reg>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d015      	beq.n	8001f14 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e011      	b.n	8001f14 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0018 	add.w	r0, r3, #24
 8001efa:	f107 020f 	add.w	r2, r7, #15
 8001efe:	2301      	movs	r3, #1
 8001f00:	f245 5188 	movw	r1, #21896	; 0x5588
 8001f04:	f000 fc9c 	bl	8002840 <ov5640_write_reg>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8001f14:	69fb      	ldr	r3, [r7, #28]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	08008bbc 	.word	0x08008bbc

08001f24 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8001f2e:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <OV5640_SetSaturation+0xcc>)
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f36:	c303      	stmia	r3!, {r0, r1}
 8001f38:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001f3a:	23ff      	movs	r3, #255	; 0xff
 8001f3c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f103 0018 	add.w	r0, r3, #24
 8001f44:	f107 020f 	add.w	r2, r7, #15
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f4e:	f000 fc77 	bl	8002840 <ov5640_write_reg>
 8001f52:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d111      	bne.n	8001f7e <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	3320      	adds	r3, #32
 8001f60:	443b      	add	r3, r7
 8001f62:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f66:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 0018 	add.w	r0, r3, #24
 8001f6e:	f107 020f 	add.w	r2, r7, #15
 8001f72:	2301      	movs	r3, #1
 8001f74:	f245 5183 	movw	r1, #21891	; 0x5583
 8001f78:	f000 fc62 	bl	8002840 <ov5640_write_reg>
 8001f7c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f103 0018 	add.w	r0, r3, #24
 8001f8a:	f107 020f 	add.w	r2, r7, #15
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f245 5184 	movw	r1, #21892	; 0x5584
 8001f94:	f000 fc54 	bl	8002840 <ov5640_write_reg>
 8001f98:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f103 0018 	add.w	r0, r3, #24
 8001faa:	f107 020f 	add.w	r2, r7, #15
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001fb4:	f000 fc44 	bl	8002840 <ov5640_write_reg>
 8001fb8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8001fc0:	2341      	movs	r3, #65	; 0x41
 8001fc2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 0018 	add.w	r0, r3, #24
 8001fca:	f107 020f 	add.w	r2, r7, #15
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f245 5188 	movw	r1, #21896	; 0x5588
 8001fd4:	f000 fc34 	bl	8002840 <ov5640_write_reg>
 8001fd8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	08008bc8 	.word	0x08008bc8

08001ff4 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8001ffe:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <OV5640_SetContrast+0xcc>)
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	ca07      	ldmia	r2, {r0, r1, r2}
 8002006:	c303      	stmia	r3!, {r0, r1}
 8002008:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800200a:	23ff      	movs	r3, #255	; 0xff
 800200c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f103 0018 	add.w	r0, r3, #24
 8002014:	f107 020f 	add.w	r2, r7, #15
 8002018:	2301      	movs	r3, #1
 800201a:	f245 0101 	movw	r1, #20481	; 0x5001
 800201e:	f000 fc0f 	bl	8002840 <ov5640_write_reg>
 8002022:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800202a:	2304      	movs	r3, #4
 800202c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f103 0018 	add.w	r0, r3, #24
 8002034:	f107 020f 	add.w	r2, r7, #15
 8002038:	2301      	movs	r3, #1
 800203a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800203e:	f000 fbff 	bl	8002840 <ov5640_write_reg>
 8002042:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d111      	bne.n	800206e <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3304      	adds	r3, #4
 800204e:	3320      	adds	r3, #32
 8002050:	443b      	add	r3, r7
 8002052:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002056:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0018 	add.w	r0, r3, #24
 800205e:	f107 020f 	add.w	r2, r7, #15
 8002062:	2301      	movs	r3, #1
 8002064:	f245 5186 	movw	r1, #21894	; 0x5586
 8002068:	f000 fbea 	bl	8002840 <ov5640_write_reg>
 800206c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0018 	add.w	r0, r3, #24
 800207a:	f107 020f 	add.w	r2, r7, #15
 800207e:	2301      	movs	r3, #1
 8002080:	f245 5185 	movw	r1, #21893	; 0x5585
 8002084:	f000 fbdc 	bl	8002840 <ov5640_write_reg>
 8002088:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002090:	2341      	movs	r3, #65	; 0x41
 8002092:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0018 	add.w	r0, r3, #24
 800209a:	f107 020f 	add.w	r2, r7, #15
 800209e:	2301      	movs	r3, #1
 80020a0:	f245 5188 	movw	r1, #21896	; 0x5588
 80020a4:	f000 fbcc 	bl	8002840 <ov5640_write_reg>
 80020a8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
 80020b4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80020b6:	69fb      	ldr	r3, [r7, #28]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	08008bd4 	.word	0x08008bd4

080020c4 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <OV5640_SetHueDegree+0xfc>)
 80020d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80020da:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <OV5640_SetHueDegree+0x100>)
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80020e6:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <OV5640_SetHueDegree+0x104>)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80020f2:	23ff      	movs	r3, #255	; 0xff
 80020f4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0018 	add.w	r0, r3, #24
 80020fc:	f107 020f 	add.w	r2, r7, #15
 8002100:	2301      	movs	r3, #1
 8002102:	f245 0101 	movw	r1, #20481	; 0x5001
 8002106:	f000 fb9b 	bl	8002840 <ov5640_write_reg>
 800210a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f103 0018 	add.w	r0, r3, #24
 800211c:	f107 020f 	add.w	r2, r7, #15
 8002120:	2301      	movs	r3, #1
 8002122:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002126:	f000 fb8b 	bl	8002840 <ov5640_write_reg>
 800212a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3306      	adds	r3, #6
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	443b      	add	r3, r7
 800213a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800213e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0018 	add.w	r0, r3, #24
 8002146:	f107 020f 	add.w	r2, r7, #15
 800214a:	2301      	movs	r3, #1
 800214c:	f245 5181 	movw	r1, #21889	; 0x5581
 8002150:	f000 fb76 	bl	8002840 <ov5640_write_reg>
 8002154:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3306      	adds	r3, #6
 8002160:	3338      	adds	r3, #56	; 0x38
 8002162:	443b      	add	r3, r7
 8002164:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002168:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 0018 	add.w	r0, r3, #24
 8002170:	f107 020f 	add.w	r2, r7, #15
 8002174:	2301      	movs	r3, #1
 8002176:	f245 5182 	movw	r1, #21890	; 0x5582
 800217a:	f000 fb61 	bl	8002840 <ov5640_write_reg>
 800217e:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d111      	bne.n	80021aa <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3306      	adds	r3, #6
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	443b      	add	r3, r7
 800218e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002192:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0018 	add.w	r0, r3, #24
 800219a:	f107 020f 	add.w	r2, r7, #15
 800219e:	2301      	movs	r3, #1
 80021a0:	f245 5188 	movw	r1, #21896	; 0x5588
 80021a4:	f000 fb4c 	bl	8002840 <ov5640_write_reg>
 80021a8:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3738      	adds	r7, #56	; 0x38
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	08008be0 	.word	0x08008be0
 80021c4:	08008bec 	.word	0x08008bec
 80021c8:	08008bf8 	.word	0x08008bf8

080021cc <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f103 0018 	add.w	r0, r3, #24
 80021e0:	f107 020b 	add.w	r2, r7, #11
 80021e4:	2301      	movs	r3, #1
 80021e6:	f643 0120 	movw	r1, #14368	; 0x3820
 80021ea:	f000 fb12 	bl	8002812 <ov5640_read_reg>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e0cb      	b.n	8002394 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80021fc:	7afb      	ldrb	r3, [r7, #11]
 80021fe:	f023 0306 	bic.w	r3, r3, #6
 8002202:	b2db      	uxtb	r3, r3
 8002204:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f103 0018 	add.w	r0, r3, #24
 800220c:	f107 020a 	add.w	r2, r7, #10
 8002210:	2301      	movs	r3, #1
 8002212:	f643 0121 	movw	r1, #14369	; 0x3821
 8002216:	f000 fafc 	bl	8002812 <ov5640_read_reg>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e0b5      	b.n	8002394 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 800222c:	7abb      	ldrb	r3, [r7, #10]
 800222e:	f023 0306 	bic.w	r3, r3, #6
 8002232:	b2db      	uxtb	r3, r3
 8002234:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d056      	beq.n	80022ea <OV5640_MirrorFlipConfig+0x11e>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d87f      	bhi.n	8002342 <OV5640_MirrorFlipConfig+0x176>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d029      	beq.n	800229c <OV5640_MirrorFlipConfig+0xd0>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d179      	bne.n	8002342 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0018 	add.w	r0, r3, #24
 8002254:	f107 020b 	add.w	r2, r7, #11
 8002258:	2301      	movs	r3, #1
 800225a:	f643 0120 	movw	r1, #14368	; 0x3820
 800225e:	f000 faef 	bl	8002840 <ov5640_write_reg>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800226e:	e08a      	b.n	8002386 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002270:	7abb      	ldrb	r3, [r7, #10]
 8002272:	f043 0306 	orr.w	r3, r3, #6
 8002276:	b2db      	uxtb	r3, r3
 8002278:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f103 0018 	add.w	r0, r3, #24
 8002280:	f107 020a 	add.w	r2, r7, #10
 8002284:	2301      	movs	r3, #1
 8002286:	f643 0121 	movw	r1, #14369	; 0x3821
 800228a:	f000 fad9 	bl	8002840 <ov5640_write_reg>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d078      	beq.n	8002386 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	60fb      	str	r3, [r7, #12]
          break;
 800229a:	e074      	b.n	8002386 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	f043 0306 	orr.w	r3, r3, #6
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0018 	add.w	r0, r3, #24
 80022ac:	f107 020b 	add.w	r2, r7, #11
 80022b0:	2301      	movs	r3, #1
 80022b2:	f643 0120 	movw	r1, #14368	; 0x3820
 80022b6:	f000 fac3 	bl	8002840 <ov5640_write_reg>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80022c6:	e060      	b.n	800238a <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0018 	add.w	r0, r3, #24
 80022ce:	f107 020a 	add.w	r2, r7, #10
 80022d2:	2301      	movs	r3, #1
 80022d4:	f643 0121 	movw	r1, #14369	; 0x3821
 80022d8:	f000 fab2 	bl	8002840 <ov5640_write_reg>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d053      	beq.n	800238a <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	60fb      	str	r3, [r7, #12]
          break;
 80022e8:	e04f      	b.n	800238a <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	f043 0306 	orr.w	r3, r3, #6
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0018 	add.w	r0, r3, #24
 80022fa:	f107 020b 	add.w	r2, r7, #11
 80022fe:	2301      	movs	r3, #1
 8002300:	f643 0120 	movw	r1, #14368	; 0x3820
 8002304:	f000 fa9c 	bl	8002840 <ov5640_write_reg>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002314:	e03b      	b.n	800238e <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002316:	7abb      	ldrb	r3, [r7, #10]
 8002318:	f043 0306 	orr.w	r3, r3, #6
 800231c:	b2db      	uxtb	r3, r3
 800231e:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0018 	add.w	r0, r3, #24
 8002326:	f107 020a 	add.w	r2, r7, #10
 800232a:	2301      	movs	r3, #1
 800232c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002330:	f000 fa86 	bl	8002840 <ov5640_write_reg>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d029      	beq.n	800238e <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	60fb      	str	r3, [r7, #12]
          break;
 8002340:	e025      	b.n	800238e <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0018 	add.w	r0, r3, #24
 8002348:	f107 020b 	add.w	r2, r7, #11
 800234c:	2301      	movs	r3, #1
 800234e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002352:	f000 fa75 	bl	8002840 <ov5640_write_reg>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002362:	e016      	b.n	8002392 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f103 0018 	add.w	r0, r3, #24
 800236a:	f107 020a 	add.w	r2, r7, #10
 800236e:	2301      	movs	r3, #1
 8002370:	f643 0121 	movw	r1, #14369	; 0x3821
 8002374:	f000 fa64 	bl	8002840 <ov5640_write_reg>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	60fb      	str	r3, [r7, #12]
          break;
 8002384:	e005      	b.n	8002392 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002386:	bf00      	nop
 8002388:	e004      	b.n	8002394 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800238a:	bf00      	nop
 800238c:	e002      	b.n	8002394 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800238e:	bf00      	nop
 8002390:	e000      	b.n	8002394 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002392:	bf00      	nop
      }
    }
  }

  return ret;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff f86a 	bl	800148c <OV5640_GetResolution>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e04e      	b.n	8002464 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b44      	cmp	r3, #68	; 0x44
 80023ce:	d112      	bne.n	80023f6 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 80023d0:	2310      	movs	r3, #16
 80023d2:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0018 	add.w	r0, r3, #24
 80023da:	f107 020b 	add.w	r2, r7, #11
 80023de:	2301      	movs	r3, #1
 80023e0:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80023e4:	f000 fa2c 	bl	8002840 <ov5640_write_reg>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03a      	beq.n	8002464 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e036      	b.n	8002464 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d802      	bhi.n	8002402 <OV5640_ZoomConfig+0x64>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002400:	e00a      	b.n	8002418 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002402:	2b03      	cmp	r3, #3
 8002404:	d004      	beq.n	8002410 <OV5640_ZoomConfig+0x72>
          break;
 8002406:	e007      	b.n	8002418 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	613b      	str	r3, [r7, #16]
          break;
 800240e:	e003      	b.n	8002418 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	613b      	str	r3, [r7, #16]
          break;
 8002416:	bf00      	nop
      }

      tmp = 0x00;
 8002418:	2300      	movs	r3, #0
 800241a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0018 	add.w	r0, r3, #24
 8002422:	f107 020b 	add.w	r2, r7, #11
 8002426:	2301      	movs	r3, #1
 8002428:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 800242c:	f000 fa08 	bl	8002840 <ov5640_write_reg>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e012      	b.n	8002464 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0018 	add.w	r0, r3, #24
 800244a:	f107 020b 	add.w	r2, r7, #11
 800244e:	2301      	movs	r3, #1
 8002450:	f245 6101 	movw	r1, #22017	; 0x5601
 8002454:	f000 f9f4 	bl	8002840 <ov5640_write_reg>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 80ce 	bne.w	8002620 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0018 	add.w	r0, r3, #24
 800248a:	f107 020b 	add.w	r2, r7, #11
 800248e:	2301      	movs	r3, #1
 8002490:	f243 0138 	movw	r1, #12344	; 0x3038
 8002494:	f000 f9d4 	bl	8002840 <ov5640_write_reg>
 8002498:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0018 	add.w	r0, r3, #24
 80024a6:	f107 020b 	add.w	r2, r7, #11
 80024aa:	2301      	movs	r3, #1
 80024ac:	f243 0139 	movw	r1, #12345	; 0x3039
 80024b0:	f000 f9c6 	bl	8002840 <ov5640_write_reg>
 80024b4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10c      	bne.n	80024d6 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80024bc:	237c      	movs	r3, #124	; 0x7c
 80024be:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f103 0018 	add.w	r0, r3, #24
 80024c6:	f107 020b 	add.w	r2, r7, #11
 80024ca:	2301      	movs	r3, #1
 80024cc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80024d0:	f000 f9b6 	bl	8002840 <ov5640_write_reg>
 80024d4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10c      	bne.n	80024f6 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 80024dc:	2301      	movs	r3, #1
 80024de:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0018 	add.w	r0, r3, #24
 80024e6:	f107 020b 	add.w	r2, r7, #11
 80024ea:	2301      	movs	r3, #1
 80024ec:	f643 2108 	movw	r1, #14856	; 0x3a08
 80024f0:	f000 f9a6 	bl	8002840 <ov5640_write_reg>
 80024f4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10c      	bne.n	8002516 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 80024fc:	2327      	movs	r3, #39	; 0x27
 80024fe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f103 0018 	add.w	r0, r3, #24
 8002506:	f107 020b 	add.w	r2, r7, #11
 800250a:	2301      	movs	r3, #1
 800250c:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002510:	f000 f996 	bl	8002840 <ov5640_write_reg>
 8002514:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10c      	bne.n	8002536 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 800251c:	2300      	movs	r3, #0
 800251e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0018 	add.w	r0, r3, #24
 8002526:	f107 020b 	add.w	r2, r7, #11
 800252a:	2301      	movs	r3, #1
 800252c:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002530:	f000 f986 	bl	8002840 <ov5640_write_reg>
 8002534:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10c      	bne.n	8002556 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 800253c:	23f6      	movs	r3, #246	; 0xf6
 800253e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0018 	add.w	r0, r3, #24
 8002546:	f107 020b 	add.w	r2, r7, #11
 800254a:	2301      	movs	r3, #1
 800254c:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002550:	f000 f976 	bl	8002840 <ov5640_write_reg>
 8002554:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10c      	bne.n	8002576 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 800255c:	2304      	movs	r3, #4
 800255e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0018 	add.w	r0, r3, #24
 8002566:	f107 020b 	add.w	r2, r7, #11
 800256a:	2301      	movs	r3, #1
 800256c:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002570:	f000 f966 	bl	8002840 <ov5640_write_reg>
 8002574:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0018 	add.w	r0, r3, #24
 8002582:	f107 020b 	add.w	r2, r7, #11
 8002586:	2301      	movs	r3, #1
 8002588:	f643 210e 	movw	r1, #14862	; 0x3a0e
 800258c:	f000 f958 	bl	8002840 <ov5640_write_reg>
 8002590:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10c      	bne.n	80025b2 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002598:	230b      	movs	r3, #11
 800259a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f103 0018 	add.w	r0, r3, #24
 80025a2:	f107 020b 	add.w	r2, r7, #11
 80025a6:	2301      	movs	r3, #1
 80025a8:	f643 2102 	movw	r1, #14850	; 0x3a02
 80025ac:	f000 f948 	bl	8002840 <ov5640_write_reg>
 80025b0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10c      	bne.n	80025d2 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80025b8:	2388      	movs	r3, #136	; 0x88
 80025ba:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0018 	add.w	r0, r3, #24
 80025c2:	f107 020b 	add.w	r2, r7, #11
 80025c6:	2301      	movs	r3, #1
 80025c8:	f643 2103 	movw	r1, #14851	; 0x3a03
 80025cc:	f000 f938 	bl	8002840 <ov5640_write_reg>
 80025d0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10c      	bne.n	80025f2 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80025d8:	230b      	movs	r3, #11
 80025da:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f103 0018 	add.w	r0, r3, #24
 80025e2:	f107 020b 	add.w	r2, r7, #11
 80025e6:	2301      	movs	r3, #1
 80025e8:	f643 2114 	movw	r1, #14868	; 0x3a14
 80025ec:	f000 f928 	bl	8002840 <ov5640_write_reg>
 80025f0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10c      	bne.n	8002612 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 80025f8:	2388      	movs	r3, #136	; 0x88
 80025fa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0018 	add.w	r0, r3, #24
 8002602:	f107 020b 	add.w	r2, r7, #11
 8002606:	2301      	movs	r3, #1
 8002608:	f643 2115 	movw	r1, #14869	; 0x3a15
 800260c:	f000 f918 	bl	8002840 <ov5640_write_reg>
 8002610:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02b      	beq.n	8002670 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e027      	b.n	8002670 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f103 0018 	add.w	r0, r3, #24
 8002626:	f107 020b 	add.w	r2, r7, #11
 800262a:	2301      	movs	r3, #1
 800262c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002630:	f000 f8ef 	bl	8002812 <ov5640_read_reg>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e016      	b.n	8002670 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	b2db      	uxtb	r3, r3
 800264e:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 0018 	add.w	r0, r3, #24
 8002656:	f107 020b 	add.w	r2, r7, #11
 800265a:	2301      	movs	r3, #1
 800265c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002660:	f000 f8ee 	bl	8002840 <ov5640_write_reg>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <OV5640_GetAWBRGBGain>:
  
  return ret;
}

int32_t OV5640_GetAWBRGBGain(OV5640_Object_t *pObj, uint8_t *RGBGain)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f103 0018 	add.w	r0, r3, #24
 800268a:	f107 020b 	add.w	r2, r7, #11
 800268e:	2301      	movs	r3, #1
 8002690:	f245 119f 	movw	r1, #20895	; 0x519f
 8002694:	f000 f8bd 	bl	8002812 <ov5640_read_reg>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <OV5640_GetAWBRGBGain+0x2e>
    {
		ret = OV5640_ERROR;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	60fb      	str	r3, [r7, #12]
		return ret;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e071      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
    }
	*RGBGain = tmp;
 80026a8:	7afa      	ldrb	r2, [r7, #11]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_LOW, &tmp, 1) != OV5640_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0018 	add.w	r0, r3, #24
 80026b4:	f107 020b 	add.w	r2, r7, #11
 80026b8:	2301      	movs	r3, #1
 80026ba:	f245 11a0 	movw	r1, #20896	; 0x51a0
 80026be:	f000 f8a8 	bl	8002812 <ov5640_read_reg>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <OV5640_GetAWBRGBGain+0x58>
	{
		ret = OV5640_ERROR;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	60fb      	str	r3, [r7, #12]
		return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	e05c      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+1) = tmp;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	7afa      	ldrb	r2, [r7, #11]
 80026d8:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 0018 	add.w	r0, r3, #24
 80026e0:	f107 020b 	add.w	r2, r7, #11
 80026e4:	2301      	movs	r3, #1
 80026e6:	f245 11a1 	movw	r1, #20897	; 0x51a1
 80026ea:	f000 f892 	bl	8002812 <ov5640_read_reg>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <OV5640_GetAWBRGBGain+0x84>
    {
		ret = OV5640_ERROR;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	60fb      	str	r3, [r7, #12]
		return ret;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	e046      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+2) = tmp;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3302      	adds	r3, #2
 8002702:	7afa      	ldrb	r2, [r7, #11]
 8002704:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_LOW, &tmp, 1) != OV5640_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f103 0018 	add.w	r0, r3, #24
 800270c:	f107 020b 	add.w	r2, r7, #11
 8002710:	2301      	movs	r3, #1
 8002712:	f245 11a2 	movw	r1, #20898	; 0x51a2
 8002716:	f000 f87c 	bl	8002812 <ov5640_read_reg>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <OV5640_GetAWBRGBGain+0xb0>
	{
		ret = OV5640_ERROR;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	60fb      	str	r3, [r7, #12]
		return ret;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	e030      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+3) = tmp;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3303      	adds	r3, #3
 800272e:	7afa      	ldrb	r2, [r7, #11]
 8002730:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f103 0018 	add.w	r0, r3, #24
 8002738:	f107 020b 	add.w	r2, r7, #11
 800273c:	2301      	movs	r3, #1
 800273e:	f245 11a3 	movw	r1, #20899	; 0x51a3
 8002742:	f000 f866 	bl	8002812 <ov5640_read_reg>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <OV5640_GetAWBRGBGain+0xdc>
    {
		ret = OV5640_ERROR;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
 8002750:	60fb      	str	r3, [r7, #12]
		return ret;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	e01a      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+4) = tmp;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	3304      	adds	r3, #4
 800275a:	7afa      	ldrb	r2, [r7, #11]
 800275c:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_LOW, &tmp, 1) != OV5640_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 0018 	add.w	r0, r3, #24
 8002764:	f107 020b 	add.w	r2, r7, #11
 8002768:	2301      	movs	r3, #1
 800276a:	f245 11a4 	movw	r1, #20900	; 0x51a4
 800276e:	f000 f850 	bl	8002812 <ov5640_read_reg>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <OV5640_GetAWBRGBGain+0x108>
	{
		ret = OV5640_ERROR;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	60fb      	str	r3, [r7, #12]
		return ret;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	e004      	b.n	800278c <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+5) = tmp;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3305      	adds	r3, #5
 8002786:	7afa      	ldrb	r2, [r7, #11]
 8002788:	701a      	strb	r2, [r3, #0]
	return OV5640_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
//  uint32_t tickstart;
//  tickstart = pObj->IO.GetTick();
//  while ((pObj->IO.GetTick() - tickstart) < Delay)
//  {
//  }
	HAL_Delay(Delay);
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	f000 fc56 	bl	8003050 <HAL_Delay>
	return OV5640_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027ae:	b590      	push	{r4, r7, lr}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	460b      	mov	r3, r1
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	4613      	mov	r3, r2
 80027c0:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	691c      	ldr	r4, [r3, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	8918      	ldrh	r0, [r3, #8]
 80027ce:	893b      	ldrh	r3, [r7, #8]
 80027d0:	8979      	ldrh	r1, [r7, #10]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	47a0      	blx	r4
 80027d6:	4603      	mov	r3, r0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	461a      	mov	r2, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	817b      	strh	r3, [r7, #10]
 80027f0:	4613      	mov	r3, r2
 80027f2:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68dc      	ldr	r4, [r3, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	8918      	ldrh	r0, [r3, #8]
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	47a0      	blx	r4
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}

08002812 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002812:	b590      	push	{r4, r7, lr}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	460b      	mov	r3, r1
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	4613      	mov	r3, r2
 8002824:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685c      	ldr	r4, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6898      	ldr	r0, [r3, #8]
 800282e:	893b      	ldrh	r3, [r7, #8]
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	47a0      	blx	r4
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}

08002840 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	4613      	mov	r3, r2
 8002852:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681c      	ldr	r4, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	47a0      	blx	r4
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
	...

08002870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_MspInit+0x44>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_MspInit+0x44>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_MspInit+0x44>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_MspInit+0x44>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_MspInit+0x44>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002898:	6453      	str	r3, [r2, #68]	; 0x44
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_MspInit+0x44>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <HAL_DCMI_MspInit+0x1d8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 80d5 	bne.w	8002a86 <HAL_DCMI_MspInit+0x1ce>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028dc:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	4a6c      	ldr	r2, [pc, #432]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6353      	str	r3, [r2, #52]	; 0x34
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f4:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 80028fa:	f043 0310 	orr.w	r3, r3, #16
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6313      	str	r3, [r2, #48]	; 0x30
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002924:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a5a      	ldr	r2, [pc, #360]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293c:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	6313      	str	r3, [r2, #48]	; 0x30
 8002948:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a4e      	ldr	r2, [pc, #312]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 800295a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_DCMI_MspInit+0x1dc>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0;
 800296c:	2371      	movs	r3, #113	; 0x71
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800297c:	230d      	movs	r3, #13
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	4844      	ldr	r0, [pc, #272]	; (8002a98 <HAL_DCMI_MspInit+0x1e0>)
 8002988:	f002 fc8c 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800298c:	2350      	movs	r3, #80	; 0x50
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800299c:	230d      	movs	r3, #13
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	4619      	mov	r1, r3
 80029a6:	483d      	ldr	r0, [pc, #244]	; (8002a9c <HAL_DCMI_MspInit+0x1e4>)
 80029a8:	f002 fc7c 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80029ac:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029be:	230d      	movs	r3, #13
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c6:	4619      	mov	r1, r3
 80029c8:	4835      	ldr	r0, [pc, #212]	; (8002aa0 <HAL_DCMI_MspInit+0x1e8>)
 80029ca:	f002 fc6b 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029ce:	2308      	movs	r3, #8
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029de:	230d      	movs	r3, #13
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	482e      	ldr	r0, [pc, #184]	; (8002aa4 <HAL_DCMI_MspInit+0x1ec>)
 80029ea:	f002 fc5b 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a00:	230d      	movs	r3, #13
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4827      	ldr	r0, [pc, #156]	; (8002aa8 <HAL_DCMI_MspInit+0x1f0>)
 8002a0c:	f002 fc4a 	bl	80052a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a12:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_DCMI_MspInit+0x1f8>)
 8002a14:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a30:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a38:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a40:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a48:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a50:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a54:	2204      	movs	r2, #4
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a6a:	4810      	ldr	r0, [pc, #64]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a6c:	f000 febc 	bl	80037e8 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_DCMI_MspInit+0x1c2>
    {
      Error_Handler();
 8002a76:	f7fe f997 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a7e:	649a      	str	r2, [r3, #72]	; 0x48
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_DCMI_MspInit+0x1f4>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a86:	bf00      	nop
 8002a88:	3738      	adds	r7, #56	; 0x38
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	50050000 	.word	0x50050000
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	200000c0 	.word	0x200000c0
 8002ab0:	40026428 	.word	0x40026428

08002ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ae      	sub	sp, #184	; 0xb8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2290      	movs	r2, #144	; 0x90
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f006 f85d 	bl	8008b94 <memset>
  if(hi2c->Instance==I2C1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_I2C_MspInit+0xb4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d13c      	bne.n	8002b5e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fa14 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002afe:	f7fe f953 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002b1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b22:	2312      	movs	r3, #18
 8002b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b34:	2304      	movs	r3, #4
 8002b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <HAL_I2C_MspInit+0xbc>)
 8002b42:	f002 fbaf 	bl	80052a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_I2C_MspInit+0xb8>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	37b8      	adds	r7, #184	; 0xb8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	; (8002c28 <HAL_SPI_MspInit+0xb4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d143      	bne.n	8002c1e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_SPI_MspInit+0xb8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bde:	2320      	movs	r3, #32
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bee:	2305      	movs	r3, #5
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 0314 	add.w	r3, r7, #20
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480d      	ldr	r0, [pc, #52]	; (8002c30 <HAL_SPI_MspInit+0xbc>)
 8002bfa:	f002 fb53 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bfe:	2330      	movs	r3, #48	; 0x30
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4806      	ldr	r0, [pc, #24]	; (8002c34 <HAL_SPI_MspInit+0xc0>)
 8002c1a:	f002 fb43 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40013000 	.word	0x40013000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0ae      	sub	sp, #184	; 0xb8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2290      	movs	r2, #144	; 0x90
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 ff9b 	bl	8008b94 <memset>
  if(huart->Instance==USART3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_UART_MspInit+0xb4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d13c      	bne.n	8002ce2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 f952 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c82:	f7fe f891 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_UART_MspInit+0xb8>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_UART_MspInit+0xbc>)
 8002cde:	f002 fae1 	bl	80052a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ce2:	bf00      	nop
 8002ce4:	37b8      	adds	r7, #184	; 0xb8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40004800 	.word	0x40004800
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020c00 	.word	0x40020c00

08002cf8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0ae      	sub	sp, #184	; 0xb8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2290      	movs	r2, #144	; 0x90
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f005 ff3b 	bl	8008b94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d26:	d159      	bne.n	8002ddc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f8f1 	bl	8006f20 <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d44:	f7fe f830 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6313      	str	r3, [r2, #48]	; 0x30
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4818      	ldr	r0, [pc, #96]	; (8002de8 <HAL_PCD_MspInit+0xf0>)
 8002d88:	f002 fa8c 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4810      	ldr	r0, [pc, #64]	; (8002de8 <HAL_PCD_MspInit+0xf0>)
 8002da8:	f002 fa7c 	bl	80052a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	6353      	str	r3, [r2, #52]	; 0x34
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dce:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_PCD_MspInit+0xec>)
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	37b8      	adds	r7, #184	; 0xb8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_FMC_MspInit+0xa4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d13f      	bne.n	8002e88 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_FMC_MspInit+0xa4>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_FMC_MspInit+0xa8>)
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a20      	ldr	r2, [pc, #128]	; (8002e94 <HAL_FMC_MspInit+0xa8>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6393      	str	r3, [r2, #56]	; 0x38
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_FMC_MspInit+0xa8>)
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e26:	f243 033f 	movw	r3, #12351	; 0x303f
 8002e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e38:	230c      	movs	r3, #12
 8002e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4815      	ldr	r0, [pc, #84]	; (8002e98 <HAL_FMC_MspInit+0xac>)
 8002e42:	f002 fa2f 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002e46:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e58:	230c      	movs	r3, #12
 8002e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480e      	ldr	r0, [pc, #56]	; (8002e9c <HAL_FMC_MspInit+0xb0>)
 8002e62:	f002 fa1f 	bl	80052a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002e66:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8002e6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e78:	230c      	movs	r3, #12
 8002e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <HAL_FMC_MspInit+0xb4>)
 8002e82:	f002 fa0f 	bl	80052a4 <HAL_GPIO_Init>
 8002e86:	e000      	b.n	8002e8a <HAL_FMC_MspInit+0x9e>
    return;
 8002e88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20025ee4 	.word	0x20025ee4
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40021400 	.word	0x40021400
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40020c00 	.word	0x40020c00

08002ea4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002eac:	f7ff ff9e 	bl	8002dec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <NMI_Handler+0x4>

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f000 f884 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <DMA2_Stream1_IRQHandler+0x10>)
 8002f12:	f000 fde7 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200000c0 	.word	0x200000c0

08002f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f4a:	490e      	ldr	r1, [pc, #56]	; (8002f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f60:	4c0b      	ldr	r4, [pc, #44]	; (8002f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f6e:	f7ff ffd7 	bl	8002f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f72:	f005 fdeb 	bl	8008b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7fd fb4f 	bl	8000618 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002f88:	0800914c 	.word	0x0800914c
  ldr r2, =_sbss
 8002f8c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002f90:	20025eec 	.word	0x20025eec

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>

08002f96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f000 f94c 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f000 f805 	bl	8002fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa6:	f7ff fc63 	bl	8002870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_InitTick+0x54>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_InitTick+0x58>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f967 	bl	80032a2 <HAL_SYSTICK_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0f      	cmp	r3, #15
 8002fe2:	d80a      	bhi.n	8002ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f000 f92f 	bl	800324e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_InitTick+0x5c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000048 	.word	0x20000048
 8003008:	20000050 	.word	0x20000050
 800300c:	2000004c 	.word	0x2000004c

08003010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_IncTick+0x20>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_IncTick+0x24>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_IncTick+0x24>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000050 	.word	0x20000050
 8003034:	20025ee8 	.word	0x20025ee8

08003038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return uwTick;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_GetTick+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20025ee8 	.word	0x20025ee8

08003050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff ffee 	bl	8003038 <HAL_GetTick>
 800305c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d005      	beq.n	8003076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_Delay+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003076:	bf00      	nop
 8003078:	f7ff ffde 	bl	8003038 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8f7      	bhi.n	8003078 <HAL_Delay+0x28>
  {
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000050 	.word	0x20000050

08003098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <__NVIC_SetPriorityGrouping+0x40>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <__NVIC_SetPriorityGrouping+0x44>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <__NVIC_SetPriorityGrouping+0x40>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00
 80030dc:	05fa0000 	.word	0x05fa0000

080030e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_GetPriorityGrouping+0x18>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0307 	and.w	r3, r3, #7
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	db0b      	blt.n	8003126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4907      	ldr	r1, [pc, #28]	; (8003134 <__NVIC_EnableIRQ+0x38>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2001      	movs	r0, #1
 800311e:	fa00 f202 	lsl.w	r2, r0, r2
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e100 	.word	0xe000e100

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff29 	bl	8003098 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff3e 	bl	80030e0 <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff31 	bl	80030fc <__NVIC_EnableIRQ>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffa2 	bl	80031f4 <SysTick_Config>
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e069      	b.n	80033a2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff faec 	bl	80028b8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_DCMI_Init+0xf0>)
 8003302:	400b      	ands	r3, r1
 8003304:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800331a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003326:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003332:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800333e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800334a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b10      	cmp	r3, #16
 800335a:	d112      	bne.n	8003382 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7f1b      	ldrb	r3, [r3, #28]
 8003360:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7f5b      	ldrb	r3, [r3, #29]
 8003366:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003368:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7f9b      	ldrb	r3, [r3, #30]
 800336e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003370:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7fdb      	ldrb	r3, [r3, #31]
 8003378:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800337e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003380:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 021e 	orr.w	r2, r2, #30
 8003390:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	ffe0f007 	.word	0xffe0f007

080033b0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_DCMI_Start_DMA+0x20>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e095      	b.n	80034fc <HAL_DCMI_Start_DMA+0x14c>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ee:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0202 	bic.w	r2, r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_DCMI_Start_DMA+0x154>)
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_DCMI_Start_DMA+0x158>)
 800341e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	2200      	movs	r2, #0
 8003426:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d20e      	bcs.n	8003466 <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	4619      	mov	r1, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	f000 fa74 	bl	8003944 <HAL_DMA_Start_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03f      	beq.n	80034e2 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e04a      	b.n	80034fc <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_DCMI_Start_DMA+0x154>)
 800346c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003480:	e009      	b.n	8003496 <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	085a      	lsrs	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d2f0      	bcs.n	8003482 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1e9a      	subs	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3328      	adds	r3, #40	; 0x28
 80034c8:	4619      	mov	r1, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	f000 fd70 	bl	8003fb8 <HAL_DMAEx_MultiBufferStart_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00c      	b.n	80034fc <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08003685 	.word	0x08003685
 8003508:	080037af 	.word	0x080037af

0800350c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_DCMI_Stop+0xb4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <HAL_DCMI_Stop+0xb8>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003524:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DCMI_Stop+0x2e>
 8003536:	2302      	movs	r3, #2
 8003538:	e03d      	b.n	80035b6 <HAL_DCMI_Stop+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800355a:	4623      	mov	r3, r4
 800355c:	1e5c      	subs	r4, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	73fb      	strb	r3, [r7, #15]
      break;
 8003572:	e006      	b.n	8003582 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1eb      	bne.n	800355a <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003590:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa34 	bl	8003a04 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000048 	.word	0x20000048
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 80035c8:	b490      	push	{r4, r7}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_DCMI_Suspend+0xa0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a25      	ldr	r2, [pc, #148]	; (800366c <HAL_DCMI_Suspend+0xa4>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035e0:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_DCMI_Suspend+0x2e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e032      	b.n	800365c <HAL_DCMI_Suspend+0x94>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d123      	bne.n	8003652 <HAL_DCMI_Suspend+0x8a>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2205      	movs	r2, #5
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 8003622:	4623      	mov	r3, r4
 8003624:	1e5c      	subs	r4, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_DCMI_Suspend+0x7c>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	73fb      	strb	r3, [r7, #15]
        break;
 8003642:	e006      	b.n	8003652 <HAL_DCMI_Suspend+0x8a>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e7      	bne.n	8003622 <HAL_DCMI_Suspend+0x5a>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bc90      	pop	{r4, r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000048 	.word	0x20000048
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	2b00      	cmp	r3, #0
 800369c:	d043      	beq.n	8003726 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d118      	bne.n	80036ea <DCMI_DMAXferCplt+0x66>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	00da      	lsls	r2, r3, #3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	2200      	movs	r2, #0
 80036d8:	4619      	mov	r1, r3
 80036da:	f001 fda3 	bl	8005224 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1e5a      	subs	r2, r3, #1
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
 80036e8:	e044      	b.n	8003774 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13c      	bne.n	8003774 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	00da      	lsls	r2, r3, #3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	2201      	movs	r2, #1
 8003714:	4619      	mov	r1, r3
 8003716:	f001 fd85 	bl	8005224 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	1e5a      	subs	r2, r3, #1
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
 8003724:	e026      	b.n	8003774 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e017      	b.n	8003774 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10f      	bne.n	8003774 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	440a      	add	r2, r1
 800376a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	429a      	cmp	r2, r3
 800377e:	d112      	bne.n	80037a6 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d009      	beq.n	80037da <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ff48 	bl	8003670 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037f4:	f7ff fc20 	bl	8003038 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e099      	b.n	8003938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003824:	e00f      	b.n	8003846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003826:	f7ff fc07 	bl	8003038 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b05      	cmp	r3, #5
 8003832:	d908      	bls.n	8003846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e078      	b.n	8003938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e8      	bne.n	8003826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4b38      	ldr	r3, [pc, #224]	; (8003940 <HAL_DMA_Init+0x158>)
 8003860:	4013      	ands	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b04      	cmp	r3, #4
 800389e:	d107      	bne.n	80038b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	4313      	orrs	r3, r2
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0307 	bic.w	r3, r3, #7
 80038c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d117      	bne.n	800390a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fae7 	bl	8003ec0 <DMA_CheckFifoParam>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003906:	2301      	movs	r3, #1
 8003908:	e016      	b.n	8003938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa9e 	bl	8003e54 <DMA_CalcBaseAndBitshift>
 8003918:	4603      	mov	r3, r0
 800391a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	223f      	movs	r2, #63	; 0x3f
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	e010803f 	.word	0xe010803f

08003944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_DMA_Start_IT+0x26>
 8003966:	2302      	movs	r3, #2
 8003968:	e048      	b.n	80039fc <HAL_DMA_Start_IT+0xb8>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d137      	bne.n	80039ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa30 	bl	8003df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	223f      	movs	r2, #63	; 0x3f
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0216 	orr.w	r2, r2, #22
 80039b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e005      	b.n	80039fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7ff fb11 	bl	8003038 <HAL_GetTick>
 8003a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e052      	b.n	8003adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0216 	bic.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_DMA_Abort+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	e013      	b.n	8003ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a88:	f7ff fad6 	bl	8003038 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d90c      	bls.n	8003ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e015      	b.n	8003adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003af0:	4b8e      	ldr	r3, [pc, #568]	; (8003d2c <HAL_DMA_IRQHandler+0x248>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a8e      	ldr	r2, [pc, #568]	; (8003d30 <HAL_DMA_IRQHandler+0x24c>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2208      	movs	r2, #8
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d012      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f043 0202 	orr.w	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	2204      	movs	r2, #4
 8003baa:	409a      	lsls	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d043      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03c      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2210      	movs	r2, #16
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d108      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d024      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e01f      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
 8003c24:	e016      	b.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0208 	bic.w	r2, r2, #8
 8003c42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	2220      	movs	r2, #32
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 808f 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8087 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d136      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0216 	bic.w	r2, r2, #22
 8003c9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_DMA_IRQHandler+0x1da>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0208 	bic.w	r2, r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	223f      	movs	r2, #63	; 0x3f
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d07e      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
        }
        return;
 8003cfa:	e079      	b.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e02c      	b.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
 8003d2a:	bf00      	nop
 8003d2c:	20000048 	.word	0x20000048
 8003d30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d023      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e01e      	b.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0210 	bic.w	r2, r2, #16
 8003d62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d032      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d307      	bcc.n	8003dcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f2      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x2cc>
 8003dca:	e000      	b.n	8003dce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003df0:	bf00      	nop
    }
  }
}
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d108      	bne.n	8003e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e36:	e007      	b.n	8003e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b10      	subs	r3, #16
 8003e64:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x60>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d908      	bls.n	8003e94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <DMA_CalcBaseAndBitshift+0x68>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	1d1a      	adds	r2, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58
 8003e92:	e006      	b.n	8003ea2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <DMA_CalcBaseAndBitshift+0x68>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	aaaaaaab 	.word	0xaaaaaaab
 8003eb8:	08009134 	.word	0x08009134
 8003ebc:	fffffc00 	.word	0xfffffc00

08003ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11f      	bne.n	8003f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d856      	bhi.n	8003f8e <DMA_CheckFifoParam+0xce>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x28>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f8f 	.word	0x08003f8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d046      	beq.n	8003f92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e043      	b.n	8003f92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f12:	d140      	bne.n	8003f96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e03d      	b.n	8003f96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f22:	d121      	bne.n	8003f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d837      	bhi.n	8003f9a <DMA_CheckFifoParam+0xda>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <DMA_CheckFifoParam+0x70>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f47 	.word	0x08003f47
 8003f38:	08003f41 	.word	0x08003f41
 8003f3c:	08003f59 	.word	0x08003f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      break;
 8003f44:	e030      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d025      	beq.n	8003f9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f56:	e022      	b.n	8003f9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f60:	d11f      	bne.n	8003fa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f66:	e01c      	b.n	8003fa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d903      	bls.n	8003f76 <DMA_CheckFifoParam+0xb6>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d003      	beq.n	8003f7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f74:	e018      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7a:	e015      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e00b      	b.n	8003fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e00a      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f92:	bf00      	nop
 8003f94:	e008      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e006      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e004      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fa6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d106      	bne.n	8003fe0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f001 b8ff 	b.w	80051de <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8003fea:	2302      	movs	r3, #2
 8003fec:	f001 b8f7 	b.w	80051de <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	f041 80e5 	bne.w	80051d0 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004022:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f001 f910 	bl	8005258 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	4b8d      	ldr	r3, [pc, #564]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d960      	bls.n	8004106 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a8b      	ldr	r2, [pc, #556]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d057      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a8a      	ldr	r2, [pc, #552]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d050      	beq.n	80040fa <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a88      	ldr	r2, [pc, #544]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d049      	beq.n	80040f6 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a87      	ldr	r2, [pc, #540]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d042      	beq.n	80040f2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a85      	ldr	r2, [pc, #532]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03a      	beq.n	80040ec <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a84      	ldr	r2, [pc, #528]	; (800428c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d032      	beq.n	80040e6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a82      	ldr	r2, [pc, #520]	; (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02a      	beq.n	80040e0 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a81      	ldr	r2, [pc, #516]	; (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a7f      	ldr	r2, [pc, #508]	; (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01a      	beq.n	80040d4 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a7e      	ldr	r2, [pc, #504]	; (800429c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d012      	beq.n	80040ce <HAL_DMAEx_MultiBufferStart_IT+0x116>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7c      	ldr	r2, [pc, #496]	; (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00a      	beq.n	80040c8 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a7b      	ldr	r2, [pc, #492]	; (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d102      	bne.n	80040c2 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80040bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040c0:	e01e      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c6:	e01b      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040cc:	e018      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040d2:	e015      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040d8:	e012      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040de:	e00f      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e4:	e00c      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ea:	e009      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f0:	e006      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040f6:	2320      	movs	r3, #32
 80040f8:	e002      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040fa:	2320      	movs	r3, #32
 80040fc:	e000      	b.n	8004100 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040fe:	2320      	movs	r3, #32
 8004100:	4a69      	ldr	r2, [pc, #420]	; (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e14f      	b.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	4b67      	ldr	r3, [pc, #412]	; (80042ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800410e:	429a      	cmp	r2, r3
 8004110:	d960      	bls.n	80041d4 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a58      	ldr	r2, [pc, #352]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d057      	beq.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d050      	beq.n	80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a55      	ldr	r2, [pc, #340]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d049      	beq.n	80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a53      	ldr	r2, [pc, #332]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d042      	beq.n	80041c0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03a      	beq.n	80041ba <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a50      	ldr	r2, [pc, #320]	; (800428c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d032      	beq.n	80041b4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4f      	ldr	r2, [pc, #316]	; (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d02a      	beq.n	80041ae <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01a      	beq.n	80041a2 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d012      	beq.n	800419c <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00a      	beq.n	8004196 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d102      	bne.n	8004190 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800418a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800418e:	e01e      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004194:	e01b      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004196:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800419a:	e018      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800419c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041a0:	e015      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041a6:	e012      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041ac:	e00f      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b2:	e00c      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b8:	e009      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041be:	e006      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c0:	2320      	movs	r3, #32
 80041c2:	e004      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c4:	2320      	movs	r3, #32
 80041c6:	e002      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041c8:	2320      	movs	r3, #32
 80041ca:	e000      	b.n	80041ce <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041cc:	2320      	movs	r3, #32
 80041ce:	4a36      	ldr	r2, [pc, #216]	; (80042a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80041d0:	6093      	str	r3, [r2, #8]
 80041d2:	e0e8      	b.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	f240 8082 	bls.w	80042e6 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d078      	beq.n	80042de <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d071      	beq.n	80042da <HAL_DMAEx_MultiBufferStart_IT+0x322>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d06a      	beq.n	80042d6 <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d063      	beq.n	80042d2 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d05b      	beq.n	80042cc <HAL_DMAEx_MultiBufferStart_IT+0x314>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d053      	beq.n	80042c6 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d04b      	beq.n	80042c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d043      	beq.n	80042ba <HAL_DMAEx_MultiBufferStart_IT+0x302>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03b      	beq.n	80042b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d012      	beq.n	800426c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00a      	beq.n	8004266 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d102      	bne.n	8004260 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800425a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800425e:	e03f      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004264:	e03c      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004266:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800426a:	e039      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800426c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004270:	e036      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004272:	bf00      	nop
 8004274:	40026458 	.word	0x40026458
 8004278:	40026010 	.word	0x40026010
 800427c:	40026410 	.word	0x40026410
 8004280:	40026070 	.word	0x40026070
 8004284:	40026470 	.word	0x40026470
 8004288:	40026028 	.word	0x40026028
 800428c:	40026428 	.word	0x40026428
 8004290:	40026088 	.word	0x40026088
 8004294:	40026488 	.word	0x40026488
 8004298:	40026040 	.word	0x40026040
 800429c:	40026440 	.word	0x40026440
 80042a0:	400260a0 	.word	0x400260a0
 80042a4:	400264a0 	.word	0x400264a0
 80042a8:	40026400 	.word	0x40026400
 80042ac:	400260b8 	.word	0x400260b8
 80042b0:	40026058 	.word	0x40026058
 80042b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042b8:	e012      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042be:	e00f      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042c4:	e00c      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ca:	e009      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042d0:	e006      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042d2:	2320      	movs	r3, #32
 80042d4:	e004      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042d6:	2320      	movs	r3, #32
 80042d8:	e002      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042da:	2320      	movs	r3, #32
 80042dc:	e000      	b.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042de:	2320      	movs	r3, #32
 80042e0:	4a8c      	ldr	r2, [pc, #560]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 80042e2:	60d3      	str	r3, [r2, #12]
 80042e4:	e05f      	b.n	80043a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a8b      	ldr	r2, [pc, #556]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d057      	beq.n	80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a89      	ldr	r2, [pc, #548]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d050      	beq.n	800439c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a88      	ldr	r2, [pc, #544]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d049      	beq.n	8004398 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a86      	ldr	r2, [pc, #536]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d042      	beq.n	8004394 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a85      	ldr	r2, [pc, #532]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d03a      	beq.n	800438e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a83      	ldr	r2, [pc, #524]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d032      	beq.n	8004388 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a82      	ldr	r2, [pc, #520]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d02a      	beq.n	8004382 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7f      	ldr	r2, [pc, #508]	; (8004538 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01a      	beq.n	8004376 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7d      	ldr	r2, [pc, #500]	; (800453c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d012      	beq.n	8004370 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7c      	ldr	r2, [pc, #496]	; (8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00a      	beq.n	800436a <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7a      	ldr	r2, [pc, #488]	; (8004544 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d102      	bne.n	8004364 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 800435e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004362:	e01e      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004368:	e01b      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800436a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800436e:	e018      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004374:	e015      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800437a:	e012      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800437c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004380:	e00f      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004386:	e00c      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800438c:	e009      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800438e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004392:	e006      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004394:	2320      	movs	r3, #32
 8004396:	e004      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004398:	2320      	movs	r3, #32
 800439a:	e002      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800439c:	2320      	movs	r3, #32
 800439e:	e000      	b.n	80043a2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80043a0:	2320      	movs	r3, #32
 80043a2:	4a5c      	ldr	r2, [pc, #368]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 80043a4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	4b66      	ldr	r3, [pc, #408]	; (8004548 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d960      	bls.n	8004474 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d057      	beq.n	800446c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a56      	ldr	r2, [pc, #344]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d050      	beq.n	8004468 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a55      	ldr	r2, [pc, #340]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d049      	beq.n	8004464 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a53      	ldr	r2, [pc, #332]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d042      	beq.n	8004460 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03a      	beq.n	800445a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a50      	ldr	r2, [pc, #320]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d032      	beq.n	8004454 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4f      	ldr	r2, [pc, #316]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d02a      	beq.n	800444e <HAL_DMAEx_MultiBufferStart_IT+0x496>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4d      	ldr	r2, [pc, #308]	; (8004534 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4c      	ldr	r2, [pc, #304]	; (8004538 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01a      	beq.n	8004442 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a4a      	ldr	r2, [pc, #296]	; (800453c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d012      	beq.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x484>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a49      	ldr	r2, [pc, #292]	; (8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00a      	beq.n	8004436 <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a47      	ldr	r2, [pc, #284]	; (8004544 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d102      	bne.n	8004430 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 800442a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800442e:	e01e      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004434:	e01b      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004436:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800443a:	e018      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800443c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004440:	e015      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004442:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004446:	e012      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444c:	e00f      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800444e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004452:	e00c      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004458:	e009      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800445a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445e:	e006      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004460:	2310      	movs	r3, #16
 8004462:	e004      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004464:	2310      	movs	r3, #16
 8004466:	e002      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004468:	2310      	movs	r3, #16
 800446a:	e000      	b.n	800446e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800446c:	2310      	movs	r3, #16
 800446e:	4a37      	ldr	r2, [pc, #220]	; (800454c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004470:	60d3      	str	r3, [r2, #12]
 8004472:	e14f      	b.n	8004714 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800447c:	429a      	cmp	r2, r3
 800447e:	f240 8082 	bls.w	8004586 <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d078      	beq.n	800457e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d071      	beq.n	800457a <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d06a      	beq.n	8004576 <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d063      	beq.n	8004572 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d05b      	beq.n	800456c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d053      	beq.n	8004566 <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04b      	beq.n	8004560 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a19      	ldr	r2, [pc, #100]	; (8004534 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d043      	beq.n	800455a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d03b      	beq.n	8004554 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d012      	beq.n	800450c <HAL_DMAEx_MultiBufferStart_IT+0x554>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00a      	beq.n	8004506 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d102      	bne.n	8004500 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 80044fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044fe:	e03f      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004500:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004504:	e03c      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004506:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800450a:	e039      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800450c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004510:	e036      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004512:	bf00      	nop
 8004514:	40026000 	.word	0x40026000
 8004518:	40026010 	.word	0x40026010
 800451c:	40026410 	.word	0x40026410
 8004520:	40026070 	.word	0x40026070
 8004524:	40026470 	.word	0x40026470
 8004528:	40026028 	.word	0x40026028
 800452c:	40026428 	.word	0x40026428
 8004530:	40026088 	.word	0x40026088
 8004534:	40026488 	.word	0x40026488
 8004538:	40026040 	.word	0x40026040
 800453c:	40026440 	.word	0x40026440
 8004540:	400260a0 	.word	0x400260a0
 8004544:	400264a0 	.word	0x400264a0
 8004548:	40026458 	.word	0x40026458
 800454c:	40026400 	.word	0x40026400
 8004550:	400260b8 	.word	0x400260b8
 8004554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004558:	e012      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800455a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800455e:	e00f      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004564:	e00c      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456a:	e009      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800456c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004570:	e006      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004572:	2310      	movs	r3, #16
 8004574:	e004      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004576:	2310      	movs	r3, #16
 8004578:	e002      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800457a:	2310      	movs	r3, #16
 800457c:	e000      	b.n	8004580 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800457e:	2310      	movs	r3, #16
 8004580:	4a8c      	ldr	r2, [pc, #560]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8004582:	6093      	str	r3, [r2, #8]
 8004584:	e0c6      	b.n	8004714 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 800458e:	429a      	cmp	r2, r3
 8004590:	d960      	bls.n	8004654 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a89      	ldr	r2, [pc, #548]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d057      	beq.n	800464c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d050      	beq.n	8004648 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a86      	ldr	r2, [pc, #536]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d049      	beq.n	8004644 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a84      	ldr	r2, [pc, #528]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d042      	beq.n	8004640 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a83      	ldr	r2, [pc, #524]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d03a      	beq.n	800463a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a81      	ldr	r2, [pc, #516]	; (80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d032      	beq.n	8004634 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a80      	ldr	r2, [pc, #512]	; (80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d02a      	beq.n	800462e <HAL_DMAEx_MultiBufferStart_IT+0x676>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a7e      	ldr	r2, [pc, #504]	; (80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7d      	ldr	r2, [pc, #500]	; (80047dc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01a      	beq.n	8004622 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7b      	ldr	r2, [pc, #492]	; (80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d012      	beq.n	800461c <HAL_DMAEx_MultiBufferStart_IT+0x664>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7a      	ldr	r2, [pc, #488]	; (80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a78      	ldr	r2, [pc, #480]	; (80047e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d102      	bne.n	8004610 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 800460a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800460e:	e01e      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004614:	e01b      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800461a:	e018      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800461c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004620:	e015      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004622:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004626:	e012      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462c:	e00f      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800462e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004632:	e00c      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004638:	e009      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800463a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463e:	e006      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004640:	2310      	movs	r3, #16
 8004642:	e004      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004644:	2310      	movs	r3, #16
 8004646:	e002      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004648:	2310      	movs	r3, #16
 800464a:	e000      	b.n	800464e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800464c:	2310      	movs	r3, #16
 800464e:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004650:	60d3      	str	r3, [r2, #12]
 8004652:	e05f      	b.n	8004714 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a58      	ldr	r2, [pc, #352]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d057      	beq.n	800470e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a57      	ldr	r2, [pc, #348]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d050      	beq.n	800470a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a55      	ldr	r2, [pc, #340]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d049      	beq.n	8004706 <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a54      	ldr	r2, [pc, #336]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d042      	beq.n	8004702 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d03a      	beq.n	80046fc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a51      	ldr	r2, [pc, #324]	; (80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d032      	beq.n	80046f6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a4f      	ldr	r2, [pc, #316]	; (80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d02a      	beq.n	80046f0 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4e      	ldr	r2, [pc, #312]	; (80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_DMAEx_MultiBufferStart_IT+0x732>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01a      	beq.n	80046e4 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d012      	beq.n	80046de <HAL_DMAEx_MultiBufferStart_IT+0x726>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a49      	ldr	r2, [pc, #292]	; (80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00a      	beq.n	80046d8 <HAL_DMAEx_MultiBufferStart_IT+0x720>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a48      	ldr	r2, [pc, #288]	; (80047e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d102      	bne.n	80046d2 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 80046cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046d0:	e01e      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046d6:	e01b      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046dc:	e018      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046e2:	e015      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046e8:	e012      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ee:	e00f      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f4:	e00c      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fa:	e009      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004700:	e006      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004702:	2310      	movs	r3, #16
 8004704:	e004      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004706:	2310      	movs	r3, #16
 8004708:	e002      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800470a:	2310      	movs	r3, #16
 800470c:	e000      	b.n	8004710 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800470e:	2310      	movs	r3, #16
 8004710:	4a36      	ldr	r2, [pc, #216]	; (80047ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004712:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800471c:	429a      	cmp	r2, r3
 800471e:	f240 8082 	bls.w	8004826 <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a25      	ldr	r2, [pc, #148]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d078      	beq.n	800481e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d071      	beq.n	800481a <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d06a      	beq.n	8004816 <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d063      	beq.n	8004812 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d05b      	beq.n	800480c <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d053      	beq.n	8004806 <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d04b      	beq.n	8004800 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d043      	beq.n	80047fa <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d03b      	beq.n	80047f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d012      	beq.n	80047ac <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00a      	beq.n	80047a6 <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d102      	bne.n	80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 800479a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800479e:	e03f      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a4:	e03c      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047aa:	e039      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047b0:	e036      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047b2:	bf00      	nop
 80047b4:	40026400 	.word	0x40026400
 80047b8:	40026058 	.word	0x40026058
 80047bc:	40026010 	.word	0x40026010
 80047c0:	40026410 	.word	0x40026410
 80047c4:	40026070 	.word	0x40026070
 80047c8:	40026470 	.word	0x40026470
 80047cc:	40026028 	.word	0x40026028
 80047d0:	40026428 	.word	0x40026428
 80047d4:	40026088 	.word	0x40026088
 80047d8:	40026488 	.word	0x40026488
 80047dc:	40026040 	.word	0x40026040
 80047e0:	40026440 	.word	0x40026440
 80047e4:	400260a0 	.word	0x400260a0
 80047e8:	400264a0 	.word	0x400264a0
 80047ec:	40026000 	.word	0x40026000
 80047f0:	40026458 	.word	0x40026458
 80047f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047f8:	e012      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047fe:	e00f      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004804:	e00c      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480a:	e009      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800480c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004810:	e006      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004812:	2308      	movs	r3, #8
 8004814:	e004      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004816:	2308      	movs	r3, #8
 8004818:	e002      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800481a:	2308      	movs	r3, #8
 800481c:	e000      	b.n	8004820 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800481e:	2308      	movs	r3, #8
 8004820:	4a8c      	ldr	r2, [pc, #560]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8004822:	60d3      	str	r3, [r2, #12]
 8004824:	e14e      	b.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	4b8a      	ldr	r3, [pc, #552]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 800482e:	429a      	cmp	r2, r3
 8004830:	d960      	bls.n	80048f4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a89      	ldr	r2, [pc, #548]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d057      	beq.n	80048ec <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a87      	ldr	r2, [pc, #540]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d050      	beq.n	80048e8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d049      	beq.n	80048e4 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a84      	ldr	r2, [pc, #528]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d042      	beq.n	80048e0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a83      	ldr	r2, [pc, #524]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d03a      	beq.n	80048da <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a81      	ldr	r2, [pc, #516]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d032      	beq.n	80048d4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a80      	ldr	r2, [pc, #512]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d02a      	beq.n	80048ce <HAL_DMAEx_MultiBufferStart_IT+0x916>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a7e      	ldr	r2, [pc, #504]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d022      	beq.n	80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a7d      	ldr	r2, [pc, #500]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d01a      	beq.n	80048c2 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a7b      	ldr	r2, [pc, #492]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d012      	beq.n	80048bc <HAL_DMAEx_MultiBufferStart_IT+0x904>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a7a      	ldr	r2, [pc, #488]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00a      	beq.n	80048b6 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a78      	ldr	r2, [pc, #480]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d102      	bne.n	80048b0 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 80048aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048ae:	e01e      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b4:	e01b      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048ba:	e018      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c0:	e015      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c6:	e012      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048cc:	e00f      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d2:	e00c      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d8:	e009      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048de:	e006      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048e0:	2308      	movs	r3, #8
 80048e2:	e004      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048e4:	2308      	movs	r3, #8
 80048e6:	e002      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048e8:	2308      	movs	r3, #8
 80048ea:	e000      	b.n	80048ee <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048ec:	2308      	movs	r3, #8
 80048ee:	4a59      	ldr	r2, [pc, #356]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 80048f0:	6093      	str	r3, [r2, #8]
 80048f2:	e0e7      	b.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b64      	ldr	r3, [pc, #400]	; (8004a8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d960      	bls.n	80049c2 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a55      	ldr	r2, [pc, #340]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d057      	beq.n	80049ba <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d050      	beq.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d049      	beq.n	80049b2 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a51      	ldr	r2, [pc, #324]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d042      	beq.n	80049ae <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a4f      	ldr	r2, [pc, #316]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d03a      	beq.n	80049a8 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4e      	ldr	r2, [pc, #312]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d032      	beq.n	80049a2 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4c      	ldr	r2, [pc, #304]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02a      	beq.n	800499c <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a4b      	ldr	r2, [pc, #300]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a49      	ldr	r2, [pc, #292]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01a      	beq.n	8004990 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a48      	ldr	r2, [pc, #288]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d012      	beq.n	800498a <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a46      	ldr	r2, [pc, #280]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00a      	beq.n	8004984 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a45      	ldr	r2, [pc, #276]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d102      	bne.n	800497e <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 8004978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800497c:	e01e      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800497e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004982:	e01b      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004984:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004988:	e018      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800498a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800498e:	e015      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004994:	e012      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499a:	e00f      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800499c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a0:	e00c      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a6:	e009      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049ac:	e006      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049ae:	2308      	movs	r3, #8
 80049b0:	e004      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049b2:	2308      	movs	r3, #8
 80049b4:	e002      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049b6:	2308      	movs	r3, #8
 80049b8:	e000      	b.n	80049bc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80049ba:	2308      	movs	r3, #8
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e080      	b.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d078      	beq.n	8004abe <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d071      	beq.n	8004aba <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d06a      	beq.n	8004ab6 <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d063      	beq.n	8004ab2 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1f      	ldr	r2, [pc, #124]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d05b      	beq.n	8004aac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d053      	beq.n	8004aa6 <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04b      	beq.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d043      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d012      	beq.n	8004a4c <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00a      	beq.n	8004a46 <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d102      	bne.n	8004a40 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 8004a3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a3e:	e03f      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a44:	e03c      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a4a:	e039      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a50:	e036      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a52:	bf00      	nop
 8004a54:	40026400 	.word	0x40026400
 8004a58:	400260b8 	.word	0x400260b8
 8004a5c:	40026010 	.word	0x40026010
 8004a60:	40026410 	.word	0x40026410
 8004a64:	40026070 	.word	0x40026070
 8004a68:	40026470 	.word	0x40026470
 8004a6c:	40026028 	.word	0x40026028
 8004a70:	40026428 	.word	0x40026428
 8004a74:	40026088 	.word	0x40026088
 8004a78:	40026488 	.word	0x40026488
 8004a7c:	40026040 	.word	0x40026040
 8004a80:	40026440 	.word	0x40026440
 8004a84:	400260a0 	.word	0x400260a0
 8004a88:	400264a0 	.word	0x400264a0
 8004a8c:	40026058 	.word	0x40026058
 8004a90:	40026000 	.word	0x40026000
 8004a94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a98:	e012      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9e:	e00f      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa4:	e00c      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aaa:	e009      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ab0:	e006      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	e004      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	e002      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e000      	b.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8004ac2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d960      	bls.n	8004b92 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a87      	ldr	r2, [pc, #540]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d057      	beq.n	8004b8a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a86      	ldr	r2, [pc, #536]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d050      	beq.n	8004b86 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a84      	ldr	r2, [pc, #528]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d049      	beq.n	8004b82 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a83      	ldr	r2, [pc, #524]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d042      	beq.n	8004b7e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d03a      	beq.n	8004b78 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d032      	beq.n	8004b72 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a7e      	ldr	r2, [pc, #504]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d02a      	beq.n	8004b6c <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7d      	ldr	r2, [pc, #500]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d022      	beq.n	8004b66 <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7b      	ldr	r2, [pc, #492]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01a      	beq.n	8004b60 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d012      	beq.n	8004b5a <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a78      	ldr	r2, [pc, #480]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00a      	beq.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a77      	ldr	r2, [pc, #476]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d102      	bne.n	8004b4e <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8004b48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b4c:	e01e      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b52:	e01b      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b58:	e018      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b5e:	e015      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b64:	e012      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6a:	e00f      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b70:	e00c      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b76:	e009      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7c:	e006      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b7e:	2304      	movs	r3, #4
 8004b80:	e004      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b82:	2304      	movs	r3, #4
 8004b84:	e002      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e000      	b.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004b8e:	60d3      	str	r3, [r2, #12]
 8004b90:	e150      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d960      	bls.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a54      	ldr	r2, [pc, #336]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d057      	beq.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d050      	beq.n	8004c54 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a51      	ldr	r2, [pc, #324]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d049      	beq.n	8004c50 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d042      	beq.n	8004c4c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a4e      	ldr	r2, [pc, #312]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d03a      	beq.n	8004c46 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a4c      	ldr	r2, [pc, #304]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d032      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d02a      	beq.n	8004c3a <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a49      	ldr	r2, [pc, #292]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d022      	beq.n	8004c34 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a48      	ldr	r2, [pc, #288]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01a      	beq.n	8004c2e <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d012      	beq.n	8004c28 <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00a      	beq.n	8004c22 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a43      	ldr	r2, [pc, #268]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d102      	bne.n	8004c1c <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8004c16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c1a:	e01e      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c20:	e01b      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c26:	e018      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c2c:	e015      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c32:	e012      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c38:	e00f      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3e:	e00c      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c44:	e009      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4a:	e006      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	e004      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e002      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c54:	2304      	movs	r3, #4
 8004c56:	e000      	b.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	4a32      	ldr	r2, [pc, #200]	; (8004d24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004c5c:	6093      	str	r3, [r2, #8]
 8004c5e:	e0e9      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f240 8083 	bls.w	8004d74 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d079      	beq.n	8004d6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d072      	beq.n	8004d68 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d06b      	beq.n	8004d64 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d064      	beq.n	8004d60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d05c      	beq.n	8004d5a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d054      	beq.n	8004d54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d04c      	beq.n	8004d4e <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d044      	beq.n	8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d03c      	beq.n	8004d42 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d034      	beq.n	8004d3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d124      	bne.n	8004d30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8004ce6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cea:	e040      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004cec:	40026000 	.word	0x40026000
 8004cf0:	40026458 	.word	0x40026458
 8004cf4:	40026010 	.word	0x40026010
 8004cf8:	40026410 	.word	0x40026410
 8004cfc:	40026070 	.word	0x40026070
 8004d00:	40026470 	.word	0x40026470
 8004d04:	40026028 	.word	0x40026028
 8004d08:	40026428 	.word	0x40026428
 8004d0c:	40026088 	.word	0x40026088
 8004d10:	40026488 	.word	0x40026488
 8004d14:	40026040 	.word	0x40026040
 8004d18:	40026440 	.word	0x40026440
 8004d1c:	400260a0 	.word	0x400260a0
 8004d20:	400264a0 	.word	0x400264a0
 8004d24:	40026400 	.word	0x40026400
 8004d28:	400260b8 	.word	0x400260b8
 8004d2c:	40026058 	.word	0x40026058
 8004d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d34:	e01b      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d3a:	e018      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d40:	e015      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d46:	e012      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4c:	e00f      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d52:	e00c      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d58:	e009      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5e:	e006      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d60:	2304      	movs	r3, #4
 8004d62:	e004      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d64:	2304      	movs	r3, #4
 8004d66:	e002      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	e000      	b.n	8004d6e <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	4a8b      	ldr	r2, [pc, #556]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8004d70:	60d3      	str	r3, [r2, #12]
 8004d72:	e05f      	b.n	8004e34 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a89      	ldr	r2, [pc, #548]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d057      	beq.n	8004e2e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a88      	ldr	r2, [pc, #544]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d050      	beq.n	8004e2a <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a86      	ldr	r2, [pc, #536]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d049      	beq.n	8004e26 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a85      	ldr	r2, [pc, #532]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d042      	beq.n	8004e22 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a83      	ldr	r2, [pc, #524]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d03a      	beq.n	8004e1c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a82      	ldr	r2, [pc, #520]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d032      	beq.n	8004e16 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a80      	ldr	r2, [pc, #512]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02a      	beq.n	8004e10 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7f      	ldr	r2, [pc, #508]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a7d      	ldr	r2, [pc, #500]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01a      	beq.n	8004e04 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7c      	ldr	r2, [pc, #496]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d012      	beq.n	8004dfe <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a7a      	ldr	r2, [pc, #488]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00a      	beq.n	8004df8 <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a79      	ldr	r2, [pc, #484]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d102      	bne.n	8004df2 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 8004dec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004df0:	e01e      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df6:	e01b      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dfc:	e018      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004dfe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e02:	e015      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e08:	e012      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0e:	e00f      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e14:	e00c      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e1a:	e009      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e20:	e006      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e22:	2304      	movs	r3, #4
 8004e24:	e004      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e26:	2304      	movs	r3, #4
 8004e28:	e002      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e000      	b.n	8004e30 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	4a5a      	ldr	r2, [pc, #360]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8004e32:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d95c      	bls.n	8004efa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a56      	ldr	r2, [pc, #344]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d053      	beq.n	8004ef2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a55      	ldr	r2, [pc, #340]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04c      	beq.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a53      	ldr	r2, [pc, #332]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d045      	beq.n	8004eea <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a52      	ldr	r2, [pc, #328]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03e      	beq.n	8004ee6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a50      	ldr	r2, [pc, #320]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d037      	beq.n	8004ee2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4f      	ldr	r2, [pc, #316]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d030      	beq.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a4d      	ldr	r2, [pc, #308]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d029      	beq.n	8004eda <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4c      	ldr	r2, [pc, #304]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a4a      	ldr	r2, [pc, #296]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01a      	beq.n	8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a49      	ldr	r2, [pc, #292]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d012      	beq.n	8004eca <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a47      	ldr	r2, [pc, #284]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00a      	beq.n	8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a46      	ldr	r2, [pc, #280]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d102      	bne.n	8004ebe <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 8004eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ebc:	e01a      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ec2:	e017      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ec8:	e014      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ece:	e011      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ed4:	e00e      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	e00c      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	e00a      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ede:	2340      	movs	r3, #64	; 0x40
 8004ee0:	e008      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	e006      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e004      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e002      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004ef6:	60d3      	str	r3, [r2, #12]
 8004ef8:	e141      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d97c      	bls.n	8005000 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d073      	beq.n	8004ff8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d06c      	beq.n	8004ff4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d065      	beq.n	8004ff0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d05e      	beq.n	8004fec <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d057      	beq.n	8004fe8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d050      	beq.n	8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d049      	beq.n	8004fe0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d042      	beq.n	8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01a      	beq.n	8004f96 <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d012      	beq.n	8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00a      	beq.n	8004f8a <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d102      	bne.n	8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 8004f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f82:	e03a      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f88:	e037      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f8e:	e034      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f94:	e031      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f9a:	e02e      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f9c:	40026000 	.word	0x40026000
 8004fa0:	40026010 	.word	0x40026010
 8004fa4:	40026410 	.word	0x40026410
 8004fa8:	40026070 	.word	0x40026070
 8004fac:	40026470 	.word	0x40026470
 8004fb0:	40026028 	.word	0x40026028
 8004fb4:	40026428 	.word	0x40026428
 8004fb8:	40026088 	.word	0x40026088
 8004fbc:	40026488 	.word	0x40026488
 8004fc0:	40026040 	.word	0x40026040
 8004fc4:	40026440 	.word	0x40026440
 8004fc8:	400260a0 	.word	0x400260a0
 8004fcc:	400264a0 	.word	0x400264a0
 8004fd0:	40026458 	.word	0x40026458
 8004fd4:	40026400 	.word	0x40026400
 8004fd8:	400260b8 	.word	0x400260b8
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	e00c      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fe0:	2340      	movs	r3, #64	; 0x40
 8004fe2:	e00a      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	e008      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	e006      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e004      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e002      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4a7b      	ldr	r2, [pc, #492]	; (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 8004ffc:	6093      	str	r3, [r2, #8]
 8004ffe:	e0be      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	4b79      	ldr	r3, [pc, #484]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8005008:	429a      	cmp	r2, r3
 800500a:	d95c      	bls.n	80050c6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a77      	ldr	r2, [pc, #476]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d053      	beq.n	80050be <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a76      	ldr	r2, [pc, #472]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04c      	beq.n	80050ba <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a74      	ldr	r2, [pc, #464]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d03e      	beq.n	80050b2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a71      	ldr	r2, [pc, #452]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d037      	beq.n	80050ae <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a70      	ldr	r2, [pc, #448]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d030      	beq.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d029      	beq.n	80050a6 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a6d      	ldr	r2, [pc, #436]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d022      	beq.n	80050a2 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6b      	ldr	r2, [pc, #428]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01a      	beq.n	800509c <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6a      	ldr	r2, [pc, #424]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d012      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a68      	ldr	r2, [pc, #416]	; (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00a      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a67      	ldr	r2, [pc, #412]	; (800521c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d102      	bne.n	800508a <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 8005084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005088:	e01a      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800508a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800508e:	e017      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005094:	e014      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800509a:	e011      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800509c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050a0:	e00e      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050a2:	2340      	movs	r3, #64	; 0x40
 80050a4:	e00c      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	e00a      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	e008      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050ae:	2340      	movs	r3, #64	; 0x40
 80050b0:	e006      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e004      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e002      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050be:	2301      	movs	r3, #1
 80050c0:	4a57      	ldr	r2, [pc, #348]	; (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e05b      	b.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a49      	ldr	r2, [pc, #292]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d053      	beq.n	8005178 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a47      	ldr	r2, [pc, #284]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d04c      	beq.n	8005174 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a46      	ldr	r2, [pc, #280]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d045      	beq.n	8005170 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a44      	ldr	r2, [pc, #272]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d03e      	beq.n	800516c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a43      	ldr	r2, [pc, #268]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d037      	beq.n	8005168 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a41      	ldr	r2, [pc, #260]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d030      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a40      	ldr	r2, [pc, #256]	; (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d029      	beq.n	8005160 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3e      	ldr	r2, [pc, #248]	; (800520c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d022      	beq.n	800515c <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d01a      	beq.n	8005156 <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d012      	beq.n	8005150 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00a      	beq.n	800514a <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a38      	ldr	r2, [pc, #224]	; (800521c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d102      	bne.n	8005144 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 800513e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005142:	e01a      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005148:	e017      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800514a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800514e:	e014      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005154:	e011      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800515a:	e00e      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	e00c      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	e00a      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	e008      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	e006      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800516c:	2301      	movs	r3, #1
 800516e:	e004      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005170:	2301      	movs	r3, #1
 8005172:	e002      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005178:	2301      	movs	r3, #1
 800517a:	4a29      	ldr	r2, [pc, #164]	; (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800517c:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0216 	orr.w	r2, r2, #22
 800518c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800519c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0208 	orr.w	r2, r2, #8
 80051bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e005      	b.n	80051dc <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
 80051da:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	40026400 	.word	0x40026400
 80051ec:	40026058 	.word	0x40026058
 80051f0:	40026010 	.word	0x40026010
 80051f4:	40026410 	.word	0x40026410
 80051f8:	40026070 	.word	0x40026070
 80051fc:	40026470 	.word	0x40026470
 8005200:	40026028 	.word	0x40026028
 8005204:	40026428 	.word	0x40026428
 8005208:	40026088 	.word	0x40026088
 800520c:	40026488 	.word	0x40026488
 8005210:	40026040 	.word	0x40026040
 8005214:	40026440 	.word	0x40026440
 8005218:	400260a0 	.word	0x400260a0
 800521c:	400264a0 	.word	0x400264a0
 8005220:	40026000 	.word	0x40026000

08005224 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e003      	b.n	800524a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d108      	bne.n	8005288 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005286:	e007      	b.n	8005298 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e175      	b.n	80055b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052c4:	2201      	movs	r2, #1
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4013      	ands	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	f040 8164 	bne.w	80055aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d005      	beq.n	80052fa <HAL_GPIO_Init+0x56>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d130      	bne.n	800535c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	2203      	movs	r2, #3
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005330:	2201      	movs	r2, #1
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 0201 	and.w	r2, r3, #1
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b03      	cmp	r3, #3
 8005366:	d017      	beq.n	8005398 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	2203      	movs	r2, #3
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d123      	bne.n	80053ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	08da      	lsrs	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3208      	adds	r2, #8
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	220f      	movs	r2, #15
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	08da      	lsrs	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3208      	adds	r2, #8
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2203      	movs	r2, #3
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80be 	beq.w	80055aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542e:	4b66      	ldr	r3, [pc, #408]	; (80055c8 <HAL_GPIO_Init+0x324>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a65      	ldr	r2, [pc, #404]	; (80055c8 <HAL_GPIO_Init+0x324>)
 8005434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_GPIO_Init+0x324>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005446:	4a61      	ldr	r2, [pc, #388]	; (80055cc <HAL_GPIO_Init+0x328>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a58      	ldr	r2, [pc, #352]	; (80055d0 <HAL_GPIO_Init+0x32c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d037      	beq.n	80054e2 <HAL_GPIO_Init+0x23e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a57      	ldr	r2, [pc, #348]	; (80055d4 <HAL_GPIO_Init+0x330>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_GPIO_Init+0x23a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a56      	ldr	r2, [pc, #344]	; (80055d8 <HAL_GPIO_Init+0x334>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02b      	beq.n	80054da <HAL_GPIO_Init+0x236>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a55      	ldr	r2, [pc, #340]	; (80055dc <HAL_GPIO_Init+0x338>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d025      	beq.n	80054d6 <HAL_GPIO_Init+0x232>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a54      	ldr	r2, [pc, #336]	; (80055e0 <HAL_GPIO_Init+0x33c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01f      	beq.n	80054d2 <HAL_GPIO_Init+0x22e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a53      	ldr	r2, [pc, #332]	; (80055e4 <HAL_GPIO_Init+0x340>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <HAL_GPIO_Init+0x22a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_GPIO_Init+0x344>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_GPIO_Init+0x226>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a51      	ldr	r2, [pc, #324]	; (80055ec <HAL_GPIO_Init+0x348>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00d      	beq.n	80054c6 <HAL_GPIO_Init+0x222>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a50      	ldr	r2, [pc, #320]	; (80055f0 <HAL_GPIO_Init+0x34c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <HAL_GPIO_Init+0x21e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4f      	ldr	r2, [pc, #316]	; (80055f4 <HAL_GPIO_Init+0x350>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_GPIO_Init+0x21a>
 80054ba:	2309      	movs	r3, #9
 80054bc:	e012      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054be:	230a      	movs	r3, #10
 80054c0:	e010      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c2:	2308      	movs	r3, #8
 80054c4:	e00e      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c6:	2307      	movs	r3, #7
 80054c8:	e00c      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ca:	2306      	movs	r3, #6
 80054cc:	e00a      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ce:	2305      	movs	r3, #5
 80054d0:	e008      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054e2:	2300      	movs	r3, #0
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f002 0203 	and.w	r2, r2, #3
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	4093      	lsls	r3, r2
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054f4:	4935      	ldr	r1, [pc, #212]	; (80055cc <HAL_GPIO_Init+0x328>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	3302      	adds	r3, #2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005502:	4b3d      	ldr	r3, [pc, #244]	; (80055f8 <HAL_GPIO_Init+0x354>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005526:	4a34      	ldr	r2, [pc, #208]	; (80055f8 <HAL_GPIO_Init+0x354>)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <HAL_GPIO_Init+0x354>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	43db      	mvns	r3, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4013      	ands	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005550:	4a29      	ldr	r2, [pc, #164]	; (80055f8 <HAL_GPIO_Init+0x354>)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_GPIO_Init+0x354>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_GPIO_Init+0x354>)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <HAL_GPIO_Init+0x354>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <HAL_GPIO_Init+0x354>)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	f67f ae86 	bls.w	80052c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40013800 	.word	0x40013800
 80055d0:	40020000 	.word	0x40020000
 80055d4:	40020400 	.word	0x40020400
 80055d8:	40020800 	.word	0x40020800
 80055dc:	40020c00 	.word	0x40020c00
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40021400 	.word	0x40021400
 80055e8:	40021800 	.word	0x40021800
 80055ec:	40021c00 	.word	0x40021c00
 80055f0:	40022000 	.word	0x40022000
 80055f4:	40022400 	.word	0x40022400
 80055f8:	40013c00 	.word	0x40013c00

080055fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	807b      	strh	r3, [r7, #2]
 8005608:	4613      	mov	r3, r2
 800560a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800560c:	787b      	ldrb	r3, [r7, #1]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005612:	887a      	ldrh	r2, [r7, #2]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005618:	e003      	b.n	8005622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800561a:	887b      	ldrh	r3, [r7, #2]
 800561c:	041a      	lsls	r2, r3, #16
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	619a      	str	r2, [r3, #24]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e07f      	b.n	8005742 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fd fa2c 	bl	8002ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005680:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005690:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d107      	bne.n	80056aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	e006      	b.n	80056b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d104      	bne.n	80056ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_I2C_Init+0x11c>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	02008000 	.word	0x02008000

08005750 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b20      	cmp	r3, #32
 8005774:	f040 80f9 	bne.w	800596a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_I2C_Mem_Write+0x34>
 800577e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0ed      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_I2C_Mem_Write+0x4e>
 800579a:	2302      	movs	r3, #2
 800579c:	e0e6      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a6:	f7fd fc47 	bl	8003038 <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	2319      	movs	r3, #25
 80057b2:	2201      	movs	r2, #1
 80057b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fac3 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0d1      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2240      	movs	r2, #64	; 0x40
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057f0:	88f8      	ldrh	r0, [r7, #6]
 80057f2:	893a      	ldrh	r2, [r7, #8]
 80057f4:	8979      	ldrh	r1, [r7, #10]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	4603      	mov	r3, r0
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f9d3 	bl	8005bac <I2C_RequestMemoryWrite>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0a9      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2bff      	cmp	r3, #255	; 0xff
 8005820:	d90e      	bls.n	8005840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	b2da      	uxtb	r2, r3
 800582e:	8979      	ldrh	r1, [r7, #10]
 8005830:	2300      	movs	r3, #0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fc2b 	bl	8006094 <I2C_TransferConfig>
 800583e:	e00f      	b.n	8005860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	b2da      	uxtb	r2, r3
 8005850:	8979      	ldrh	r1, [r7, #10]
 8005852:	2300      	movs	r3, #0
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fc1a 	bl	8006094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 faad 	bl	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e07b      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d034      	beq.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d130      	bne.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	2200      	movs	r2, #0
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa3f 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04d      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2bff      	cmp	r3, #255	; 0xff
 80058d8:	d90e      	bls.n	80058f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fbcf 	bl	8006094 <I2C_TransferConfig>
 80058f6:	e00f      	b.n	8005918 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	b2da      	uxtb	r2, r3
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fbbe 	bl	8006094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d19e      	bne.n	8005860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fa8c 	bl	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e01a      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2220      	movs	r2, #32
 800593c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <HAL_I2C_Mem_Write+0x224>)
 800594a:	400b      	ands	r3, r1
 800594c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e000      	b.n	800596c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	fe00e800 	.word	0xfe00e800

08005978 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	817b      	strh	r3, [r7, #10]
 800598a:	460b      	mov	r3, r1
 800598c:	813b      	strh	r3, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	f040 80fd 	bne.w	8005b9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_I2C_Mem_Read+0x34>
 80059a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0f1      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_I2C_Mem_Read+0x4e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ea      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059ce:	f7fd fb33 	bl	8003038 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2319      	movs	r3, #25
 80059da:	2201      	movs	r2, #1
 80059dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f9af 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0d5      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2222      	movs	r2, #34	; 0x22
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a18:	88f8      	ldrh	r0, [r7, #6]
 8005a1a:	893a      	ldrh	r2, [r7, #8]
 8005a1c:	8979      	ldrh	r1, [r7, #10]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	4603      	mov	r3, r0
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f913 	bl	8005c54 <I2C_RequestMemoryRead>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0ad      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2bff      	cmp	r3, #255	; 0xff
 8005a48:	d90e      	bls.n	8005a68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	4b52      	ldr	r3, [pc, #328]	; (8005ba4 <HAL_I2C_Mem_Read+0x22c>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fb17 	bl	8006094 <I2C_TransferConfig>
 8005a66:	e00f      	b.n	8005a88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	8979      	ldrh	r1, [r7, #10]
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ba4 <HAL_I2C_Mem_Read+0x22c>)
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb06 	bl	8006094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2104      	movs	r1, #4
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f956 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e07c      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d034      	beq.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d130      	bne.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f927 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04d      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d90e      	bls.n	8005b28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	8979      	ldrh	r1, [r7, #10]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fab7 	bl	8006094 <I2C_TransferConfig>
 8005b26:	e00f      	b.n	8005b48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 faa6 	bl	8006094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d19a      	bne.n	8005a88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f974 	bl	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01a      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_I2C_Mem_Read+0x230>)
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	80002400 	.word	0x80002400
 8005ba8:	fe00e800 	.word	0xfe00e800

08005bac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	8979      	ldrh	r1, [r7, #10]
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <I2C_RequestMemoryWrite+0xa4>)
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa5d 	bl	8006094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f8f0 	bl	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e02c      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
 8005bfe:	e015      	b.n	8005c2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	69b9      	ldr	r1, [r7, #24]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8d6 	bl	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e012      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c22:	893b      	ldrh	r3, [r7, #8]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f884 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	80002000 	.word	0x80002000

08005c54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	460b      	mov	r3, r1
 8005c68:	813b      	strh	r3, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <I2C_RequestMemoryRead+0xa4>)
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fa0a 	bl	8006094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	69b9      	ldr	r1, [r7, #24]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f89d 	bl	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e02c      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d105      	bne.n	8005ca6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ca4:	e015      	b.n	8005cd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	69b9      	ldr	r1, [r7, #24]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f883 	bl	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e012      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc8:	893b      	ldrh	r3, [r7, #8]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2140      	movs	r1, #64	; 0x40
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f831 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	80002000 	.word	0x80002000

08005cfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d103      	bne.n	8005d1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d007      	beq.n	8005d38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	619a      	str	r2, [r3, #24]
  }
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d54:	e022      	b.n	8005d9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d01e      	beq.n	8005d9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fd f96b 	bl	8003038 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d113      	bne.n	8005d9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e00f      	b.n	8005dbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d0cd      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dd0:	e02c      	b.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f870 	bl	8005ebc <I2C_IsErrorOccurred>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e02a      	b.n	8005e3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d01e      	beq.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dee:	f7fd f923 	bl	8003038 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d302      	bcc.n	8005e04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d113      	bne.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e007      	b.n	8005e3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d1cb      	bne.n	8005dd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e50:	e028      	b.n	8005ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f830 	bl	8005ebc <I2C_IsErrorOccurred>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e026      	b.n	8005eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e66:	f7fd f8e7 	bl	8003038 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d302      	bcc.n	8005e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d113      	bne.n	8005ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e007      	b.n	8005eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d1cf      	bne.n	8005e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d075      	beq.n	8005fd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2210      	movs	r2, #16
 8005eee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ef0:	e056      	b.n	8005fa0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d052      	beq.n	8005fa0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fd f89d 	bl	8003038 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_IsErrorOccurred+0x54>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d147      	bne.n	8005fa0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f32:	d12e      	bne.n	8005f92 <I2C_IsErrorOccurred+0xd6>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3a:	d02a      	beq.n	8005f92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d027      	beq.n	8005f92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f50:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f52:	f7fd f871 	bl	8003038 <HAL_GetTick>
 8005f56:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f58:	e01b      	b.n	8005f92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f5a:	f7fd f86d 	bl	8003038 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b19      	cmp	r3, #25
 8005f66:	d914      	bls.n	8005f92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d1dc      	bne.n	8005f5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d003      	beq.n	8005fb6 <I2C_IsErrorOccurred+0xfa>
 8005fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d09d      	beq.n	8005ef2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f043 0308 	orr.w	r3, r3, #8
 800600e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800603a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01c      	beq.n	8006084 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fe56 	bl	8005cfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <I2C_IsErrorOccurred+0x1d4>)
 800605c:	400b      	ands	r3, r1
 800605e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	431a      	orrs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	fe00e800 	.word	0xfe00e800

08006094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	817b      	strh	r3, [r7, #10]
 80060a2:	4613      	mov	r3, r2
 80060a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060a6:	897b      	ldrh	r3, [r7, #10]
 80060a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060ac:	7a7b      	ldrb	r3, [r7, #9]
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	4313      	orrs	r3, r2
 80060be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	0d5b      	lsrs	r3, r3, #21
 80060ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <I2C_TransferConfig+0x60>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	43db      	mvns	r3, r3
 80060d8:	ea02 0103 	and.w	r1, r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	03ff63ff 	.word	0x03ff63ff

080060f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d138      	bne.n	8006180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006118:	2302      	movs	r3, #2
 800611a:	e032      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800614a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d139      	bne.n	8006218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e033      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2224      	movs	r2, #36	; 0x24
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006228:	b08f      	sub	sp, #60	; 0x3c
 800622a:	af0a      	add	r7, sp, #40	; 0x28
 800622c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e116      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fc fd50 	bl	8002cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2203      	movs	r2, #3
 800625c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f002 f9d2 	bl	8008620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	687e      	ldr	r6, [r7, #4]
 8006284:	466d      	mov	r5, sp
 8006286:	f106 0410 	add.w	r4, r6, #16
 800628a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800628c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006296:	e885 0003 	stmia.w	r5, {r0, r1}
 800629a:	1d33      	adds	r3, r6, #4
 800629c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629e:	6838      	ldr	r0, [r7, #0]
 80062a0:	f002 f966 	bl	8008570 <USB_CoreInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0d7      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 f9c0 	bl	8008642 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e04a      	b.n	800635e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	333d      	adds	r3, #61	; 0x3d
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	7bfa      	ldrb	r2, [r7, #15]
 80062ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062f0:	7bfa      	ldrb	r2, [r7, #15]
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	b298      	uxth	r0, r3
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3342      	adds	r3, #66	; 0x42
 8006304:	4602      	mov	r2, r0
 8006306:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006308:	7bfa      	ldrb	r2, [r7, #15]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	333f      	adds	r3, #63	; 0x3f
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	3344      	adds	r3, #68	; 0x44
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006330:	7bfa      	ldrb	r2, [r7, #15]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3348      	adds	r3, #72	; 0x48
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3350      	adds	r3, #80	; 0x50
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	3301      	adds	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d3af      	bcc.n	80062c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e044      	b.n	80063f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	3301      	adds	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d3b5      	bcc.n	800636e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	687e      	ldr	r6, [r7, #4]
 800640a:	466d      	mov	r5, sp
 800640c:	f106 0410 	add.w	r4, r6, #16
 8006410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800641c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006420:	1d33      	adds	r3, r6, #4
 8006422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	f002 f959 	bl	80086dc <USB_DevInit>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e014      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	d102      	bne.n	800645a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f80b 	bl	8006470 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f002 fb13 	bl	8008a8a <USB_DevDisconnect>

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006470 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	10000003 	.word	0x10000003

080064b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	6013      	str	r3, [r2, #0]
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40007000 	.word	0x40007000

080064d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ec:	6413      	str	r3, [r2, #64]	; 0x40
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <HAL_PWREx_EnableOverDrive+0x98>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064fa:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006506:	f7fc fd97 	bl	8003038 <HAL_GetTick>
 800650a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800650c:	e009      	b.n	8006522 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800650e:	f7fc fd93 	bl	8003038 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651c:	d901      	bls.n	8006522 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e022      	b.n	8006568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d1ee      	bne.n	800650e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800653c:	f7fc fd7c 	bl	8003038 <HAL_GetTick>
 8006540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006542:	e009      	b.n	8006558 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006544:	f7fc fd78 	bl	8003038 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006552:	d901      	bls.n	8006558 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e007      	b.n	8006568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_PWREx_EnableOverDrive+0x9c>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006564:	d1ee      	bne.n	8006544 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	40007000 	.word	0x40007000

08006578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e29b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8087 	beq.w	80066aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800659c:	4b96      	ldr	r3, [pc, #600]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d00c      	beq.n	80065c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a8:	4b93      	ldr	r3, [pc, #588]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d112      	bne.n	80065da <HAL_RCC_OscConfig+0x62>
 80065b4:	4b90      	ldr	r3, [pc, #576]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c0:	d10b      	bne.n	80065da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d06c      	beq.n	80066a8 <HAL_RCC_OscConfig+0x130>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d168      	bne.n	80066a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e275      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d106      	bne.n	80065f2 <HAL_RCC_OscConfig+0x7a>
 80065e4:	4b84      	ldr	r3, [pc, #528]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a83      	ldr	r2, [pc, #524]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e02e      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x9c>
 80065fa:	4b7f      	ldr	r3, [pc, #508]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7e      	ldr	r2, [pc, #504]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b7c      	ldr	r3, [pc, #496]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7b      	ldr	r2, [pc, #492]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800660c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e01d      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0xc0>
 800661e:	4b76      	ldr	r3, [pc, #472]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a75      	ldr	r2, [pc, #468]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b73      	ldr	r3, [pc, #460]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a72      	ldr	r2, [pc, #456]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0xd8>
 8006638:	4b6f      	ldr	r3, [pc, #444]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6e      	ldr	r2, [pc, #440]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b6c      	ldr	r3, [pc, #432]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800664a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fc fcee 	bl	8003038 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fc fcea 	bl	8003038 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e229      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b61      	ldr	r3, [pc, #388]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0xe8>
 800667e:	e014      	b.n	80066aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006680:	f7fc fcda 	bl	8003038 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006688:	f7fc fcd6 	bl	8003038 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b64      	cmp	r3, #100	; 0x64
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e215      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	4b57      	ldr	r3, [pc, #348]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x110>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d069      	beq.n	800678a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066b6:	4b50      	ldr	r3, [pc, #320]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c2:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d11c      	bne.n	8006708 <HAL_RCC_OscConfig+0x190>
 80066ce:	4b4a      	ldr	r3, [pc, #296]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCC_OscConfig+0x17a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e1e9      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	4b41      	ldr	r3, [pc, #260]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	493d      	ldr	r1, [pc, #244]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006706:	e040      	b.n	800678a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d023      	beq.n	8006758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006710:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc fc8c 	bl	8003038 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006724:	f7fc fc88 	bl	8003038 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e1c7      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006736:	4b30      	ldr	r3, [pc, #192]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006742:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4929      	ldr	r1, [pc, #164]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]
 8006756:	e018      	b.n	800678a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fc fc68 	bl	8003038 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fc fc64 	bl	8003038 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e1a3      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d038      	beq.n	8006808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d019      	beq.n	80067d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fc fc45 	bl	8003038 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fc fc41 	bl	8003038 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e180      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x23a>
 80067d0:	e01a      	b.n	8006808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d6:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <HAL_RCC_OscConfig+0x280>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fc fc2b 	bl	8003038 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e6:	f7fc fc27 	bl	8003038 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d903      	bls.n	80067fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e166      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
 80067f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	4b92      	ldr	r3, [pc, #584]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ee      	bne.n	80067e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80a4 	beq.w	800695e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b89      	ldr	r3, [pc, #548]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	4a88      	ldr	r2, [pc, #544]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6413      	str	r3, [r2, #64]	; 0x40
 800682e:	4b86      	ldr	r3, [pc, #536]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683a:	2301      	movs	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800683e:	4b83      	ldr	r3, [pc, #524]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d118      	bne.n	800687c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800684a:	4b80      	ldr	r3, [pc, #512]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7f      	ldr	r2, [pc, #508]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006856:	f7fc fbef 	bl	8003038 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685e:	f7fc fbeb 	bl	8003038 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b64      	cmp	r3, #100	; 0x64
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e12a      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006870:	4b76      	ldr	r3, [pc, #472]	; (8006a4c <HAL_RCC_OscConfig+0x4d4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <HAL_RCC_OscConfig+0x31a>
 8006884:	4b70      	ldr	r3, [pc, #448]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a6f      	ldr	r2, [pc, #444]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
 8006890:	e02d      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x33c>
 800689a:	4b6b      	ldr	r3, [pc, #428]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
 80068a6:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a67      	ldr	r2, [pc, #412]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	e01c      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_OscConfig+0x35e>
 80068bc:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a61      	ldr	r2, [pc, #388]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068c2:	f043 0304 	orr.w	r3, r3, #4
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
 80068d4:	e00b      	b.n	80068ee <HAL_RCC_OscConfig+0x376>
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a5b      	ldr	r2, [pc, #364]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
 80068e2:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80068e8:	f023 0304 	bic.w	r3, r3, #4
 80068ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d015      	beq.n	8006922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fc fb9f 	bl	8003038 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fc fb9b 	bl	8003038 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0d8      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006914:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ee      	beq.n	80068fe <HAL_RCC_OscConfig+0x386>
 8006920:	e014      	b.n	800694c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fc fb89 	bl	8003038 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006928:	e00a      	b.n	8006940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fc fb85 	bl	8003038 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e0c2      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ee      	bne.n	800692a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d105      	bne.n	800695e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006952:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80ae 	beq.w	8006ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006968:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
 8006970:	2b08      	cmp	r3, #8
 8006972:	d06d      	beq.n	8006a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d14b      	bne.n	8006a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fc fb56 	bl	8003038 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006990:	f7fc fb52 	bl	8003038 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e091      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	019b      	lsls	r3, r3, #6
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	3b01      	subs	r3, #1
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	491b      	ldr	r1, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fc fb24 	bl	8003038 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fc fb20 	bl	8003038 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e05f      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0x47c>
 8006a12:	e057      	b.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fc fb0a 	bl	8003038 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fc fb06 	bl	8003038 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e045      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <HAL_RCC_OscConfig+0x4d0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x4b0>
 8006a46:	e03d      	b.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <HAL_RCC_OscConfig+0x558>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d030      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d129      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d122      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d119      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d10f      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d0      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006aec:	4b6a      	ldr	r3, [pc, #424]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d910      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 020f 	bic.w	r2, r3, #15
 8006b02:	4965      	ldr	r1, [pc, #404]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0b8      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d020      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b4c:	4b53      	ldr	r3, [pc, #332]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4a52      	ldr	r2, [pc, #328]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b58:	4b50      	ldr	r3, [pc, #320]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	494d      	ldr	r1, [pc, #308]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e07f      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e073      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba6:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e06b      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb6:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 0203 	bic.w	r2, r3, #3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4936      	ldr	r1, [pc, #216]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc8:	f7fc fa36 	bl	8003038 <HAL_GetTick>
 8006bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	e00a      	b.n	8006be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd0:	f7fc fa32 	bl	8003038 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e053      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 020c 	and.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d1eb      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d210      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4922      	ldr	r1, [pc, #136]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e032      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4916      	ldr	r1, [pc, #88]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c66:	f000 f821 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	490a      	ldr	r1, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8006c78:	5ccb      	ldrb	r3, [r1, r3]
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc f992 	bl	8002fb0 <HAL_InitTick>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023c00 	.word	0x40023c00
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	0800911c 	.word	0x0800911c
 8006ca4:	20000048 	.word	0x20000048
 8006ca8:	2000004c 	.word	0x2000004c

08006cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb0:	b094      	sub	sp, #80	; 0x50
 8006cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb8:	2300      	movs	r3, #0
 8006cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc4:	4b79      	ldr	r3, [pc, #484]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 030c 	and.w	r3, r3, #12
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d00d      	beq.n	8006cec <HAL_RCC_GetSysClockFreq+0x40>
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	f200 80e1 	bhi.w	8006e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cde:	e0db      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ce0:	4b73      	ldr	r3, [pc, #460]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ce4:	e0db      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ce6:	4b73      	ldr	r3, [pc, #460]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cea:	e0d8      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cec:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cf6:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d063      	beq.n	8006dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d02:	4b6a      	ldr	r3, [pc, #424]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	2200      	movs	r2, #0
 8006d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d14:	633b      	str	r3, [r7, #48]	; 0x30
 8006d16:	2300      	movs	r3, #0
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d1e:	4622      	mov	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f04f 0100 	mov.w	r1, #0
 8006d2a:	0159      	lsls	r1, r3, #5
 8006d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d30:	0150      	lsls	r0, r2, #5
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4621      	mov	r1, r4
 8006d38:	1a51      	subs	r1, r2, r1
 8006d3a:	6139      	str	r1, [r7, #16]
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d50:	4659      	mov	r1, fp
 8006d52:	018b      	lsls	r3, r1, #6
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	018a      	lsls	r2, r1, #6
 8006d5e:	4651      	mov	r1, sl
 8006d60:	ebb2 0801 	subs.w	r8, r2, r1
 8006d64:	4659      	mov	r1, fp
 8006d66:	eb63 0901 	sbc.w	r9, r3, r1
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d7e:	4690      	mov	r8, r2
 8006d80:	4699      	mov	r9, r3
 8006d82:	4623      	mov	r3, r4
 8006d84:	eb18 0303 	adds.w	r3, r8, r3
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	eb49 0303 	adc.w	r3, r9, r3
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d9e:	4629      	mov	r1, r5
 8006da0:	024b      	lsls	r3, r1, #9
 8006da2:	4621      	mov	r1, r4
 8006da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006da8:	4621      	mov	r1, r4
 8006daa:	024a      	lsls	r2, r1, #9
 8006dac:	4610      	mov	r0, r2
 8006dae:	4619      	mov	r1, r3
 8006db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db2:	2200      	movs	r2, #0
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dbc:	f7f9 fa3c 	bl	8000238 <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc8:	e058      	b.n	8006e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dca:	4b38      	ldr	r3, [pc, #224]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	f04f 0000 	mov.w	r0, #0
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	0159      	lsls	r1, r3, #5
 8006df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df6:	0150      	lsls	r0, r2, #5
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e02:	4649      	mov	r1, r9
 8006e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8006e20:	eb63 050b 	sbc.w	r5, r3, fp
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	00eb      	lsls	r3, r5, #3
 8006e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e32:	00e2      	lsls	r2, r4, #3
 8006e34:	4614      	mov	r4, r2
 8006e36:	461d      	mov	r5, r3
 8006e38:	4643      	mov	r3, r8
 8006e3a:	18e3      	adds	r3, r4, r3
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	464b      	mov	r3, r9
 8006e40:	eb45 0303 	adc.w	r3, r5, r3
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e52:	4629      	mov	r1, r5
 8006e54:	028b      	lsls	r3, r1, #10
 8006e56:	4621      	mov	r1, r4
 8006e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	028a      	lsls	r2, r1, #10
 8006e60:	4610      	mov	r0, r2
 8006e62:	4619      	mov	r1, r3
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	2200      	movs	r2, #0
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	61fa      	str	r2, [r7, #28]
 8006e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e70:	f7f9 f9e2 	bl	8000238 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <HAL_RCC_GetSysClockFreq+0x200>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	3301      	adds	r3, #1
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e96:	e002      	b.n	8006e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3750      	adds	r7, #80	; 0x50
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	00f42400 	.word	0x00f42400
 8006eb4:	007a1200 	.word	0x007a1200

08006eb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000048 	.word	0x20000048

08006ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ed4:	f7ff fff0 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	0a9b      	lsrs	r3, r3, #10
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	4903      	ldr	r1, [pc, #12]	; (8006ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee6:	5ccb      	ldrb	r3, [r1, r3]
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	0800912c 	.word	0x0800912c

08006ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006efc:	f7ff ffdc 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	0b5b      	lsrs	r3, r3, #13
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	4903      	ldr	r1, [pc, #12]	; (8006f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0e:	5ccb      	ldrb	r3, [r1, r3]
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	0800912c 	.word	0x0800912c

08006f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f48:	4b69      	ldr	r3, [pc, #420]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4a68      	ldr	r2, [pc, #416]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f52:	6093      	str	r3, [r2, #8]
 8006f54:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	4964      	ldr	r1, [pc, #400]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f7a:	4b5d      	ldr	r3, [pc, #372]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f88:	4959      	ldr	r1, [pc, #356]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f98:	d101      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d017      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fb6:	4b4e      	ldr	r3, [pc, #312]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	494a      	ldr	r1, [pc, #296]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd4:	d101      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 808b 	beq.w	800711a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007004:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	4a39      	ldr	r2, [pc, #228]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700e:	6413      	str	r3, [r2, #64]	; 0x40
 8007010:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800701c:	4b35      	ldr	r3, [pc, #212]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a34      	ldr	r2, [pc, #208]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007028:	f7fc f806 	bl	8003038 <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007030:	f7fc f802 	bl	8003038 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	; 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e38f      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800704e:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d035      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d02e      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800706c:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007074:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007076:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800707c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007080:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	4a1a      	ldr	r2, [pc, #104]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800708e:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007094:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d114      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fb ffca 	bl	8003038 <HAL_GetTick>
 80070a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a6:	e00a      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a8:	f7fb ffc6 	bl	8003038 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e351      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ee      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d6:	d111      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070e4:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070e6:	400b      	ands	r3, r1
 80070e8:	4901      	ldr	r1, [pc, #4]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
 80070ee:	e00b      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40007000 	.word	0x40007000
 80070f8:	0ffffcff 	.word	0x0ffffcff
 80070fc:	4bac      	ldr	r3, [pc, #688]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4aab      	ldr	r2, [pc, #684]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007102:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007106:	6093      	str	r3, [r2, #8]
 8007108:	4ba9      	ldr	r3, [pc, #676]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800710a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007114:	49a6      	ldr	r1, [pc, #664]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007116:	4313      	orrs	r3, r2
 8007118:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d010      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007126:	4ba2      	ldr	r3, [pc, #648]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800712c:	4aa0      	ldr	r2, [pc, #640]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800712e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007132:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007136:	4b9e      	ldr	r3, [pc, #632]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007138:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	499b      	ldr	r1, [pc, #620]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007154:	4b96      	ldr	r3, [pc, #600]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007162:	4993      	ldr	r1, [pc, #588]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007176:	4b8e      	ldr	r3, [pc, #568]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007184:	498a      	ldr	r1, [pc, #552]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007198:	4b85      	ldr	r3, [pc, #532]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a6:	4982      	ldr	r1, [pc, #520]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071ba:	4b7d      	ldr	r3, [pc, #500]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	4979      	ldr	r1, [pc, #484]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071dc:	4b74      	ldr	r3, [pc, #464]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e2:	f023 0203 	bic.w	r2, r3, #3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	4971      	ldr	r1, [pc, #452]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071fe:	4b6c      	ldr	r3, [pc, #432]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	f023 020c 	bic.w	r2, r3, #12
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720c:	4968      	ldr	r1, [pc, #416]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007220:	4b63      	ldr	r3, [pc, #396]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	4960      	ldr	r1, [pc, #384]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007242:	4b5b      	ldr	r3, [pc, #364]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007248:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007250:	4957      	ldr	r1, [pc, #348]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007264:	4b52      	ldr	r3, [pc, #328]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007272:	494f      	ldr	r1, [pc, #316]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007294:	4946      	ldr	r1, [pc, #280]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80072a8:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b6:	493e      	ldr	r1, [pc, #248]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80072ca:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	4935      	ldr	r1, [pc, #212]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072ec:	4b30      	ldr	r3, [pc, #192]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072fa:	492d      	ldr	r1, [pc, #180]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800730e:	4b28      	ldr	r3, [pc, #160]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731c:	4924      	ldr	r1, [pc, #144]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800732c:	d101      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800732e:	2301      	movs	r3, #1
 8007330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800734e:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007354:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800735c:	4914      	ldr	r1, [pc, #80]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007380:	490b      	ldr	r1, [pc, #44]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00f      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007394:	4b06      	ldr	r3, [pc, #24]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a4:	4902      	ldr	r1, [pc, #8]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073ac:	e002      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073c0:	4b8a      	ldr	r3, [pc, #552]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	4986      	ldr	r1, [pc, #536]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00b      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073e4:	4b81      	ldr	r3, [pc, #516]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	497d      	ldr	r1, [pc, #500]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d006      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80d6 	beq.w	80075bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007410:	4b76      	ldr	r3, [pc, #472]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a75      	ldr	r2, [pc, #468]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800741a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800741c:	f7fb fe0c 	bl	8003038 <HAL_GetTick>
 8007420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007424:	f7fb fe08 	bl	8003038 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b64      	cmp	r3, #100	; 0x64
 8007430:	d901      	bls.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e195      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007436:	4b6d      	ldr	r3, [pc, #436]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d021      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d11d      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007456:	4b65      	ldr	r3, [pc, #404]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007464:	4b61      	ldr	r3, [pc, #388]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746a:	0e1b      	lsrs	r3, r3, #24
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	019a      	lsls	r2, r3, #6
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	431a      	orrs	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	061b      	lsls	r3, r3, #24
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	071b      	lsls	r3, r3, #28
 800748a:	4958      	ldr	r1, [pc, #352]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d02e      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074bc:	d129      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074be:	4b4b      	ldr	r3, [pc, #300]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074cc:	4b47      	ldr	r3, [pc, #284]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d2:	0f1b      	lsrs	r3, r3, #28
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	019a      	lsls	r2, r3, #6
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	431a      	orrs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	071b      	lsls	r3, r3, #28
 80074f2:	493e      	ldr	r1, [pc, #248]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074fa:	4b3c      	ldr	r3, [pc, #240]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007500:	f023 021f 	bic.w	r2, r3, #31
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	3b01      	subs	r3, #1
 800750a:	4938      	ldr	r1, [pc, #224]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01d      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007524:	0e1b      	lsrs	r3, r3, #24
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800752c:	4b2f      	ldr	r3, [pc, #188]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800752e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007532:	0f1b      	lsrs	r3, r3, #28
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	019a      	lsls	r2, r3, #6
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	431a      	orrs	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	431a      	orrs	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	4926      	ldr	r1, [pc, #152]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007554:	4313      	orrs	r3, r2
 8007556:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d011      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	019a      	lsls	r2, r3, #6
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	071b      	lsls	r3, r3, #28
 8007582:	491a      	ldr	r1, [pc, #104]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800758a:	4b18      	ldr	r3, [pc, #96]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a17      	ldr	r2, [pc, #92]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007596:	f7fb fd4f 	bl	8003038 <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800759c:	e008      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800759e:	f7fb fd4b 	bl	8003038 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b64      	cmp	r3, #100	; 0x64
 80075aa:	d901      	bls.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e0d8      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075b0:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	f040 80ce 	bne.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d0:	f7fb fd32 	bl	8003038 <HAL_GetTick>
 80075d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075d6:	e00b      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075d8:	f7fb fd2e 	bl	8003038 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b64      	cmp	r3, #100	; 0x64
 80075e4:	d904      	bls.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0bb      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075f0:	4b5e      	ldr	r3, [pc, #376]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fc:	d0ec      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800761a:	2b00      	cmp	r3, #0
 800761c:	d02e      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007626:	4b51      	ldr	r3, [pc, #324]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007634:	4b4d      	ldr	r3, [pc, #308]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763a:	0f1b      	lsrs	r3, r3, #28
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	019a      	lsls	r2, r3, #6
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	061b      	lsls	r3, r3, #24
 8007654:	431a      	orrs	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	4944      	ldr	r1, [pc, #272]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007662:	4b42      	ldr	r3, [pc, #264]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	3b01      	subs	r3, #1
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	493d      	ldr	r1, [pc, #244]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d022      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007690:	d11d      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007692:	4b36      	ldr	r3, [pc, #216]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076a0:	4b32      	ldr	r3, [pc, #200]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a6:	0f1b      	lsrs	r3, r3, #28
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	019a      	lsls	r2, r3, #6
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	431a      	orrs	r2, r3
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	061b      	lsls	r3, r3, #24
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	071b      	lsls	r3, r3, #28
 80076c6:	4929      	ldr	r1, [pc, #164]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d028      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076e8:	4b20      	ldr	r3, [pc, #128]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	019a      	lsls	r2, r3, #6
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	431a      	orrs	r2, r3
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	061b      	lsls	r3, r3, #24
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	071b      	lsls	r3, r3, #28
 800770e:	4917      	ldr	r1, [pc, #92]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007716:	4b15      	ldr	r3, [pc, #84]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	4911      	ldr	r1, [pc, #68]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0e      	ldr	r2, [pc, #56]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007738:	f7fb fc7e 	bl	8003038 <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007740:	f7fb fc7a 	bl	8003038 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b64      	cmp	r3, #100	; 0x64
 800774c:	d901      	bls.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e007      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800775a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800775e:	d1ef      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40023800 	.word	0x40023800

08007770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e09d      	b.n	80078be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007792:	d009      	beq.n	80077a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	61da      	str	r2, [r3, #28]
 800779a:	e005      	b.n	80077a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fb f9d6 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077e8:	d902      	bls.n	80077f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e002      	b.n	80077f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80077fe:	d007      	beq.n	8007810 <HAL_SPI_Init+0xa0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007808:	d002      	beq.n	8007810 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	ea42 0103 	orr.w	r1, r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	f003 0204 	and.w	r2, r3, #4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800788c:	ea42 0103 	orr.w	r1, r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e038      	b.n	800794e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7fb fad7 	bl	8002ea4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3308      	adds	r3, #8
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f000 fd1d 	bl	8008340 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	461a      	mov	r2, r3
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	f000 fda5 	bl	8008460 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6858      	ldr	r0, [r3, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	f000 fdec 	bl	8008500 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	6892      	ldr	r2, [r2, #8]
 8007930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	6892      	ldr	r2, [r2, #8]
 800793c:	f041 0101 	orr.w	r1, r1, #1
 8007940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e040      	b.n	80079ea <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fb f95d 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2224      	movs	r2, #36	; 0x24
 8007982:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0201 	bic.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8bf 	bl	8007b18 <UART_SetConfig>
 800799a:	4603      	mov	r3, r0
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e022      	b.n	80079ea <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb17 	bl	8007fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0201 	orr.w	r2, r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fb9e 	bl	8008124 <UART_CheckIdleState>
 80079e8:	4603      	mov	r3, r0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b08a      	sub	sp, #40	; 0x28
 80079f6:	af02      	add	r7, sp, #8
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	603b      	str	r3, [r7, #0]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 8081 	bne.w	8007b0e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_UART_Transmit+0x26>
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e079      	b.n	8007b10 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d101      	bne.n	8007a2a <HAL_UART_Transmit+0x38>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e072      	b.n	8007b10 <HAL_UART_Transmit+0x11e>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2221      	movs	r2, #33	; 0x21
 8007a3e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a40:	f7fb fafa 	bl	8003038 <HAL_GetTick>
 8007a44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	88fa      	ldrh	r2, [r7, #6]
 8007a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d108      	bne.n	8007a72 <HAL_UART_Transmit+0x80>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e003      	b.n	8007a7a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007a82:	e02c      	b.n	8007ade <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fb91 	bl	80081b6 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e038      	b.n	8007b10 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e007      	b.n	8007acc <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1cc      	bne.n	8007a84 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2200      	movs	r2, #0
 8007af2:	2140      	movs	r1, #64	; 0x40
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fb5e 	bl	80081b6 <UART_WaitOnFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e005      	b.n	8007b10 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e000      	b.n	8007b10 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
  }
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3720      	adds	r7, #32
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4ba6      	ldr	r3, [pc, #664]	; (8007ddc <UART_SetConfig+0x2c4>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6979      	ldr	r1, [r7, #20]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a94      	ldr	r2, [pc, #592]	; (8007de0 <UART_SetConfig+0x2c8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d120      	bne.n	8007bd6 <UART_SetConfig+0xbe>
 8007b94:	4b93      	ldr	r3, [pc, #588]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d816      	bhi.n	8007bd0 <UART_SetConfig+0xb8>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0x90>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bbf 	.word	0x08007bbf
 8007bb4:	08007bcb 	.word	0x08007bcb
 8007bb8:	2301      	movs	r3, #1
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e150      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e14d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e14a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e147      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e144      	b.n	8007e60 <UART_SetConfig+0x348>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a83      	ldr	r2, [pc, #524]	; (8007de8 <UART_SetConfig+0x2d0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d132      	bne.n	8007c46 <UART_SetConfig+0x12e>
 8007be0:	4b80      	ldr	r3, [pc, #512]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f003 030c 	and.w	r3, r3, #12
 8007bea:	2b0c      	cmp	r3, #12
 8007bec:	d828      	bhi.n	8007c40 <UART_SetConfig+0x128>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0xdc>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c29 	.word	0x08007c29
 8007bf8:	08007c41 	.word	0x08007c41
 8007bfc:	08007c41 	.word	0x08007c41
 8007c00:	08007c41 	.word	0x08007c41
 8007c04:	08007c35 	.word	0x08007c35
 8007c08:	08007c41 	.word	0x08007c41
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c41 	.word	0x08007c41
 8007c14:	08007c2f 	.word	0x08007c2f
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007c3b 	.word	0x08007c3b
 8007c28:	2300      	movs	r3, #0
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e118      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	77fb      	strb	r3, [r7, #31]
 8007c32:	e115      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c34:	2304      	movs	r3, #4
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e112      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	e10f      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c40:	2310      	movs	r3, #16
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e10c      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a68      	ldr	r2, [pc, #416]	; (8007dec <UART_SetConfig+0x2d4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d120      	bne.n	8007c92 <UART_SetConfig+0x17a>
 8007c50:	4b64      	ldr	r3, [pc, #400]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c5a:	2b30      	cmp	r3, #48	; 0x30
 8007c5c:	d013      	beq.n	8007c86 <UART_SetConfig+0x16e>
 8007c5e:	2b30      	cmp	r3, #48	; 0x30
 8007c60:	d814      	bhi.n	8007c8c <UART_SetConfig+0x174>
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d009      	beq.n	8007c7a <UART_SetConfig+0x162>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d810      	bhi.n	8007c8c <UART_SetConfig+0x174>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <UART_SetConfig+0x15c>
 8007c6e:	2b10      	cmp	r3, #16
 8007c70:	d006      	beq.n	8007c80 <UART_SetConfig+0x168>
 8007c72:	e00b      	b.n	8007c8c <UART_SetConfig+0x174>
 8007c74:	2300      	movs	r3, #0
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	e0f2      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	77fb      	strb	r3, [r7, #31]
 8007c7e:	e0ef      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c80:	2304      	movs	r3, #4
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e0ec      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c86:	2308      	movs	r3, #8
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e0e9      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e0e6      	b.n	8007e60 <UART_SetConfig+0x348>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a56      	ldr	r2, [pc, #344]	; (8007df0 <UART_SetConfig+0x2d8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d120      	bne.n	8007cde <UART_SetConfig+0x1c6>
 8007c9c:	4b51      	ldr	r3, [pc, #324]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ca8:	d013      	beq.n	8007cd2 <UART_SetConfig+0x1ba>
 8007caa:	2bc0      	cmp	r3, #192	; 0xc0
 8007cac:	d814      	bhi.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d009      	beq.n	8007cc6 <UART_SetConfig+0x1ae>
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d810      	bhi.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <UART_SetConfig+0x1a8>
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d006      	beq.n	8007ccc <UART_SetConfig+0x1b4>
 8007cbe:	e00b      	b.n	8007cd8 <UART_SetConfig+0x1c0>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	e0cc      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	77fb      	strb	r3, [r7, #31]
 8007cca:	e0c9      	b.n	8007e60 <UART_SetConfig+0x348>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e0c6      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	77fb      	strb	r3, [r7, #31]
 8007cd6:	e0c3      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0c0      	b.n	8007e60 <UART_SetConfig+0x348>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a44      	ldr	r2, [pc, #272]	; (8007df4 <UART_SetConfig+0x2dc>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d125      	bne.n	8007d34 <UART_SetConfig+0x21c>
 8007ce8:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cf6:	d017      	beq.n	8007d28 <UART_SetConfig+0x210>
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d817      	bhi.n	8007d2e <UART_SetConfig+0x216>
 8007cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d02:	d00b      	beq.n	8007d1c <UART_SetConfig+0x204>
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d811      	bhi.n	8007d2e <UART_SetConfig+0x216>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <UART_SetConfig+0x1fe>
 8007d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d12:	d006      	beq.n	8007d22 <UART_SetConfig+0x20a>
 8007d14:	e00b      	b.n	8007d2e <UART_SetConfig+0x216>
 8007d16:	2300      	movs	r3, #0
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0a1      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e09e      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d22:	2304      	movs	r3, #4
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e09b      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e098      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d2e:	2310      	movs	r3, #16
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e095      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2f      	ldr	r2, [pc, #188]	; (8007df8 <UART_SetConfig+0x2e0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d125      	bne.n	8007d8a <UART_SetConfig+0x272>
 8007d3e:	4b29      	ldr	r3, [pc, #164]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d4c:	d017      	beq.n	8007d7e <UART_SetConfig+0x266>
 8007d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d52:	d817      	bhi.n	8007d84 <UART_SetConfig+0x26c>
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d58:	d00b      	beq.n	8007d72 <UART_SetConfig+0x25a>
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d5e:	d811      	bhi.n	8007d84 <UART_SetConfig+0x26c>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <UART_SetConfig+0x254>
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d68:	d006      	beq.n	8007d78 <UART_SetConfig+0x260>
 8007d6a:	e00b      	b.n	8007d84 <UART_SetConfig+0x26c>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e076      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d72:	2302      	movs	r3, #2
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e073      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e070      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d7e:	2308      	movs	r3, #8
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e06d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d84:	2310      	movs	r3, #16
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e06a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <UART_SetConfig+0x2e4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d138      	bne.n	8007e06 <UART_SetConfig+0x2ee>
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da2:	d017      	beq.n	8007dd4 <UART_SetConfig+0x2bc>
 8007da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da8:	d82a      	bhi.n	8007e00 <UART_SetConfig+0x2e8>
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d00b      	beq.n	8007dc8 <UART_SetConfig+0x2b0>
 8007db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db4:	d824      	bhi.n	8007e00 <UART_SetConfig+0x2e8>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <UART_SetConfig+0x2aa>
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbe:	d006      	beq.n	8007dce <UART_SetConfig+0x2b6>
 8007dc0:	e01e      	b.n	8007e00 <UART_SetConfig+0x2e8>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e04b      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e048      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dce:	2304      	movs	r3, #4
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e045      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e042      	b.n	8007e60 <UART_SetConfig+0x348>
 8007dda:	bf00      	nop
 8007ddc:	efff69f3 	.word	0xefff69f3
 8007de0:	40011000 	.word	0x40011000
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40004400 	.word	0x40004400
 8007dec:	40004800 	.word	0x40004800
 8007df0:	40004c00 	.word	0x40004c00
 8007df4:	40005000 	.word	0x40005000
 8007df8:	40011400 	.word	0x40011400
 8007dfc:	40007800 	.word	0x40007800
 8007e00:	2310      	movs	r3, #16
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e02c      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a72      	ldr	r2, [pc, #456]	; (8007fd4 <UART_SetConfig+0x4bc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d125      	bne.n	8007e5c <UART_SetConfig+0x344>
 8007e10:	4b71      	ldr	r3, [pc, #452]	; (8007fd8 <UART_SetConfig+0x4c0>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e1e:	d017      	beq.n	8007e50 <UART_SetConfig+0x338>
 8007e20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e24:	d817      	bhi.n	8007e56 <UART_SetConfig+0x33e>
 8007e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2a:	d00b      	beq.n	8007e44 <UART_SetConfig+0x32c>
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e30:	d811      	bhi.n	8007e56 <UART_SetConfig+0x33e>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <UART_SetConfig+0x326>
 8007e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3a:	d006      	beq.n	8007e4a <UART_SetConfig+0x332>
 8007e3c:	e00b      	b.n	8007e56 <UART_SetConfig+0x33e>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	77fb      	strb	r3, [r7, #31]
 8007e42:	e00d      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e44:	2302      	movs	r3, #2
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e00a      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e007      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e50:	2308      	movs	r3, #8
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e004      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e56:	2310      	movs	r3, #16
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e001      	b.n	8007e60 <UART_SetConfig+0x348>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e68:	d15b      	bne.n	8007f22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d828      	bhi.n	8007ec2 <UART_SetConfig+0x3aa>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x360>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007ec3 	.word	0x08007ec3
 8007e88:	08007eb3 	.word	0x08007eb3
 8007e8c:	08007ec3 	.word	0x08007ec3
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007ec3 	.word	0x08007ec3
 8007e98:	08007ebb 	.word	0x08007ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7ff f818 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	61b8      	str	r0, [r7, #24]
        break;
 8007ea2:	e013      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7ff f828 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	61b8      	str	r0, [r7, #24]
        break;
 8007eaa:	e00f      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eac:	4b4b      	ldr	r3, [pc, #300]	; (8007fdc <UART_SetConfig+0x4c4>)
 8007eae:	61bb      	str	r3, [r7, #24]
        break;
 8007eb0:	e00c      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb2:	f7fe fefb 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8007eb6:	61b8      	str	r0, [r7, #24]
        break;
 8007eb8:	e008      	b.n	8007ecc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ebe:	61bb      	str	r3, [r7, #24]
        break;
 8007ec0:	e004      	b.n	8007ecc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8007eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d074      	beq.n	8007fbc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	005a      	lsls	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	441a      	add	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d916      	bls.n	8007f1c <UART_SetConfig+0x404>
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef4:	d212      	bcs.n	8007f1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f023 030f 	bic.w	r3, r3, #15
 8007efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	89fa      	ldrh	r2, [r7, #14]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e04f      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	77bb      	strb	r3, [r7, #30]
 8007f20:	e04c      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f22:	7ffb      	ldrb	r3, [r7, #31]
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d828      	bhi.n	8007f7a <UART_SetConfig+0x462>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x418>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f7b 	.word	0x08007f7b
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f7b 	.word	0x08007f7b
 8007f48:	08007f7b 	.word	0x08007f7b
 8007f4c:	08007f7b 	.word	0x08007f7b
 8007f50:	08007f73 	.word	0x08007f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fe ffbc 	bl	8006ed0 <HAL_RCC_GetPCLK1Freq>
 8007f58:	61b8      	str	r0, [r7, #24]
        break;
 8007f5a:	e013      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7fe ffcc 	bl	8006ef8 <HAL_RCC_GetPCLK2Freq>
 8007f60:	61b8      	str	r0, [r7, #24]
        break;
 8007f62:	e00f      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <UART_SetConfig+0x4c4>)
 8007f66:	61bb      	str	r3, [r7, #24]
        break;
 8007f68:	e00c      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f6a:	f7fe fe9f 	bl	8006cac <HAL_RCC_GetSysClockFreq>
 8007f6e:	61b8      	str	r0, [r7, #24]
        break;
 8007f70:	e008      	b.n	8007f84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f76:	61bb      	str	r3, [r7, #24]
        break;
 8007f78:	e004      	b.n	8007f84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	77bb      	strb	r3, [r7, #30]
        break;
 8007f82:	bf00      	nop
    }

    if (pclk != 0U)
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	085a      	lsrs	r2, r3, #1
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b0f      	cmp	r3, #15
 8007fa2:	d909      	bls.n	8007fb8 <UART_SetConfig+0x4a0>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007faa:	d205      	bcs.n	8007fb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e001      	b.n	8007fbc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3720      	adds	r7, #32
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40007c00 	.word	0x40007c00
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	00f42400 	.word	0x00f42400

08007fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080de:	d10a      	bne.n	80080f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008134:	f7fa ff80 	bl	8003038 <HAL_GetTick>
 8008138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b08      	cmp	r3, #8
 8008146:	d10e      	bne.n	8008166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f82d 	bl	80081b6 <UART_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e023      	b.n	80081ae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b04      	cmp	r3, #4
 8008172:	d10e      	bne.n	8008192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f817 	bl	80081b6 <UART_WaitOnFlagUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e00d      	b.n	80081ae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b09c      	sub	sp, #112	; 0x70
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	4613      	mov	r3, r2
 80081c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c6:	e0a5      	b.n	8008314 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	f000 80a1 	beq.w	8008314 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081d2:	f7fa ff31 	bl	8003038 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081de:	429a      	cmp	r2, r3
 80081e0:	d302      	bcc.n	80081e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80081e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d13e      	bne.n	8008266 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081fc:	667b      	str	r3, [r7, #100]	; 0x64
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008208:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800820c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e6      	bne.n	80081e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3308      	adds	r3, #8
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008224:	e853 3f00 	ldrex	r3, [r3]
 8008228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	663b      	str	r3, [r7, #96]	; 0x60
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3308      	adds	r3, #8
 8008238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800823a:	64ba      	str	r2, [r7, #72]	; 0x48
 800823c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e5      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e067      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d04f      	beq.n	8008314 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800827e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008282:	d147      	bne.n	8008314 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800828c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
 80082ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e6      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	613b      	str	r3, [r7, #16]
   return(result);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3308      	adds	r3, #8
 80082de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082e0:	623a      	str	r2, [r7, #32]
 80082e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	69f9      	ldr	r1, [r7, #28]
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e5      	bne.n	80082c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e010      	b.n	8008336 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4013      	ands	r3, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	429a      	cmp	r2, r3
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	429a      	cmp	r2, r3
 8008330:	f43f af4a 	beq.w	80081c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3770      	adds	r7, #112	; 0x70
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	f023 0101 	bic.w	r1, r3, #1
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b08      	cmp	r3, #8
 8008368:	d102      	bne.n	8008370 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	e001      	b.n	8008374 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008380:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008386:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800838c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008392:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008398:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800839e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80083a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80083aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80083b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80083d8:	4b20      	ldr	r3, [pc, #128]	; (800845c <FMC_NORSRAM_Init+0x11c>)
 80083da:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083ea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80083f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	43db      	mvns	r3, r3
 8008402:	ea02 0103 	and.w	r1, r2, r3
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	4319      	orrs	r1, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841c:	d10c      	bne.n	8008438 <FMC_NORSRAM_Init+0xf8>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	0008fb7f 	.word	0x0008fb7f

08008460 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008476:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	431a      	orrs	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	431a      	orrs	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	431a      	orrs	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	3b01      	subs	r3, #1
 800849c:	051b      	lsls	r3, r3, #20
 800849e:	431a      	orrs	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	3b02      	subs	r3, #2
 80084a6:	061b      	lsls	r3, r3, #24
 80084a8:	431a      	orrs	r2, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	3201      	adds	r2, #1
 80084b4:	4319      	orrs	r1, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c8:	d113      	bne.n	80084f2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084d2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	3b01      	subs	r3, #1
 80084da:	051b      	lsls	r3, r3, #20
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	431a      	orrs	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	371c      	adds	r7, #28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	d11d      	bne.n	8008552 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008520:	4013      	ands	r3, r2
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	6852      	ldr	r2, [r2, #4]
 800852a:	0112      	lsls	r2, r2, #4
 800852c:	4311      	orrs	r1, r2
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	6892      	ldr	r2, [r2, #8]
 8008532:	0212      	lsls	r2, r2, #8
 8008534:	4311      	orrs	r1, r2
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	6992      	ldr	r2, [r2, #24]
 800853a:	4311      	orrs	r1, r2
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	68d2      	ldr	r2, [r2, #12]
 8008540:	0412      	lsls	r2, r2, #16
 8008542:	430a      	orrs	r2, r1
 8008544:	ea43 0102 	orr.w	r1, r3, r2
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008550:	e005      	b.n	800855e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800855a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	cff00000 	.word	0xcff00000

08008570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008570:	b084      	sub	sp, #16
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	f107 001c 	add.w	r0, r7, #28
 800857e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2b01      	cmp	r3, #1
 8008586:	d120      	bne.n	80085ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	4b20      	ldr	r3, [pc, #128]	; (800861c <USB_CoreInit+0xac>)
 800859a:	4013      	ands	r3, r2
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa92 	bl	8008ae8 <USB_CoreReset>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
 80085c8:	e010      	b.n	80085ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa86 	bl	8008ae8 <USB_CoreReset>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d10b      	bne.n	800860a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f043 0206 	orr.w	r2, r3, #6
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008616:	b004      	add	sp, #16
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	ffbdffbf 	.word	0xffbdffbf

08008620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f023 0201 	bic.w	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d115      	bne.n	8008690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008670:	2001      	movs	r0, #1
 8008672:	f7fa fced 	bl	8003050 <HAL_Delay>
      ms++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa25 	bl	8008acc <USB_GetMode>
 8008682:	4603      	mov	r3, r0
 8008684:	2b01      	cmp	r3, #1
 8008686:	d01e      	beq.n	80086c6 <USB_SetCurrentMode+0x84>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b31      	cmp	r3, #49	; 0x31
 800868c:	d9f0      	bls.n	8008670 <USB_SetCurrentMode+0x2e>
 800868e:	e01a      	b.n	80086c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d115      	bne.n	80086c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086a2:	2001      	movs	r0, #1
 80086a4:	f7fa fcd4 	bl	8003050 <HAL_Delay>
      ms++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa0c 	bl	8008acc <USB_GetMode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <USB_SetCurrentMode+0x84>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b31      	cmp	r3, #49	; 0x31
 80086be:	d9f0      	bls.n	80086a2 <USB_SetCurrentMode+0x60>
 80086c0:	e001      	b.n	80086c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e005      	b.n	80086d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b32      	cmp	r3, #50	; 0x32
 80086ca:	d101      	bne.n	80086d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086dc:	b084      	sub	sp, #16
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	e009      	b.n	8008710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3340      	adds	r3, #64	; 0x40
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	3301      	adds	r3, #1
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b0e      	cmp	r3, #14
 8008714:	d9f2      	bls.n	80086fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11c      	bne.n	8008756 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872a:	f043 0302 	orr.w	r3, r3, #2
 800872e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	e005      	b.n	8008762 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	4619      	mov	r1, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877c:	461a      	mov	r2, r3
 800877e:	680b      	ldr	r3, [r1, #0]
 8008780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10c      	bne.n	80087a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800878e:	2100      	movs	r1, #0
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f961 	bl	8008a58 <USB_SetDevSpeed>
 8008796:	e008      	b.n	80087aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008798:	2101      	movs	r1, #1
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f95c 	bl	8008a58 <USB_SetDevSpeed>
 80087a0:	e003      	b.n	80087aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087a2:	2103      	movs	r1, #3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f957 	bl	8008a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087aa:	2110      	movs	r1, #16
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8f3 	bl	8008998 <USB_FlushTxFifo>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f91d 	bl	80089fc <USB_FlushRxFifo>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	461a      	mov	r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	461a      	mov	r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	461a      	mov	r2, r3
 80087ec:	2300      	movs	r3, #0
 80087ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	e043      	b.n	800887e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800880c:	d118      	bne.n	8008840 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	461a      	mov	r2, r3
 8008822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	e013      	b.n	8008852 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008836:	461a      	mov	r2, r3
 8008838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e008      	b.n	8008852 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	461a      	mov	r2, r3
 800884e:	2300      	movs	r3, #0
 8008850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	461a      	mov	r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	461a      	mov	r2, r3
 8008872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3301      	adds	r3, #1
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	429a      	cmp	r2, r3
 8008884:	d3b7      	bcc.n	80087f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	e043      	b.n	8008914 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800889e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a2:	d118      	bne.n	80088d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e013      	b.n	80088e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	e008      	b.n	80088e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	461a      	mov	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	461a      	mov	r2, r3
 80088f6:	2300      	movs	r3, #0
 80088f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	461a      	mov	r2, r3
 8008908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800890c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3b7      	bcc.n	800888c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800892a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800893c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d105      	bne.n	8008950 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f043 0210 	orr.w	r2, r3, #16
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <USB_DevInit+0x2b4>)
 8008956:	4313      	orrs	r3, r2
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f043 0208 	orr.w	r2, r3, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800896e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008970:	2b01      	cmp	r3, #1
 8008972:	d105      	bne.n	8008980 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <USB_DevInit+0x2b8>)
 800897a:	4313      	orrs	r3, r2
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800898c:	b004      	add	sp, #16
 800898e:	4770      	bx	lr
 8008990:	803c3800 	.word	0x803c3800
 8008994:	40000004 	.word	0x40000004

08008998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <USB_FlushTxFifo+0x60>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d901      	bls.n	80089b6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e01a      	b.n	80089ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	daf3      	bge.n	80089a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	019b      	lsls	r3, r3, #6
 80089c6:	f043 0220 	orr.w	r2, r3, #32
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3301      	adds	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	4a08      	ldr	r2, [pc, #32]	; (80089f8 <USB_FlushTxFifo+0x60>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d901      	bls.n	80089de <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e006      	b.n	80089ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d0f1      	beq.n	80089ce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	00030d40 	.word	0x00030d40

080089fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	4a11      	ldr	r2, [pc, #68]	; (8008a54 <USB_FlushRxFifo+0x58>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d901      	bls.n	8008a18 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e017      	b.n	8008a48 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	daf3      	bge.n	8008a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2210      	movs	r2, #16
 8008a28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <USB_FlushRxFifo+0x58>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d901      	bls.n	8008a3a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e006      	b.n	8008a48 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f003 0310 	and.w	r3, r3, #16
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d0f1      	beq.n	8008a2a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	00030d40 	.word	0x00030d40

08008a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	68f9      	ldr	r1, [r7, #12]
 8008a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008aa4:	f023 0303 	bic.w	r3, r3, #3
 8008aa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab8:	f043 0302 	orr.w	r3, r3, #2
 8008abc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <USB_CoreReset+0x60>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d901      	bls.n	8008b04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e01a      	b.n	8008b3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	daf3      	bge.n	8008af4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	f043 0201 	orr.w	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	4a09      	ldr	r2, [pc, #36]	; (8008b48 <USB_CoreReset+0x60>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d901      	bls.n	8008b2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e006      	b.n	8008b3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d0f1      	beq.n	8008b1c <USB_CoreReset+0x34>

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	00030d40 	.word	0x00030d40

08008b4c <__libc_init_array>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4d0d      	ldr	r5, [pc, #52]	; (8008b84 <__libc_init_array+0x38>)
 8008b50:	4c0d      	ldr	r4, [pc, #52]	; (8008b88 <__libc_init_array+0x3c>)
 8008b52:	1b64      	subs	r4, r4, r5
 8008b54:	10a4      	asrs	r4, r4, #2
 8008b56:	2600      	movs	r6, #0
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	d109      	bne.n	8008b70 <__libc_init_array+0x24>
 8008b5c:	4d0b      	ldr	r5, [pc, #44]	; (8008b8c <__libc_init_array+0x40>)
 8008b5e:	4c0c      	ldr	r4, [pc, #48]	; (8008b90 <__libc_init_array+0x44>)
 8008b60:	f000 f820 	bl	8008ba4 <_init>
 8008b64:	1b64      	subs	r4, r4, r5
 8008b66:	10a4      	asrs	r4, r4, #2
 8008b68:	2600      	movs	r6, #0
 8008b6a:	42a6      	cmp	r6, r4
 8008b6c:	d105      	bne.n	8008b7a <__libc_init_array+0x2e>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b74:	4798      	blx	r3
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7ee      	b.n	8008b58 <__libc_init_array+0xc>
 8008b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7e:	4798      	blx	r3
 8008b80:	3601      	adds	r6, #1
 8008b82:	e7f2      	b.n	8008b6a <__libc_init_array+0x1e>
 8008b84:	08009144 	.word	0x08009144
 8008b88:	08009144 	.word	0x08009144
 8008b8c:	08009144 	.word	0x08009144
 8008b90:	08009148 	.word	0x08009148

08008b94 <memset>:
 8008b94:	4402      	add	r2, r0
 8008b96:	4603      	mov	r3, r0
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d100      	bne.n	8008b9e <memset+0xa>
 8008b9c:	4770      	bx	lr
 8008b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba2:	e7f9      	b.n	8008b98 <memset+0x4>

08008ba4 <_init>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	bf00      	nop
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr

08008bb0 <_fini>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr
