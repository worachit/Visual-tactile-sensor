
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008988  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009100  08009100  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009108  08009108  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08009110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025fa8  20000054  08009164  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20025ffc  08009164  00025ffc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018af7  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035f3  00000000  00000000  00038bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe8  00000000  00000000  0003d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a786  00000000  00000000  0003e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a78e  00000000  00000000  00068da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100ab7  00000000  00000000  00083534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005674  00000000  00000000  00183fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00189660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000054 	.word	0x20000054
 8000214:	00000000 	.word	0x00000000
 8000218:	08008b68 	.word	0x08008b68

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000058 	.word	0x20000058
 8000234:	08008b68 	.word	0x08008b68

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <OV5640_WriteReg>:
		is_dma_usart_finish = 1;
	}
}

int32_t OV5640_WriteReg(uint16_t device_address, uint16_t reg, uint8_t *data,
		uint16_t length) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af04      	add	r7, sp, #16
 800053a:	60ba      	str	r2, [r7, #8]
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	81fb      	strh	r3, [r7, #14]
 8000542:	460b      	mov	r3, r1
 8000544:	81bb      	strh	r3, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(&hi2c1, device_address, reg, 2, data, length, 1000)
 800054a:	89ba      	ldrh	r2, [r7, #12]
 800054c:	89f9      	ldrh	r1, [r7, #14]
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	9302      	str	r3, [sp, #8]
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2302      	movs	r3, #2
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <OV5640_WriteReg+0x48>)
 8000560:	f005 f8e8 	bl	8005734 <HAL_I2C_Mem_Write>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <OV5640_WriteReg+0x3a>
			== HAL_OK) {
		return OV5640_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e001      	b.n	8000572 <OV5640_WriteReg+0x3e>
	}
	return OV5640_ERROR;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000120 	.word	0x20000120

08000580 <OV5640_ReadReg>:
int32_t OV5640_ReadReg(uint16_t device_address, uint16_t reg, uint8_t *data,
		uint16_t length) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af04      	add	r7, sp, #16
 8000586:	60ba      	str	r2, [r7, #8]
 8000588:	461a      	mov	r2, r3
 800058a:	4603      	mov	r3, r0
 800058c:	81fb      	strh	r3, [r7, #14]
 800058e:	460b      	mov	r3, r1
 8000590:	81bb      	strh	r3, [r7, #12]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_Mem_Read(&hi2c1, device_address + 1, reg, 2, data, length, 1000)
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	3301      	adds	r3, #1
 800059a:	b299      	uxth	r1, r3
 800059c:	89ba      	ldrh	r2, [r7, #12]
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <OV5640_ReadReg+0x4c>)
 80005b0:	f005 f9d4 	bl	800595c <HAL_I2C_Mem_Read>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <OV5640_ReadReg+0x3e>
			== HAL_OK) {
		return OV5640_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e001      	b.n	80005c2 <OV5640_ReadReg+0x42>
	}
	return OV5640_ERROR;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000120 	.word	0x20000120

080005d0 <OV5640_Powerup>:
void OV5640_Powerup() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <OV5640_Powerup+0x3c>)
 80005dc:	f005 f800 	bl	80055e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <OV5640_Powerup+0x3c>)
 80005e8:	f004 fffa 	bl	80055e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f002 fd21 	bl	8003034 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <OV5640_Powerup+0x3c>)
 80005fa:	f004 fff1 	bl	80055e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f002 fd17 	bl	8003034 <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020c00 	.word	0x40020c00

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f002 fcb0 	bl	8002f7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8ab 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 faab 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f000 fa29 	bl	8000a78 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f9c9 	bl	80009bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062a:	f000 f9f7 	bl	8000a1c <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 800062e:	f000 f913 	bl	8000858 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000632:	f000 f945 	bl	80008c0 <MX_I2C1_Init>
  MX_FMC_Init();
 8000636:	f000 fa3d 	bl	8000ab4 <MX_FMC_Init>
  MX_SPI1_Init();
 800063a:	f000 f981 	bl	8000940 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  cam_i2c.Address = 0x78;
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <main+0x13c>)
 8000640:	2278      	movs	r2, #120	; 0x78
 8000642:	811a      	strh	r2, [r3, #8]
  cam_i2c.WriteReg = OV5640_WriteReg;
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <main+0x13c>)
 8000646:	4a42      	ldr	r2, [pc, #264]	; (8000750 <main+0x140>)
 8000648:	60da      	str	r2, [r3, #12]
  cam_i2c.ReadReg = OV5640_ReadReg;
 800064a:	4b40      	ldr	r3, [pc, #256]	; (800074c <main+0x13c>)
 800064c:	4a41      	ldr	r2, [pc, #260]	; (8000754 <main+0x144>)
 800064e:	611a      	str	r2, [r3, #16]

  OV5640_RegisterBusIO(&p_cam, &cam_i2c);
 8000650:	493e      	ldr	r1, [pc, #248]	; (800074c <main+0x13c>)
 8000652:	4841      	ldr	r0, [pc, #260]	; (8000758 <main+0x148>)
 8000654:	f000 fbaa 	bl	8000dac <OV5640_RegisterBusIO>

	int32_t status = OV5640_ERROR;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800065c:	60fb      	str	r3, [r7, #12]
	uint32_t resolution;
	uint8_t RGBGain[6];
	memset(RGBGain, 0, sizeof(RGBGain));
 800065e:	463b      	mov	r3, r7
 8000660:	2206      	movs	r2, #6
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f008 fa53 	bl	8008b10 <memset>

	OV5640_Powerup();
 800066a:	f7ff ffb1 	bl	80005d0 <OV5640_Powerup>
	status = OV5640_CAMERA_Driver.Init(&p_cam, OV5640_R320x240, OV5640_RGB565);
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <main+0x14c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	4838      	ldr	r0, [pc, #224]	; (8000758 <main+0x148>)
 8000678:	4798      	blx	r3
 800067a:	60f8      	str	r0, [r7, #12]
	// verify with resolution ()
	status = OV5640_CAMERA_Driver.GetResolution(&p_cam, &resolution);
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <main+0x14c>)
 800067e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000680:	f107 0208 	add.w	r2, r7, #8
 8000684:	4611      	mov	r1, r2
 8000686:	4834      	ldr	r0, [pc, #208]	; (8000758 <main+0x148>)
 8000688:	4798      	blx	r3
 800068a:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetColorEffect(&p_cam,
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <main+0x14c>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	2100      	movs	r1, #0
 8000692:	4831      	ldr	r0, [pc, #196]	; (8000758 <main+0x148>)
 8000694:	4798      	blx	r3
 8000696:	60f8      	str	r0, [r7, #12]
	OV5640_COLOR_EFFECT_NONE);
	status = OV5640_CAMERA_Driver.SetBrightness(&p_cam, 2);
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <main+0x14c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	2102      	movs	r1, #2
 800069e:	482e      	ldr	r0, [pc, #184]	; (8000758 <main+0x148>)
 80006a0:	4798      	blx	r3
 80006a2:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetSaturation(&p_cam, 0);
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <main+0x14c>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	2100      	movs	r1, #0
 80006aa:	482b      	ldr	r0, [pc, #172]	; (8000758 <main+0x148>)
 80006ac:	4798      	blx	r3
 80006ae:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetContrast(&p_cam, 0);
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <main+0x14c>)
 80006b2:	6a1b      	ldr	r3, [r3, #32]
 80006b4:	2100      	movs	r1, #0
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <main+0x148>)
 80006b8:	4798      	blx	r3
 80006ba:	60f8      	str	r0, [r7, #12]
	status = OV5640_CAMERA_Driver.SetHueDegree(&p_cam, 0);
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <main+0x14c>)
 80006be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c0:	2100      	movs	r1, #0
 80006c2:	4825      	ldr	r0, [pc, #148]	; (8000758 <main+0x148>)
 80006c4:	4798      	blx	r3
 80006c6:	60f8      	str	r0, [r7, #12]
//	status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_MANUAL_DEFAULT);
	status = OV5640_CAMERA_Driver.SetLightMode(&p_cam, OV5640_LIGHT_AUTO);
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <main+0x14c>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4822      	ldr	r0, [pc, #136]	; (8000758 <main+0x148>)
 80006d0:	4798      	blx	r3
 80006d2:	60f8      	str	r0, [r7, #12]
	HAL_Delay(10000);
 80006d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006d8:	f002 fcac 	bl	8003034 <HAL_Delay>


	/////////////////////////////////////////
	memset(image, 0, sizeof(image));
 80006dc:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80006e0:	2100      	movs	r1, #0
 80006e2:	481f      	ldr	r0, [pc, #124]	; (8000760 <main+0x150>)
 80006e4:	f008 fa14 	bl	8008b10 <memset>
	//  status = OV5640_CAMERA_Driver.GetAWBRGBGain(&p_cam, RGBGain);
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) image,
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <main+0x150>)
 80006ea:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80006ee:	2102      	movs	r1, #2
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <main+0x154>)
 80006f2:	f002 fe4f 	bl	8003394 <HAL_DCMI_Start_DMA>
			sizeof(image));
	//  status = OV5640_CAMERA_Driver.GetAWBRGBGain(&p_cam, RGBGain);
	HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fa:	f002 fc9b 	bl	8003034 <HAL_Delay>
	HAL_DCMI_Suspend(&hdcmi);
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <main+0x154>)
 8000700:	f002 ff54 	bl	80035ac <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(&hdcmi);
 8000704:	4817      	ldr	r0, [pc, #92]	; (8000764 <main+0x154>)
 8000706:	f002 fef3 	bl	80034f0 <HAL_DCMI_Stop>
	HAL_Delay(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f002 fc91 	bl	8003034 <HAL_Delay>

	if (sizeof(image) > 65535) {
		HAL_UART_Transmit(&huart3, image, 65535, 10000);
 8000712:	f242 7310 	movw	r3, #10000	; 0x2710
 8000716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071a:	4911      	ldr	r1, [pc, #68]	; (8000760 <main+0x150>)
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0x158>)
 800071e:	f007 f94e 	bl	80079be <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, image + 65535, 65535, 10000);
 8000722:	4912      	ldr	r1, [pc, #72]	; (800076c <main+0x15c>)
 8000724:	f242 7310 	movw	r3, #10000	; 0x2710
 8000728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <main+0x158>)
 800072e:	f007 f946 	bl	80079be <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, image + 65535*2, sizeof(image) - 65535*2, 10000);
 8000732:	490f      	ldr	r1, [pc, #60]	; (8000770 <main+0x160>)
 8000734:	f242 7310 	movw	r3, #10000	; 0x2710
 8000738:	f645 0202 	movw	r2, #22530	; 0x5802
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <main+0x158>)
 800073e:	f007 f93e 	bl	80079be <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&huart3, image, sizeof(image), 10000);
	}
	HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f002 fc75 	bl	8003034 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800074a:	e7fe      	b.n	800074a <main+0x13a>
 800074c:	200007dc 	.word	0x200007dc
 8000750:	08000535 	.word	0x08000535
 8000754:	08000581 	.word	0x08000581
 8000758:	200007b4 	.word	0x200007b4
 800075c:	20000000 	.word	0x20000000
 8000760:	200007f4 	.word	0x200007f4
 8000764:	20000070 	.word	0x20000070
 8000768:	200001d8 	.word	0x200001d8
 800076c:	200107f3 	.word	0x200107f3
 8000770:	200207f2 	.word	0x200207f2

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2234      	movs	r2, #52	; 0x34
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f008 f9c4 	bl	8008b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000798:	f005 fe74 	bl	8006484 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <SystemClock_Config+0xdc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <SystemClock_Config+0xdc>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xdc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <SystemClock_Config+0xe0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a25      	ldr	r2, [pc, #148]	; (8000854 <SystemClock_Config+0xe0>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xe0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 fea1 	bl	8006544 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000808:	f000 faca 	bl	8000da0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800080c:	f005 fe4a 	bl	80064a4 <HAL_PWREx_EnableOverDrive>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000816:	f000 fac3 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2103      	movs	r1, #3
 8000836:	4618      	mov	r0, r3
 8000838:	f006 f932 	bl	8006aa0 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000842:	f000 faad 	bl	8000da0 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_DCMI_Init+0x60>)
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_DCMI_Init+0x64>)
 8000860:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_DCMI_Init+0x60>)
 800086a:	2220      	movs	r2, #32
 800086c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_DCMI_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_DCMI_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DCMI_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_DCMI_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_DCMI_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_DCMI_Init+0x60>)
 80008a6:	f002 fcfb 	bl	80032a0 <HAL_DCMI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fa76 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000070 	.word	0x20000070
 80008bc:	50050000 	.word	0x50050000

080008c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_I2C1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_I2C1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_I2C1_Init+0x74>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <MX_I2C1_Init+0x7c>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_I2C1_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_I2C1_Init+0x74>)
 80008fc:	f004 fe8a 	bl	8005614 <HAL_I2C_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 fa4b 	bl	8000da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_I2C1_Init+0x74>)
 800090e:	f005 fbd9 	bl	80060c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 fa42 	bl	8000da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_I2C1_Init+0x74>)
 8000920:	f005 fc1b 	bl	800615a <HAL_I2CEx_ConfigDigitalFilter>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 fa39 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000120 	.word	0x20000120
 8000938:	40005400 	.word	0x40005400
 800093c:	20303e5d 	.word	0x20303e5d

08000940 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_SPI1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_SPI1_Init+0x74>)
 800094c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0x74>)
 800095a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800095e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0x74>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x74>)
 800099a:	2208      	movs	r2, #8
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI1_Init+0x74>)
 80009a0:	f006 fecc 	bl	800773c <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 f9f9 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000174 	.word	0x20000174
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART3_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART3_UART_Init+0x58>)
 8000a00:	f006 ff8f 	bl	8007922 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f9c9 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001d8 	.word	0x200001d8
 8000a18:	40004800 	.word	0x40004800

08000a1c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	f005 fbc7 	bl	80061f2 <HAL_PCD_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f999 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000260 	.word	0x20000260

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_DMA_Init+0x38>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2039      	movs	r0, #57	; 0x39
 8000a9c:	f002 fbc9 	bl	8003232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000aa0:	2039      	movs	r0, #57	; 0x39
 8000aa2:	f002 fbe2 	bl	800326a <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000ace:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ad2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000ad6:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <MX_FMC_Init+0xc0>)
 8000ad8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000b34:	230f      	movs	r3, #15
 8000b36:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000b3c:	23ff      	movs	r3, #255	; 0xff
 8000b3e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000b40:	230f      	movs	r3, #15
 8000b42:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b44:	2310      	movs	r3, #16
 8000b46:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b48:	2311      	movs	r3, #17
 8000b4a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_FMC_Init+0xbc>)
 8000b58:	f006 fe9b 	bl	8007892 <HAL_SRAM_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000b62:	f000 f91d 	bl	8000da0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000768 	.word	0x20000768
 8000b74:	a0000104 	.word	0xa0000104

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b7e      	ldr	r3, [pc, #504]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a7d      	ldr	r2, [pc, #500]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b7b      	ldr	r3, [pc, #492]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	623b      	str	r3, [r7, #32]
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b78      	ldr	r3, [pc, #480]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a77      	ldr	r2, [pc, #476]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b75      	ldr	r3, [pc, #468]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a71      	ldr	r2, [pc, #452]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a6b      	ldr	r2, [pc, #428]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b66      	ldr	r3, [pc, #408]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a65      	ldr	r2, [pc, #404]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b63      	ldr	r3, [pc, #396]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b60      	ldr	r3, [pc, #384]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a5f      	ldr	r2, [pc, #380]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	4b5a      	ldr	r3, [pc, #360]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a59      	ldr	r2, [pc, #356]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a53      	ldr	r2, [pc, #332]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b51      	ldr	r3, [pc, #324]	; (8000d88 <MX_GPIO_Init+0x210>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c54:	484d      	ldr	r0, [pc, #308]	; (8000d8c <MX_GPIO_Init+0x214>)
 8000c56:	f004 fcc3 	bl	80055e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAMERA_PWDN_Pin|CAMERA_RST_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c60:	484b      	ldr	r0, [pc, #300]	; (8000d90 <MX_GPIO_Init+0x218>)
 8000c62:	f004 fcbd 	bl	80055e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	484a      	ldr	r0, [pc, #296]	; (8000d94 <MX_GPIO_Init+0x21c>)
 8000c6c:	f004 fcb8 	bl	80055e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4844      	ldr	r0, [pc, #272]	; (8000d98 <MX_GPIO_Init+0x220>)
 8000c88:	f004 fafe 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c8c:	2332      	movs	r3, #50	; 0x32
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	483c      	ldr	r0, [pc, #240]	; (8000d98 <MX_GPIO_Init+0x220>)
 8000ca8:	f004 faee 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cac:	2386      	movs	r3, #134	; 0x86
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4835      	ldr	r0, [pc, #212]	; (8000d9c <MX_GPIO_Init+0x224>)
 8000cc8:	f004 fade 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ccc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4829      	ldr	r0, [pc, #164]	; (8000d8c <MX_GPIO_Init+0x214>)
 8000ce6:	f004 facf 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4821      	ldr	r0, [pc, #132]	; (8000d8c <MX_GPIO_Init+0x214>)
 8000d08:	f004 fabe 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_PWDN_Pin CAMERA_RST_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin|CAMERA_RST_Pin;
 8000d0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	481a      	ldr	r0, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x218>)
 8000d26:	f004 faaf 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d2a:	2340      	movs	r3, #64	; 0x40
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_GPIO_Init+0x21c>)
 8000d42:	f004 faa1 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_GPIO_Init+0x21c>)
 8000d5a:	f004 fa95 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d70:	230b      	movs	r3, #11
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_GPIO_Init+0x21c>)
 8000d7c:	f004 fa84 	bl	8005288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d80:	bf00      	nop
 8000d82:	3738      	adds	r7, #56	; 0x38
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d103      	bne.n	8000dc4 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e030      	b.n	8000e26 <OV5640_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	891a      	ldrh	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <OV5640_RegisterBusIO+0x84>)
 8000df8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <OV5640_RegisterBusIO+0x88>)
 8000dfe:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	621a      	str	r2, [r3, #32]

	pObj->IsInitialized = 0U;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <OV5640_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4798      	blx	r3
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	e002      	b.n	8000e26 <OV5640_RegisterBusIO+0x7a>
    }
    else
    {
      ret = OV5640_ERROR;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e24:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	080027a7 	.word	0x080027a7
 8000e34:	080027d9 	.word	0x080027d9

08000e38 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d165      	bne.n	8000f1e <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d80e      	bhi.n	8000e76 <OV5640_Init+0x3e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00f      	beq.n	8000e7e <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00c      	beq.n	8000e7e <OV5640_Init+0x46>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d009      	beq.n	8000e7e <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d006      	beq.n	8000e7e <OV5640_Init+0x46>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d003      	beq.n	8000e7e <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	e04f      	b.n	8000f1e <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e01f      	b.n	8000ec4 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e8a:	d018      	beq.n	8000ebe <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8000e8c:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <OV5640_Init+0xf0>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	885b      	ldrh	r3, [r3, #2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f103 0018 	add.w	r0, r3, #24
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <OV5640_Init+0xf0>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000ea8:	f107 0217 	add.w	r2, r7, #23
 8000eac:	2301      	movs	r3, #1
 8000eae:	f001 fcc3 	bl	8002838 <ov5640_write_reg>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebc:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2bfd      	cmp	r3, #253	; 0xfd
 8000ec8:	d9dc      	bls.n	8000e84 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d126      	bne.n	8000f1e <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 f9e0 	bl	8001298 <OV5640_SetResolution>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	e01b      	b.n	8000f1e <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 f833 	bl	8000f54 <OV5640_SetPixelFormat>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e010      	b.n	8000f1e <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8000efc:	2300      	movs	r3, #0
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 fb64 	bl	80015d0 <OV5640_SetPolarities>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e003      	b.n	8000f1e <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08008bc8 	.word	0x08008bc8

08000f2c <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d103      	bne.n	8000f46 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00f      	beq.n	8000f88 <OV5640_SetPixelFormat+0x34>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d00c      	beq.n	8000f88 <OV5640_SetPixelFormat+0x34>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d009      	beq.n	8000f88 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d006      	beq.n	8000f88 <OV5640_SetPixelFormat+0x34>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d003      	beq.n	8000f88 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e16a      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	f200 80c3 	bhi.w	8001118 <OV5640_SetPixelFormat+0x1c4>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <OV5640_SetPixelFormat+0x44>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001011 	.word	0x08001011
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08001119 	.word	0x08001119
 8000fa4:	08001119 	.word	0x08001119
 8000fa8:	08001119 	.word	0x08001119
 8000fac:	08001119 	.word	0x08001119
 8000fb0:	08001069 	.word	0x08001069
 8000fb4:	080010c1 	.word	0x080010c1
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e024      	b.n	8001008 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc4:	d01d      	beq.n	8001002 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8000fc6:	4aa8      	ldr	r2, [pc, #672]	; (8001268 <OV5640_SetPixelFormat+0x314>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	885b      	ldrh	r3, [r3, #2]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f103 0018 	add.w	r0, r3, #24
 8000fda:	4aa3      	ldr	r2, [pc, #652]	; (8001268 <OV5640_SetPixelFormat+0x314>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8000fe2:	f107 020f 	add.w	r2, r7, #15
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f001 fc26 	bl	8002838 <ov5640_write_reg>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e003      	b.n	8001002 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 fbc5 	bl	800278c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	3301      	adds	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d9d7      	bls.n	8000fbe <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800100e:	e0af      	b.n	8001170 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	e024      	b.n	8001060 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d01d      	beq.n	800105a <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800101e:	4a93      	ldr	r2, [pc, #588]	; (800126c <OV5640_SetPixelFormat+0x318>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	885b      	ldrh	r3, [r3, #2]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f103 0018 	add.w	r0, r3, #24
 8001032:	4a8e      	ldr	r2, [pc, #568]	; (800126c <OV5640_SetPixelFormat+0x318>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800103a:	f107 020f 	add.w	r2, r7, #15
 800103e:	2301      	movs	r3, #1
 8001040:	f001 fbfa 	bl	8002838 <ov5640_write_reg>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e003      	b.n	800105a <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001052:	2101      	movs	r1, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f001 fb99 	bl	800278c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	3301      	adds	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d9d7      	bls.n	8001016 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001066:	e083      	b.n	8001170 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	e024      	b.n	80010b8 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001074:	d01d      	beq.n	80010b2 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <OV5640_SetPixelFormat+0x31c>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f103 0018 	add.w	r0, r3, #24
 800108a:	4a79      	ldr	r2, [pc, #484]	; (8001270 <OV5640_SetPixelFormat+0x31c>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001092:	f107 020f 	add.w	r2, r7, #15
 8001096:	2301      	movs	r3, #1
 8001098:	f001 fbce 	bl	8002838 <ov5640_write_reg>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e003      	b.n	80010b2 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80010aa:	2101      	movs	r1, #1
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 fb6d 	bl	800278c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3301      	adds	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d9d7      	bls.n	800106e <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80010be:	e057      	b.n	8001170 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	e024      	b.n	8001110 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010cc:	d01d      	beq.n	800110a <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80010ce:	4a69      	ldr	r2, [pc, #420]	; (8001274 <OV5640_SetPixelFormat+0x320>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f103 0018 	add.w	r0, r3, #24
 80010e2:	4a64      	ldr	r2, [pc, #400]	; (8001274 <OV5640_SetPixelFormat+0x320>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010ea:	f107 020f 	add.w	r2, r7, #15
 80010ee:	2301      	movs	r3, #1
 80010f0:	f001 fba2 	bl	8002838 <ov5640_write_reg>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e003      	b.n	800110a <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001102:	2101      	movs	r1, #1
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fb41 	bl	800278c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	3301      	adds	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d9d7      	bls.n	80010c6 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001116:	e02b      	b.n	8001170 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	e024      	b.n	8001168 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001124:	d01d      	beq.n	8001162 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001126:	4a54      	ldr	r2, [pc, #336]	; (8001278 <OV5640_SetPixelFormat+0x324>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	885b      	ldrh	r3, [r3, #2]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f103 0018 	add.w	r0, r3, #24
 800113a:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <OV5640_SetPixelFormat+0x324>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001142:	f107 020f 	add.w	r2, r7, #15
 8001146:	2301      	movs	r3, #1
 8001148:	f001 fb76 	bl	8002838 <ov5640_write_reg>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e003      	b.n	8001162 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800115a:	2101      	movs	r1, #1
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fb15 	bl	800278c <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3301      	adds	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d9d7      	bls.n	800111e <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800116e:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b08      	cmp	r3, #8
 8001174:	d173      	bne.n	800125e <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f103 0018 	add.w	r0, r3, #24
 800117c:	f107 020f 	add.w	r2, r7, #15
 8001180:	2301      	movs	r3, #1
 8001182:	f643 0121 	movw	r1, #14369	; 0x3821
 8001186:	f001 fb40 	bl	800280a <ov5640_read_reg>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e062      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f103 0018 	add.w	r0, r3, #24
 80011a8:	f107 020f 	add.w	r2, r7, #15
 80011ac:	2301      	movs	r3, #1
 80011ae:	f643 0121 	movw	r1, #14369	; 0x3821
 80011b2:	f001 fb41 	bl	8002838 <ov5640_write_reg>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e04c      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 0018 	add.w	r0, r3, #24
 80011ca:	f107 020f 	add.w	r2, r7, #15
 80011ce:	2301      	movs	r3, #1
 80011d0:	f243 0102 	movw	r1, #12290	; 0x3002
 80011d4:	f001 fb19 	bl	800280a <ov5640_read_reg>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e03b      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f023 031c 	bic.w	r3, r3, #28
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f103 0018 	add.w	r0, r3, #24
 80011f6:	f107 020f 	add.w	r2, r7, #15
 80011fa:	2301      	movs	r3, #1
 80011fc:	f243 0102 	movw	r1, #12290	; 0x3002
 8001200:	f001 fb1a 	bl	8002838 <ov5640_write_reg>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e025      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 0018 	add.w	r0, r3, #24
 8001218:	f107 020f 	add.w	r2, r7, #15
 800121c:	2301      	movs	r3, #1
 800121e:	f243 0106 	movw	r1, #12294	; 0x3006
 8001222:	f001 faf2 	bl	800280a <ov5640_read_reg>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e014      	b.n	800125e <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800123a:	b2db      	uxtb	r3, r3
 800123c:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0018 	add.w	r0, r3, #24
 8001244:	f107 020f 	add.w	r2, r7, #15
 8001248:	2301      	movs	r3, #1
 800124a:	f243 0106 	movw	r1, #12294	; 0x3006
 800124e:	f001 faf3 	bl	8002838 <ov5640_write_reg>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125c:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800125e:	697b      	ldr	r3, [r7, #20]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08008fc0 	.word	0x08008fc0
 800126c:	08008fc8 	.word	0x08008fc8
 8001270:	08008fd0 	.word	0x08008fd0
 8001274:	08008fd8 	.word	0x08008fd8
 8001278:	08008fe0 	.word	0x08008fe0

0800127c <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d903      	bls.n	80012b4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e0d8      	b.n	8001466 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	f200 80d1 	bhi.w	800145e <OV5640_SetResolution+0x1c6>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <OV5640_SetResolution+0x2c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d9 	.word	0x080012d9
 80012c8:	08001327 	.word	0x08001327
 80012cc:	08001375 	.word	0x08001375
 80012d0:	080013c3 	.word	0x080013c3
 80012d4:	08001411 	.word	0x08001411
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e01f      	b.n	800131e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e4:	d018      	beq.n	8001318 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <OV5640_SetResolution+0x1d8>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	885b      	ldrh	r3, [r3, #2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f103 0018 	add.w	r0, r3, #24
 80012fa:	4a5d      	ldr	r2, [pc, #372]	; (8001470 <OV5640_SetResolution+0x1d8>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001302:	f107 020f 	add.w	r2, r7, #15
 8001306:	2301      	movs	r3, #1
 8001308:	f001 fa96 	bl	8002838 <ov5640_write_reg>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001316:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d9dc      	bls.n	80012de <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001324:	e09f      	b.n	8001466 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e01f      	b.n	800136c <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001332:	d018      	beq.n	8001366 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <OV5640_SetResolution+0x1dc>)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f103 0018 	add.w	r0, r3, #24
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <OV5640_SetResolution+0x1dc>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001350:	f107 020f 	add.w	r2, r7, #15
 8001354:	2301      	movs	r3, #1
 8001356:	f001 fa6f 	bl	8002838 <ov5640_write_reg>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001364:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	3301      	adds	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d9dc      	bls.n	800132c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001372:	e078      	b.n	8001466 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e01f      	b.n	80013ba <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001380:	d018      	beq.n	80013b4 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001382:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <OV5640_SetResolution+0x1e0>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	885b      	ldrh	r3, [r3, #2]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f103 0018 	add.w	r0, r3, #24
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <OV5640_SetResolution+0x1e0>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800139e:	f107 020f 	add.w	r2, r7, #15
 80013a2:	2301      	movs	r3, #1
 80013a4:	f001 fa48 	bl	8002838 <ov5640_write_reg>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	3301      	adds	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d9dc      	bls.n	800137a <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80013c0:	e051      	b.n	8001466 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e01f      	b.n	8001408 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ce:	d018      	beq.n	8001402 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80013d0:	4a2a      	ldr	r2, [pc, #168]	; (800147c <OV5640_SetResolution+0x1e4>)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	885b      	ldrh	r3, [r3, #2]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0018 	add.w	r0, r3, #24
 80013e4:	4a25      	ldr	r2, [pc, #148]	; (800147c <OV5640_SetResolution+0x1e4>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013ec:	f107 020f 	add.w	r2, r7, #15
 80013f0:	2301      	movs	r3, #1
 80013f2:	f001 fa21 	bl	8002838 <ov5640_write_reg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001400:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	3301      	adds	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d9dc      	bls.n	80013c8 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800140e:	e02a      	b.n	8001466 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	e01f      	b.n	8001456 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141c:	d018      	beq.n	8001450 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <OV5640_SetResolution+0x1e8>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	885b      	ldrh	r3, [r3, #2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f103 0018 	add.w	r0, r3, #24
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <OV5640_SetResolution+0x1e8>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800143a:	f107 020f 	add.w	r2, r7, #15
 800143e:	2301      	movs	r3, #1
 8001440:	f001 f9fa 	bl	8002838 <ov5640_write_reg>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3301      	adds	r3, #1
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d9dc      	bls.n	8001416 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 800145c:	e003      	b.n	8001466 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001462:	617b      	str	r3, [r7, #20]
        break;
 8001464:	bf00      	nop
    }
  }

  return ret;
 8001466:	697b      	ldr	r3, [r7, #20]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	08008fe8 	.word	0x08008fe8
 8001474:	08008ff8 	.word	0x08008ff8
 8001478:	08009008 	.word	0x08009008
 800147c:	08009018 	.word	0x08009018
 8001480:	08009028 	.word	0x08009028

08001484 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0018 	add.w	r0, r3, #24
 8001494:	f107 020f 	add.w	r2, r7, #15
 8001498:	2301      	movs	r3, #1
 800149a:	f643 0108 	movw	r1, #14344	; 0x3808
 800149e:	f001 f9b4 	bl	800280a <ov5640_read_reg>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e08a      	b.n	80015c6 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f103 0018 	add.w	r0, r3, #24
 80014be:	f107 020f 	add.w	r2, r7, #15
 80014c2:	2301      	movs	r3, #1
 80014c4:	f643 0109 	movw	r1, #14345	; 0x3809
 80014c8:	f001 f99f 	bl	800280a <ov5640_read_reg>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e075      	b.n	80015c6 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8a7b      	ldrh	r3, [r7, #18]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f103 0018 	add.w	r0, r3, #24
 80014ea:	f107 020f 	add.w	r2, r7, #15
 80014ee:	2301      	movs	r3, #1
 80014f0:	f643 010a 	movw	r1, #14346	; 0x380a
 80014f4:	f001 f989 	bl	800280a <ov5640_read_reg>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e05f      	b.n	80015c6 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29b      	uxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f103 0018 	add.w	r0, r3, #24
 8001514:	f107 020f 	add.w	r2, r7, #15
 8001518:	2301      	movs	r3, #1
 800151a:	f643 010b 	movw	r1, #14347	; 0x380b
 800151e:	f001 f974 	bl	800280a <ov5640_read_reg>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e04a      	b.n	80015c6 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b29a      	uxth	r2, r3
 8001534:	8a3b      	ldrh	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800153a:	8a7b      	ldrh	r3, [r7, #18]
 800153c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001540:	d109      	bne.n	8001556 <OV5640_GetResolution+0xd2>
 8001542:	8a3b      	ldrh	r3, [r7, #16]
 8001544:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001548:	d105      	bne.n	8001556 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2204      	movs	r2, #4
 800154e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e037      	b.n	80015c6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001556:	8a7b      	ldrh	r3, [r7, #18]
 8001558:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800155c:	d109      	bne.n	8001572 <OV5640_GetResolution+0xee>
 800155e:	8a3b      	ldrh	r3, [r7, #16]
 8001560:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001564:	d105      	bne.n	8001572 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2203      	movs	r2, #3
 800156a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e029      	b.n	80015c6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001572:	8a7b      	ldrh	r3, [r7, #18]
 8001574:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001578:	d109      	bne.n	800158e <OV5640_GetResolution+0x10a>
 800157a:	8a3b      	ldrh	r3, [r7, #16]
 800157c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001580:	d105      	bne.n	800158e <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e01b      	b.n	80015c6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 800158e:	8a7b      	ldrh	r3, [r7, #18]
 8001590:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001594:	d108      	bne.n	80015a8 <OV5640_GetResolution+0x124>
 8001596:	8a3b      	ldrh	r3, [r7, #16]
 8001598:	2bf0      	cmp	r3, #240	; 0xf0
 800159a:	d105      	bne.n	80015a8 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e00e      	b.n	80015c6 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80015a8:	8a7b      	ldrh	r3, [r7, #18]
 80015aa:	2ba0      	cmp	r3, #160	; 0xa0
 80015ac:	d108      	bne.n	80015c0 <OV5640_GetResolution+0x13c>
 80015ae:	8a3b      	ldrh	r3, [r7, #16]
 80015b0:	2b78      	cmp	r3, #120	; 0x78
 80015b2:	d105      	bne.n	80015c0 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e002      	b.n	80015c6 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80015c6:	697b      	ldr	r3, [r7, #20]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d011      	beq.n	800160c <OV5640_SetPolarities+0x3c>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <OV5640_SetPolarities+0x24>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10b      	bne.n	800160c <OV5640_SetPolarities+0x3c>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <OV5640_SetPolarities+0x3c>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d006      	beq.n	8001614 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e01e      	b.n	8001652 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	b2da      	uxtb	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f103 0018 	add.w	r0, r3, #24
 8001638:	f107 0213 	add.w	r2, r7, #19
 800163c:	2301      	movs	r3, #1
 800163e:	f244 7140 	movw	r1, #18240	; 0x4740
 8001642:	f001 f8f9 	bl	8002838 <ov5640_write_reg>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001650:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001652:	697b      	ldr	r3, [r7, #20]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f103 0018 	add.w	r0, r3, #24
 8001676:	f107 020b 	add.w	r2, r7, #11
 800167a:	2301      	movs	r3, #1
 800167c:	f243 0108 	movw	r1, #12296	; 0x3008
 8001680:	f001 f8da 	bl	8002838 <ov5640_write_reg>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e032      	b.n	80016f8 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001692:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 f878 	bl	800278c <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0018 	add.w	r0, r3, #24
 80016a2:	f107 020b 	add.w	r2, r7, #11
 80016a6:	2301      	movs	r3, #1
 80016a8:	f243 010a 	movw	r1, #12298	; 0x300a
 80016ac:	f001 f8ad 	bl	800280a <ov5640_read_reg>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e01c      	b.n	80016f8 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	021a      	lsls	r2, r3, #8
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f103 0018 	add.w	r0, r3, #24
 80016cc:	f107 020b 	add.w	r2, r7, #11
 80016d0:	2301      	movs	r3, #1
 80016d2:	f243 010b 	movw	r1, #12299	; 0x300b
 80016d6:	f001 f898 	bl	800280a <ov5640_read_reg>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e007      	b.n	80016f8 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	7afa      	ldrb	r2, [r7, #11]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e01f      	b.n	800175a <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x06},
    {OV5640_AWB_B_GAIN_LSB, 0x93},
  };

  tmp = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f103 0018 	add.w	r0, r3, #24
 800177c:	f107 020f 	add.w	r2, r7, #15
 8001780:	2301      	movs	r3, #1
 8001782:	f243 4106 	movw	r1, #13318	; 0x3406
 8001786:	f001 f857 	bl	8002838 <ov5640_write_reg>
 800178a:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001792:	2346      	movs	r3, #70	; 0x46
 8001794:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0018 	add.w	r0, r3, #24
 800179c:	f107 020f 	add.w	r2, r7, #15
 80017a0:	2301      	movs	r3, #1
 80017a2:	f245 1190 	movw	r1, #20880	; 0x5190
 80017a6:	f001 f847 	bl	8002838 <ov5640_write_reg>
 80017aa:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80017b2:	23f8      	movs	r3, #248	; 0xf8
 80017b4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f103 0018 	add.w	r0, r3, #24
 80017bc:	f107 020f 	add.w	r2, r7, #15
 80017c0:	2301      	movs	r3, #1
 80017c2:	f245 1191 	movw	r1, #20881	; 0x5191
 80017c6:	f001 f837 	bl	8002838 <ov5640_write_reg>
 80017ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80017d2:	2304      	movs	r3, #4
 80017d4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f103 0018 	add.w	r0, r3, #24
 80017dc:	f107 020f 	add.w	r2, r7, #15
 80017e0:	2301      	movs	r3, #1
 80017e2:	f245 1192 	movw	r1, #20882	; 0x5192
 80017e6:	f001 f827 	bl	8002838 <ov5640_write_reg>
 80017ea:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8112 	bne.w	8001a18 <OV5640_SetLightMode+0x2b0>
  {
    switch (LightMode)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	f200 80e6 	bhi.w	80019ca <OV5640_SetLightMode+0x262>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <OV5640_SetLightMode+0x9c>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001845 	.word	0x08001845
 8001808:	08001893 	.word	0x08001893
 800180c:	080019cb 	.word	0x080019cb
 8001810:	0800192f 	.word	0x0800192f
 8001814:	080019cb 	.word	0x080019cb
 8001818:	080019cb 	.word	0x080019cb
 800181c:	080019cb 	.word	0x080019cb
 8001820:	080018e1 	.word	0x080018e1
 8001824:	080019cb 	.word	0x080019cb
 8001828:	080019cb 	.word	0x080019cb
 800182c:	080019cb 	.word	0x080019cb
 8001830:	080019cb 	.word	0x080019cb
 8001834:	080019cb 	.word	0x080019cb
 8001838:	080019cb 	.word	0x080019cb
 800183c:	080019cb 	.word	0x080019cb
 8001840:	0800197d 	.word	0x0800197d
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e01f      	b.n	800188a <OV5640_SetLightMode+0x122>
        {
          if (ret != OV5640_ERROR)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d018      	beq.n	8001884 <OV5640_SetLightMode+0x11c>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001852:	4a74      	ldr	r2, [pc, #464]	; (8001a24 <OV5640_SetLightMode+0x2bc>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f103 0018 	add.w	r0, r3, #24
 8001866:	4a6f      	ldr	r2, [pc, #444]	; (8001a24 <OV5640_SetLightMode+0x2bc>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800186e:	f107 020f 	add.w	r2, r7, #15
 8001872:	2301      	movs	r3, #1
 8001874:	f000 ffe0 	bl	8002838 <ov5640_write_reg>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <OV5640_SetLightMode+0x11c>
            {
              ret = OV5640_ERROR;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d9dc      	bls.n	800184a <OV5640_SetLightMode+0xe2>
            }
          }
        }
        break;
 8001890:	e0c2      	b.n	8001a18 <OV5640_SetLightMode+0x2b0>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e01f      	b.n	80018d8 <OV5640_SetLightMode+0x170>
        {
          if (ret != OV5640_ERROR)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800189e:	d018      	beq.n	80018d2 <OV5640_SetLightMode+0x16a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80018a0:	4a61      	ldr	r2, [pc, #388]	; (8001a28 <OV5640_SetLightMode+0x2c0>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	885b      	ldrh	r3, [r3, #2]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f103 0018 	add.w	r0, r3, #24
 80018b4:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <OV5640_SetLightMode+0x2c0>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018bc:	f107 020f 	add.w	r2, r7, #15
 80018c0:	2301      	movs	r3, #1
 80018c2:	f000 ffb9 	bl	8002838 <ov5640_write_reg>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <OV5640_SetLightMode+0x16a>
            {
              ret = OV5640_ERROR;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3301      	adds	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d9dc      	bls.n	8001898 <OV5640_SetLightMode+0x130>
            }
          }
        }
        break;
 80018de:	e09b      	b.n	8001a18 <OV5640_SetLightMode+0x2b0>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	e01f      	b.n	8001926 <OV5640_SetLightMode+0x1be>
        {
          if (ret != OV5640_ERROR)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d018      	beq.n	8001920 <OV5640_SetLightMode+0x1b8>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80018ee:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <OV5640_SetLightMode+0x2c4>)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	885b      	ldrh	r3, [r3, #2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 0018 	add.w	r0, r3, #24
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <OV5640_SetLightMode+0x2c4>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800190a:	f107 020f 	add.w	r2, r7, #15
 800190e:	2301      	movs	r3, #1
 8001910:	f000 ff92 	bl	8002838 <ov5640_write_reg>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <OV5640_SetLightMode+0x1b8>
            {
              ret = OV5640_ERROR;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3301      	adds	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d9dc      	bls.n	80018e6 <OV5640_SetLightMode+0x17e>
            }
          }
        }
        break;
 800192c:	e074      	b.n	8001a18 <OV5640_SetLightMode+0x2b0>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e01f      	b.n	8001974 <OV5640_SetLightMode+0x20c>
        {
          if (ret != OV5640_ERROR)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800193a:	d018      	beq.n	800196e <OV5640_SetLightMode+0x206>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800193c:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <OV5640_SetLightMode+0x2c8>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	885b      	ldrh	r3, [r3, #2]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f103 0018 	add.w	r0, r3, #24
 8001950:	4a37      	ldr	r2, [pc, #220]	; (8001a30 <OV5640_SetLightMode+0x2c8>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001958:	f107 020f 	add.w	r2, r7, #15
 800195c:	2301      	movs	r3, #1
 800195e:	f000 ff6b 	bl	8002838 <ov5640_write_reg>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <OV5640_SetLightMode+0x206>
            {
              ret = OV5640_ERROR;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3301      	adds	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d9dc      	bls.n	8001934 <OV5640_SetLightMode+0x1cc>
            }
          }
        }
        break;
 800197a:	e04d      	b.n	8001a18 <OV5640_SetLightMode+0x2b0>
      case OV5640_LIGHT_MANUAL_DEFAULT:
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	e01f      	b.n	80019c2 <OV5640_SetLightMode+0x25a>
        {
          if (ret != OV5640_ERROR)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d018      	beq.n	80019bc <OV5640_SetLightMode+0x254>
          {
            tmp = (uint8_t)OV5640_LightModeManualDefault[index][1];
 800198a:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <OV5640_SetLightMode+0x2cc>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	885b      	ldrh	r3, [r3, #2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeManualDefault[index][0], &tmp, 1) != OV5640_OK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 0018 	add.w	r0, r3, #24
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <OV5640_SetLightMode+0x2cc>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019a6:	f107 020f 	add.w	r2, r7, #15
 80019aa:	2301      	movs	r3, #1
 80019ac:	f000 ff44 	bl	8002838 <ov5640_write_reg>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <OV5640_SetLightMode+0x254>
            {
              ret = OV5640_ERROR;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ba:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeManualDefault) / 4U) ; index++)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	3301      	adds	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	d9dc      	bls.n	8001982 <OV5640_SetLightMode+0x21a>
            }
          }
        }
        break;
 80019c8:	e026      	b.n	8001a18 <OV5640_SetLightMode+0x2b0>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e01f      	b.n	8001a10 <OV5640_SetLightMode+0x2a8>
        {
          if (ret != OV5640_ERROR)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d6:	d018      	beq.n	8001a0a <OV5640_SetLightMode+0x2a2>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <OV5640_SetLightMode+0x2d0>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	885b      	ldrh	r3, [r3, #2]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0018 	add.w	r0, r3, #24
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <OV5640_SetLightMode+0x2d0>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019f4:	f107 020f 	add.w	r2, r7, #15
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 ff1d 	bl	8002838 <ov5640_write_reg>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <OV5640_SetLightMode+0x2a2>
            {
              ret = OV5640_ERROR;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a08:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d9dc      	bls.n	80019d0 <OV5640_SetLightMode+0x268>
            }
          }
        }
        break;
 8001a16:	bf00      	nop
    }
  }
  return ret;
 8001a18:	697b      	ldr	r3, [r7, #20]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	08009038 	.word	0x08009038
 8001a28:	08009054 	.word	0x08009054
 8001a2c:	08009070 	.word	0x08009070
 8001a30:	0800908c 	.word	0x0800908c
 8001a34:	080090a8 	.word	0x080090a8
 8001a38:	080090c4 	.word	0x080090c4

08001a3c <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	2b1f      	cmp	r3, #31
 8001a4c:	f200 81c0 	bhi.w	8001dd0 <OV5640_SetColorEffect+0x394>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <OV5640_SetColorEffect+0x1c>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001ad9 	.word	0x08001ad9
 8001a5c:	08001b63 	.word	0x08001b63
 8001a60:	08001dd1 	.word	0x08001dd1
 8001a64:	08001bed 	.word	0x08001bed
 8001a68:	08001dd1 	.word	0x08001dd1
 8001a6c:	08001dd1 	.word	0x08001dd1
 8001a70:	08001dd1 	.word	0x08001dd1
 8001a74:	08001c77 	.word	0x08001c77
 8001a78:	08001dd1 	.word	0x08001dd1
 8001a7c:	08001dd1 	.word	0x08001dd1
 8001a80:	08001dd1 	.word	0x08001dd1
 8001a84:	08001dd1 	.word	0x08001dd1
 8001a88:	08001dd1 	.word	0x08001dd1
 8001a8c:	08001dd1 	.word	0x08001dd1
 8001a90:	08001dd1 	.word	0x08001dd1
 8001a94:	08001d01 	.word	0x08001d01
 8001a98:	08001dd1 	.word	0x08001dd1
 8001a9c:	08001dd1 	.word	0x08001dd1
 8001aa0:	08001dd1 	.word	0x08001dd1
 8001aa4:	08001dd1 	.word	0x08001dd1
 8001aa8:	08001dd1 	.word	0x08001dd1
 8001aac:	08001dd1 	.word	0x08001dd1
 8001ab0:	08001dd1 	.word	0x08001dd1
 8001ab4:	08001dd1 	.word	0x08001dd1
 8001ab8:	08001dd1 	.word	0x08001dd1
 8001abc:	08001dd1 	.word	0x08001dd1
 8001ac0:	08001dd1 	.word	0x08001dd1
 8001ac4:	08001dd1 	.word	0x08001dd1
 8001ac8:	08001dd1 	.word	0x08001dd1
 8001acc:	08001dd1 	.word	0x08001dd1
 8001ad0:	08001dd1 	.word	0x08001dd1
 8001ad4:	08001d89 	.word	0x08001d89
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8001ad8:	23ff      	movs	r3, #255	; 0xff
 8001ada:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f103 0018 	add.w	r0, r3, #24
 8001ae2:	f107 020b 	add.w	r2, r7, #11
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f245 0101 	movw	r1, #20481	; 0x5001
 8001aec:	f000 fea4 	bl	8002838 <ov5640_write_reg>
 8001af0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8001af8:	2318      	movs	r3, #24
 8001afa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f103 0018 	add.w	r0, r3, #24
 8001b02:	f107 020b 	add.w	r2, r7, #11
 8001b06:	2301      	movs	r3, #1
 8001b08:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001b0c:	f000 fe94 	bl	8002838 <ov5640_write_reg>
 8001b10:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8001b18:	23a0      	movs	r3, #160	; 0xa0
 8001b1a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f103 0018 	add.w	r0, r3, #24
 8001b22:	f107 020b 	add.w	r2, r7, #11
 8001b26:	2301      	movs	r3, #1
 8001b28:	f245 5183 	movw	r1, #21891	; 0x5583
 8001b2c:	f000 fe84 	bl	8002838 <ov5640_write_reg>
 8001b30:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10c      	bne.n	8001b52 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8001b38:	2340      	movs	r3, #64	; 0x40
 8001b3a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 0018 	add.w	r0, r3, #24
 8001b42:	f107 020b 	add.w	r2, r7, #11
 8001b46:	2301      	movs	r3, #1
 8001b48:	f245 5184 	movw	r1, #21892	; 0x5584
 8001b4c:	f000 fe74 	bl	8002838 <ov5640_write_reg>
 8001b50:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 815f 	beq.w	8001e18 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b5e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001b60:	e15a      	b.n	8001e18 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001b62:	23ff      	movs	r3, #255	; 0xff
 8001b64:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f103 0018 	add.w	r0, r3, #24
 8001b6c:	f107 020b 	add.w	r2, r7, #11
 8001b70:	2301      	movs	r3, #1
 8001b72:	f245 0101 	movw	r1, #20481	; 0x5001
 8001b76:	f000 fe5f 	bl	8002838 <ov5640_write_reg>
 8001b7a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001b82:	2318      	movs	r3, #24
 8001b84:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0018 	add.w	r0, r3, #24
 8001b8c:	f107 020b 	add.w	r2, r7, #11
 8001b90:	2301      	movs	r3, #1
 8001b92:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001b96:	f000 fe4f 	bl	8002838 <ov5640_write_reg>
 8001b9a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 0018 	add.w	r0, r3, #24
 8001bac:	f107 020b 	add.w	r2, r7, #11
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f245 5183 	movw	r1, #21891	; 0x5583
 8001bb6:	f000 fe3f 	bl	8002838 <ov5640_write_reg>
 8001bba:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f103 0018 	add.w	r0, r3, #24
 8001bcc:	f107 020b 	add.w	r2, r7, #11
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f245 5184 	movw	r1, #21892	; 0x5584
 8001bd6:	f000 fe2f 	bl	8002838 <ov5640_write_reg>
 8001bda:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 811c 	beq.w	8001e1c <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be8:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001bea:	e117      	b.n	8001e1c <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001bec:	23ff      	movs	r3, #255	; 0xff
 8001bee:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f103 0018 	add.w	r0, r3, #24
 8001bf6:	f107 020b 	add.w	r2, r7, #11
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c00:	f000 fe1a 	bl	8002838 <ov5640_write_reg>
 8001c04:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10c      	bne.n	8001c26 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001c0c:	2318      	movs	r3, #24
 8001c0e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 0018 	add.w	r0, r3, #24
 8001c16:	f107 020b 	add.w	r2, r7, #11
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001c20:	f000 fe0a 	bl	8002838 <ov5640_write_reg>
 8001c24:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001c2c:	2360      	movs	r3, #96	; 0x60
 8001c2e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f103 0018 	add.w	r0, r3, #24
 8001c36:	f107 020b 	add.w	r2, r7, #11
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f245 5183 	movw	r1, #21891	; 0x5583
 8001c40:	f000 fdfa 	bl	8002838 <ov5640_write_reg>
 8001c44:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001c4c:	2360      	movs	r3, #96	; 0x60
 8001c4e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0018 	add.w	r0, r3, #24
 8001c56:	f107 020b 	add.w	r2, r7, #11
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f245 5184 	movw	r1, #21892	; 0x5584
 8001c60:	f000 fdea 	bl	8002838 <ov5640_write_reg>
 8001c64:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80d9 	beq.w	8001e20 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c72:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001c74:	e0d4      	b.n	8001e20 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8001c76:	23ff      	movs	r3, #255	; 0xff
 8001c78:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f103 0018 	add.w	r0, r3, #24
 8001c80:	f107 020b 	add.w	r2, r7, #11
 8001c84:	2301      	movs	r3, #1
 8001c86:	f245 0101 	movw	r1, #20481	; 0x5001
 8001c8a:	f000 fdd5 	bl	8002838 <ov5640_write_reg>
 8001c8e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8001c96:	2318      	movs	r3, #24
 8001c98:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 0018 	add.w	r0, r3, #24
 8001ca0:	f107 020b 	add.w	r2, r7, #11
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001caa:	f000 fdc5 	bl	8002838 <ov5640_write_reg>
 8001cae:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f103 0018 	add.w	r0, r3, #24
 8001cc0:	f107 020b 	add.w	r2, r7, #11
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f245 5183 	movw	r1, #21891	; 0x5583
 8001cca:	f000 fdb5 	bl	8002838 <ov5640_write_reg>
 8001cce:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 0018 	add.w	r0, r3, #24
 8001ce0:	f107 020b 	add.w	r2, r7, #11
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f245 5184 	movw	r1, #21892	; 0x5584
 8001cea:	f000 fda5 	bl	8002838 <ov5640_write_reg>
 8001cee:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8096 	beq.w	8001e24 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfc:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001cfe:	e091      	b.n	8001e24 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8001d00:	23ff      	movs	r3, #255	; 0xff
 8001d02:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f103 0018 	add.w	r0, r3, #24
 8001d0a:	f107 020b 	add.w	r2, r7, #11
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d14:	f000 fd90 	bl	8002838 <ov5640_write_reg>
 8001d18:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8001d20:	2318      	movs	r3, #24
 8001d22:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0018 	add.w	r0, r3, #24
 8001d2a:	f107 020b 	add.w	r2, r7, #11
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001d34:	f000 fd80 	bl	8002838 <ov5640_write_reg>
 8001d38:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10c      	bne.n	8001d5a <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f103 0018 	add.w	r0, r3, #24
 8001d4a:	f107 020b 	add.w	r2, r7, #11
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f245 5183 	movw	r1, #21891	; 0x5583
 8001d54:	f000 fd70 	bl	8002838 <ov5640_write_reg>
 8001d58:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10c      	bne.n	8001d7a <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8001d60:	23a0      	movs	r3, #160	; 0xa0
 8001d62:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f103 0018 	add.w	r0, r3, #24
 8001d6a:	f107 020b 	add.w	r2, r7, #11
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f245 5184 	movw	r1, #21892	; 0x5584
 8001d74:	f000 fd60 	bl	8002838 <ov5640_write_reg>
 8001d78:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d053      	beq.n	8001e28 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d84:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001d86:	e04f      	b.n	8001e28 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f103 0018 	add.w	r0, r3, #24
 8001d92:	f107 020b 	add.w	r2, r7, #11
 8001d96:	2301      	movs	r3, #1
 8001d98:	f245 0101 	movw	r1, #20481	; 0x5001
 8001d9c:	f000 fd4c 	bl	8002838 <ov5640_write_reg>
 8001da0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 0018 	add.w	r0, r3, #24
 8001db2:	f107 020b 	add.w	r2, r7, #11
 8001db6:	2301      	movs	r3, #1
 8001db8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001dbc:	f000 fd3c 	bl	8002838 <ov5640_write_reg>
 8001dc0:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d031      	beq.n	8001e2c <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dcc:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001dce:	e02d      	b.n	8001e2c <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8001dd0:	237f      	movs	r3, #127	; 0x7f
 8001dd2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f103 0018 	add.w	r0, r3, #24
 8001dda:	f107 020b 	add.w	r2, r7, #11
 8001dde:	2301      	movs	r3, #1
 8001de0:	f245 0101 	movw	r1, #20481	; 0x5001
 8001de4:	f000 fd28 	bl	8002838 <ov5640_write_reg>
 8001de8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10c      	bne.n	8001e0a <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8001df0:	2300      	movs	r3, #0
 8001df2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 0018 	add.w	r0, r3, #24
 8001dfa:	f107 020b 	add.w	r2, r7, #11
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001e04:	f000 fd18 	bl	8002838 <ov5640_write_reg>
 8001e08:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00f      	beq.n	8001e30 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e14:	60fb      	str	r3, [r7, #12]
      }

      break;
 8001e16:	e00b      	b.n	8001e30 <OV5640_SetColorEffect+0x3f4>
      break;
 8001e18:	bf00      	nop
 8001e1a:	e00a      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e008      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e20:	bf00      	nop
 8001e22:	e006      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e24:	bf00      	nop
 8001e26:	e004      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e28:	bf00      	nop
 8001e2a:	e002      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <OV5640_SetColorEffect+0x3f6>
      break;
 8001e30:	bf00      	nop
  }

  return ret;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <OV5640_SetBrightness+0xdc>)
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e4e:	c303      	stmia	r3!, {r0, r1}
 8001e50:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001e52:	23ff      	movs	r3, #255	; 0xff
 8001e54:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 0018 	add.w	r0, r3, #24
 8001e5c:	f107 020f 	add.w	r2, r7, #15
 8001e60:	2301      	movs	r3, #1
 8001e62:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e66:	f000 fce7 	bl	8002838 <ov5640_write_reg>
 8001e6a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d111      	bne.n	8001e96 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3304      	adds	r3, #4
 8001e76:	3320      	adds	r3, #32
 8001e78:	443b      	add	r3, r7
 8001e7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e7e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0018 	add.w	r0, r3, #24
 8001e86:	f107 020f 	add.w	r2, r7, #15
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f245 5187 	movw	r1, #21895	; 0x5587
 8001e90:	f000 fcd2 	bl	8002838 <ov5640_write_reg>
 8001e94:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10c      	bne.n	8001eb6 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f103 0018 	add.w	r0, r3, #24
 8001ea6:	f107 020f 	add.w	r2, r7, #15
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001eb0:	f000 fcc2 	bl	8002838 <ov5640_write_reg>
 8001eb4:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d127      	bne.n	8001f0c <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da12      	bge.n	8001ee8 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f103 0018 	add.w	r0, r3, #24
 8001ecc:	f107 020f 	add.w	r2, r7, #15
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f245 5188 	movw	r1, #21896	; 0x5588
 8001ed6:	f000 fcaf 	bl	8002838 <ov5640_write_reg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d015      	beq.n	8001f0c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e011      	b.n	8001f0c <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8001ee8:	2309      	movs	r3, #9
 8001eea:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0018 	add.w	r0, r3, #24
 8001ef2:	f107 020f 	add.w	r2, r7, #15
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f245 5188 	movw	r1, #21896	; 0x5588
 8001efc:	f000 fc9c 	bl	8002838 <ov5640_write_reg>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	08008b80 	.word	0x08008b80

08001f1c <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <OV5640_SetSaturation+0xcc>)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f2e:	c303      	stmia	r3!, {r0, r1}
 8001f30:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8001f32:	23ff      	movs	r3, #255	; 0xff
 8001f34:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 0018 	add.w	r0, r3, #24
 8001f3c:	f107 020f 	add.w	r2, r7, #15
 8001f40:	2301      	movs	r3, #1
 8001f42:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f46:	f000 fc77 	bl	8002838 <ov5640_write_reg>
 8001f4a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d111      	bne.n	8001f76 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	3304      	adds	r3, #4
 8001f56:	3320      	adds	r3, #32
 8001f58:	443b      	add	r3, r7
 8001f5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f5e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f103 0018 	add.w	r0, r3, #24
 8001f66:	f107 020f 	add.w	r2, r7, #15
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f245 5183 	movw	r1, #21891	; 0x5583
 8001f70:	f000 fc62 	bl	8002838 <ov5640_write_reg>
 8001f74:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 0018 	add.w	r0, r3, #24
 8001f82:	f107 020f 	add.w	r2, r7, #15
 8001f86:	2301      	movs	r3, #1
 8001f88:	f245 5184 	movw	r1, #21892	; 0x5584
 8001f8c:	f000 fc54 	bl	8002838 <ov5640_write_reg>
 8001f90:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10c      	bne.n	8001fb2 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 0018 	add.w	r0, r3, #24
 8001fa2:	f107 020f 	add.w	r2, r7, #15
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001fac:	f000 fc44 	bl	8002838 <ov5640_write_reg>
 8001fb0:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10c      	bne.n	8001fd2 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8001fb8:	2341      	movs	r3, #65	; 0x41
 8001fba:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 0018 	add.w	r0, r3, #24
 8001fc2:	f107 020f 	add.w	r2, r7, #15
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f245 5188 	movw	r1, #21896	; 0x5588
 8001fcc:	f000 fc34 	bl	8002838 <ov5640_write_reg>
 8001fd0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fdc:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8001fde:	69fb      	ldr	r3, [r7, #28]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08008b8c 	.word	0x08008b8c

08001fec <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <OV5640_SetContrast+0xcc>)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ffe:	c303      	stmia	r3!, {r0, r1}
 8002000:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002002:	23ff      	movs	r3, #255	; 0xff
 8002004:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 0018 	add.w	r0, r3, #24
 800200c:	f107 020f 	add.w	r2, r7, #15
 8002010:	2301      	movs	r3, #1
 8002012:	f245 0101 	movw	r1, #20481	; 0x5001
 8002016:	f000 fc0f 	bl	8002838 <ov5640_write_reg>
 800201a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002022:	2304      	movs	r3, #4
 8002024:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f103 0018 	add.w	r0, r3, #24
 800202c:	f107 020f 	add.w	r2, r7, #15
 8002030:	2301      	movs	r3, #1
 8002032:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002036:	f000 fbff 	bl	8002838 <ov5640_write_reg>
 800203a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d111      	bne.n	8002066 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	3320      	adds	r3, #32
 8002048:	443b      	add	r3, r7
 800204a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800204e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 0018 	add.w	r0, r3, #24
 8002056:	f107 020f 	add.w	r2, r7, #15
 800205a:	2301      	movs	r3, #1
 800205c:	f245 5186 	movw	r1, #21894	; 0x5586
 8002060:	f000 fbea 	bl	8002838 <ov5640_write_reg>
 8002064:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 0018 	add.w	r0, r3, #24
 8002072:	f107 020f 	add.w	r2, r7, #15
 8002076:	2301      	movs	r3, #1
 8002078:	f245 5185 	movw	r1, #21893	; 0x5585
 800207c:	f000 fbdc 	bl	8002838 <ov5640_write_reg>
 8002080:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10c      	bne.n	80020a2 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002088:	2341      	movs	r3, #65	; 0x41
 800208a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0018 	add.w	r0, r3, #24
 8002092:	f107 020f 	add.w	r2, r7, #15
 8002096:	2301      	movs	r3, #1
 8002098:	f245 5188 	movw	r1, #21896	; 0x5588
 800209c:	f000 fbcc 	bl	8002838 <ov5640_write_reg>
 80020a0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ac:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80020ae:	69fb      	ldr	r3, [r7, #28]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	08008b98 	.word	0x08008b98

080020bc <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80020c6:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <OV5640_SetHueDegree+0xfc>)
 80020c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <OV5640_SetHueDegree+0x100>)
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80020de:	4a38      	ldr	r2, [pc, #224]	; (80021c0 <OV5640_SetHueDegree+0x104>)
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80020ea:	23ff      	movs	r3, #255	; 0xff
 80020ec:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f103 0018 	add.w	r0, r3, #24
 80020f4:	f107 020f 	add.w	r2, r7, #15
 80020f8:	2301      	movs	r3, #1
 80020fa:	f245 0101 	movw	r1, #20481	; 0x5001
 80020fe:	f000 fb9b 	bl	8002838 <ov5640_write_reg>
 8002102:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f103 0018 	add.w	r0, r3, #24
 8002114:	f107 020f 	add.w	r2, r7, #15
 8002118:	2301      	movs	r3, #1
 800211a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800211e:	f000 fb8b 	bl	8002838 <ov5640_write_reg>
 8002122:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d111      	bne.n	800214e <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3306      	adds	r3, #6
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	443b      	add	r3, r7
 8002132:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002136:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0018 	add.w	r0, r3, #24
 800213e:	f107 020f 	add.w	r2, r7, #15
 8002142:	2301      	movs	r3, #1
 8002144:	f245 5181 	movw	r1, #21889	; 0x5581
 8002148:	f000 fb76 	bl	8002838 <ov5640_write_reg>
 800214c:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	2b00      	cmp	r3, #0
 8002152:	d111      	bne.n	8002178 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	3306      	adds	r3, #6
 8002158:	3338      	adds	r3, #56	; 0x38
 800215a:	443b      	add	r3, r7
 800215c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002160:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f103 0018 	add.w	r0, r3, #24
 8002168:	f107 020f 	add.w	r2, r7, #15
 800216c:	2301      	movs	r3, #1
 800216e:	f245 5182 	movw	r1, #21890	; 0x5582
 8002172:	f000 fb61 	bl	8002838 <ov5640_write_reg>
 8002176:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d111      	bne.n	80021a2 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3306      	adds	r3, #6
 8002182:	3338      	adds	r3, #56	; 0x38
 8002184:	443b      	add	r3, r7
 8002186:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800218a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0018 	add.w	r0, r3, #24
 8002192:	f107 020f 	add.w	r2, r7, #15
 8002196:	2301      	movs	r3, #1
 8002198:	f245 5188 	movw	r1, #21896	; 0x5588
 800219c:	f000 fb4c 	bl	8002838 <ov5640_write_reg>
 80021a0:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 80021ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	08008ba4 	.word	0x08008ba4
 80021bc:	08008bb0 	.word	0x08008bb0
 80021c0:	08008bbc 	.word	0x08008bbc

080021c4 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f103 0018 	add.w	r0, r3, #24
 80021d8:	f107 020b 	add.w	r2, r7, #11
 80021dc:	2301      	movs	r3, #1
 80021de:	f643 0120 	movw	r1, #14368	; 0x3820
 80021e2:	f000 fb12 	bl	800280a <ov5640_read_reg>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e0cb      	b.n	800238c <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	f023 0306 	bic.w	r3, r3, #6
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0018 	add.w	r0, r3, #24
 8002204:	f107 020a 	add.w	r2, r7, #10
 8002208:	2301      	movs	r3, #1
 800220a:	f643 0121 	movw	r1, #14369	; 0x3821
 800220e:	f000 fafc 	bl	800280a <ov5640_read_reg>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e0b5      	b.n	800238c <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002224:	7abb      	ldrb	r3, [r7, #10]
 8002226:	f023 0306 	bic.w	r3, r3, #6
 800222a:	b2db      	uxtb	r3, r3
 800222c:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d056      	beq.n	80022e2 <OV5640_MirrorFlipConfig+0x11e>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d87f      	bhi.n	800233a <OV5640_MirrorFlipConfig+0x176>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d029      	beq.n	8002294 <OV5640_MirrorFlipConfig+0xd0>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d179      	bne.n	800233a <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0018 	add.w	r0, r3, #24
 800224c:	f107 020b 	add.w	r2, r7, #11
 8002250:	2301      	movs	r3, #1
 8002252:	f643 0120 	movw	r1, #14368	; 0x3820
 8002256:	f000 faef 	bl	8002838 <ov5640_write_reg>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002264:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002266:	e08a      	b.n	800237e <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002268:	7abb      	ldrb	r3, [r7, #10]
 800226a:	f043 0306 	orr.w	r3, r3, #6
 800226e:	b2db      	uxtb	r3, r3
 8002270:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f103 0018 	add.w	r0, r3, #24
 8002278:	f107 020a 	add.w	r2, r7, #10
 800227c:	2301      	movs	r3, #1
 800227e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002282:	f000 fad9 	bl	8002838 <ov5640_write_reg>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d078      	beq.n	800237e <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002290:	60fb      	str	r3, [r7, #12]
          break;
 8002292:	e074      	b.n	800237e <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	f043 0306 	orr.w	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 0018 	add.w	r0, r3, #24
 80022a4:	f107 020b 	add.w	r2, r7, #11
 80022a8:	2301      	movs	r3, #1
 80022aa:	f643 0120 	movw	r1, #14368	; 0x3820
 80022ae:	f000 fac3 	bl	8002838 <ov5640_write_reg>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022bc:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80022be:	e060      	b.n	8002382 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0018 	add.w	r0, r3, #24
 80022c6:	f107 020a 	add.w	r2, r7, #10
 80022ca:	2301      	movs	r3, #1
 80022cc:	f643 0121 	movw	r1, #14369	; 0x3821
 80022d0:	f000 fab2 	bl	8002838 <ov5640_write_reg>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d053      	beq.n	8002382 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022de:	60fb      	str	r3, [r7, #12]
          break;
 80022e0:	e04f      	b.n	8002382 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f043 0306 	orr.w	r3, r3, #6
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0018 	add.w	r0, r3, #24
 80022f2:	f107 020b 	add.w	r2, r7, #11
 80022f6:	2301      	movs	r3, #1
 80022f8:	f643 0120 	movw	r1, #14368	; 0x3820
 80022fc:	f000 fa9c 	bl	8002838 <ov5640_write_reg>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230a:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800230c:	e03b      	b.n	8002386 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 800230e:	7abb      	ldrb	r3, [r7, #10]
 8002310:	f043 0306 	orr.w	r3, r3, #6
 8002314:	b2db      	uxtb	r3, r3
 8002316:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f103 0018 	add.w	r0, r3, #24
 800231e:	f107 020a 	add.w	r2, r7, #10
 8002322:	2301      	movs	r3, #1
 8002324:	f643 0121 	movw	r1, #14369	; 0x3821
 8002328:	f000 fa86 	bl	8002838 <ov5640_write_reg>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d029      	beq.n	8002386 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002336:	60fb      	str	r3, [r7, #12]
          break;
 8002338:	e025      	b.n	8002386 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f103 0018 	add.w	r0, r3, #24
 8002340:	f107 020b 	add.w	r2, r7, #11
 8002344:	2301      	movs	r3, #1
 8002346:	f643 0120 	movw	r1, #14368	; 0x3820
 800234a:	f000 fa75 	bl	8002838 <ov5640_write_reg>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002358:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800235a:	e016      	b.n	800238a <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 0018 	add.w	r0, r3, #24
 8002362:	f107 020a 	add.w	r2, r7, #10
 8002366:	2301      	movs	r3, #1
 8002368:	f643 0121 	movw	r1, #14369	; 0x3821
 800236c:	f000 fa64 	bl	8002838 <ov5640_write_reg>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237a:	60fb      	str	r3, [r7, #12]
          break;
 800237c:	e005      	b.n	800238a <OV5640_MirrorFlipConfig+0x1c6>
          break;
 800237e:	bf00      	nop
 8002380:	e004      	b.n	800238c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002382:	bf00      	nop
 8002384:	e002      	b.n	800238c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800238a:	bf00      	nop
      }
    }
  }

  return ret;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff f86a 	bl	8001484 <OV5640_GetResolution>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e04e      	b.n	800245c <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b44      	cmp	r3, #68	; 0x44
 80023c6:	d112      	bne.n	80023ee <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 80023c8:	2310      	movs	r3, #16
 80023ca:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0018 	add.w	r0, r3, #24
 80023d2:	f107 020b 	add.w	r2, r7, #11
 80023d6:	2301      	movs	r3, #1
 80023d8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80023dc:	f000 fa2c 	bl	8002838 <ov5640_write_reg>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e036      	b.n	800245c <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d802      	bhi.n	80023fa <OV5640_ZoomConfig+0x64>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 80023f8:	e00a      	b.n	8002410 <OV5640_ZoomConfig+0x7a>
      switch (res)
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d004      	beq.n	8002408 <OV5640_ZoomConfig+0x72>
          break;
 80023fe:	e007      	b.n	8002410 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	613b      	str	r3, [r7, #16]
          break;
 8002406:	e003      	b.n	8002410 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	613b      	str	r3, [r7, #16]
          break;
 800240e:	bf00      	nop
      }

      tmp = 0x00;
 8002410:	2300      	movs	r3, #0
 8002412:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0018 	add.w	r0, r3, #24
 800241a:	f107 020b 	add.w	r2, r7, #11
 800241e:	2301      	movs	r3, #1
 8002420:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002424:	f000 fa08 	bl	8002838 <ov5640_write_reg>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e012      	b.n	800245c <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f103 0018 	add.w	r0, r3, #24
 8002442:	f107 020b 	add.w	r2, r7, #11
 8002446:	2301      	movs	r3, #1
 8002448:	f245 6101 	movw	r1, #22017	; 0x5601
 800244c:	f000 f9f4 	bl	8002838 <ov5640_write_reg>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 800245c:	697b      	ldr	r3, [r7, #20]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	f040 80ce 	bne.w	8002618 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0018 	add.w	r0, r3, #24
 8002482:	f107 020b 	add.w	r2, r7, #11
 8002486:	2301      	movs	r3, #1
 8002488:	f243 0138 	movw	r1, #12344	; 0x3038
 800248c:	f000 f9d4 	bl	8002838 <ov5640_write_reg>
 8002490:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0018 	add.w	r0, r3, #24
 800249e:	f107 020b 	add.w	r2, r7, #11
 80024a2:	2301      	movs	r3, #1
 80024a4:	f243 0139 	movw	r1, #12345	; 0x3039
 80024a8:	f000 f9c6 	bl	8002838 <ov5640_write_reg>
 80024ac:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 80024b4:	237c      	movs	r3, #124	; 0x7c
 80024b6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0018 	add.w	r0, r3, #24
 80024be:	f107 020b 	add.w	r2, r7, #11
 80024c2:	2301      	movs	r3, #1
 80024c4:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80024c8:	f000 f9b6 	bl	8002838 <ov5640_write_reg>
 80024cc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 80024d4:	2301      	movs	r3, #1
 80024d6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0018 	add.w	r0, r3, #24
 80024de:	f107 020b 	add.w	r2, r7, #11
 80024e2:	2301      	movs	r3, #1
 80024e4:	f643 2108 	movw	r1, #14856	; 0x3a08
 80024e8:	f000 f9a6 	bl	8002838 <ov5640_write_reg>
 80024ec:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 80024f4:	2327      	movs	r3, #39	; 0x27
 80024f6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f103 0018 	add.w	r0, r3, #24
 80024fe:	f107 020b 	add.w	r2, r7, #11
 8002502:	2301      	movs	r3, #1
 8002504:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002508:	f000 f996 	bl	8002838 <ov5640_write_reg>
 800250c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10c      	bne.n	800252e <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002514:	2300      	movs	r3, #0
 8002516:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f103 0018 	add.w	r0, r3, #24
 800251e:	f107 020b 	add.w	r2, r7, #11
 8002522:	2301      	movs	r3, #1
 8002524:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002528:	f000 f986 	bl	8002838 <ov5640_write_reg>
 800252c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002534:	23f6      	movs	r3, #246	; 0xf6
 8002536:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0018 	add.w	r0, r3, #24
 800253e:	f107 020b 	add.w	r2, r7, #11
 8002542:	2301      	movs	r3, #1
 8002544:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002548:	f000 f976 	bl	8002838 <ov5640_write_reg>
 800254c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002554:	2304      	movs	r3, #4
 8002556:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0018 	add.w	r0, r3, #24
 800255e:	f107 020b 	add.w	r2, r7, #11
 8002562:	2301      	movs	r3, #1
 8002564:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002568:	f000 f966 	bl	8002838 <ov5640_write_reg>
 800256c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f103 0018 	add.w	r0, r3, #24
 800257a:	f107 020b 	add.w	r2, r7, #11
 800257e:	2301      	movs	r3, #1
 8002580:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002584:	f000 f958 	bl	8002838 <ov5640_write_reg>
 8002588:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002590:	230b      	movs	r3, #11
 8002592:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f103 0018 	add.w	r0, r3, #24
 800259a:	f107 020b 	add.w	r2, r7, #11
 800259e:	2301      	movs	r3, #1
 80025a0:	f643 2102 	movw	r1, #14850	; 0x3a02
 80025a4:	f000 f948 	bl	8002838 <ov5640_write_reg>
 80025a8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 80025b0:	2388      	movs	r3, #136	; 0x88
 80025b2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0018 	add.w	r0, r3, #24
 80025ba:	f107 020b 	add.w	r2, r7, #11
 80025be:	2301      	movs	r3, #1
 80025c0:	f643 2103 	movw	r1, #14851	; 0x3a03
 80025c4:	f000 f938 	bl	8002838 <ov5640_write_reg>
 80025c8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10c      	bne.n	80025ea <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 80025d0:	230b      	movs	r3, #11
 80025d2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0018 	add.w	r0, r3, #24
 80025da:	f107 020b 	add.w	r2, r7, #11
 80025de:	2301      	movs	r3, #1
 80025e0:	f643 2114 	movw	r1, #14868	; 0x3a14
 80025e4:	f000 f928 	bl	8002838 <ov5640_write_reg>
 80025e8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10c      	bne.n	800260a <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 80025f0:	2388      	movs	r3, #136	; 0x88
 80025f2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f103 0018 	add.w	r0, r3, #24
 80025fa:	f107 020b 	add.w	r2, r7, #11
 80025fe:	2301      	movs	r3, #1
 8002600:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002604:	f000 f918 	bl	8002838 <ov5640_write_reg>
 8002608:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02b      	beq.n	8002668 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e027      	b.n	8002668 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0018 	add.w	r0, r3, #24
 800261e:	f107 020b 	add.w	r2, r7, #11
 8002622:	2301      	movs	r3, #1
 8002624:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002628:	f000 f8ef 	bl	800280a <ov5640_read_reg>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e016      	b.n	8002668 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	b2db      	uxtb	r3, r3
 8002646:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f103 0018 	add.w	r0, r3, #24
 800264e:	f107 020b 	add.w	r2, r7, #11
 8002652:	2301      	movs	r3, #1
 8002654:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002658:	f000 f8ee 	bl	8002838 <ov5640_write_reg>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002666:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <OV5640_GetAWBRGBGain>:
  
  return ret;
}

int32_t OV5640_GetAWBRGBGain(OV5640_Object_t *pObj, uint8_t *RGBGain)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0018 	add.w	r0, r3, #24
 8002682:	f107 020b 	add.w	r2, r7, #11
 8002686:	2301      	movs	r3, #1
 8002688:	f245 119f 	movw	r1, #20895	; 0x519f
 800268c:	f000 f8bd 	bl	800280a <ov5640_read_reg>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <OV5640_GetAWBRGBGain+0x2e>
    {
		ret = OV5640_ERROR;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269a:	60fb      	str	r3, [r7, #12]
		return ret;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	e071      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
    }
	*RGBGain = tmp;
 80026a0:	7afa      	ldrb	r2, [r7, #11]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_R_GAIN_LOW, &tmp, 1) != OV5640_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f103 0018 	add.w	r0, r3, #24
 80026ac:	f107 020b 	add.w	r2, r7, #11
 80026b0:	2301      	movs	r3, #1
 80026b2:	f245 11a0 	movw	r1, #20896	; 0x51a0
 80026b6:	f000 f8a8 	bl	800280a <ov5640_read_reg>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <OV5640_GetAWBRGBGain+0x58>
	{
		ret = OV5640_ERROR;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c4:	60fb      	str	r3, [r7, #12]
		return ret;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	e05c      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+1) = tmp;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	7afa      	ldrb	r2, [r7, #11]
 80026d0:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f103 0018 	add.w	r0, r3, #24
 80026d8:	f107 020b 	add.w	r2, r7, #11
 80026dc:	2301      	movs	r3, #1
 80026de:	f245 11a1 	movw	r1, #20897	; 0x51a1
 80026e2:	f000 f892 	bl	800280a <ov5640_read_reg>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <OV5640_GetAWBRGBGain+0x84>
    {
		ret = OV5640_ERROR;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f0:	60fb      	str	r3, [r7, #12]
		return ret;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	e046      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+2) = tmp;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	3302      	adds	r3, #2
 80026fa:	7afa      	ldrb	r2, [r7, #11]
 80026fc:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_G_GAIN_LOW, &tmp, 1) != OV5640_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 0018 	add.w	r0, r3, #24
 8002704:	f107 020b 	add.w	r2, r7, #11
 8002708:	2301      	movs	r3, #1
 800270a:	f245 11a2 	movw	r1, #20898	; 0x51a2
 800270e:	f000 f87c 	bl	800280a <ov5640_read_reg>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <OV5640_GetAWBRGBGain+0xb0>
	{
		ret = OV5640_ERROR;
 8002718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271c:	60fb      	str	r3, [r7, #12]
		return ret;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	e030      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+3) = tmp;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3303      	adds	r3, #3
 8002726:	7afa      	ldrb	r2, [r7, #11]
 8002728:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_HIGH, &tmp, 1) != OV5640_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0018 	add.w	r0, r3, #24
 8002730:	f107 020b 	add.w	r2, r7, #11
 8002734:	2301      	movs	r3, #1
 8002736:	f245 11a3 	movw	r1, #20899	; 0x51a3
 800273a:	f000 f866 	bl	800280a <ov5640_read_reg>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <OV5640_GetAWBRGBGain+0xdc>
    {
		ret = OV5640_ERROR;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002748:	60fb      	str	r3, [r7, #12]
		return ret;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	e01a      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
    }
	*(RGBGain+4) = tmp;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	7afa      	ldrb	r2, [r7, #11]
 8002754:	701a      	strb	r2, [r3, #0]
	if (ov5640_read_reg(&pObj->Ctx, OV5640_AWB_CURRENT_B_GAIN_LOW, &tmp, 1) != OV5640_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f103 0018 	add.w	r0, r3, #24
 800275c:	f107 020b 	add.w	r2, r7, #11
 8002760:	2301      	movs	r3, #1
 8002762:	f245 11a4 	movw	r1, #20900	; 0x51a4
 8002766:	f000 f850 	bl	800280a <ov5640_read_reg>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <OV5640_GetAWBRGBGain+0x108>
	{
		ret = OV5640_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002774:	60fb      	str	r3, [r7, #12]
		return ret;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	e004      	b.n	8002784 <OV5640_GetAWBRGBGain+0x112>
	}
	*(RGBGain+5) = tmp;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3305      	adds	r3, #5
 800277e:	7afa      	ldrb	r2, [r7, #11]
 8002780:	701a      	strb	r2, [r3, #0]
	return OV5640_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
//  uint32_t tickstart;
//  tickstart = pObj->IO.GetTick();
//  while ((pObj->IO.GetTick() - tickstart) < Delay)
//  {
//  }
	HAL_Delay(Delay);
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f000 fc4c 	bl	8003034 <HAL_Delay>
	return OV5640_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027a6:	b590      	push	{r4, r7, lr}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	461a      	mov	r2, r3
 80027b2:	460b      	mov	r3, r1
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	4613      	mov	r3, r2
 80027b8:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	691c      	ldr	r4, [r3, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	8918      	ldrh	r0, [r3, #8]
 80027c6:	893b      	ldrh	r3, [r7, #8]
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	47a0      	blx	r4
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	817b      	strh	r3, [r7, #10]
 80027e8:	4613      	mov	r3, r2
 80027ea:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	68dc      	ldr	r4, [r3, #12]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	8918      	ldrh	r0, [r3, #8]
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	47a0      	blx	r4
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}

0800280a <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800280a:	b590      	push	{r4, r7, lr}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	461a      	mov	r2, r3
 8002816:	460b      	mov	r3, r1
 8002818:	817b      	strh	r3, [r7, #10]
 800281a:	4613      	mov	r3, r2
 800281c:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685c      	ldr	r4, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6898      	ldr	r0, [r3, #8]
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	47a0      	blx	r4
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6898      	ldr	r0, [r3, #8]
 8002854:	893b      	ldrh	r3, [r7, #8]
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	47a0      	blx	r4
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
	...

08002868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_MspInit+0x44>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_MspInit+0x44>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_MspInit+0x44>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_MspInit+0x44>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_MspInit+0x44>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_MspInit+0x44>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a69      	ldr	r2, [pc, #420]	; (8002a74 <HAL_DCMI_MspInit+0x1c4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 80cb 	bne.w	8002a6a <HAL_DCMI_MspInit+0x1ba>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	4a67      	ldr	r2, [pc, #412]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6353      	str	r3, [r2, #52]	; 0x34
 80028e0:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ec:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028f2:	f043 0310 	orr.w	r3, r3, #16
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291c:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a4f      	ldr	r2, [pc, #316]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800294c:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 8002952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_DCMI_MspInit+0x1c8>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0;
 8002964:	2371      	movs	r3, #113	; 0x71
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002974:	230d      	movs	r3, #13
 8002976:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	483f      	ldr	r0, [pc, #252]	; (8002a7c <HAL_DCMI_MspInit+0x1cc>)
 8002980:	f002 fc82 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002984:	2350      	movs	r3, #80	; 0x50
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002994:	230d      	movs	r3, #13
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299c:	4619      	mov	r1, r3
 800299e:	4838      	ldr	r0, [pc, #224]	; (8002a80 <HAL_DCMI_MspInit+0x1d0>)
 80029a0:	f002 fc72 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80029a4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b6:	230d      	movs	r3, #13
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029be:	4619      	mov	r1, r3
 80029c0:	4830      	ldr	r0, [pc, #192]	; (8002a84 <HAL_DCMI_MspInit+0x1d4>)
 80029c2:	f002 fc61 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029c6:	2308      	movs	r3, #8
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d6:	230d      	movs	r3, #13
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029de:	4619      	mov	r1, r3
 80029e0:	4829      	ldr	r0, [pc, #164]	; (8002a88 <HAL_DCMI_MspInit+0x1d8>)
 80029e2:	f002 fc51 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029f8:	230d      	movs	r3, #13
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a00:	4619      	mov	r1, r3
 8002a02:	4822      	ldr	r0, [pc, #136]	; (8002a8c <HAL_DCMI_MspInit+0x1dc>)
 8002a04:	f002 fc40 	bl	8005288 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_DCMI_MspInit+0x1e4>)
 8002a0c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a14:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a28:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a30:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a38:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a46:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002a4e:	4810      	ldr	r0, [pc, #64]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a50:	f000 febc 	bl	80037cc <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_DCMI_MspInit+0x1ae>
    {
      Error_Handler();
 8002a5a:	f7fe f9a1 	bl	8000da0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a62:	649a      	str	r2, [r3, #72]	; 0x48
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_DCMI_MspInit+0x1e0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3738      	adds	r7, #56	; 0x38
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	50050000 	.word	0x50050000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	40021800 	.word	0x40021800
 8002a90:	200000c0 	.word	0x200000c0
 8002a94:	40026428 	.word	0x40026428

08002a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0ae      	sub	sp, #184	; 0xb8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2290      	movs	r2, #144	; 0x90
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 f829 	bl	8008b10 <memset>
  if(hi2c->Instance==I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_I2C_MspInit+0xb4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d13c      	bne.n	8002b42 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002acc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 fa08 	bl	8006eec <HAL_RCCEx_PeriphCLKConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002ae2:	f7fe f95d 	bl	8000da0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002afe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b22:	4619      	mov	r1, r3
 8002b24:	480b      	ldr	r0, [pc, #44]	; (8002b54 <HAL_I2C_MspInit+0xbc>)
 8002b26:	f002 fbaf 	bl	8005288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_I2C_MspInit+0xb8>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	37b8      	adds	r7, #184	; 0xb8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40005400 	.word	0x40005400
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020400 	.word	0x40020400

08002b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_SPI_MspInit+0xb4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d143      	bne.n	8002c02 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_SPI_MspInit+0xb8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <HAL_SPI_MspInit+0xbc>)
 8002bde:	f002 fb53 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002be2:	2330      	movs	r3, #48	; 0x30
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4806      	ldr	r0, [pc, #24]	; (8002c18 <HAL_SPI_MspInit+0xc0>)
 8002bfe:	f002 fb43 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40013000 	.word	0x40013000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400

08002c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0ae      	sub	sp, #184	; 0xb8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2290      	movs	r2, #144	; 0x90
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f005 ff67 	bl	8008b10 <memset>
  if(huart->Instance==USART3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_UART_MspInit+0xb4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d13c      	bne.n	8002cc6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f946 	bl	8006eec <HAL_RCCEx_PeriphCLKConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c66:	f7fe f89b 	bl	8000da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_UART_MspInit+0xb8>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <HAL_UART_MspInit+0xbc>)
 8002cc2:	f002 fae1 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cc6:	bf00      	nop
 8002cc8:	37b8      	adds	r7, #184	; 0xb8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40004800 	.word	0x40004800
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020c00 	.word	0x40020c00

08002cdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b0ae      	sub	sp, #184	; 0xb8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2290      	movs	r2, #144	; 0x90
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f005 ff07 	bl	8008b10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0a:	d159      	bne.n	8002dc0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f004 f8e5 	bl	8006eec <HAL_RCCEx_PeriphCLKConfig>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d28:	f7fe f83a 	bl	8000da0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6313      	str	r3, [r2, #48]	; 0x30
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d5e:	230a      	movs	r3, #10
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4818      	ldr	r0, [pc, #96]	; (8002dcc <HAL_PCD_MspInit+0xf0>)
 8002d6c:	f002 fa8c 	bl	8005288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4810      	ldr	r0, [pc, #64]	; (8002dcc <HAL_PCD_MspInit+0xf0>)
 8002d8c:	f002 fa7c 	bl	8005288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db2:	6453      	str	r3, [r2, #68]	; 0x44
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_PCD_MspInit+0xec>)
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	37b8      	adds	r7, #184	; 0xb8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_FMC_MspInit+0xa4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d13f      	bne.n	8002e6c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8002dec:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <HAL_FMC_MspInit+0xa4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_FMC_MspInit+0xa8>)
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_FMC_MspInit+0xa8>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6393      	str	r3, [r2, #56]	; 0x38
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_FMC_MspInit+0xa8>)
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e0a:	f243 033f 	movw	r3, #12351	; 0x303f
 8002e0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4815      	ldr	r0, [pc, #84]	; (8002e7c <HAL_FMC_MspInit+0xac>)
 8002e26:	f002 fa2f 	bl	8005288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002e2a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	480e      	ldr	r0, [pc, #56]	; (8002e80 <HAL_FMC_MspInit+0xb0>)
 8002e46:	f002 fa1f 	bl	8005288 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8002e4a:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8002e4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <HAL_FMC_MspInit+0xb4>)
 8002e66:	f002 fa0f 	bl	8005288 <HAL_GPIO_Init>
 8002e6a:	e000      	b.n	8002e6e <HAL_FMC_MspInit+0x9e>
    return;
 8002e6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20025ff4 	.word	0x20025ff4
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40021400 	.word	0x40021400
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40020c00 	.word	0x40020c00

08002e88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e90:	f7ff ff9e 	bl	8002dd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <MemManage_Handler+0x4>

08002eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb2:	e7fe      	b.n	8002eb2 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f884 	bl	8002ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <DMA2_Stream1_IRQHandler+0x10>)
 8002ef6:	f000 fde7 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200000c0 	.word	0x200000c0

08002f04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SystemInit+0x20>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <SystemInit+0x20>)
 8002f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f2e:	490e      	ldr	r1, [pc, #56]	; (8002f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f30:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f44:	4c0b      	ldr	r4, [pc, #44]	; (8002f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f52:	f7ff ffd7 	bl	8002f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f56:	f005 fde3 	bl	8008b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5a:	f7fd fb59 	bl	8000610 <main>
  bx  lr    
 8002f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002f6c:	08009110 	.word	0x08009110
  ldr r2, =_sbss
 8002f70:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002f74:	20025ffc 	.word	0x20025ffc

08002f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC_IRQHandler>

08002f7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f000 f94c 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f805 	bl	8002f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f8a:	f7ff fc6d 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_InitTick+0x54>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x58>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f967 	bl	8003286 <HAL_SYSTICK_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00e      	b.n	8002fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b0f      	cmp	r3, #15
 8002fc6:	d80a      	bhi.n	8002fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd0:	f000 f92f 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd4:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <HAL_InitTick+0x5c>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000048 	.word	0x20000048
 8002fec:	20000050 	.word	0x20000050
 8002ff0:	2000004c 	.word	0x2000004c

08002ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x20>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x24>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_IncTick+0x24>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000050 	.word	0x20000050
 8003018:	20025ff8 	.word	0x20025ff8

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20025ff8 	.word	0x20025ff8

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800304c:	d005      	beq.n	800305a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_Delay+0x44>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305a:	bf00      	nop
 800305c:	f7ff ffde 	bl	800301c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8f7      	bhi.n	800305c <HAL_Delay+0x28>
  {
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000050 	.word	0x20000050

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <__NVIC_SetPriorityGrouping+0x40>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <__NVIC_SetPriorityGrouping+0x40>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00
 80030c0:	05fa0000 	.word	0x05fa0000

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e069      	b.n	8003386 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff faf6 	bl	80028b0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_DCMI_Init+0xf0>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80032fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800330a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003316:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003322:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800332e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b10      	cmp	r3, #16
 800333e:	d112      	bne.n	8003366 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7f1b      	ldrb	r3, [r3, #28]
 8003344:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7f5b      	ldrb	r3, [r3, #29]
 800334a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800334c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7f9b      	ldrb	r3, [r3, #30]
 8003352:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003354:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7fdb      	ldrb	r3, [r3, #31]
 800335c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003362:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003364:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 021e 	orr.w	r2, r2, #30
 8003374:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	ffe0f007 	.word	0xffe0f007

08003394 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_DCMI_Start_DMA+0x20>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e095      	b.n	80034e0 <HAL_DCMI_Start_DMA+0x14c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0202 	bic.w	r2, r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <HAL_DCMI_Start_DMA+0x154>)
 80033fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_DCMI_Start_DMA+0x158>)
 8003402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d20e      	bcs.n	800344a <HAL_DCMI_Start_DMA+0xb6>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3328      	adds	r3, #40	; 0x28
 8003436:	4619      	mov	r1, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	f000 fa74 	bl	8003928 <HAL_DMA_Start_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03f      	beq.n	80034c6 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e04a      	b.n	80034e0 <HAL_DCMI_Start_DMA+0x14c>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <HAL_DCMI_Start_DMA+0x154>)
 8003450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003464:	e009      	b.n	800347a <HAL_DCMI_Start_DMA+0xe6>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	085a      	lsrs	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	005a      	lsls	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003482:	d2f0      	bcs.n	8003466 <HAL_DCMI_Start_DMA+0xd2>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	1e9a      	subs	r2, r3, #2
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4 * hdcmi->XferSize));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	4619      	mov	r1, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f000 fd70 	bl	8003f9c <HAL_DMAEx_MultiBufferStart_IT>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_DCMI_Start_DMA+0x132>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00c      	b.n	80034e0 <HAL_DCMI_Start_DMA+0x14c>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	08003669 	.word	0x08003669
 80034ec:	08003793 	.word	0x08003793

080034f0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_DCMI_Stop+0xb4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <HAL_DCMI_Stop+0xb8>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0a5b      	lsrs	r3, r3, #9
 8003504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003508:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_DCMI_Stop+0x2e>
 800351a:	2302      	movs	r3, #2
 800351c:	e03d      	b.n	800359a <HAL_DCMI_Stop+0xaa>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800353e:	4623      	mov	r3, r4
 8003540:	1e5c      	subs	r4, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <HAL_DCMI_Stop+0x68>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	73fb      	strb	r3, [r7, #15]
      break;
 8003556:	e006      	b.n	8003566 <HAL_DCMI_Stop+0x76>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1eb      	bne.n	800353e <HAL_DCMI_Stop+0x4e>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003574:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fa34 	bl	80039e8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000048 	.word	0x20000048
 80035a8:	10624dd3 	.word	0x10624dd3

080035ac <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 80035ac:	b490      	push	{r4, r7}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  register uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_DCMI_Suspend+0xa0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_DCMI_Suspend+0xa4>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035c4:	fb02 f403 	mul.w	r4, r2, r3
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_DCMI_Suspend+0x2e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e032      	b.n	8003640 <HAL_DCMI_Suspend+0x94>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d123      	bne.n	8003636 <HAL_DCMI_Suspend+0x8a>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 8003606:	4623      	mov	r3, r4
 8003608:	1e5c      	subs	r4, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_DCMI_Suspend+0x7c>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
        break;
 8003626:	e006      	b.n	8003636 <HAL_DCMI_Suspend+0x8a>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e7      	bne.n	8003606 <HAL_DCMI_Suspend+0x5a>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bc90      	pop	{r4, r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000048 	.word	0x20000048
 8003650:	10624dd3 	.word	0x10624dd3

08003654 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <DCMI_DMAXferCplt>:
* @param  hdma pointer to a DMA_HandleTypeDef structure that contains
*                the configuration information for the specified DMA module.
* @retval None
*/
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	60bb      	str	r3, [r7, #8]

  if (hdcmi->XferCount != 0)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	2b00      	cmp	r3, #0
 8003680:	d043      	beq.n	800370a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368e:	60fb      	str	r3, [r7, #12]
    if (((hdcmi->XferCount % 2) == 0) && (tmp != 0))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d118      	bne.n	80036ce <DCMI_DMAXferCplt+0x66>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d015      	beq.n	80036ce <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY0);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	2200      	movs	r2, #0
 80036bc:	4619      	mov	r1, r3
 80036be:	f001 fda3 	bl	8005208 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
 80036cc:	e044      	b.n	8003758 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d13c      	bne.n	8003758 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8 * hdcmi->XferSize)), MEMORY1);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	00da      	lsls	r2, r3, #3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	2201      	movs	r2, #1
 80036f8:	4619      	mov	r1, r3
 80036fa:	f001 fd85 	bl	8005208 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	1e5a      	subs	r2, r3, #1
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	639a      	str	r2, [r3, #56]	; 0x38
 8003708:	e026      	b.n	8003758 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e017      	b.n	8003758 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if ((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4 * hdcmi->XferSize));
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	0099      	lsls	r1, r3, #2
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	440a      	add	r2, r1
 800374e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	429a      	cmp	r2, r3
 8003762:	d112      	bne.n	800378a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d103      	bne.n	800378a <DCMI_DMAXferCplt+0x122>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d009      	beq.n	80037be <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff48 	bl	8003654 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff fc20 	bl	800301c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e099      	b.n	800391c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003808:	e00f      	b.n	800382a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800380a:	f7ff fc07 	bl	800301c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b05      	cmp	r3, #5
 8003816:	d908      	bls.n	800382a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e078      	b.n	800391c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e8      	bne.n	800380a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_DMA_Init+0x158>)
 8003844:	4013      	ands	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b04      	cmp	r3, #4
 8003882:	d107      	bne.n	8003894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4313      	orrs	r3, r2
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0307 	bic.w	r3, r3, #7
 80038aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d117      	bne.n	80038ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fae7 	bl	8003ea4 <DMA_CheckFifoParam>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ea:	2301      	movs	r3, #1
 80038ec:	e016      	b.n	800391c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa9e 	bl	8003e38 <DMA_CalcBaseAndBitshift>
 80038fc:	4603      	mov	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	223f      	movs	r2, #63	; 0x3f
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	e010803f 	.word	0xe010803f

08003928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_DMA_Start_IT+0x26>
 800394a:	2302      	movs	r3, #2
 800394c:	e048      	b.n	80039e0 <HAL_DMA_Start_IT+0xb8>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d137      	bne.n	80039d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fa30 	bl	8003ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0216 	orr.w	r2, r2, #22
 8003996:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0208 	orr.w	r2, r2, #8
 80039be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e005      	b.n	80039de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039da:	2302      	movs	r3, #2
 80039dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039f6:	f7ff fb11 	bl	800301c <HAL_GetTick>
 80039fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e052      	b.n	8003ac0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0216 	bic.w	r2, r2, #22
 8003a28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_DMA_Abort+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0208 	bic.w	r2, r2, #8
 8003a58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a6a:	e013      	b.n	8003a94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a6c:	f7ff fad6 	bl	800301c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d90c      	bls.n	8003a94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e015      	b.n	8003ac0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	223f      	movs	r2, #63	; 0x3f
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003ad4:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <HAL_DMA_IRQHandler+0x248>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a8e      	ldr	r2, [pc, #568]	; (8003d14 <HAL_DMA_IRQHandler+0x24c>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	2208      	movs	r2, #8
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0204 	bic.w	r2, r2, #4
 8003b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d012      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	2210      	movs	r2, #16
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	e01f      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e016      	b.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0208 	bic.w	r2, r2, #8
 8003c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 808f 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8087 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2220      	movs	r2, #32
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d136      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0216 	bic.w	r2, r2, #22
 8003c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x1da>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0208 	bic.w	r2, r2, #8
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	223f      	movs	r2, #63	; 0x3f
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d07e      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
        }
        return;
 8003cde:	e079      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01d      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
 8003d0c:	e02c      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
 8003d0e:	bf00      	nop
 8003d10:	20000048 	.word	0x20000048
 8003d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e01e      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0210 	bic.w	r2, r2, #16
 8003d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d032      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d307      	bcc.n	8003db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f2      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x2cc>
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
 8003dd2:	e000      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003dd4:	bf00      	nop
    }
  }
}
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d108      	bne.n	8003e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e1a:	e007      	b.n	8003e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3b10      	subs	r3, #16
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <DMA_CalcBaseAndBitshift+0x60>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <DMA_CalcBaseAndBitshift+0x64>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d908      	bls.n	8003e78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58
 8003e76:	e006      	b.n	8003e86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	aaaaaaab 	.word	0xaaaaaaab
 8003e9c:	080090f8 	.word	0x080090f8
 8003ea0:	fffffc00 	.word	0xfffffc00

08003ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11f      	bne.n	8003efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d856      	bhi.n	8003f72 <DMA_CheckFifoParam+0xce>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <DMA_CheckFifoParam+0x28>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003eef 	.word	0x08003eef
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	08003f73 	.word	0x08003f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d046      	beq.n	8003f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e043      	b.n	8003f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef6:	d140      	bne.n	8003f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efc:	e03d      	b.n	8003f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	d121      	bne.n	8003f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d837      	bhi.n	8003f7e <DMA_CheckFifoParam+0xda>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <DMA_CheckFifoParam+0x70>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f25 	.word	0x08003f25
 8003f18:	08003f2b 	.word	0x08003f2b
 8003f1c:	08003f25 	.word	0x08003f25
 8003f20:	08003f3d 	.word	0x08003f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e030      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d025      	beq.n	8003f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f3a:	e022      	b.n	8003f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f44:	d11f      	bne.n	8003f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f4a:	e01c      	b.n	8003f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d903      	bls.n	8003f5a <DMA_CheckFifoParam+0xb6>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d003      	beq.n	8003f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f58:	e018      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5e:	e015      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	e00b      	b.n	8003f8a <DMA_CheckFifoParam+0xe6>
      break;
 8003f72:	bf00      	nop
 8003f74:	e00a      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e008      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e006      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e004      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;
 8003f82:	bf00      	nop
 8003f84:	e002      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <DMA_CheckFifoParam+0xe8>
      break;
 8003f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop

08003f9c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d106      	bne.n	8003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f001 b8ff 	b.w	80051c2 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f001 b8f7 	b.w	80051c2 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f041 80e5 	bne.w	80051b4 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004006:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f001 f910 	bl	800523c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d960      	bls.n	80040ea <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8b      	ldr	r2, [pc, #556]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d057      	beq.n	80040e2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a8a      	ldr	r2, [pc, #552]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d050      	beq.n	80040de <HAL_DMAEx_MultiBufferStart_IT+0x142>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a88      	ldr	r2, [pc, #544]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d049      	beq.n	80040da <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a87      	ldr	r2, [pc, #540]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d042      	beq.n	80040d6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a85      	ldr	r2, [pc, #532]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d03a      	beq.n	80040d0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a84      	ldr	r2, [pc, #528]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d032      	beq.n	80040ca <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a82      	ldr	r2, [pc, #520]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02a      	beq.n	80040c4 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a81      	ldr	r2, [pc, #516]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_DMAEx_MultiBufferStart_IT+0x122>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a7f      	ldr	r2, [pc, #508]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01a      	beq.n	80040b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7e      	ldr	r2, [pc, #504]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d012      	beq.n	80040b2 <HAL_DMAEx_MultiBufferStart_IT+0x116>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00a      	beq.n	80040ac <HAL_DMAEx_MultiBufferStart_IT+0x110>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a7b      	ldr	r2, [pc, #492]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d102      	bne.n	80040a6 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80040a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040a4:	e01e      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040aa:	e01b      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040b0:	e018      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040b6:	e015      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040bc:	e012      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c2:	e00f      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040c8:	e00c      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ce:	e009      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040d4:	e006      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040d6:	2320      	movs	r3, #32
 80040d8:	e004      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040da:	2320      	movs	r3, #32
 80040dc:	e002      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040de:	2320      	movs	r3, #32
 80040e0:	e000      	b.n	80040e4 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 80040e2:	2320      	movs	r3, #32
 80040e4:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80040e6:	60d3      	str	r3, [r2, #12]
 80040e8:	e14f      	b.n	800438a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d960      	bls.n	80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a58      	ldr	r2, [pc, #352]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d057      	beq.n	80041b0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a56      	ldr	r2, [pc, #344]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d050      	beq.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0x210>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a55      	ldr	r2, [pc, #340]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d049      	beq.n	80041a8 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a53      	ldr	r2, [pc, #332]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d042      	beq.n	80041a4 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a52      	ldr	r2, [pc, #328]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03a      	beq.n	800419e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a50      	ldr	r2, [pc, #320]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d032      	beq.n	8004198 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02a      	beq.n	8004192 <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a4d      	ldr	r2, [pc, #308]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4c      	ldr	r2, [pc, #304]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01a      	beq.n	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d012      	beq.n	8004180 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a49      	ldr	r2, [pc, #292]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00a      	beq.n	800417a <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d102      	bne.n	8004174 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 800416e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004172:	e01e      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004178:	e01b      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800417a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800417e:	e018      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004184:	e015      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004186:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800418a:	e012      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800418c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004190:	e00f      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004196:	e00c      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800419c:	e009      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800419e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041a2:	e006      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a4:	2320      	movs	r3, #32
 80041a6:	e004      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041a8:	2320      	movs	r3, #32
 80041aa:	e002      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041ac:	2320      	movs	r3, #32
 80041ae:	e000      	b.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80041b0:	2320      	movs	r3, #32
 80041b2:	4a36      	ldr	r2, [pc, #216]	; (800428c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80041b4:	6093      	str	r3, [r2, #8]
 80041b6:	e0e8      	b.n	800438a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b35      	ldr	r3, [pc, #212]	; (8004294 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	f240 8082 	bls.w	80042ca <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d078      	beq.n	80042c2 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d071      	beq.n	80042be <HAL_DMAEx_MultiBufferStart_IT+0x322>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d06a      	beq.n	80042ba <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d063      	beq.n	80042b6 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d05b      	beq.n	80042b0 <HAL_DMAEx_MultiBufferStart_IT+0x314>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d053      	beq.n	80042aa <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d04b      	beq.n	80042a4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d043      	beq.n	800429e <HAL_DMAEx_MultiBufferStart_IT+0x302>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d03b      	beq.n	8004298 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d012      	beq.n	8004250 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a15      	ldr	r2, [pc, #84]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00a      	beq.n	800424a <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d102      	bne.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800423e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004242:	e03f      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004244:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004248:	e03c      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800424a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800424e:	e039      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004254:	e036      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004256:	bf00      	nop
 8004258:	40026458 	.word	0x40026458
 800425c:	40026010 	.word	0x40026010
 8004260:	40026410 	.word	0x40026410
 8004264:	40026070 	.word	0x40026070
 8004268:	40026470 	.word	0x40026470
 800426c:	40026028 	.word	0x40026028
 8004270:	40026428 	.word	0x40026428
 8004274:	40026088 	.word	0x40026088
 8004278:	40026488 	.word	0x40026488
 800427c:	40026040 	.word	0x40026040
 8004280:	40026440 	.word	0x40026440
 8004284:	400260a0 	.word	0x400260a0
 8004288:	400264a0 	.word	0x400264a0
 800428c:	40026400 	.word	0x40026400
 8004290:	400260b8 	.word	0x400260b8
 8004294:	40026058 	.word	0x40026058
 8004298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800429c:	e012      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800429e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a2:	e00f      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a8:	e00c      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ae:	e009      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042b4:	e006      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042ba:	2320      	movs	r3, #32
 80042bc:	e002      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042be:	2320      	movs	r3, #32
 80042c0:	e000      	b.n	80042c4 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80042c2:	2320      	movs	r3, #32
 80042c4:	4a8c      	ldr	r2, [pc, #560]	; (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 80042c6:	60d3      	str	r3, [r2, #12]
 80042c8:	e05f      	b.n	800438a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a8b      	ldr	r2, [pc, #556]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d057      	beq.n	8004384 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a89      	ldr	r2, [pc, #548]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d050      	beq.n	8004380 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a88      	ldr	r2, [pc, #544]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d049      	beq.n	800437c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a86      	ldr	r2, [pc, #536]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d042      	beq.n	8004378 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a85      	ldr	r2, [pc, #532]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03a      	beq.n	8004372 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a83      	ldr	r2, [pc, #524]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d032      	beq.n	800436c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a82      	ldr	r2, [pc, #520]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d02a      	beq.n	8004366 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a80      	ldr	r2, [pc, #512]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d022      	beq.n	8004360 <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7f      	ldr	r2, [pc, #508]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d01a      	beq.n	800435a <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d012      	beq.n	8004354 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7c      	ldr	r2, [pc, #496]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00a      	beq.n	800434e <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a7a      	ldr	r2, [pc, #488]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d102      	bne.n	8004348 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 8004342:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004346:	e01e      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004348:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800434c:	e01b      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800434e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004352:	e018      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004358:	e015      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800435a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800435e:	e012      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004364:	e00f      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800436a:	e00c      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800436c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004370:	e009      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004376:	e006      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004378:	2320      	movs	r3, #32
 800437a:	e004      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800437c:	2320      	movs	r3, #32
 800437e:	e002      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004380:	2320      	movs	r3, #32
 8004382:	e000      	b.n	8004386 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8004384:	2320      	movs	r3, #32
 8004386:	4a5c      	ldr	r2, [pc, #368]	; (80044f8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8004388:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8004392:	429a      	cmp	r2, r3
 8004394:	d960      	bls.n	8004458 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d057      	beq.n	8004450 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d050      	beq.n	800444c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a55      	ldr	r2, [pc, #340]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d049      	beq.n	8004448 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d042      	beq.n	8004444 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d03a      	beq.n	800443e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a50      	ldr	r2, [pc, #320]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d032      	beq.n	8004438 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4f      	ldr	r2, [pc, #316]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02a      	beq.n	8004432 <HAL_DMAEx_MultiBufferStart_IT+0x496>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a4d      	ldr	r2, [pc, #308]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_DMAEx_MultiBufferStart_IT+0x490>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a4c      	ldr	r2, [pc, #304]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01a      	beq.n	8004426 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a4a      	ldr	r2, [pc, #296]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d012      	beq.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0x484>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a49      	ldr	r2, [pc, #292]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00a      	beq.n	800441a <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a47      	ldr	r2, [pc, #284]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d102      	bne.n	8004414 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 800440e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004412:	e01e      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004414:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004418:	e01b      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800441a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800441e:	e018      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004424:	e015      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800442a:	e012      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800442c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004430:	e00f      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004436:	e00c      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443c:	e009      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800443e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004442:	e006      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004444:	2310      	movs	r3, #16
 8004446:	e004      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004448:	2310      	movs	r3, #16
 800444a:	e002      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800444c:	2310      	movs	r3, #16
 800444e:	e000      	b.n	8004452 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004450:	2310      	movs	r3, #16
 8004452:	4a37      	ldr	r2, [pc, #220]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8004454:	60d3      	str	r3, [r2, #12]
 8004456:	e14f      	b.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8004460:	429a      	cmp	r2, r3
 8004462:	f240 8082 	bls.w	800456a <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d078      	beq.n	8004562 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d071      	beq.n	800455e <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d06a      	beq.n	800455a <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d063      	beq.n	8004556 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d05b      	beq.n	8004550 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d053      	beq.n	800454a <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04b      	beq.n	8004544 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d043      	beq.n	800453e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d012      	beq.n	80044f0 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00a      	beq.n	80044ea <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d102      	bne.n	80044e4 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 80044de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044e2:	e03f      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80044e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044e8:	e03c      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80044ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044ee:	e039      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80044f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044f4:	e036      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80044f6:	bf00      	nop
 80044f8:	40026000 	.word	0x40026000
 80044fc:	40026010 	.word	0x40026010
 8004500:	40026410 	.word	0x40026410
 8004504:	40026070 	.word	0x40026070
 8004508:	40026470 	.word	0x40026470
 800450c:	40026028 	.word	0x40026028
 8004510:	40026428 	.word	0x40026428
 8004514:	40026088 	.word	0x40026088
 8004518:	40026488 	.word	0x40026488
 800451c:	40026040 	.word	0x40026040
 8004520:	40026440 	.word	0x40026440
 8004524:	400260a0 	.word	0x400260a0
 8004528:	400264a0 	.word	0x400264a0
 800452c:	40026458 	.word	0x40026458
 8004530:	40026400 	.word	0x40026400
 8004534:	400260b8 	.word	0x400260b8
 8004538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800453c:	e012      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800453e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004542:	e00f      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	e00c      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800454a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454e:	e009      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004554:	e006      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004556:	2310      	movs	r3, #16
 8004558:	e004      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800455a:	2310      	movs	r3, #16
 800455c:	e002      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800455e:	2310      	movs	r3, #16
 8004560:	e000      	b.n	8004564 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004562:	2310      	movs	r3, #16
 8004564:	4a8c      	ldr	r2, [pc, #560]	; (8004798 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 8004566:	6093      	str	r3, [r2, #8]
 8004568:	e0c6      	b.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 8004572:	429a      	cmp	r2, r3
 8004574:	d960      	bls.n	8004638 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a89      	ldr	r2, [pc, #548]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d057      	beq.n	8004630 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a87      	ldr	r2, [pc, #540]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d050      	beq.n	800462c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a86      	ldr	r2, [pc, #536]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d049      	beq.n	8004628 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a84      	ldr	r2, [pc, #528]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d042      	beq.n	8004624 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03a      	beq.n	800461e <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a81      	ldr	r2, [pc, #516]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d032      	beq.n	8004618 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a80      	ldr	r2, [pc, #512]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d02a      	beq.n	8004612 <HAL_DMAEx_MultiBufferStart_IT+0x676>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7e      	ldr	r2, [pc, #504]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d022      	beq.n	800460c <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7d      	ldr	r2, [pc, #500]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d01a      	beq.n	8004606 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7b      	ldr	r2, [pc, #492]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d012      	beq.n	8004600 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7a      	ldr	r2, [pc, #488]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00a      	beq.n	80045fa <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a78      	ldr	r2, [pc, #480]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d102      	bne.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 80045ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045f2:	e01e      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80045f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045f8:	e01b      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80045fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045fe:	e018      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004604:	e015      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004606:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800460a:	e012      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800460c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004610:	e00f      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	e00c      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461c:	e009      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800461e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004622:	e006      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004624:	2310      	movs	r3, #16
 8004626:	e004      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004628:	2310      	movs	r3, #16
 800462a:	e002      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800462c:	2310      	movs	r3, #16
 800462e:	e000      	b.n	8004632 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004630:	2310      	movs	r3, #16
 8004632:	4a67      	ldr	r2, [pc, #412]	; (80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004634:	60d3      	str	r3, [r2, #12]
 8004636:	e05f      	b.n	80046f8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d057      	beq.n	80046f2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d050      	beq.n	80046ee <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a55      	ldr	r2, [pc, #340]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d049      	beq.n	80046ea <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a54      	ldr	r2, [pc, #336]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d042      	beq.n	80046e6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03a      	beq.n	80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a51      	ldr	r2, [pc, #324]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d032      	beq.n	80046da <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d02a      	beq.n	80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4c      	ldr	r2, [pc, #304]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01a      	beq.n	80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4b      	ldr	r2, [pc, #300]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d012      	beq.n	80046c2 <HAL_DMAEx_MultiBufferStart_IT+0x726>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a49      	ldr	r2, [pc, #292]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00a      	beq.n	80046bc <HAL_DMAEx_MultiBufferStart_IT+0x720>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a48      	ldr	r2, [pc, #288]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d102      	bne.n	80046b6 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 80046b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046b4:	e01e      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046ba:	e01b      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046c0:	e018      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046c6:	e015      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046cc:	e012      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d2:	e00f      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d8:	e00c      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046de:	e009      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e4:	e006      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046e6:	2310      	movs	r3, #16
 80046e8:	e004      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046ea:	2310      	movs	r3, #16
 80046ec:	e002      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046ee:	2310      	movs	r3, #16
 80046f0:	e000      	b.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 80046f2:	2310      	movs	r3, #16
 80046f4:	4a36      	ldr	r2, [pc, #216]	; (80047d0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80046f6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004700:	429a      	cmp	r2, r3
 8004702:	f240 8082 	bls.w	800480a <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d078      	beq.n	8004802 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d071      	beq.n	80047fe <HAL_DMAEx_MultiBufferStart_IT+0x862>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d06a      	beq.n	80047fa <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a20      	ldr	r2, [pc, #128]	; (80047ac <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d063      	beq.n	80047f6 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d05b      	beq.n	80047f0 <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d053      	beq.n	80047ea <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04b      	beq.n	80047e4 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d043      	beq.n	80047de <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d012      	beq.n	8004790 <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00a      	beq.n	800478a <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d102      	bne.n	8004784 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 800477e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004782:	e03f      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004788:	e03c      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 800478a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800478e:	e039      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004794:	e036      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004796:	bf00      	nop
 8004798:	40026400 	.word	0x40026400
 800479c:	40026058 	.word	0x40026058
 80047a0:	40026010 	.word	0x40026010
 80047a4:	40026410 	.word	0x40026410
 80047a8:	40026070 	.word	0x40026070
 80047ac:	40026470 	.word	0x40026470
 80047b0:	40026028 	.word	0x40026028
 80047b4:	40026428 	.word	0x40026428
 80047b8:	40026088 	.word	0x40026088
 80047bc:	40026488 	.word	0x40026488
 80047c0:	40026040 	.word	0x40026040
 80047c4:	40026440 	.word	0x40026440
 80047c8:	400260a0 	.word	0x400260a0
 80047cc:	400264a0 	.word	0x400264a0
 80047d0:	40026000 	.word	0x40026000
 80047d4:	40026458 	.word	0x40026458
 80047d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047dc:	e012      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e2:	e00f      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e8:	e00c      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ee:	e009      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f4:	e006      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e004      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047fa:	2308      	movs	r3, #8
 80047fc:	e002      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 80047fe:	2308      	movs	r3, #8
 8004800:	e000      	b.n	8004804 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004802:	2308      	movs	r3, #8
 8004804:	4a8c      	ldr	r2, [pc, #560]	; (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8004806:	60d3      	str	r3, [r2, #12]
 8004808:	e14e      	b.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	4b8a      	ldr	r3, [pc, #552]	; (8004a3c <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8004812:	429a      	cmp	r2, r3
 8004814:	d960      	bls.n	80048d8 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a89      	ldr	r2, [pc, #548]	; (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d057      	beq.n	80048d0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a87      	ldr	r2, [pc, #540]	; (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d050      	beq.n	80048cc <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a86      	ldr	r2, [pc, #536]	; (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d049      	beq.n	80048c8 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a84      	ldr	r2, [pc, #528]	; (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d042      	beq.n	80048c4 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a83      	ldr	r2, [pc, #524]	; (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d03a      	beq.n	80048be <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a81      	ldr	r2, [pc, #516]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d032      	beq.n	80048b8 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a80      	ldr	r2, [pc, #512]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d02a      	beq.n	80048b2 <HAL_DMAEx_MultiBufferStart_IT+0x916>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7e      	ldr	r2, [pc, #504]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d022      	beq.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7d      	ldr	r2, [pc, #500]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d01a      	beq.n	80048a6 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7b      	ldr	r2, [pc, #492]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d012      	beq.n	80048a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7a      	ldr	r2, [pc, #488]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00a      	beq.n	800489a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a78      	ldr	r2, [pc, #480]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d102      	bne.n	8004894 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 800488e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004892:	e01e      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004898:	e01b      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800489a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800489e:	e018      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048a4:	e015      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048aa:	e012      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b0:	e00f      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b6:	e00c      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048bc:	e009      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c2:	e006      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048c4:	2308      	movs	r3, #8
 80048c6:	e004      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048c8:	2308      	movs	r3, #8
 80048ca:	e002      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048cc:	2308      	movs	r3, #8
 80048ce:	e000      	b.n	80048d2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 80048d0:	2308      	movs	r3, #8
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 80048d4:	6093      	str	r3, [r2, #8]
 80048d6:	e0e7      	b.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	4b64      	ldr	r3, [pc, #400]	; (8004a70 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d960      	bls.n	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a55      	ldr	r2, [pc, #340]	; (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d057      	beq.n	800499e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a54      	ldr	r2, [pc, #336]	; (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d050      	beq.n	800499a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d049      	beq.n	8004996 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a51      	ldr	r2, [pc, #324]	; (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d042      	beq.n	8004992 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4f      	ldr	r2, [pc, #316]	; (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d03a      	beq.n	800498c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a4e      	ldr	r2, [pc, #312]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d032      	beq.n	8004986 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a4c      	ldr	r2, [pc, #304]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02a      	beq.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a4b      	ldr	r2, [pc, #300]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a49      	ldr	r2, [pc, #292]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01a      	beq.n	8004974 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a48      	ldr	r2, [pc, #288]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d012      	beq.n	800496e <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00a      	beq.n	8004968 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a45      	ldr	r2, [pc, #276]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d102      	bne.n	8004962 <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 800495c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004960:	e01e      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004966:	e01b      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004968:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800496c:	e018      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800496e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004972:	e015      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004974:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004978:	e012      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800497a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800497e:	e00f      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004984:	e00c      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498a:	e009      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800498c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004990:	e006      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004992:	2308      	movs	r3, #8
 8004994:	e004      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004996:	2308      	movs	r3, #8
 8004998:	e002      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800499a:	2308      	movs	r3, #8
 800499c:	e000      	b.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800499e:	2308      	movs	r3, #8
 80049a0:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80049a2:	60d3      	str	r3, [r2, #12]
 80049a4:	e080      	b.n	8004aa8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a25      	ldr	r2, [pc, #148]	; (8004a40 <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d078      	beq.n	8004aa2 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d071      	beq.n	8004a9e <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d06a      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d063      	beq.n	8004a96 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d05b      	beq.n	8004a90 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d053      	beq.n	8004a8a <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04b      	beq.n	8004a84 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d043      	beq.n	8004a7e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d03b      	beq.n	8004a78 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d012      	beq.n	8004a30 <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00a      	beq.n	8004a2a <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d102      	bne.n	8004a24 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 8004a1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a22:	e03f      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a28:	e03c      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a2e:	e039      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a34:	e036      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a36:	bf00      	nop
 8004a38:	40026400 	.word	0x40026400
 8004a3c:	400260b8 	.word	0x400260b8
 8004a40:	40026010 	.word	0x40026010
 8004a44:	40026410 	.word	0x40026410
 8004a48:	40026070 	.word	0x40026070
 8004a4c:	40026470 	.word	0x40026470
 8004a50:	40026028 	.word	0x40026028
 8004a54:	40026428 	.word	0x40026428
 8004a58:	40026088 	.word	0x40026088
 8004a5c:	40026488 	.word	0x40026488
 8004a60:	40026040 	.word	0x40026040
 8004a64:	40026440 	.word	0x40026440
 8004a68:	400260a0 	.word	0x400260a0
 8004a6c:	400264a0 	.word	0x400264a0
 8004a70:	40026058 	.word	0x40026058
 8004a74:	40026000 	.word	0x40026000
 8004a78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a7c:	e012      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a82:	e00f      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a88:	e00c      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8e:	e009      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	e006      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e004      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	e002      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	e000      	b.n	8004aa4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	4a8a      	ldr	r2, [pc, #552]	; (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8004aa6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b89      	ldr	r3, [pc, #548]	; (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d960      	bls.n	8004b76 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a87      	ldr	r2, [pc, #540]	; (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d057      	beq.n	8004b6e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a86      	ldr	r2, [pc, #536]	; (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d050      	beq.n	8004b6a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a84      	ldr	r2, [pc, #528]	; (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d049      	beq.n	8004b66 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a83      	ldr	r2, [pc, #524]	; (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d042      	beq.n	8004b62 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a81      	ldr	r2, [pc, #516]	; (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d03a      	beq.n	8004b5c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d032      	beq.n	8004b56 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7e      	ldr	r2, [pc, #504]	; (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d02a      	beq.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a7d      	ldr	r2, [pc, #500]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7b      	ldr	r2, [pc, #492]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01a      	beq.n	8004b44 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a7a      	ldr	r2, [pc, #488]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d012      	beq.n	8004b3e <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a78      	ldr	r2, [pc, #480]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00a      	beq.n	8004b38 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a77      	ldr	r2, [pc, #476]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d102      	bne.n	8004b32 <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8004b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b30:	e01e      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b36:	e01b      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b3c:	e018      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b42:	e015      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b48:	e012      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b4e:	e00f      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b54:	e00c      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5a:	e009      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b60:	e006      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e004      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b66:	2304      	movs	r3, #4
 8004b68:	e002      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	e000      	b.n	8004b70 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004b6e:	2304      	movs	r3, #4
 8004b70:	4a65      	ldr	r2, [pc, #404]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004b72:	60d3      	str	r3, [r2, #12]
 8004b74:	e150      	b.n	8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d960      	bls.n	8004c44 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d057      	beq.n	8004c3c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a52      	ldr	r2, [pc, #328]	; (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d050      	beq.n	8004c38 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d049      	beq.n	8004c34 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4f      	ldr	r2, [pc, #316]	; (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d042      	beq.n	8004c30 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03a      	beq.n	8004c2a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a4c      	ldr	r2, [pc, #304]	; (8004cec <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d032      	beq.n	8004c24 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a4b      	ldr	r2, [pc, #300]	; (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d02a      	beq.n	8004c1e <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a48      	ldr	r2, [pc, #288]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01a      	beq.n	8004c12 <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a46      	ldr	r2, [pc, #280]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d012      	beq.n	8004c0c <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a45      	ldr	r2, [pc, #276]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00a      	beq.n	8004c06 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a43      	ldr	r2, [pc, #268]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d102      	bne.n	8004c00 <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8004bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bfe:	e01e      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c04:	e01b      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c0a:	e018      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c10:	e015      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c16:	e012      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c1c:	e00f      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c22:	e00c      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c28:	e009      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c2e:	e006      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c30:	2304      	movs	r3, #4
 8004c32:	e004      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c34:	2304      	movs	r3, #4
 8004c36:	e002      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e000      	b.n	8004c3e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	4a32      	ldr	r2, [pc, #200]	; (8004d08 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004c40:	6093      	str	r3, [r2, #8]
 8004c42:	e0e9      	b.n	8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	f240 8083 	bls.w	8004d58 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d079      	beq.n	8004d50 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d072      	beq.n	8004d4c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d06b      	beq.n	8004d48 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d064      	beq.n	8004d44 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d05c      	beq.n	8004d3e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d054      	beq.n	8004d38 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d04c      	beq.n	8004d32 <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d044      	beq.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d03c      	beq.n	8004d26 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d034      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d124      	bne.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8004cca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cce:	e040      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004cd0:	40026000 	.word	0x40026000
 8004cd4:	40026458 	.word	0x40026458
 8004cd8:	40026010 	.word	0x40026010
 8004cdc:	40026410 	.word	0x40026410
 8004ce0:	40026070 	.word	0x40026070
 8004ce4:	40026470 	.word	0x40026470
 8004ce8:	40026028 	.word	0x40026028
 8004cec:	40026428 	.word	0x40026428
 8004cf0:	40026088 	.word	0x40026088
 8004cf4:	40026488 	.word	0x40026488
 8004cf8:	40026040 	.word	0x40026040
 8004cfc:	40026440 	.word	0x40026440
 8004d00:	400260a0 	.word	0x400260a0
 8004d04:	400264a0 	.word	0x400264a0
 8004d08:	40026400 	.word	0x40026400
 8004d0c:	400260b8 	.word	0x400260b8
 8004d10:	40026058 	.word	0x40026058
 8004d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d18:	e01b      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d1e:	e018      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d24:	e015      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d2a:	e012      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d30:	e00f      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d36:	e00c      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d3c:	e009      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d42:	e006      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d44:	2304      	movs	r3, #4
 8004d46:	e004      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	e002      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	e000      	b.n	8004d52 <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8004d50:	2304      	movs	r3, #4
 8004d52:	4a8b      	ldr	r2, [pc, #556]	; (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8004d54:	60d3      	str	r3, [r2, #12]
 8004d56:	e05f      	b.n	8004e18 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a89      	ldr	r2, [pc, #548]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d057      	beq.n	8004e12 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a88      	ldr	r2, [pc, #544]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d050      	beq.n	8004e0e <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a86      	ldr	r2, [pc, #536]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d049      	beq.n	8004e0a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a85      	ldr	r2, [pc, #532]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d042      	beq.n	8004e06 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a83      	ldr	r2, [pc, #524]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d03a      	beq.n	8004e00 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a82      	ldr	r2, [pc, #520]	; (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d032      	beq.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a80      	ldr	r2, [pc, #512]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02a      	beq.n	8004df4 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7f      	ldr	r2, [pc, #508]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d022      	beq.n	8004dee <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a7d      	ldr	r2, [pc, #500]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01a      	beq.n	8004de8 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a7c      	ldr	r2, [pc, #496]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d012      	beq.n	8004de2 <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a7a      	ldr	r2, [pc, #488]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00a      	beq.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a79      	ldr	r2, [pc, #484]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d102      	bne.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 8004dd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dd4:	e01e      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dda:	e01b      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004ddc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004de0:	e018      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004de2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004de6:	e015      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004dec:	e012      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df2:	e00f      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df8:	e00c      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dfe:	e009      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e04:	e006      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e06:	2304      	movs	r3, #4
 8004e08:	e004      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	e002      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	e000      	b.n	8004e14 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8004e12:	2304      	movs	r3, #4
 8004e14:	4a5a      	ldr	r2, [pc, #360]	; (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8004e16:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d95c      	bls.n	8004ede <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a56      	ldr	r2, [pc, #344]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d053      	beq.n	8004ed6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a55      	ldr	r2, [pc, #340]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d04c      	beq.n	8004ed2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a53      	ldr	r2, [pc, #332]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d045      	beq.n	8004ece <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a52      	ldr	r2, [pc, #328]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d03e      	beq.n	8004eca <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a50      	ldr	r2, [pc, #320]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d037      	beq.n	8004ec6 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a4f      	ldr	r2, [pc, #316]	; (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d030      	beq.n	8004ec2 <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a4d      	ldr	r2, [pc, #308]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d029      	beq.n	8004ebe <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4c      	ldr	r2, [pc, #304]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a4a      	ldr	r2, [pc, #296]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01a      	beq.n	8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a49      	ldr	r2, [pc, #292]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d012      	beq.n	8004eae <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a47      	ldr	r2, [pc, #284]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00a      	beq.n	8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a46      	ldr	r2, [pc, #280]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 8004e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea0:	e01a      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ea6:	e017      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eac:	e014      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb2:	e011      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb8:	e00e      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eba:	2340      	movs	r3, #64	; 0x40
 8004ebc:	e00c      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	e00a      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	e008      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	e006      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e004      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e002      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	e141      	b.n	8005162 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d97c      	bls.n	8004fe4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d073      	beq.n	8004fdc <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d06c      	beq.n	8004fd8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d065      	beq.n	8004fd4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d05e      	beq.n	8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d057      	beq.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d050      	beq.n	8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d049      	beq.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d042      	beq.n	8004fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01a      	beq.n	8004f7a <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d012      	beq.n	8004f74 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00a      	beq.n	8004f6e <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d102      	bne.n	8004f68 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 8004f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f66:	e03a      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f6c:	e037      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f72:	e034      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f78:	e031      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f7e:	e02e      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004f80:	40026000 	.word	0x40026000
 8004f84:	40026010 	.word	0x40026010
 8004f88:	40026410 	.word	0x40026410
 8004f8c:	40026070 	.word	0x40026070
 8004f90:	40026470 	.word	0x40026470
 8004f94:	40026028 	.word	0x40026028
 8004f98:	40026428 	.word	0x40026428
 8004f9c:	40026088 	.word	0x40026088
 8004fa0:	40026488 	.word	0x40026488
 8004fa4:	40026040 	.word	0x40026040
 8004fa8:	40026440 	.word	0x40026440
 8004fac:	400260a0 	.word	0x400260a0
 8004fb0:	400264a0 	.word	0x400264a0
 8004fb4:	40026458 	.word	0x40026458
 8004fb8:	40026400 	.word	0x40026400
 8004fbc:	400260b8 	.word	0x400260b8
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	e00c      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	e00a      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	e008      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	e006      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e004      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e002      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4a7b      	ldr	r2, [pc, #492]	; (80051cc <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 8004fe0:	6093      	str	r3, [r2, #8]
 8004fe2:	e0be      	b.n	8005162 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b79      	ldr	r3, [pc, #484]	; (80051d0 <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d95c      	bls.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a77      	ldr	r2, [pc, #476]	; (80051d4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d053      	beq.n	80050a2 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a76      	ldr	r2, [pc, #472]	; (80051d8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04c      	beq.n	800509e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a74      	ldr	r2, [pc, #464]	; (80051dc <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d045      	beq.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a73      	ldr	r2, [pc, #460]	; (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d03e      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a71      	ldr	r2, [pc, #452]	; (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d037      	beq.n	8005092 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a70      	ldr	r2, [pc, #448]	; (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d030      	beq.n	800508e <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6e      	ldr	r2, [pc, #440]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d029      	beq.n	800508a <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6d      	ldr	r2, [pc, #436]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d022      	beq.n	8005086 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a6b      	ldr	r2, [pc, #428]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01a      	beq.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d012      	beq.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a68      	ldr	r2, [pc, #416]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00a      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a67      	ldr	r2, [pc, #412]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d102      	bne.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 8005068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800506c:	e01a      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800506e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005072:	e017      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005078:	e014      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800507a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800507e:	e011      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005084:	e00e      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	e00c      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	e00a      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800508e:	2340      	movs	r3, #64	; 0x40
 8005090:	e008      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	e006      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8005096:	2301      	movs	r3, #1
 8005098:	e004      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800509a:	2301      	movs	r3, #1
 800509c:	e002      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4a57      	ldr	r2, [pc, #348]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80050a6:	60d3      	str	r3, [r2, #12]
 80050a8:	e05b      	b.n	8005162 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a49      	ldr	r2, [pc, #292]	; (80051d4 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d053      	beq.n	800515c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a47      	ldr	r2, [pc, #284]	; (80051d8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d04c      	beq.n	8005158 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a46      	ldr	r2, [pc, #280]	; (80051dc <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03e      	beq.n	8005150 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a43      	ldr	r2, [pc, #268]	; (80051e4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d037      	beq.n	800514c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a41      	ldr	r2, [pc, #260]	; (80051e8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d030      	beq.n	8005148 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a40      	ldr	r2, [pc, #256]	; (80051ec <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d029      	beq.n	8005144 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3d      	ldr	r2, [pc, #244]	; (80051f4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01a      	beq.n	800513a <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a3b      	ldr	r2, [pc, #236]	; (80051f8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d012      	beq.n	8005134 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00a      	beq.n	800512e <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a38      	ldr	r2, [pc, #224]	; (8005200 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d102      	bne.n	8005128 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 8005122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005126:	e01a      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005128:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800512c:	e017      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800512e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005132:	e014      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005138:	e011      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800513a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800513e:	e00e      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	e00c      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	e00a      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	e008      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	e006      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005150:	2301      	movs	r3, #1
 8005152:	e004      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005154:	2301      	movs	r3, #1
 8005156:	e002      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800515c:	2301      	movs	r3, #1
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005160:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0216 	orr.w	r2, r2, #22
 8005170:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005180:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0208 	orr.w	r2, r2, #8
 80051a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e005      	b.n	80051c0 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
 80051be:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40026400 	.word	0x40026400
 80051d0:	40026058 	.word	0x40026058
 80051d4:	40026010 	.word	0x40026010
 80051d8:	40026410 	.word	0x40026410
 80051dc:	40026070 	.word	0x40026070
 80051e0:	40026470 	.word	0x40026470
 80051e4:	40026028 	.word	0x40026028
 80051e8:	40026428 	.word	0x40026428
 80051ec:	40026088 	.word	0x40026088
 80051f0:	40026488 	.word	0x40026488
 80051f4:	40026040 	.word	0x40026040
 80051f8:	40026440 	.word	0x40026440
 80051fc:	400260a0 	.word	0x400260a0
 8005200:	400264a0 	.word	0x400264a0
 8005204:	40026000 	.word	0x40026000

08005208 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	e003      	b.n	800522e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d108      	bne.n	800526c <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800526a:	e007      	b.n	800527c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e175      	b.n	8005594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052a8:	2201      	movs	r2, #1
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	f040 8164 	bne.w	800558e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d005      	beq.n	80052de <HAL_GPIO_Init+0x56>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d130      	bne.n	8005340 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2203      	movs	r2, #3
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005314:	2201      	movs	r2, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4013      	ands	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 0201 	and.w	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d017      	beq.n	800537c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2203      	movs	r2, #3
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d123      	bne.n	80053d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	08da      	lsrs	r2, r3, #3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3208      	adds	r2, #8
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	220f      	movs	r2, #15
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	08da      	lsrs	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	2203      	movs	r2, #3
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 0203 	and.w	r2, r3, #3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80be 	beq.w	800558e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005412:	4b66      	ldr	r3, [pc, #408]	; (80055ac <HAL_GPIO_Init+0x324>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	4a65      	ldr	r2, [pc, #404]	; (80055ac <HAL_GPIO_Init+0x324>)
 8005418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800541c:	6453      	str	r3, [r2, #68]	; 0x44
 800541e:	4b63      	ldr	r3, [pc, #396]	; (80055ac <HAL_GPIO_Init+0x324>)
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800542a:	4a61      	ldr	r2, [pc, #388]	; (80055b0 <HAL_GPIO_Init+0x328>)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	3302      	adds	r3, #2
 8005432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	220f      	movs	r2, #15
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a58      	ldr	r2, [pc, #352]	; (80055b4 <HAL_GPIO_Init+0x32c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d037      	beq.n	80054c6 <HAL_GPIO_Init+0x23e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a57      	ldr	r2, [pc, #348]	; (80055b8 <HAL_GPIO_Init+0x330>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d031      	beq.n	80054c2 <HAL_GPIO_Init+0x23a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a56      	ldr	r2, [pc, #344]	; (80055bc <HAL_GPIO_Init+0x334>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02b      	beq.n	80054be <HAL_GPIO_Init+0x236>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a55      	ldr	r2, [pc, #340]	; (80055c0 <HAL_GPIO_Init+0x338>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d025      	beq.n	80054ba <HAL_GPIO_Init+0x232>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a54      	ldr	r2, [pc, #336]	; (80055c4 <HAL_GPIO_Init+0x33c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01f      	beq.n	80054b6 <HAL_GPIO_Init+0x22e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a53      	ldr	r2, [pc, #332]	; (80055c8 <HAL_GPIO_Init+0x340>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d019      	beq.n	80054b2 <HAL_GPIO_Init+0x22a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a52      	ldr	r2, [pc, #328]	; (80055cc <HAL_GPIO_Init+0x344>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_GPIO_Init+0x226>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a51      	ldr	r2, [pc, #324]	; (80055d0 <HAL_GPIO_Init+0x348>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00d      	beq.n	80054aa <HAL_GPIO_Init+0x222>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a50      	ldr	r2, [pc, #320]	; (80055d4 <HAL_GPIO_Init+0x34c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d007      	beq.n	80054a6 <HAL_GPIO_Init+0x21e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a4f      	ldr	r2, [pc, #316]	; (80055d8 <HAL_GPIO_Init+0x350>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <HAL_GPIO_Init+0x21a>
 800549e:	2309      	movs	r3, #9
 80054a0:	e012      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054a2:	230a      	movs	r3, #10
 80054a4:	e010      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054a6:	2308      	movs	r3, #8
 80054a8:	e00e      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054aa:	2307      	movs	r3, #7
 80054ac:	e00c      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054ae:	2306      	movs	r3, #6
 80054b0:	e00a      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054b2:	2305      	movs	r3, #5
 80054b4:	e008      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054b6:	2304      	movs	r3, #4
 80054b8:	e006      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054ba:	2303      	movs	r3, #3
 80054bc:	e004      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054be:	2302      	movs	r3, #2
 80054c0:	e002      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_GPIO_Init+0x240>
 80054c6:	2300      	movs	r3, #0
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f002 0203 	and.w	r2, r2, #3
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	4093      	lsls	r3, r2
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80054d8:	4935      	ldr	r1, [pc, #212]	; (80055b0 <HAL_GPIO_Init+0x328>)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	3302      	adds	r3, #2
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054e6:	4b3d      	ldr	r3, [pc, #244]	; (80055dc <HAL_GPIO_Init+0x354>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800550a:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_GPIO_Init+0x354>)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_GPIO_Init+0x354>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <HAL_GPIO_Init+0x354>)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800553a:	4b28      	ldr	r3, [pc, #160]	; (80055dc <HAL_GPIO_Init+0x354>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <HAL_GPIO_Init+0x354>)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_GPIO_Init+0x354>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005588:	4a14      	ldr	r2, [pc, #80]	; (80055dc <HAL_GPIO_Init+0x354>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3301      	adds	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	f67f ae86 	bls.w	80052a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	; 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40020800 	.word	0x40020800
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40021400 	.word	0x40021400
 80055cc:	40021800 	.word	0x40021800
 80055d0:	40021c00 	.word	0x40021c00
 80055d4:	40022000 	.word	0x40022000
 80055d8:	40022400 	.word	0x40022400
 80055dc:	40013c00 	.word	0x40013c00

080055e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
 80055ec:	4613      	mov	r3, r2
 80055ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f0:	787b      	ldrb	r3, [r7, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80055fc:	e003      	b.n	8005606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80055fe:	887b      	ldrh	r3, [r7, #2]
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	619a      	str	r2, [r3, #24]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e07f      	b.n	8005726 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fd fa2c 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d107      	bne.n	800568e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	e006      	b.n	800569c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800569a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d104      	bne.n	80056ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <HAL_I2C_Init+0x11c>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69d9      	ldr	r1, [r3, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	02008000 	.word	0x02008000

08005734 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4603      	mov	r3, r0
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	460b      	mov	r3, r1
 8005748:	813b      	strh	r3, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b20      	cmp	r3, #32
 8005758:	f040 80f9 	bne.w	800594e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_I2C_Mem_Write+0x34>
 8005762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0ed      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_I2C_Mem_Write+0x4e>
 800577e:	2302      	movs	r3, #2
 8005780:	e0e6      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800578a:	f7fd fc47 	bl	800301c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2319      	movs	r3, #25
 8005796:	2201      	movs	r2, #1
 8005798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fac3 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0d1      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2221      	movs	r2, #33	; 0x21
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d4:	88f8      	ldrh	r0, [r7, #6]
 80057d6:	893a      	ldrh	r2, [r7, #8]
 80057d8:	8979      	ldrh	r1, [r7, #10]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4603      	mov	r3, r0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f9d3 	bl	8005b90 <I2C_RequestMemoryWrite>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0a9      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2bff      	cmp	r3, #255	; 0xff
 8005804:	d90e      	bls.n	8005824 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	22ff      	movs	r2, #255	; 0xff
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	b2da      	uxtb	r2, r3
 8005812:	8979      	ldrh	r1, [r7, #10]
 8005814:	2300      	movs	r3, #0
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fc1f 	bl	8006060 <I2C_TransferConfig>
 8005822:	e00f      	b.n	8005844 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	b2da      	uxtb	r2, r3
 8005834:	8979      	ldrh	r1, [r7, #10]
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fc0e 	bl	8006060 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 faad 	bl	8005da8 <I2C_WaitOnTXISFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e07b      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	781a      	ldrb	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d034      	beq.n	80058fc <HAL_I2C_Mem_Write+0x1c8>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d130      	bne.n	80058fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	2200      	movs	r2, #0
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa3f 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e04d      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2bff      	cmp	r3, #255	; 0xff
 80058bc:	d90e      	bls.n	80058dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	8979      	ldrh	r1, [r7, #10]
 80058cc:	2300      	movs	r3, #0
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fbc3 	bl	8006060 <I2C_TransferConfig>
 80058da:	e00f      	b.n	80058fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	8979      	ldrh	r1, [r7, #10]
 80058ee:	2300      	movs	r3, #0
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fbb2 	bl	8006060 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d19e      	bne.n	8005844 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fa8c 	bl	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01a      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2220      	movs	r2, #32
 8005920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <HAL_I2C_Mem_Write+0x224>)
 800592e:	400b      	ands	r3, r1
 8005930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
  }
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	fe00e800 	.word	0xfe00e800

0800595c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	4608      	mov	r0, r1
 8005966:	4611      	mov	r1, r2
 8005968:	461a      	mov	r2, r3
 800596a:	4603      	mov	r3, r0
 800596c:	817b      	strh	r3, [r7, #10]
 800596e:	460b      	mov	r3, r1
 8005970:	813b      	strh	r3, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	f040 80fd 	bne.w	8005b7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_I2C_Mem_Read+0x34>
 800598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005996:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0f1      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2C_Mem_Read+0x4e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0ea      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b2:	f7fd fb33 	bl	800301c <HAL_GetTick>
 80059b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	2319      	movs	r3, #25
 80059be:	2201      	movs	r2, #1
 80059c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f9af 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0d5      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2222      	movs	r2, #34	; 0x22
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059fc:	88f8      	ldrh	r0, [r7, #6]
 80059fe:	893a      	ldrh	r2, [r7, #8]
 8005a00:	8979      	ldrh	r1, [r7, #10]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f913 	bl	8005c38 <I2C_RequestMemoryRead>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0ad      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2bff      	cmp	r3, #255	; 0xff
 8005a2c:	d90e      	bls.n	8005a4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	22ff      	movs	r2, #255	; 0xff
 8005a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	8979      	ldrh	r1, [r7, #10]
 8005a3c:	4b52      	ldr	r3, [pc, #328]	; (8005b88 <HAL_I2C_Mem_Read+0x22c>)
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb0b 	bl	8006060 <I2C_TransferConfig>
 8005a4a:	e00f      	b.n	8005a6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	8979      	ldrh	r1, [r7, #10]
 8005a5e:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <HAL_I2C_Mem_Read+0x22c>)
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fafa 	bl	8006060 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2200      	movs	r2, #0
 8005a74:	2104      	movs	r1, #4
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f956 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07c      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d034      	beq.n	8005b2c <HAL_I2C_Mem_Read+0x1d0>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d130      	bne.n	8005b2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f927 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e04d      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2bff      	cmp	r3, #255	; 0xff
 8005aec:	d90e      	bls.n	8005b0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	22ff      	movs	r2, #255	; 0xff
 8005af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	8979      	ldrh	r1, [r7, #10]
 8005afc:	2300      	movs	r3, #0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 faab 	bl	8006060 <I2C_TransferConfig>
 8005b0a:	e00f      	b.n	8005b2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	8979      	ldrh	r1, [r7, #10]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fa9a 	bl	8006060 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d19a      	bne.n	8005a6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f974 	bl	8005e28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e01a      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_I2C_Mem_Read+0x230>)
 8005b5e:	400b      	ands	r3, r1
 8005b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	80002400 	.word	0x80002400
 8005b8c:	fe00e800 	.word	0xfe00e800

08005b90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	817b      	strh	r3, [r7, #10]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	813b      	strh	r3, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <I2C_RequestMemoryWrite+0xa4>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fa51 	bl	8006060 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f8f0 	bl	8005da8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e02c      	b.n	8005c2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d105      	bne.n	8005be4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd8:	893b      	ldrh	r3, [r7, #8]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
 8005be2:	e015      	b.n	8005c10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	69b9      	ldr	r1, [r7, #24]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f8d6 	bl	8005da8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e012      	b.n	8005c2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c06:	893b      	ldrh	r3, [r7, #8]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f884 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	80002000 	.word	0x80002000

08005c38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	817b      	strh	r3, [r7, #10]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	813b      	strh	r3, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	8979      	ldrh	r1, [r7, #10]
 8005c58:	4b20      	ldr	r3, [pc, #128]	; (8005cdc <I2C_RequestMemoryRead+0xa4>)
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f9fe 	bl	8006060 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f89d 	bl	8005da8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e02c      	b.n	8005cd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d105      	bne.n	8005c8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
 8005c88:	e015      	b.n	8005cb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f883 	bl	8005da8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e012      	b.n	8005cd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cac:	893b      	ldrh	r3, [r7, #8]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2140      	movs	r1, #64	; 0x40
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f831 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	80002000 	.word	0x80002000

08005ce0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d103      	bne.n	8005cfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d007      	beq.n	8005d1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	619a      	str	r2, [r3, #24]
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d38:	e022      	b.n	8005d80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d40:	d01e      	beq.n	8005d80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fd f96b 	bl	800301c <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d113      	bne.n	8005d80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e00f      	b.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d0cd      	beq.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005db4:	e02c      	b.n	8005e10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f870 	bl	8005ea0 <I2C_IsErrorOccurred>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e02a      	b.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd0:	d01e      	beq.n	8005e10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd2:	f7fd f923 	bl	800301c <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d113      	bne.n	8005e10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e007      	b.n	8005e20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d1cb      	bne.n	8005db6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e34:	e028      	b.n	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f830 	bl	8005ea0 <I2C_IsErrorOccurred>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e026      	b.n	8005e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fd f8e7 	bl	800301c <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d113      	bne.n	8005e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e007      	b.n	8005e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d1cf      	bne.n	8005e36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d068      	beq.n	8005f9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ed4:	e049      	b.n	8005f6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005edc:	d045      	beq.n	8005f6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fd f89d 	bl	800301c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_IsErrorOccurred+0x54>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d13a      	bne.n	8005f6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005efe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f16:	d121      	bne.n	8005f5c <I2C_IsErrorOccurred+0xbc>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1e:	d01d      	beq.n	8005f5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f20:	7cfb      	ldrb	r3, [r7, #19]
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d01a      	beq.n	8005f5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f36:	f7fd f871 	bl	800301c <HAL_GetTick>
 8005f3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3c:	e00e      	b.n	8005f5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f3e:	f7fd f86d 	bl	800301c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b19      	cmp	r3, #25
 8005f4a:	d907      	bls.n	8005f5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	f043 0320 	orr.w	r3, r3, #32
 8005f52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005f5a:	e006      	b.n	8005f6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d1e9      	bne.n	8005f3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d003      	beq.n	8005f80 <I2C_IsErrorOccurred+0xe0>
 8005f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0aa      	beq.n	8005ed6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	f043 0304 	orr.w	r3, r3, #4
 8005f96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fe2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f043 0302 	orr.w	r3, r3, #2
 8005ffa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fe63 	bl	8005ce0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <I2C_IsErrorOccurred+0x1bc>)
 8006026:	400b      	ands	r3, r1
 8006028:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800604e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006052:	4618      	mov	r0, r3
 8006054:	3728      	adds	r7, #40	; 0x28
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	fe00e800 	.word	0xfe00e800

08006060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	4613      	mov	r3, r2
 8006070:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006072:	897b      	ldrh	r3, [r7, #10]
 8006074:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006078:	7a7b      	ldrb	r3, [r7, #9]
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006080:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	4313      	orrs	r3, r2
 800608a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800608e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	0d5b      	lsrs	r3, r3, #21
 800609a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <I2C_TransferConfig+0x60>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	43db      	mvns	r3, r3
 80060a4:	ea02 0103 	and.w	r1, r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	03ff63ff 	.word	0x03ff63ff

080060c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d138      	bne.n	800614c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e032      	b.n	800614e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2224      	movs	r2, #36	; 0x24
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6819      	ldr	r1, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b20      	cmp	r3, #32
 800616e:	d139      	bne.n	80061e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800617a:	2302      	movs	r3, #2
 800617c:	e033      	b.n	80061e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f4:	b08f      	sub	sp, #60	; 0x3c
 80061f6:	af0a      	add	r7, sp, #40	; 0x28
 80061f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e116      	b.n	8006432 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fc fd5c 	bl	8002cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f002 f9c8 	bl	80085d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	603b      	str	r3, [r7, #0]
 800624e:	687e      	ldr	r6, [r7, #4]
 8006250:	466d      	mov	r5, sp
 8006252:	f106 0410 	add.w	r4, r6, #16
 8006256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800625c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006262:	e885 0003 	stmia.w	r5, {r0, r1}
 8006266:	1d33      	adds	r3, r6, #4
 8006268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f002 f95c 	bl	8008528 <USB_CoreInit>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e0d7      	b.n	8006432 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f002 f9b6 	bl	80085fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
 8006292:	e04a      	b.n	800632a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	333d      	adds	r3, #61	; 0x3d
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	333c      	adds	r3, #60	; 0x3c
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	b298      	uxth	r0, r3
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	3344      	adds	r3, #68	; 0x44
 80062d0:	4602      	mov	r2, r0
 80062d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062d4:	7bfa      	ldrb	r2, [r7, #15]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	3340      	adds	r3, #64	; 0x40
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062e8:	7bfa      	ldrb	r2, [r7, #15]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	3348      	adds	r3, #72	; 0x48
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	334c      	adds	r3, #76	; 0x4c
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006310:	7bfa      	ldrb	r2, [r7, #15]
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	3354      	adds	r3, #84	; 0x54
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	3301      	adds	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d3af      	bcc.n	8006294 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]
 8006338:	e044      	b.n	80063c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006362:	7bfa      	ldrb	r2, [r7, #15]
 8006364:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	3301      	adds	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3b5      	bcc.n	800633a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	687e      	ldr	r6, [r7, #4]
 80063d6:	466d      	mov	r5, sp
 80063d8:	f106 0410 	add.w	r4, r6, #16
 80063dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80063ec:	1d33      	adds	r3, r6, #4
 80063ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063f0:	6838      	ldr	r0, [r7, #0]
 80063f2:	f002 f94f 	bl	8008694 <USB_DevInit>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e014      	b.n	8006432 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b01      	cmp	r3, #1
 800641e:	d102      	bne.n	8006426 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f80b 	bl	800643c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f002 fb0d 	bl	8008a4a <USB_DevDisconnect>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800643c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_PCDEx_ActivateLPM+0x44>)
 800646c:	4313      	orrs	r3, r2
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	10000003 	.word	0x10000003

08006484 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	6013      	str	r3, [r2, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40007000 	.word	0x40007000

080064a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ae:	4b23      	ldr	r3, [pc, #140]	; (800653c <HAL_PWREx_EnableOverDrive+0x98>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a22      	ldr	r2, [pc, #136]	; (800653c <HAL_PWREx_EnableOverDrive+0x98>)
 80064b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HAL_PWREx_EnableOverDrive+0x98>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064c6:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d2:	f7fc fda3 	bl	800301c <HAL_GetTick>
 80064d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064d8:	e009      	b.n	80064ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064da:	f7fc fd9f 	bl	800301c <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e8:	d901      	bls.n	80064ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e022      	b.n	8006534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064ee:	4b14      	ldr	r3, [pc, #80]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d1ee      	bne.n	80064da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064fc:	4b10      	ldr	r3, [pc, #64]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0f      	ldr	r2, [pc, #60]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006508:	f7fc fd88 	bl	800301c <HAL_GetTick>
 800650c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800650e:	e009      	b.n	8006524 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006510:	f7fc fd84 	bl	800301c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651e:	d901      	bls.n	8006524 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e007      	b.n	8006534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006530:	d1ee      	bne.n	8006510 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40023800 	.word	0x40023800
 8006540:	40007000 	.word	0x40007000

08006544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800654c:	2300      	movs	r3, #0
 800654e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e29b      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8087 	beq.w	8006676 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006568:	4b96      	ldr	r3, [pc, #600]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b04      	cmp	r3, #4
 8006572:	d00c      	beq.n	800658e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006574:	4b93      	ldr	r3, [pc, #588]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b08      	cmp	r3, #8
 800657e:	d112      	bne.n	80065a6 <HAL_RCC_OscConfig+0x62>
 8006580:	4b90      	ldr	r3, [pc, #576]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658c:	d10b      	bne.n	80065a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658e:	4b8d      	ldr	r3, [pc, #564]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d06c      	beq.n	8006674 <HAL_RCC_OscConfig+0x130>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d168      	bne.n	8006674 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e275      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ae:	d106      	bne.n	80065be <HAL_RCC_OscConfig+0x7a>
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a83      	ldr	r2, [pc, #524]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e02e      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x9c>
 80065c6:	4b7f      	ldr	r3, [pc, #508]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a7e      	ldr	r2, [pc, #504]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b7c      	ldr	r3, [pc, #496]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7b      	ldr	r2, [pc, #492]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0xc0>
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b73      	ldr	r3, [pc, #460]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a72      	ldr	r2, [pc, #456]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xd8>
 8006604:	4b6f      	ldr	r3, [pc, #444]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6e      	ldr	r2, [pc, #440]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6b      	ldr	r2, [pc, #428]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc fcfa 	bl	800301c <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc fcf6 	bl	800301c <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	; 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e229      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b61      	ldr	r3, [pc, #388]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xe8>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fc fce6 	bl	800301c <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fc fce2 	bl	800301c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	; 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e215      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	4b57      	ldr	r3, [pc, #348]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x110>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d069      	beq.n	8006756 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006682:	4b50      	ldr	r3, [pc, #320]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668e:	4b4d      	ldr	r3, [pc, #308]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b08      	cmp	r3, #8
 8006698:	d11c      	bne.n	80066d4 <HAL_RCC_OscConfig+0x190>
 800669a:	4b4a      	ldr	r3, [pc, #296]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a6:	4b47      	ldr	r3, [pc, #284]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_RCC_OscConfig+0x17a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1e9      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	493d      	ldr	r1, [pc, #244]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	e040      	b.n	8006756 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d023      	beq.n	8006724 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066dc:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a38      	ldr	r2, [pc, #224]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fc fc98 	bl	800301c <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f0:	f7fc fc94 	bl	800301c <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1c7      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006702:	4b30      	ldr	r3, [pc, #192]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4929      	ldr	r1, [pc, #164]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]
 8006722:	e018      	b.n	8006756 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc fc74 	bl	800301c <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006738:	f7fc fc70 	bl	800301c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1a3      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d038      	beq.n	80067d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d019      	beq.n	800679e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676a:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 800676c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676e:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006776:	f7fc fc51 	bl	800301c <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677e:	f7fc fc4d 	bl	800301c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e180      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x23a>
 800679c:	e01a      	b.n	80067d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <HAL_RCC_OscConfig+0x280>)
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fc fc37 	bl	800301c <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	e00a      	b.n	80067c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fc fc33 	bl	800301c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d903      	bls.n	80067c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e166      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
 80067c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c8:	4b92      	ldr	r3, [pc, #584]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80067ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ee      	bne.n	80067b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80a4 	beq.w	800692a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e2:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ee:	4b89      	ldr	r3, [pc, #548]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	4a88      	ldr	r2, [pc, #544]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6413      	str	r3, [r2, #64]	; 0x40
 80067fa:	4b86      	ldr	r3, [pc, #536]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800680a:	4b83      	ldr	r3, [pc, #524]	; (8006a18 <HAL_RCC_OscConfig+0x4d4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d118      	bne.n	8006848 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006816:	4b80      	ldr	r3, [pc, #512]	; (8006a18 <HAL_RCC_OscConfig+0x4d4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7f      	ldr	r2, [pc, #508]	; (8006a18 <HAL_RCC_OscConfig+0x4d4>)
 800681c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006822:	f7fc fbfb 	bl	800301c <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800682a:	f7fc fbf7 	bl	800301c <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b64      	cmp	r3, #100	; 0x64
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e12a      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800683c:	4b76      	ldr	r3, [pc, #472]	; (8006a18 <HAL_RCC_OscConfig+0x4d4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d106      	bne.n	800685e <HAL_RCC_OscConfig+0x31a>
 8006850:	4b70      	ldr	r3, [pc, #448]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a6f      	ldr	r2, [pc, #444]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	e02d      	b.n	80068ba <HAL_RCC_OscConfig+0x376>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x33c>
 8006866:	4b6b      	ldr	r3, [pc, #428]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a6a      	ldr	r2, [pc, #424]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
 8006872:	4b68      	ldr	r3, [pc, #416]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a67      	ldr	r2, [pc, #412]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006878:	f023 0304 	bic.w	r3, r3, #4
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
 800687e:	e01c      	b.n	80068ba <HAL_RCC_OscConfig+0x376>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b05      	cmp	r3, #5
 8006886:	d10c      	bne.n	80068a2 <HAL_RCC_OscConfig+0x35e>
 8006888:	4b62      	ldr	r3, [pc, #392]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4a61      	ldr	r2, [pc, #388]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	6713      	str	r3, [r2, #112]	; 0x70
 8006894:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	4a5e      	ldr	r2, [pc, #376]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	6713      	str	r3, [r2, #112]	; 0x70
 80068a0:	e00b      	b.n	80068ba <HAL_RCC_OscConfig+0x376>
 80068a2:	4b5c      	ldr	r3, [pc, #368]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80068a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a6:	4a5b      	ldr	r2, [pc, #364]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	6713      	str	r3, [r2, #112]	; 0x70
 80068ae:	4b59      	ldr	r3, [pc, #356]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a58      	ldr	r2, [pc, #352]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80068b4:	f023 0304 	bic.w	r3, r3, #4
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c2:	f7fc fbab 	bl	800301c <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c8:	e00a      	b.n	80068e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ca:	f7fc fba7 	bl	800301c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d8:	4293      	cmp	r3, r2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0d8      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e0:	4b4c      	ldr	r3, [pc, #304]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0ee      	beq.n	80068ca <HAL_RCC_OscConfig+0x386>
 80068ec:	e014      	b.n	8006918 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ee:	f7fc fb95 	bl	800301c <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fc fb91 	bl	800301c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	4293      	cmp	r3, r2
 8006906:	d901      	bls.n	800690c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e0c2      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690c:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ee      	bne.n	80068f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d105      	bne.n	800692a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800691e:	4b3d      	ldr	r3, [pc, #244]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4a3c      	ldr	r2, [pc, #240]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80ae 	beq.w	8006a90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006934:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 030c 	and.w	r3, r3, #12
 800693c:	2b08      	cmp	r3, #8
 800693e:	d06d      	beq.n	8006a1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d14b      	bne.n	80069e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a31      	ldr	r2, [pc, #196]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 800694e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fc fb62 	bl	800301c <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695c:	f7fc fb5e 	bl	800301c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e091      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f0      	bne.n	800695c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69da      	ldr	r2, [r3, #28]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	3b01      	subs	r3, #1
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	071b      	lsls	r3, r3, #28
 80069a6:	491b      	ldr	r1, [pc, #108]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fc fb30 	bl	800301c <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fc fb2c 	bl	800301c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e05f      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x47c>
 80069de:	e057      	b.n	8006a90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fc fb16 	bl	800301c <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fc fb12 	bl	800301c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e045      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a06:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <HAL_RCC_OscConfig+0x4d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x4b0>
 8006a12:	e03d      	b.n	8006a90 <HAL_RCC_OscConfig+0x54c>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a1c:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <HAL_RCC_OscConfig+0x558>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d030      	beq.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d129      	bne.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d122      	bne.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d119      	bne.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d10f      	bne.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800

08006aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0d0      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b6a      	ldr	r3, [pc, #424]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d910      	bls.n	8006ae8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b67      	ldr	r3, [pc, #412]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 020f 	bic.w	r2, r3, #15
 8006ace:	4965      	ldr	r1, [pc, #404]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad6:	4b63      	ldr	r3, [pc, #396]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0b8      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b00:	4b59      	ldr	r3, [pc, #356]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a58      	ldr	r2, [pc, #352]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b18:	4b53      	ldr	r3, [pc, #332]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b24:	4b50      	ldr	r3, [pc, #320]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	494d      	ldr	r1, [pc, #308]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d040      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d107      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4a:	4b47      	ldr	r3, [pc, #284]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d115      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e07f      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e073      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b72:	4b3d      	ldr	r3, [pc, #244]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e06b      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4936      	ldr	r1, [pc, #216]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b94:	f7fc fa42 	bl	800301c <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fc fa3e 	bl	800301c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e053      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d210      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 020f 	bic.w	r2, r3, #15
 8006bda:	4922      	ldr	r1, [pc, #136]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e032      	b.n	8006c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c00:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4916      	ldr	r1, [pc, #88]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	490e      	ldr	r1, [pc, #56]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c32:	f000 f821 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	490a      	ldr	r1, [pc, #40]	; (8006c6c <HAL_RCC_ClockConfig+0x1cc>)
 8006c44:	5ccb      	ldrb	r3, [r1, r3]
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <HAL_RCC_ClockConfig+0x1d0>)
 8006c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_RCC_ClockConfig+0x1d4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fc f99e 	bl	8002f94 <HAL_InitTick>

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023c00 	.word	0x40023c00
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	080090e0 	.word	0x080090e0
 8006c70:	20000048 	.word	0x20000048
 8006c74:	2000004c 	.word	0x2000004c

08006c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c7c:	b094      	sub	sp, #80	; 0x50
 8006c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	647b      	str	r3, [r7, #68]	; 0x44
 8006c84:	2300      	movs	r3, #0
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	2300      	movs	r3, #0
 8006c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c90:	4b79      	ldr	r3, [pc, #484]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 030c 	and.w	r3, r3, #12
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d00d      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	f200 80e1 	bhi.w	8006e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x34>
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d003      	beq.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006caa:	e0db      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cac:	4b73      	ldr	r3, [pc, #460]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8006cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cb0:	e0db      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cb2:	4b73      	ldr	r3, [pc, #460]	; (8006e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cb6:	e0d8      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb8:	4b6f      	ldr	r3, [pc, #444]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cc0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cc2:	4b6d      	ldr	r3, [pc, #436]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d063      	beq.n	8006d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cce:	4b6a      	ldr	r3, [pc, #424]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	099b      	lsrs	r3, r3, #6
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	f04f 0000 	mov.w	r0, #0
 8006cf2:	f04f 0100 	mov.w	r1, #0
 8006cf6:	0159      	lsls	r1, r3, #5
 8006cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cfc:	0150      	lsls	r0, r2, #5
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4621      	mov	r1, r4
 8006d04:	1a51      	subs	r1, r2, r1
 8006d06:	6139      	str	r1, [r7, #16]
 8006d08:	4629      	mov	r1, r5
 8006d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	018b      	lsls	r3, r1, #6
 8006d20:	4651      	mov	r1, sl
 8006d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d26:	4651      	mov	r1, sl
 8006d28:	018a      	lsls	r2, r1, #6
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d30:	4659      	mov	r1, fp
 8006d32:	eb63 0901 	sbc.w	r9, r3, r1
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d4a:	4690      	mov	r8, r2
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	4623      	mov	r3, r4
 8006d50:	eb18 0303 	adds.w	r3, r8, r3
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	462b      	mov	r3, r5
 8006d58:	eb49 0303 	adc.w	r3, r9, r3
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	024b      	lsls	r3, r1, #9
 8006d6e:	4621      	mov	r1, r4
 8006d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d74:	4621      	mov	r1, r4
 8006d76:	024a      	lsls	r2, r1, #9
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7e:	2200      	movs	r2, #0
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d88:	f7f9 fa56 	bl	8000238 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4613      	mov	r3, r2
 8006d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d94:	e058      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d96:	4b38      	ldr	r3, [pc, #224]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	099b      	lsrs	r3, r3, #6
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	4611      	mov	r1, r2
 8006da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	f04f 0000 	mov.w	r0, #0
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	0159      	lsls	r1, r3, #5
 8006dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dc2:	0150      	lsls	r0, r2, #5
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4641      	mov	r1, r8
 8006dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dce:	4649      	mov	r1, r9
 8006dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006de8:	ebb2 040a 	subs.w	r4, r2, sl
 8006dec:	eb63 050b 	sbc.w	r5, r3, fp
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	00eb      	lsls	r3, r5, #3
 8006dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dfe:	00e2      	lsls	r2, r4, #3
 8006e00:	4614      	mov	r4, r2
 8006e02:	461d      	mov	r5, r3
 8006e04:	4643      	mov	r3, r8
 8006e06:	18e3      	adds	r3, r4, r3
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	eb45 0303 	adc.w	r3, r5, r3
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e1e:	4629      	mov	r1, r5
 8006e20:	028b      	lsls	r3, r1, #10
 8006e22:	4621      	mov	r1, r4
 8006e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e28:	4621      	mov	r1, r4
 8006e2a:	028a      	lsls	r2, r1, #10
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e32:	2200      	movs	r2, #0
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	61fa      	str	r2, [r7, #28]
 8006e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e3c:	f7f9 f9fc 	bl	8000238 <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4613      	mov	r3, r2
 8006e46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	3301      	adds	r3, #1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e62:	e002      	b.n	8006e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3750      	adds	r7, #80	; 0x50
 8006e70:	46bd      	mov	sp, r7
 8006e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e76:	bf00      	nop
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	00f42400 	.word	0x00f42400
 8006e80:	007a1200 	.word	0x007a1200

08006e84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e88:	4b03      	ldr	r3, [pc, #12]	; (8006e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000048 	.word	0x20000048

08006e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ea0:	f7ff fff0 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	0a9b      	lsrs	r3, r3, #10
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	4903      	ldr	r1, [pc, #12]	; (8006ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	080090f0 	.word	0x080090f0

08006ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ec8:	f7ff ffdc 	bl	8006e84 <HAL_RCC_GetHCLKFreq>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	0b5b      	lsrs	r3, r3, #13
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4903      	ldr	r1, [pc, #12]	; (8006ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eda:	5ccb      	ldrb	r3, [r1, r3]
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	080090f0 	.word	0x080090f0

08006eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d012      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f14:	4b69      	ldr	r3, [pc, #420]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4a68      	ldr	r2, [pc, #416]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f1e:	6093      	str	r3, [r2, #8]
 8006f20:	4b66      	ldr	r3, [pc, #408]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	4964      	ldr	r1, [pc, #400]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f36:	2301      	movs	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f46:	4b5d      	ldr	r3, [pc, #372]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	4959      	ldr	r1, [pc, #356]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f64:	d101      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f82:	4b4e      	ldr	r3, [pc, #312]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	494a      	ldr	r1, [pc, #296]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 808b 	beq.w	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	4a39      	ldr	r2, [pc, #228]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6413      	str	r3, [r2, #64]	; 0x40
 8006fdc:	4b37      	ldr	r3, [pc, #220]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a34      	ldr	r2, [pc, #208]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff4:	f7fc f812 	bl	800301c <HAL_GetTick>
 8006ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffc:	f7fc f80e 	bl	800301c <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b64      	cmp	r3, #100	; 0x64
 8007008:	d901      	bls.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e38f      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800700e:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800701a:	4b28      	ldr	r3, [pc, #160]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d035      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d02e      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007038:	4b20      	ldr	r3, [pc, #128]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007060:	4b16      	ldr	r3, [pc, #88]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d114      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fb ffd6 	bl	800301c <HAL_GetTick>
 8007070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	e00a      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007074:	f7fb ffd2 	bl	800301c <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007082:	4293      	cmp	r3, r2
 8007084:	d901      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e351      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0ee      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a2:	d111      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070b0:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070b2:	400b      	ands	r3, r1
 80070b4:	4901      	ldr	r1, [pc, #4]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
 80070ba:	e00b      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40007000 	.word	0x40007000
 80070c4:	0ffffcff 	.word	0x0ffffcff
 80070c8:	4bac      	ldr	r3, [pc, #688]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4aab      	ldr	r2, [pc, #684]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070d2:	6093      	str	r3, [r2, #8]
 80070d4:	4ba9      	ldr	r3, [pc, #676]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e0:	49a6      	ldr	r1, [pc, #664]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070f2:	4ba2      	ldr	r3, [pc, #648]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f8:	4aa0      	ldr	r2, [pc, #640]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007102:	4b9e      	ldr	r3, [pc, #632]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	499b      	ldr	r1, [pc, #620]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007120:	4b96      	ldr	r3, [pc, #600]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800712e:	4993      	ldr	r1, [pc, #588]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007142:	4b8e      	ldr	r3, [pc, #568]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007150:	498a      	ldr	r1, [pc, #552]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007164:	4b85      	ldr	r3, [pc, #532]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007172:	4982      	ldr	r1, [pc, #520]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007186:	4b7d      	ldr	r3, [pc, #500]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007194:	4979      	ldr	r1, [pc, #484]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071a8:	4b74      	ldr	r3, [pc, #464]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	f023 0203 	bic.w	r2, r3, #3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	4971      	ldr	r1, [pc, #452]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071ca:	4b6c      	ldr	r3, [pc, #432]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f023 020c 	bic.w	r2, r3, #12
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d8:	4968      	ldr	r1, [pc, #416]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071ec:	4b63      	ldr	r3, [pc, #396]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	4960      	ldr	r1, [pc, #384]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800720e:	4b5b      	ldr	r3, [pc, #364]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	4957      	ldr	r1, [pc, #348]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007230:	4b52      	ldr	r3, [pc, #328]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	494f      	ldr	r1, [pc, #316]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007252:	4b4a      	ldr	r3, [pc, #296]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007260:	4946      	ldr	r1, [pc, #280]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007274:	4b41      	ldr	r3, [pc, #260]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	493e      	ldr	r1, [pc, #248]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	4935      	ldr	r1, [pc, #212]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072b8:	4b30      	ldr	r3, [pc, #192]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c6:	492d      	ldr	r1, [pc, #180]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d011      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072da:	4b28      	ldr	r3, [pc, #160]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e8:	4924      	ldr	r1, [pc, #144]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072f8:	d101      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007328:	4914      	ldr	r1, [pc, #80]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734c:	490b      	ldr	r1, [pc, #44]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007370:	4902      	ldr	r1, [pc, #8]	; (800737c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007378:	e002      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800738c:	4b8a      	ldr	r3, [pc, #552]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800738e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739c:	4986      	ldr	r1, [pc, #536]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80073b0:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c0:	497d      	ldr	r1, [pc, #500]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d006      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80d6 	beq.w	8007588 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073dc:	4b76      	ldr	r3, [pc, #472]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a75      	ldr	r2, [pc, #468]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e8:	f7fb fe18 	bl	800301c <HAL_GetTick>
 80073ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073f0:	f7fb fe14 	bl	800301c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	; 0x64
 80073fc:	d901      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e195      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007402:	4b6d      	ldr	r3, [pc, #436]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f0      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d021      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11d      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007422:	4b65      	ldr	r3, [pc, #404]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007428:	0c1b      	lsrs	r3, r3, #16
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007430:	4b61      	ldr	r3, [pc, #388]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	019a      	lsls	r2, r3, #6
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	061b      	lsls	r3, r3, #24
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	071b      	lsls	r3, r3, #28
 8007456:	4958      	ldr	r1, [pc, #352]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02e      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007488:	d129      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800748a:	4b4b      	ldr	r3, [pc, #300]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007490:	0c1b      	lsrs	r3, r3, #16
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800749a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	019a      	lsls	r2, r3, #6
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	493e      	ldr	r1, [pc, #248]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074c6:	4b3c      	ldr	r3, [pc, #240]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074cc:	f023 021f 	bic.w	r2, r3, #31
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	3b01      	subs	r3, #1
 80074d6:	4938      	ldr	r1, [pc, #224]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01d      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f0:	0e1b      	lsrs	r3, r3, #24
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074f8:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fe:	0f1b      	lsrs	r3, r3, #28
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	019a      	lsls	r2, r3, #6
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	431a      	orrs	r2, r3
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	431a      	orrs	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	071b      	lsls	r3, r3, #28
 800751e:	4926      	ldr	r1, [pc, #152]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	019a      	lsls	r2, r3, #6
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	071b      	lsls	r3, r3, #28
 800754e:	491a      	ldr	r1, [pc, #104]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800755c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007562:	f7fb fd5b 	bl	800301c <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007568:	e008      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800756a:	f7fb fd57 	bl	800301c <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b64      	cmp	r3, #100	; 0x64
 8007576:	d901      	bls.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e0d8      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f0      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b01      	cmp	r3, #1
 800758c:	f040 80ce 	bne.w	800772c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800759a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759c:	f7fb fd3e 	bl	800301c <HAL_GetTick>
 80075a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075a2:	e00b      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075a4:	f7fb fd3a 	bl	800301c <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d904      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e0bb      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80075b6:	bf00      	nop
 80075b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075bc:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c8:	d0ec      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d02e      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12a      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f2:	4b51      	ldr	r3, [pc, #324]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007600:	4b4d      	ldr	r3, [pc, #308]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007606:	0f1b      	lsrs	r3, r3, #28
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	019a      	lsls	r2, r3, #6
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	061b      	lsls	r3, r3, #24
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	4944      	ldr	r1, [pc, #272]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800762e:	4b42      	ldr	r3, [pc, #264]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007634:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	3b01      	subs	r3, #1
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	493d      	ldr	r1, [pc, #244]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d022      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800765c:	d11d      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800765e:	4b36      	ldr	r3, [pc, #216]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800766c:	4b32      	ldr	r3, [pc, #200]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	0f1b      	lsrs	r3, r3, #28
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	019a      	lsls	r2, r3, #6
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	431a      	orrs	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	4929      	ldr	r1, [pc, #164]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d028      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	0e1b      	lsrs	r3, r3, #24
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	0c1b      	lsrs	r3, r3, #16
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	019a      	lsls	r2, r3, #6
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	431a      	orrs	r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	4917      	ldr	r1, [pc, #92]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	4911      	ldr	r1, [pc, #68]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0e      	ldr	r2, [pc, #56]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80076fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fb fc8a 	bl	800301c <HAL_GetTick>
 8007708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800770a:	e008      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800770c:	f7fb fc86 	bl	800301c <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b64      	cmp	r3, #100	; 0x64
 8007718:	d901      	bls.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e007      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d1ef      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40023800 	.word	0x40023800

0800773c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e09d      	b.n	800788a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d108      	bne.n	8007768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775e:	d009      	beq.n	8007774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	61da      	str	r2, [r3, #28]
 8007766:	e005      	b.n	8007774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fb f9e2 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077b4:	d902      	bls.n	80077bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e002      	b.n	80077c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80077ca:	d007      	beq.n	80077dc <HAL_SPI_Init+0xa0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077d4:	d002      	beq.n	80077dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	ea42 0103 	orr.w	r1, r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	f003 0204 	and.w	r2, r3, #4
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007858:	ea42 0103 	orr.w	r1, r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e038      	b.n	800791a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7fb fae3 	bl	8002e88 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3308      	adds	r3, #8
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f000 fd13 	bl	80082f8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	461a      	mov	r2, r3
 80078dc:	68b9      	ldr	r1, [r7, #8]
 80078de:	f000 fd9b 	bl	8008418 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6858      	ldr	r0, [r3, #4]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	f000 fde2 	bl	80084b8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	6892      	ldr	r2, [r2, #8]
 80078fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	6892      	ldr	r2, [r2, #8]
 8007908:	f041 0101 	orr.w	r1, r1, #1
 800790c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e040      	b.n	80079b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d106      	bne.n	800794a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fb f969 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2224      	movs	r2, #36	; 0x24
 800794e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0201 	bic.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8af 	bl	8007ac4 <UART_SetConfig>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e022      	b.n	80079b6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fb07 	bl	8007f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800798c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800799c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fb8e 	bl	80080d0 <UART_CheckIdleState>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b08a      	sub	sp, #40	; 0x28
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	603b      	str	r3, [r7, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d171      	bne.n	8007aba <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_UART_Transmit+0x24>
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e06a      	b.n	8007abc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079f4:	f7fb fb12 	bl	800301c <HAL_GetTick>
 80079f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	d108      	bne.n	8007a26 <HAL_UART_Transmit+0x68>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	e003      	b.n	8007a2e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a2e:	e02c      	b.n	8007a8a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2200      	movs	r2, #0
 8007a38:	2180      	movs	r1, #128	; 0x80
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fb95 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e038      	b.n	8007abc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	3302      	adds	r3, #2
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	e007      	b.n	8007a78 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3301      	adds	r3, #1
 8007a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1cc      	bne.n	8007a30 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2140      	movs	r1, #64	; 0x40
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fb62 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e005      	b.n	8007abc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e000      	b.n	8007abc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4ba6      	ldr	r3, [pc, #664]	; (8007d88 <UART_SetConfig+0x2c4>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a94      	ldr	r2, [pc, #592]	; (8007d8c <UART_SetConfig+0x2c8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d120      	bne.n	8007b82 <UART_SetConfig+0xbe>
 8007b40:	4b93      	ldr	r3, [pc, #588]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d816      	bhi.n	8007b7c <UART_SetConfig+0xb8>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x90>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b71 	.word	0x08007b71
 8007b5c:	08007b6b 	.word	0x08007b6b
 8007b60:	08007b77 	.word	0x08007b77
 8007b64:	2301      	movs	r3, #1
 8007b66:	77fb      	strb	r3, [r7, #31]
 8007b68:	e150      	b.n	8007e0c <UART_SetConfig+0x348>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	77fb      	strb	r3, [r7, #31]
 8007b6e:	e14d      	b.n	8007e0c <UART_SetConfig+0x348>
 8007b70:	2304      	movs	r3, #4
 8007b72:	77fb      	strb	r3, [r7, #31]
 8007b74:	e14a      	b.n	8007e0c <UART_SetConfig+0x348>
 8007b76:	2308      	movs	r3, #8
 8007b78:	77fb      	strb	r3, [r7, #31]
 8007b7a:	e147      	b.n	8007e0c <UART_SetConfig+0x348>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e144      	b.n	8007e0c <UART_SetConfig+0x348>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a83      	ldr	r2, [pc, #524]	; (8007d94 <UART_SetConfig+0x2d0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d132      	bne.n	8007bf2 <UART_SetConfig+0x12e>
 8007b8c:	4b80      	ldr	r3, [pc, #512]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f003 030c 	and.w	r3, r3, #12
 8007b96:	2b0c      	cmp	r3, #12
 8007b98:	d828      	bhi.n	8007bec <UART_SetConfig+0x128>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0xdc>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bd5 	.word	0x08007bd5
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bed 	.word	0x08007bed
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007be1 	.word	0x08007be1
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007bed 	.word	0x08007bed
 8007bbc:	08007bed 	.word	0x08007bed
 8007bc0:	08007bdb 	.word	0x08007bdb
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007bed 	.word	0x08007bed
 8007bcc:	08007bed 	.word	0x08007bed
 8007bd0:	08007be7 	.word	0x08007be7
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	77fb      	strb	r3, [r7, #31]
 8007bd8:	e118      	b.n	8007e0c <UART_SetConfig+0x348>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	77fb      	strb	r3, [r7, #31]
 8007bde:	e115      	b.n	8007e0c <UART_SetConfig+0x348>
 8007be0:	2304      	movs	r3, #4
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e112      	b.n	8007e0c <UART_SetConfig+0x348>
 8007be6:	2308      	movs	r3, #8
 8007be8:	77fb      	strb	r3, [r7, #31]
 8007bea:	e10f      	b.n	8007e0c <UART_SetConfig+0x348>
 8007bec:	2310      	movs	r3, #16
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e10c      	b.n	8007e0c <UART_SetConfig+0x348>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a68      	ldr	r2, [pc, #416]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d120      	bne.n	8007c3e <UART_SetConfig+0x17a>
 8007bfc:	4b64      	ldr	r3, [pc, #400]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c06:	2b30      	cmp	r3, #48	; 0x30
 8007c08:	d013      	beq.n	8007c32 <UART_SetConfig+0x16e>
 8007c0a:	2b30      	cmp	r3, #48	; 0x30
 8007c0c:	d814      	bhi.n	8007c38 <UART_SetConfig+0x174>
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d009      	beq.n	8007c26 <UART_SetConfig+0x162>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d810      	bhi.n	8007c38 <UART_SetConfig+0x174>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <UART_SetConfig+0x15c>
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d006      	beq.n	8007c2c <UART_SetConfig+0x168>
 8007c1e:	e00b      	b.n	8007c38 <UART_SetConfig+0x174>
 8007c20:	2300      	movs	r3, #0
 8007c22:	77fb      	strb	r3, [r7, #31]
 8007c24:	e0f2      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c26:	2302      	movs	r3, #2
 8007c28:	77fb      	strb	r3, [r7, #31]
 8007c2a:	e0ef      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	77fb      	strb	r3, [r7, #31]
 8007c30:	e0ec      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c32:	2308      	movs	r3, #8
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e0e9      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e0e6      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a56      	ldr	r2, [pc, #344]	; (8007d9c <UART_SetConfig+0x2d8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d120      	bne.n	8007c8a <UART_SetConfig+0x1c6>
 8007c48:	4b51      	ldr	r3, [pc, #324]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c52:	2bc0      	cmp	r3, #192	; 0xc0
 8007c54:	d013      	beq.n	8007c7e <UART_SetConfig+0x1ba>
 8007c56:	2bc0      	cmp	r3, #192	; 0xc0
 8007c58:	d814      	bhi.n	8007c84 <UART_SetConfig+0x1c0>
 8007c5a:	2b80      	cmp	r3, #128	; 0x80
 8007c5c:	d009      	beq.n	8007c72 <UART_SetConfig+0x1ae>
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d810      	bhi.n	8007c84 <UART_SetConfig+0x1c0>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <UART_SetConfig+0x1a8>
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d006      	beq.n	8007c78 <UART_SetConfig+0x1b4>
 8007c6a:	e00b      	b.n	8007c84 <UART_SetConfig+0x1c0>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e0cc      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c72:	2302      	movs	r3, #2
 8007c74:	77fb      	strb	r3, [r7, #31]
 8007c76:	e0c9      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e0c6      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e0c3      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c84:	2310      	movs	r3, #16
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e0c0      	b.n	8007e0c <UART_SetConfig+0x348>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a44      	ldr	r2, [pc, #272]	; (8007da0 <UART_SetConfig+0x2dc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d125      	bne.n	8007ce0 <UART_SetConfig+0x21c>
 8007c94:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca2:	d017      	beq.n	8007cd4 <UART_SetConfig+0x210>
 8007ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca8:	d817      	bhi.n	8007cda <UART_SetConfig+0x216>
 8007caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cae:	d00b      	beq.n	8007cc8 <UART_SetConfig+0x204>
 8007cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb4:	d811      	bhi.n	8007cda <UART_SetConfig+0x216>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <UART_SetConfig+0x1fe>
 8007cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbe:	d006      	beq.n	8007cce <UART_SetConfig+0x20a>
 8007cc0:	e00b      	b.n	8007cda <UART_SetConfig+0x216>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	77fb      	strb	r3, [r7, #31]
 8007cc6:	e0a1      	b.n	8007e0c <UART_SetConfig+0x348>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	77fb      	strb	r3, [r7, #31]
 8007ccc:	e09e      	b.n	8007e0c <UART_SetConfig+0x348>
 8007cce:	2304      	movs	r3, #4
 8007cd0:	77fb      	strb	r3, [r7, #31]
 8007cd2:	e09b      	b.n	8007e0c <UART_SetConfig+0x348>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	77fb      	strb	r3, [r7, #31]
 8007cd8:	e098      	b.n	8007e0c <UART_SetConfig+0x348>
 8007cda:	2310      	movs	r3, #16
 8007cdc:	77fb      	strb	r3, [r7, #31]
 8007cde:	e095      	b.n	8007e0c <UART_SetConfig+0x348>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <UART_SetConfig+0x2e0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d125      	bne.n	8007d36 <UART_SetConfig+0x272>
 8007cea:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cf8:	d017      	beq.n	8007d2a <UART_SetConfig+0x266>
 8007cfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cfe:	d817      	bhi.n	8007d30 <UART_SetConfig+0x26c>
 8007d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d04:	d00b      	beq.n	8007d1e <UART_SetConfig+0x25a>
 8007d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0a:	d811      	bhi.n	8007d30 <UART_SetConfig+0x26c>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <UART_SetConfig+0x254>
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	d006      	beq.n	8007d24 <UART_SetConfig+0x260>
 8007d16:	e00b      	b.n	8007d30 <UART_SetConfig+0x26c>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e076      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	77fb      	strb	r3, [r7, #31]
 8007d22:	e073      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d24:	2304      	movs	r3, #4
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e070      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e06d      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d30:	2310      	movs	r3, #16
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e06a      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <UART_SetConfig+0x2e4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d138      	bne.n	8007db2 <UART_SetConfig+0x2ee>
 8007d40:	4b13      	ldr	r3, [pc, #76]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d4e:	d017      	beq.n	8007d80 <UART_SetConfig+0x2bc>
 8007d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d54:	d82a      	bhi.n	8007dac <UART_SetConfig+0x2e8>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	d00b      	beq.n	8007d74 <UART_SetConfig+0x2b0>
 8007d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d60:	d824      	bhi.n	8007dac <UART_SetConfig+0x2e8>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <UART_SetConfig+0x2aa>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d006      	beq.n	8007d7a <UART_SetConfig+0x2b6>
 8007d6c:	e01e      	b.n	8007dac <UART_SetConfig+0x2e8>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e04b      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d74:	2302      	movs	r3, #2
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e048      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e045      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d80:	2308      	movs	r3, #8
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e042      	b.n	8007e0c <UART_SetConfig+0x348>
 8007d86:	bf00      	nop
 8007d88:	efff69f3 	.word	0xefff69f3
 8007d8c:	40011000 	.word	0x40011000
 8007d90:	40023800 	.word	0x40023800
 8007d94:	40004400 	.word	0x40004400
 8007d98:	40004800 	.word	0x40004800
 8007d9c:	40004c00 	.word	0x40004c00
 8007da0:	40005000 	.word	0x40005000
 8007da4:	40011400 	.word	0x40011400
 8007da8:	40007800 	.word	0x40007800
 8007dac:	2310      	movs	r3, #16
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e02c      	b.n	8007e0c <UART_SetConfig+0x348>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a72      	ldr	r2, [pc, #456]	; (8007f80 <UART_SetConfig+0x4bc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d125      	bne.n	8007e08 <UART_SetConfig+0x344>
 8007dbc:	4b71      	ldr	r3, [pc, #452]	; (8007f84 <UART_SetConfig+0x4c0>)
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dca:	d017      	beq.n	8007dfc <UART_SetConfig+0x338>
 8007dcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dd0:	d817      	bhi.n	8007e02 <UART_SetConfig+0x33e>
 8007dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd6:	d00b      	beq.n	8007df0 <UART_SetConfig+0x32c>
 8007dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ddc:	d811      	bhi.n	8007e02 <UART_SetConfig+0x33e>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <UART_SetConfig+0x326>
 8007de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de6:	d006      	beq.n	8007df6 <UART_SetConfig+0x332>
 8007de8:	e00b      	b.n	8007e02 <UART_SetConfig+0x33e>
 8007dea:	2300      	movs	r3, #0
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e00d      	b.n	8007e0c <UART_SetConfig+0x348>
 8007df0:	2302      	movs	r3, #2
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e00a      	b.n	8007e0c <UART_SetConfig+0x348>
 8007df6:	2304      	movs	r3, #4
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e007      	b.n	8007e0c <UART_SetConfig+0x348>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e004      	b.n	8007e0c <UART_SetConfig+0x348>
 8007e02:	2310      	movs	r3, #16
 8007e04:	77fb      	strb	r3, [r7, #31]
 8007e06:	e001      	b.n	8007e0c <UART_SetConfig+0x348>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e14:	d15b      	bne.n	8007ece <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d828      	bhi.n	8007e6e <UART_SetConfig+0x3aa>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0x360>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e59 	.word	0x08007e59
 8007e30:	08007e6f 	.word	0x08007e6f
 8007e34:	08007e5f 	.word	0x08007e5f
 8007e38:	08007e6f 	.word	0x08007e6f
 8007e3c:	08007e6f 	.word	0x08007e6f
 8007e40:	08007e6f 	.word	0x08007e6f
 8007e44:	08007e67 	.word	0x08007e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7ff f828 	bl	8006e9c <HAL_RCC_GetPCLK1Freq>
 8007e4c:	61b8      	str	r0, [r7, #24]
        break;
 8007e4e:	e013      	b.n	8007e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e50:	f7ff f838 	bl	8006ec4 <HAL_RCC_GetPCLK2Freq>
 8007e54:	61b8      	str	r0, [r7, #24]
        break;
 8007e56:	e00f      	b.n	8007e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e58:	4b4b      	ldr	r3, [pc, #300]	; (8007f88 <UART_SetConfig+0x4c4>)
 8007e5a:	61bb      	str	r3, [r7, #24]
        break;
 8007e5c:	e00c      	b.n	8007e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e5e:	f7fe ff0b 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8007e62:	61b8      	str	r0, [r7, #24]
        break;
 8007e64:	e008      	b.n	8007e78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e6a:	61bb      	str	r3, [r7, #24]
        break;
 8007e6c:	e004      	b.n	8007e78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	77bb      	strb	r3, [r7, #30]
        break;
 8007e76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d074      	beq.n	8007f68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	005a      	lsls	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	441a      	add	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b0f      	cmp	r3, #15
 8007e98:	d916      	bls.n	8007ec8 <UART_SetConfig+0x404>
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea0:	d212      	bcs.n	8007ec8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f023 030f 	bic.w	r3, r3, #15
 8007eaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	085b      	lsrs	r3, r3, #1
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	89fa      	ldrh	r2, [r7, #14]
 8007ec4:	60da      	str	r2, [r3, #12]
 8007ec6:	e04f      	b.n	8007f68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	77bb      	strb	r3, [r7, #30]
 8007ecc:	e04c      	b.n	8007f68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ece:	7ffb      	ldrb	r3, [r7, #31]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d828      	bhi.n	8007f26 <UART_SetConfig+0x462>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <UART_SetConfig+0x418>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	08007f27 	.word	0x08007f27
 8007eec:	08007f17 	.word	0x08007f17
 8007ef0:	08007f27 	.word	0x08007f27
 8007ef4:	08007f27 	.word	0x08007f27
 8007ef8:	08007f27 	.word	0x08007f27
 8007efc:	08007f1f 	.word	0x08007f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f00:	f7fe ffcc 	bl	8006e9c <HAL_RCC_GetPCLK1Freq>
 8007f04:	61b8      	str	r0, [r7, #24]
        break;
 8007f06:	e013      	b.n	8007f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fe ffdc 	bl	8006ec4 <HAL_RCC_GetPCLK2Freq>
 8007f0c:	61b8      	str	r0, [r7, #24]
        break;
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <UART_SetConfig+0x4c4>)
 8007f12:	61bb      	str	r3, [r7, #24]
        break;
 8007f14:	e00c      	b.n	8007f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f16:	f7fe feaf 	bl	8006c78 <HAL_RCC_GetSysClockFreq>
 8007f1a:	61b8      	str	r0, [r7, #24]
        break;
 8007f1c:	e008      	b.n	8007f30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f22:	61bb      	str	r3, [r7, #24]
        break;
 8007f24:	e004      	b.n	8007f30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	77bb      	strb	r3, [r7, #30]
        break;
 8007f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d018      	beq.n	8007f68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	085a      	lsrs	r2, r3, #1
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	441a      	add	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b0f      	cmp	r3, #15
 8007f4e:	d909      	bls.n	8007f64 <UART_SetConfig+0x4a0>
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f56:	d205      	bcs.n	8007f64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e001      	b.n	8007f68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f74:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	40007c00 	.word	0x40007c00
 8007f84:	40023800 	.word	0x40023800
 8007f88:	00f42400 	.word	0x00f42400

08007f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	f003 0310 	and.w	r3, r3, #16
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01a      	beq.n	80080a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800808a:	d10a      	bne.n	80080a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	605a      	str	r2, [r3, #4]
  }
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080e0:	f7fa ff9c 	bl	800301c <HAL_GetTick>
 80080e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d10e      	bne.n	8008112 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f831 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e027      	b.n	8008162 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d10e      	bne.n	800813e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f81b 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e011      	b.n	8008162 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b09c      	sub	sp, #112	; 0x70
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800817a:	e0a7      	b.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008182:	f000 80a3 	beq.w	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008186:	f7fa ff49 	bl	800301c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008192:	429a      	cmp	r2, r3
 8008194:	d302      	bcc.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
 8008196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008198:	2b00      	cmp	r3, #0
 800819a:	d13f      	bne.n	800821c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081b0:	667b      	str	r3, [r7, #100]	; 0x64
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	663b      	str	r3, [r7, #96]	; 0x60
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e068      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d050      	beq.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008238:	d148      	bne.n	80082cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008242:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008262:	637b      	str	r3, [r7, #52]	; 0x34
 8008264:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e6      	bne.n	8008244 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	613b      	str	r3, [r7, #16]
   return(result);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	66bb      	str	r3, [r7, #104]	; 0x68
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008296:	623a      	str	r2, [r7, #32]
 8008298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6a3a      	ldr	r2, [r7, #32]
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2220      	movs	r2, #32
 80082ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e010      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4013      	ands	r3, r2
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	429a      	cmp	r2, r3
 80082da:	bf0c      	ite	eq
 80082dc:	2301      	moveq	r3, #1
 80082de:	2300      	movne	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	f43f af48 	beq.w	800817c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3770      	adds	r7, #112	; 0x70
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	f023 0101 	bic.w	r1, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b08      	cmp	r3, #8
 8008320:	d102      	bne.n	8008328 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e001      	b.n	800832c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008338:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800833e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008344:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800834a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008350:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008356:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800835c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008362:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008368:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <FMC_NORSRAM_Init+0x11c>)
 8008392:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083a2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80083aa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	43db      	mvns	r3, r3
 80083ba:	ea02 0103 	and.w	r1, r2, r3
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4319      	orrs	r1, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d4:	d10c      	bne.n	80083f0 <FMC_NORSRAM_Init+0xf8>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d008      	beq.n	80083f0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d006      	beq.n	8008406 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	0008fb7f 	.word	0x0008fb7f

08008418 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	431a      	orrs	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	431a      	orrs	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	431a      	orrs	r2, r3
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	3b01      	subs	r3, #1
 8008454:	051b      	lsls	r3, r3, #20
 8008456:	431a      	orrs	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	3b02      	subs	r3, #2
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	431a      	orrs	r2, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	4313      	orrs	r3, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	3201      	adds	r2, #1
 800846c:	4319      	orrs	r1, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008480:	d113      	bne.n	80084aa <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800848a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	3b01      	subs	r3, #1
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084cc:	d11d      	bne.n	800850a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80084d8:	4013      	ands	r3, r2
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	6811      	ldr	r1, [r2, #0]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	6852      	ldr	r2, [r2, #4]
 80084e2:	0112      	lsls	r2, r2, #4
 80084e4:	4311      	orrs	r1, r2
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	6892      	ldr	r2, [r2, #8]
 80084ea:	0212      	lsls	r2, r2, #8
 80084ec:	4311      	orrs	r1, r2
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	6992      	ldr	r2, [r2, #24]
 80084f2:	4311      	orrs	r1, r2
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	68d2      	ldr	r2, [r2, #12]
 80084f8:	0412      	lsls	r2, r2, #16
 80084fa:	430a      	orrs	r2, r1
 80084fc:	ea43 0102 	orr.w	r1, r3, r2
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008508:	e005      	b.n	8008516 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	cff00000 	.word	0xcff00000

08008528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008528:	b084      	sub	sp, #16
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	f107 001c 	add.w	r0, r7, #28
 8008536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2b01      	cmp	r3, #1
 800853e:	d120      	bne.n	8008582 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <USB_CoreInit+0xac>)
 8008552:	4013      	ands	r3, r2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008566:	2b01      	cmp	r3, #1
 8008568:	d105      	bne.n	8008576 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa96 	bl	8008aa8 <USB_CoreReset>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
 8008580:	e010      	b.n	80085a4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa8a 	bl	8008aa8 <USB_CoreReset>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d10b      	bne.n	80085c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f043 0206 	orr.w	r2, r3, #6
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f043 0220 	orr.w	r2, r3, #32
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085ce:	b004      	add	sp, #16
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	ffbdffbf 	.word	0xffbdffbf

080085d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 0201 	bic.w	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d115      	bne.n	8008648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008628:	2001      	movs	r0, #1
 800862a:	f7fa fd03 	bl	8003034 <HAL_Delay>
      ms++;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fa29 	bl	8008a8c <USB_GetMode>
 800863a:	4603      	mov	r3, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d01e      	beq.n	800867e <USB_SetCurrentMode+0x84>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b31      	cmp	r3, #49	; 0x31
 8008644:	d9f0      	bls.n	8008628 <USB_SetCurrentMode+0x2e>
 8008646:	e01a      	b.n	800867e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d115      	bne.n	800867a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800865a:	2001      	movs	r0, #1
 800865c:	f7fa fcea 	bl	8003034 <HAL_Delay>
      ms++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa10 	bl	8008a8c <USB_GetMode>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <USB_SetCurrentMode+0x84>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b31      	cmp	r3, #49	; 0x31
 8008676:	d9f0      	bls.n	800865a <USB_SetCurrentMode+0x60>
 8008678:	e001      	b.n	800867e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e005      	b.n	800868a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b32      	cmp	r3, #50	; 0x32
 8008682:	d101      	bne.n	8008688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008694:	b084      	sub	sp, #16
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e009      	b.n	80086c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3340      	adds	r3, #64	; 0x40
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3301      	adds	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b0e      	cmp	r3, #14
 80086cc:	d9f2      	bls.n	80086b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11c      	bne.n	800870e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	e005      	b.n	800871a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008720:	461a      	mov	r2, r3
 8008722:	2300      	movs	r3, #0
 8008724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872c:	4619      	mov	r1, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008734:	461a      	mov	r2, r3
 8008736:	680b      	ldr	r3, [r1, #0]
 8008738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10c      	bne.n	800875a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d104      	bne.n	8008750 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008746:	2100      	movs	r1, #0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f965 	bl	8008a18 <USB_SetDevSpeed>
 800874e:	e008      	b.n	8008762 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008750:	2101      	movs	r1, #1
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f960 	bl	8008a18 <USB_SetDevSpeed>
 8008758:	e003      	b.n	8008762 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800875a:	2103      	movs	r1, #3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f95b 	bl	8008a18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008762:	2110      	movs	r1, #16
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f8f3 	bl	8008950 <USB_FlushTxFifo>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f91f 	bl	80089b8 <USB_FlushRxFifo>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878a:	461a      	mov	r2, r3
 800878c:	2300      	movs	r3, #0
 800878e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008796:	461a      	mov	r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	461a      	mov	r2, r3
 80087a4:	2300      	movs	r3, #0
 80087a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087a8:	2300      	movs	r3, #0
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	e043      	b.n	8008836 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c4:	d118      	bne.n	80087f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	461a      	mov	r2, r3
 80087da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	e013      	b.n	800880a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ee:	461a      	mov	r2, r3
 80087f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	e008      	b.n	800880a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	461a      	mov	r2, r3
 8008806:	2300      	movs	r3, #0
 8008808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008816:	461a      	mov	r2, r3
 8008818:	2300      	movs	r3, #0
 800881a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	461a      	mov	r2, r3
 800882a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800882e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3301      	adds	r3, #1
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	d3b7      	bcc.n	80087ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800883e:	2300      	movs	r3, #0
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	e043      	b.n	80088cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800885a:	d118      	bne.n	800888e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886e:	461a      	mov	r2, r3
 8008870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e013      	b.n	80088a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	461a      	mov	r2, r3
 8008886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	e008      	b.n	80088a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889a:	461a      	mov	r2, r3
 800889c:	2300      	movs	r3, #0
 800889e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	461a      	mov	r2, r3
 80088ae:	2300      	movs	r3, #0
 80088b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	461a      	mov	r2, r3
 80088c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d3b7      	bcc.n	8008844 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80088f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f043 0210 	orr.w	r2, r3, #16
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699a      	ldr	r2, [r3, #24]
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <USB_DevInit+0x2b4>)
 800890e:	4313      	orrs	r3, r2
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f043 0208 	orr.w	r2, r3, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d105      	bne.n	8008938 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	4b06      	ldr	r3, [pc, #24]	; (800894c <USB_DevInit+0x2b8>)
 8008932:	4313      	orrs	r3, r2
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008944:	b004      	add	sp, #16
 8008946:	4770      	bx	lr
 8008948:	803c3800 	.word	0x803c3800
 800894c:	40000004 	.word	0x40000004

08008950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a13      	ldr	r2, [pc, #76]	; (80089b4 <USB_FlushTxFifo+0x64>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d901      	bls.n	8008970 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e01b      	b.n	80089a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	daf2      	bge.n	800895e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	019b      	lsls	r3, r3, #6
 8008980:	f043 0220 	orr.w	r2, r3, #32
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <USB_FlushTxFifo+0x64>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e006      	b.n	80089a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d0f0      	beq.n	8008988 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	00030d40 	.word	0x00030d40

080089b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a11      	ldr	r2, [pc, #68]	; (8008a14 <USB_FlushRxFifo+0x5c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e018      	b.n	8008a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	daf2      	bge.n	80089c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2210      	movs	r2, #16
 80089e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <USB_FlushRxFifo+0x5c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e006      	b.n	8008a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d0f0      	beq.n	80089e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	00030d40 	.word	0x00030d40

08008a18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a64:	f023 0303 	bic.w	r3, r3, #3
 8008a68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	f003 0301 	and.w	r3, r3, #1
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <USB_CoreReset+0x64>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e01b      	b.n	8008afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	daf2      	bge.n	8008ab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a09      	ldr	r2, [pc, #36]	; (8008b0c <USB_CoreReset+0x64>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d901      	bls.n	8008af0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e006      	b.n	8008afe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d0f0      	beq.n	8008ade <USB_CoreReset+0x36>

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	00030d40 	.word	0x00030d40

08008b10 <memset>:
 8008b10:	4402      	add	r2, r0
 8008b12:	4603      	mov	r3, r0
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d100      	bne.n	8008b1a <memset+0xa>
 8008b18:	4770      	bx	lr
 8008b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b1e:	e7f9      	b.n	8008b14 <memset+0x4>

08008b20 <__libc_init_array>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	4d0d      	ldr	r5, [pc, #52]	; (8008b58 <__libc_init_array+0x38>)
 8008b24:	4c0d      	ldr	r4, [pc, #52]	; (8008b5c <__libc_init_array+0x3c>)
 8008b26:	1b64      	subs	r4, r4, r5
 8008b28:	10a4      	asrs	r4, r4, #2
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	42a6      	cmp	r6, r4
 8008b2e:	d109      	bne.n	8008b44 <__libc_init_array+0x24>
 8008b30:	4d0b      	ldr	r5, [pc, #44]	; (8008b60 <__libc_init_array+0x40>)
 8008b32:	4c0c      	ldr	r4, [pc, #48]	; (8008b64 <__libc_init_array+0x44>)
 8008b34:	f000 f818 	bl	8008b68 <_init>
 8008b38:	1b64      	subs	r4, r4, r5
 8008b3a:	10a4      	asrs	r4, r4, #2
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	42a6      	cmp	r6, r4
 8008b40:	d105      	bne.n	8008b4e <__libc_init_array+0x2e>
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b48:	4798      	blx	r3
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	e7ee      	b.n	8008b2c <__libc_init_array+0xc>
 8008b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b52:	4798      	blx	r3
 8008b54:	3601      	adds	r6, #1
 8008b56:	e7f2      	b.n	8008b3e <__libc_init_array+0x1e>
 8008b58:	08009108 	.word	0x08009108
 8008b5c:	08009108 	.word	0x08009108
 8008b60:	08009108 	.word	0x08009108
 8008b64:	0800910c 	.word	0x0800910c

08008b68 <_init>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr

08008b74 <_fini>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr
